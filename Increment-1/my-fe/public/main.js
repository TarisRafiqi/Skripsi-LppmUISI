(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // <define:process>
  var define_process_default;
  var init_define_process = __esm({
    "<define:process>"() {
      define_process_default = { ENV: { production: false, sw: false } };
    }
  });

  // src/pages/auth/index.js
  var require_auth = __commonJS({
    "src/pages/auth/index.js"() {
      init_define_process();
    }
  });

  // src/main.js
  init_define_process();

  // src/App.svelte
  init_define_process();

  // node_modules/svelte/src/runtime/internal/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/animations.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/utils.js
  init_define_process();
  function noop() {
  }
  var identity = (x) => x;
  function assign(tar, src) {
    for (const k in src)
      tar[k] = src[k];
    return (
      /** @type {T & S} */
      tar
    );
  }
  function run(fn) {
    return fn();
  }
  function blank_object() {
    return /* @__PURE__ */ Object.create(null);
  }
  function run_all(fns) {
    fns.forEach(run);
  }
  function is_function(thing) {
    return typeof thing === "function";
  }
  function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
  }
  var src_url_equal_anchor;
  function src_url_equal(element_src, url) {
    if (element_src === url)
      return true;
    if (!src_url_equal_anchor) {
      src_url_equal_anchor = document.createElement("a");
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
  }
  function is_empty(obj) {
    return Object.keys(obj).length === 0;
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      for (const callback of callbacks) {
        callback(void 0);
      }
      return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
  }
  function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
  }
  function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
      const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
      return definition[0](slot_ctx);
    }
  }
  function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
  }
  function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
      const lets = definition[2](fn(dirty));
      if ($$scope.dirty === void 0) {
        return lets;
      }
      if (typeof lets === "object") {
        const merged = [];
        const len = Math.max($$scope.dirty.length, lets.length);
        for (let i = 0; i < len; i += 1) {
          merged[i] = $$scope.dirty[i] | lets[i];
        }
        return merged;
      }
      return $$scope.dirty | lets;
    }
    return $$scope.dirty;
  }
  function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
      const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
      slot.p(slot_context, slot_changes);
    }
  }
  function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
      const dirty = [];
      const length = $$scope.ctx.length / 32;
      for (let i = 0; i < length; i++) {
        dirty[i] = -1;
      }
      return dirty;
    }
    return -1;
  }
  function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
      if (k[0] !== "$")
        result[k] = props[k];
    return result;
  }
  function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
  }
  function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
  }

  // node_modules/svelte/src/runtime/internal/environment.js
  init_define_process();
  var is_client = typeof window !== "undefined";
  var now = is_client ? () => window.performance.now() : () => Date.now();
  var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;

  // node_modules/svelte/src/runtime/internal/loop.js
  init_define_process();
  var tasks = /* @__PURE__ */ new Set();
  function run_tasks(now2) {
    tasks.forEach((task) => {
      if (!task.c(now2)) {
        tasks.delete(task);
        task.f();
      }
    });
    if (tasks.size !== 0)
      raf(run_tasks);
  }
  function loop(callback) {
    let task;
    if (tasks.size === 0)
      raf(run_tasks);
    return {
      promise: new Promise((fulfill) => {
        tasks.add(task = { c: callback, f: fulfill });
      }),
      abort() {
        tasks.delete(task);
      }
    };
  }

  // node_modules/svelte/src/runtime/internal/style_manager.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/dom.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/globals.js
  init_define_process();
  var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
    // @ts-ignore Node typings have this
    global
  );

  // node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
  var ResizeObserverSingleton = class _ResizeObserverSingleton {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    _listeners = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;
    /**
     * @private
     * @type {ResizeObserver}
     */
    _observer = void 0;
    /** @type {ResizeObserverOptions} */
    options;
    /** @param {ResizeObserverOptions} options */
    constructor(options) {
      this.options = options;
    }
    /**
     * @param {Element} element
     * @param {import('./private.js').Listener} listener
     * @returns {() => void}
     */
    observe(element2, listener) {
      this._listeners.set(element2, listener);
      this._getObserver().observe(element2, this.options);
      return () => {
        this._listeners.delete(element2);
        this._observer.unobserve(element2);
      };
    }
    /**
     * @private
     */
    _getObserver() {
      return this._observer ?? (this._observer = new ResizeObserver((entries) => {
        for (const entry of entries) {
          _ResizeObserverSingleton.entries.set(entry.target, entry);
          this._listeners.get(entry.target)?.(entry);
        }
      }));
    }
  };
  ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

  // node_modules/svelte/src/runtime/internal/dom.js
  var is_hydrating = false;
  function start_hydrating() {
    is_hydrating = true;
  }
  function end_hydrating() {
    is_hydrating = false;
  }
  function append(target, node) {
    target.appendChild(node);
  }
  function get_root_for_style(node) {
    if (!node)
      return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && /** @type {ShadowRoot} */
    root.host) {
      return (
        /** @type {ShadowRoot} */
        root
      );
    }
    return node.ownerDocument;
  }
  function append_empty_stylesheet(node) {
    const style_element = element("style");
    style_element.textContent = "/* empty */";
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
  }
  function append_stylesheet(node, style) {
    append(
      /** @type {Document} */
      node.head || node,
      style
    );
    return style.sheet;
  }
  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }
  function detach(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    }
  }
  function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
      if (iterations[i])
        iterations[i].d(detaching);
    }
  }
  function element(name) {
    return document.createElement(name);
  }
  function svg_element(name) {
    return document.createElementNS("http://www.w3.org/2000/svg", name);
  }
  function text(data2) {
    return document.createTextNode(data2);
  }
  function space() {
    return text(" ");
  }
  function empty() {
    return text("");
  }
  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
  }
  function attr(node, attribute, value) {
    if (value == null)
      node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
      node.setAttribute(attribute, value);
  }
  function init_binding_group(group) {
    let _inputs;
    return {
      /* push */
      p(...inputs) {
        _inputs = inputs;
        _inputs.forEach((input) => group.push(input));
      },
      /* remove */
      r() {
        _inputs.forEach((input) => group.splice(group.indexOf(input), 1));
      }
    };
  }
  function to_number(value) {
    return value === "" ? null : +value;
  }
  function children(element2) {
    return Array.from(element2.childNodes);
  }
  function set_data(text2, data2) {
    data2 = "" + data2;
    if (text2.data === data2)
      return;
    text2.data = /** @type {string} */
    data2;
  }
  function set_input_value(input, value) {
    input.value = value == null ? "" : value;
  }
  function set_style(node, key, value, important) {
    if (value == null) {
      node.style.removeProperty(key);
    } else {
      node.style.setProperty(key, value, important ? "important" : "");
    }
  }
  function select_option(select, value, mounting) {
    for (let i = 0; i < select.options.length; i += 1) {
      const option = select.options[i];
      if (option.__value === value) {
        option.selected = true;
        return;
      }
    }
    if (!mounting || value !== void 0) {
      select.selectedIndex = -1;
    }
  }
  function select_value(select) {
    const selected_option = select.querySelector(":checked");
    return selected_option && selected_option.__value;
  }
  function toggle_class(element2, name, toggle) {
    element2.classList.toggle(name, !!toggle);
  }
  function custom_event(type, detail2, { bubbles = false, cancelable = false } = {}) {
    return new CustomEvent(type, { detail: detail2, bubbles, cancelable });
  }
  var HtmlTag = class {
    /**
     * @private
     * @default false
     */
    is_svg = false;
    /** parent for creating node */
    e = void 0;
    /** html tag nodes */
    n = void 0;
    /** target */
    t = void 0;
    /** anchor */
    a = void 0;
    constructor(is_svg = false) {
      this.is_svg = is_svg;
      this.e = this.n = null;
    }
    /**
     * @param {string} html
     * @returns {void}
     */
    c(html) {
      this.h(html);
    }
    /**
     * @param {string} html
     * @param {HTMLElement | SVGElement} target
     * @param {HTMLElement | SVGElement} anchor
     * @returns {void}
     */
    m(html, target, anchor = null) {
      if (!this.e) {
        if (this.is_svg)
          this.e = svg_element(
            /** @type {keyof SVGElementTagNameMap} */
            target.nodeName
          );
        else
          this.e = element(
            /** @type {keyof HTMLElementTagNameMap} */
            target.nodeType === 11 ? "TEMPLATE" : target.nodeName
          );
        this.t = target.tagName !== "TEMPLATE" ? target : (
          /** @type {HTMLTemplateElement} */
          target.content
        );
        this.c(html);
      }
      this.i(anchor);
    }
    /**
     * @param {string} html
     * @returns {void}
     */
    h(html) {
      this.e.innerHTML = html;
      this.n = Array.from(
        this.e.nodeName === "TEMPLATE" ? this.e.content.childNodes : this.e.childNodes
      );
    }
    /**
     * @returns {void} */
    i(anchor) {
      for (let i = 0; i < this.n.length; i += 1) {
        insert(this.t, this.n[i], anchor);
      }
    }
    /**
     * @param {string} html
     * @returns {void}
     */
    p(html) {
      this.d();
      this.h(html);
      this.i(this.a);
    }
    /**
     * @returns {void} */
    d() {
      this.n.forEach(detach);
    }
  };
  function get_custom_elements_slots(element2) {
    const result = {};
    element2.childNodes.forEach(
      /** @param {Element} node */
      (node) => {
        result[node.slot || "default"] = true;
      }
    );
    return result;
  }
  function construct_svelte_component(component, props) {
    return new component(props);
  }

  // node_modules/svelte/src/runtime/internal/style_manager.js
  var managed_styles = /* @__PURE__ */ new Map();
  var active = 0;
  function hash(str) {
    let hash2 = 5381;
    let i = str.length;
    while (i--)
      hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
    return hash2 >>> 0;
  }
  function create_style_information(doc, node) {
    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
    managed_styles.set(doc, info);
    return info;
  }
  function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = "{\n";
    for (let p = 0; p <= 1; p += step) {
      const t = a + (b - a) * ease(p);
      keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
    if (!rules[name]) {
      rules[name] = true;
      stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || "";
    node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
  }
  function delete_rule(node, name) {
    const previous = (node.style.animation || "").split(", ");
    const next = previous.filter(
      name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
      // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
      node.style.animation = next.join(", ");
      active -= deleted;
      if (!active)
        clear_rules();
    }
  }
  function clear_rules() {
    raf(() => {
      if (active)
        return;
      managed_styles.forEach((info) => {
        const { ownerNode } = info.stylesheet;
        if (ownerNode)
          detach(ownerNode);
      });
      managed_styles.clear();
    });
  }

  // node_modules/svelte/src/runtime/internal/await_block.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/transitions.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/scheduler.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/lifecycle.js
  init_define_process();
  var current_component;
  function set_current_component(component) {
    current_component = component;
  }
  function get_current_component() {
    if (!current_component)
      throw new Error("Function called outside component initialization");
    return current_component;
  }
  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
  }
  function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
  }

  // node_modules/svelte/src/runtime/internal/scheduler.js
  var dirty_components = [];
  var binding_callbacks = [];
  var render_callbacks = [];
  var flush_callbacks = [];
  var resolved_promise = /* @__PURE__ */ Promise.resolve();
  var update_scheduled = false;
  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush);
    }
  }
  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }
  function add_flush_callback(fn) {
    flush_callbacks.push(fn);
  }
  var seen_callbacks = /* @__PURE__ */ new Set();
  var flushidx = 0;
  function flush() {
    if (flushidx !== 0) {
      return;
    }
    const saved_component = current_component;
    do {
      try {
        while (flushidx < dirty_components.length) {
          const component = dirty_components[flushidx];
          flushidx++;
          set_current_component(component);
          update(component.$$);
        }
      } catch (e) {
        dirty_components.length = 0;
        flushidx = 0;
        throw e;
      }
      set_current_component(null);
      dirty_components.length = 0;
      flushidx = 0;
      while (binding_callbacks.length)
        binding_callbacks.pop()();
      for (let i = 0; i < render_callbacks.length; i += 1) {
        const callback = render_callbacks[i];
        if (!seen_callbacks.has(callback)) {
          seen_callbacks.add(callback);
          callback();
        }
      }
      render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
  }
  function update($$) {
    if ($$.fragment !== null) {
      $$.update();
      run_all($$.before_update);
      const dirty = $$.dirty;
      $$.dirty = [-1];
      $$.fragment && $$.fragment.p($$.ctx, dirty);
      $$.after_update.forEach(add_render_callback);
    }
  }
  function flush_render_callbacks(fns) {
    const filtered = [];
    const targets = [];
    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
    targets.forEach((c) => c());
    render_callbacks = filtered;
  }

  // node_modules/svelte/src/runtime/internal/transitions.js
  var promise;
  function wait() {
    if (!promise) {
      promise = Promise.resolve();
      promise.then(() => {
        promise = null;
      });
    }
    return promise;
  }
  function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
  }
  var outroing = /* @__PURE__ */ new Set();
  var outros;
  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros
      // parent group
    };
  }
  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }
    outros = outros.p;
  }
  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block);
      block.i(local);
    }
  }
  function transition_out(block, local, detach2, callback) {
    if (block && block.o) {
      if (outroing.has(block))
        return;
      outroing.add(block);
      outros.c.push(() => {
        outroing.delete(block);
        if (callback) {
          if (detach2)
            block.d(1);
          callback();
        }
      });
      block.o(local);
    } else if (callback) {
      callback();
    }
  }
  var null_transition = { duration: 0 };
  function create_in_transition(node, fn, params) {
    const options = { direction: "in" };
    let config = fn(node, params, options);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
      if (animation_name)
        delete_rule(node, animation_name);
    }
    function go() {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick: tick2 = noop,
        css
      } = config || null_transition;
      if (css)
        animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
      tick2(0, 1);
      const start_time = now() + delay;
      const end_time = start_time + duration;
      if (task)
        task.abort();
      running = true;
      add_render_callback(() => dispatch(node, true, "start"));
      task = loop((now2) => {
        if (running) {
          if (now2 >= end_time) {
            tick2(1, 0);
            dispatch(node, true, "end");
            cleanup();
            return running = false;
          }
          if (now2 >= start_time) {
            const t = easing((now2 - start_time) / duration);
            tick2(t, 1 - t);
          }
        }
        return running;
      });
    }
    let started = false;
    return {
      start() {
        if (started)
          return;
        started = true;
        delete_rule(node);
        if (is_function(config)) {
          config = config(options);
          wait().then(go);
        } else {
          go();
        }
      },
      invalidate() {
        started = false;
      },
      end() {
        if (running) {
          cleanup();
          running = false;
        }
      }
    };
  }

  // node_modules/svelte/src/runtime/internal/each.js
  init_define_process();
  function ensure_array_like(array_like_or_iterator) {
    return array_like_or_iterator?.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
  }

  // node_modules/svelte/src/runtime/internal/spread.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/ssr.js
  init_define_process();

  // node_modules/svelte/src/shared/boolean_attributes.js
  init_define_process();
  var _boolean_attributes = (
    /** @type {const} */
    [
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ]
  );
  var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

  // node_modules/svelte/src/shared/utils/names.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/Component.js
  init_define_process();
  function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== void 0) {
      component.$$.bound[index] = callback;
      callback(component.$$.ctx[index]);
    }
  }
  function create_component(block) {
    block && block.c();
  }
  function mount_component(component, target, anchor) {
    const { fragment, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
      flush_render_callbacks($$.after_update);
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching);
      $$.on_destroy = $$.fragment = null;
      $$.ctx = [];
    }
  }
  function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty.fill(0);
    }
    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
  }
  function init(component, options, instance44, create_fragment53, not_equal, props, append_styles = null, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
      fragment: null,
      ctx: [],
      // state
      props,
      update: noop,
      not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
      // everything else
      callbacks: blank_object(),
      dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance44 ? instance44(component, options.props || {}, (i, ret, ...rest) => {
      const value = rest.length ? rest[0] : ret;
      if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
        if (!$$.skip_bound && $$.bound[i])
          $$.bound[i](value);
        if (ready)
          make_dirty(component, i);
      }
      return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment53 ? create_fragment53($$.ctx) : false;
    if (options.target) {
      if (options.hydrate) {
        start_hydrating();
        const nodes = children(options.target);
        $$.fragment && $$.fragment.l(nodes);
        nodes.forEach(detach);
      } else {
        $$.fragment && $$.fragment.c();
      }
      if (options.intro)
        transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor);
      end_hydrating();
      flush();
    }
    set_current_component(parent_component);
  }
  var SvelteElement;
  if (typeof HTMLElement === "function") {
    SvelteElement = class extends HTMLElement {
      /** The Svelte component constructor */
      $$ctor;
      /** Slots */
      $$s;
      /** The Svelte component instance */
      $$c;
      /** Whether or not the custom element is connected */
      $$cn = false;
      /** Component props data */
      $$d = {};
      /** `true` if currently in the process of reflecting component props back to attributes */
      $$r = false;
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      $$p_d = {};
      /** @type {Record<string, Function[]>} Event listeners */
      $$l = {};
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      $$l_u = /* @__PURE__ */ new Map();
      constructor($$componentCtor, $$slots, use_shadow_dom) {
        super();
        this.$$ctor = $$componentCtor;
        this.$$s = $$slots;
        if (use_shadow_dom) {
          this.attachShadow({ mode: "open" });
        }
      }
      addEventListener(type, listener, options) {
        this.$$l[type] = this.$$l[type] || [];
        this.$$l[type].push(listener);
        if (this.$$c) {
          const unsub = this.$$c.$on(type, listener);
          this.$$l_u.set(listener, unsub);
        }
        super.addEventListener(type, listener, options);
      }
      removeEventListener(type, listener, options) {
        super.removeEventListener(type, listener, options);
        if (this.$$c) {
          const unsub = this.$$l_u.get(listener);
          if (unsub) {
            unsub();
            this.$$l_u.delete(listener);
          }
        }
      }
      async connectedCallback() {
        this.$$cn = true;
        if (!this.$$c) {
          let create_slot2 = function(name) {
            return () => {
              let node;
              const obj = {
                c: function create() {
                  node = element("slot");
                  if (name !== "default") {
                    attr(node, "name", name);
                  }
                },
                /**
                 * @param {HTMLElement} target
                 * @param {HTMLElement} [anchor]
                 */
                m: function mount(target, anchor) {
                  insert(target, node, anchor);
                },
                d: function destroy(detaching) {
                  if (detaching) {
                    detach(node);
                  }
                }
              };
              return obj;
            };
          };
          await Promise.resolve();
          if (!this.$$cn) {
            return;
          }
          const $$slots = {};
          const existing_slots = get_custom_elements_slots(this);
          for (const name of this.$$s) {
            if (name in existing_slots) {
              $$slots[name] = [create_slot2(name)];
            }
          }
          for (const attribute of this.attributes) {
            const name = this.$$g_p(attribute.name);
            if (!(name in this.$$d)) {
              this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
            }
          }
          for (const key in this.$$p_d) {
            if (!(key in this.$$d) && this[key] !== void 0) {
              this.$$d[key] = this[key];
              delete this[key];
            }
          }
          this.$$c = new this.$$ctor({
            target: this.shadowRoot || this,
            props: {
              ...this.$$d,
              $$slots,
              $$scope: {
                ctx: []
              }
            }
          });
          const reflect_attributes = () => {
            this.$$r = true;
            for (const key in this.$$p_d) {
              this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
              if (this.$$p_d[key].reflect) {
                const attribute_value = get_custom_element_value(
                  key,
                  this.$$d[key],
                  this.$$p_d,
                  "toAttribute"
                );
                if (attribute_value == null) {
                  this.removeAttribute(this.$$p_d[key].attribute || key);
                } else {
                  this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
                }
              }
            }
            this.$$r = false;
          };
          this.$$c.$$.after_update.push(reflect_attributes);
          reflect_attributes();
          for (const type in this.$$l) {
            for (const listener of this.$$l[type]) {
              const unsub = this.$$c.$on(type, listener);
              this.$$l_u.set(listener, unsub);
            }
          }
          this.$$l = {};
        }
      }
      // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
      // and setting attributes through setAttribute etc, this is helpful
      attributeChangedCallback(attr2, _oldValue, newValue) {
        if (this.$$r)
          return;
        attr2 = this.$$g_p(attr2);
        this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
        this.$$c?.$set({ [attr2]: this.$$d[attr2] });
      }
      disconnectedCallback() {
        this.$$cn = false;
        Promise.resolve().then(() => {
          if (!this.$$cn) {
            this.$$c.$destroy();
            this.$$c = void 0;
          }
        });
      }
      $$g_p(attribute_name) {
        return Object.keys(this.$$p_d).find(
          (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
        ) || attribute_name;
      }
    };
  }
  function get_custom_element_value(prop, value, props_definition, transform) {
    const type = props_definition[prop]?.type;
    value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
    if (!transform || !props_definition[prop]) {
      return value;
    } else if (transform === "toAttribute") {
      switch (type) {
        case "Object":
        case "Array":
          return value == null ? null : JSON.stringify(value);
        case "Boolean":
          return value ? "" : null;
        case "Number":
          return value == null ? null : value;
        default:
          return value;
      }
    } else {
      switch (type) {
        case "Object":
        case "Array":
          return value && JSON.parse(value);
        case "Boolean":
          return value;
        case "Number":
          return value != null ? +value : value;
        default:
          return value;
      }
    }
  }
  var SvelteComponent = class {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    $$ = void 0;
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    $$set = void 0;
    /** @returns {void} */
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    /**
     * @template {Extract<keyof Events, string>} K
     * @param {K} type
     * @param {((e: Events[K]) => void) | null | undefined} callback
     * @returns {() => void}
     */
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop;
      }
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    /**
     * @param {Partial<Props>} props
     * @returns {void}
     */
    $set(props) {
      if (this.$$set && !is_empty(props)) {
        this.$$.skip_bound = true;
        this.$$set(props);
        this.$$.skip_bound = false;
      }
    }
  };

  // node_modules/svelte/src/runtime/internal/dev.js
  init_define_process();

  // node_modules/svelte/src/shared/version.js
  init_define_process();
  var PUBLIC_VERSION = "4";

  // node_modules/svelte/src/runtime/internal/disclose-version/index.js
  init_define_process();
  if (typeof window !== "undefined")
    (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

  // node_modules/svelte/src/runtime/index.js
  init_define_process();

  // router.js
  init_define_process();
  function router() {
    let len = arguments.length - 1;
    let callback = arguments[len];
    let routes = arguments[0];
    let e404 = `404 - PAGE NOT FOUND`;
    if (len === 2)
      e404 = arguments[1];
    let curr;
    addEventListener("popstate", route2);
    addEventListener("pushstate", route2);
    document.body.addEventListener("click", (ev) => {
      let href = ev.target.getAttribute("href");
      if (!href)
        return;
      ev.preventDefault();
      route2(href);
    });
    route2();
    function route2(x, replace) {
      if (curr === x)
        return;
      if (typeof x !== "string")
        x = location.pathname;
      history.pushState(x, null, x);
      let params = {};
      let query = x.includes("?");
      if (query) {
        query = x.replace(/.*\?/, "").replace(/\=\=/g, "=").replace(/\&\&/g, "&").split("&");
        query.map((q) => {
          params[q.split("=")[0]] = q.split("=")[1];
        });
      }
      let match = routes.filter((route3) => {
        let path = route3.path;
        let keys = path.match(/\/:\w+/g);
        let re = new RegExp(path.replace(keys?.join(""), "(.*)"));
        let matched = location.pathname.match(re);
        let isMatch = matched && matched[0] === matched.input;
        if (isMatch) {
          let values = matched[1]?.split("/").slice(1);
          if (values && keys) {
            keys = keys?.join("").split("/:").slice(1);
            for (let i = 0; i < values.length; i++) {
              if (i < keys.length)
                params[keys[i]] = values[i];
              else
                params[i] = values[i];
            }
          }
        }
        return isMatch;
      });
      match = match[match.length - 1];
      if (match) {
        callback({ page: match.page, params });
      } else {
        if (typeof e404 === "string")
          console.log(e404);
        else
          callback({ page: e404, params });
      }
      window.scrollTo(0, 0);
      curr = location.pathname;
    }
    return {
      route: route2,
      listen() {
        route2(location.pathname + location.search);
      },
      unlisten() {
        removeEventListener("popstate", route2);
        removeEventListener("pushstate", route2);
        routes = [];
      }
    };
  }
  var router_default = router;

  // src/routes.js
  init_define_process();

  // src/pages/Abdimas.svelte
  init_define_process();
  function create_fragment(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<h1>Pengabdian Masyarakat</h1> <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quos repellendus
      nulla soluta odio. Dolor sed viverra ipsum nunc aliquet bibendum. Suscipit
      adipiscing bibendum est ultricies integer. In mollis nunc sed id.
      Suspendisse faucibus interdum posuere lorem ipsum dolor sit amet
      consectetur.</p>`;
        attr(article, "class", "container svelte-1hdo9mq");
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  var Abdimas = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment, safe_not_equal, {});
    }
  };
  var Abdimas_default = Abdimas;

  // src/pages/About.svelte
  init_define_process();
  function create_fragment2(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<h1>Profil</h1> <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quos repellendus
      nulla soluta odio. Vitae elementum curabitur vitae nunc. Sem nulla
      pharetra diam sit amet nisl suscipit. Odio ut enim blandit volutpat
      maecenas volutpat. Nec ultrices dui sapien eget mi proin sed libero enim.
      Ultrices gravida dictum fusce ut placerat orci nulla. Eget duis at tellus
      at urna. Est velit egestas dui id ornare arcu. Suscipit adipiscing
      bibendum est ultricies.</p>`;
        attr(article, "class", "container svelte-9f6d4p");
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  var About = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment2, safe_not_equal, {});
    }
  };
  var About_default = About;

  // src/pages/AuthGoogle.svelte
  init_define_process();
  function create_fragment3(ctx) {
    let h2;
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Login With Google";
      },
      m(target, anchor) {
        insert(target, h2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(h2);
        }
      }
    };
  }
  function instance($$self, $$props, $$invalidate) {
    let { params = {} } = $$props;
    console.log(params);
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    return [params];
  }
  var AuthGoogle = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance, create_fragment3, safe_not_equal, { params: 0 });
    }
  };
  var AuthGoogle_default = AuthGoogle;

  // src/pages/Index.svelte
  init_define_process();

  // src/libs/Hero.svelte
  init_define_process();
  function create_fragment4(ctx) {
    let section;
    let div;
    return {
      c() {
        section = element("section");
        div = element("div");
        div.innerHTML = `<p class="title svelte-ifdiuw">LPPM Universitas Internasional Semen Indonesia</p> <p class="subtitle svelte-ifdiuw">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
         tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
         veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
         commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
         velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
         occaecat cupidatat non proident, sunt in culpa qui officia deserunt
         mollit anim id est laborum.</p>`;
        attr(div, "class", "hero-body svelte-ifdiuw");
        set_style(
          div,
          "--url",
          /*urlImage*/
          ctx[0]
        );
        attr(section, "class", "hero is-medium");
      },
      m(target, anchor) {
        insert(target, section, anchor);
        append(section, div);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(section);
        }
      }
    };
  }
  function instance2($$self) {
    let dev = !define_process_default.ENV.production;
    let urlImage = dev ? "url(http://localhost:3000/img/vector-gradient.jpg" : "url(https://lppmuisi.dififa.com/img/vector-gradient.jpg";
    return [urlImage];
  }
  var Hero = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance2, create_fragment4, safe_not_equal, {});
    }
  };
  var Hero_default = Hero;

  // src/modules/Pengumuman.svelte
  init_define_process();
  function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i];
    return child_ctx;
  }
  function create_each_block(ctx) {
    let li;
    let label;
    let t0_value = (
      /*p*/
      ctx[2].title + ""
    );
    let t0;
    let label_for_value;
    let t1;
    let input;
    let input_id_value;
    let t2;
    let div;
    let p_1;
    let t4;
    return {
      c() {
        li = element("li");
        label = element("label");
        t0 = text(t0_value);
        t1 = space();
        input = element("input");
        t2 = space();
        div = element("div");
        p_1 = element("p");
        p_1.textContent = `${/*p*/
        ctx[2].content}`;
        t4 = space();
        attr(label, "for", label_for_value = /*p*/
        ctx[2].label);
        attr(label, "class", "svelte-1k7wu1i");
        input.hidden = true;
        attr(input, "type", "checkbox");
        attr(
          input,
          "name",
          /*accordionName*/
          ctx[0]
        );
        attr(input, "id", input_id_value = /*p*/
        ctx[2].idPengumuman);
        attr(input, "class", "svelte-1k7wu1i");
        attr(div, "class", "content svelte-1k7wu1i");
        attr(li, "class", "svelte-1k7wu1i");
      },
      m(target, anchor) {
        insert(target, li, anchor);
        append(li, label);
        append(label, t0);
        append(li, t1);
        append(li, input);
        append(li, t2);
        append(li, div);
        append(div, p_1);
        append(li, t4);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(li);
        }
      }
    };
  }
  function create_fragment5(ctx) {
    let section;
    let article;
    let div0;
    let t3;
    let br;
    let t4;
    let div1;
    let ul;
    let each_value = ensure_array_like(
      /*pengumuman*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    }
    return {
      c() {
        section = element("section");
        article = element("article");
        div0 = element("div");
        div0.innerHTML = `<h2>PENGUMUMAN</h2> <p>Daftar Pengumuman terkait kegiatan Penelitian &amp; Pengabdian
            Masyarakat LPPM UISI</p>`;
        t3 = space();
        br = element("br");
        t4 = space();
        div1 = element("div");
        ul = element("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(div0, "class", "content svelte-1k7wu1i");
        attr(ul, "id", "accordion");
        attr(ul, "class", "svelte-1k7wu1i");
        attr(div1, "class", "list pengumuman");
        attr(article, "class", "container");
        attr(section, "class", "svelte-1k7wu1i");
      },
      m(target, anchor) {
        insert(target, section, anchor);
        append(section, article);
        append(article, div0);
        append(article, t3);
        append(article, br);
        append(article, t4);
        append(article, div1);
        append(div1, ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*pengumuman, accordionName*/
        3) {
          each_value = ensure_array_like(
            /*pengumuman*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(ul, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(section);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function instance3($$self) {
    let accordionName;
    let pengumuman = [
      {
        label: "1",
        idPengumuman: "1",
        title: "Perpanjangan Batas Akhir Upload Proposal",
        content: " Pengumuman 1 : Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam delectus ex dolorem, consequatur tenetur at cupiditate ab corporis quos sed. Deserunt qui nostrum ullam praesentium sed unde placeat, dolorum aliquid? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore asperiores blanditiis repellendus velit id? Doloribus dolor neque aut expedita, nam nostrum."
      },
      {
        label: "2",
        idPengumuman: "2",
        title: "Daftar proposal lolos pendanaan",
        content: " Pengumuman 2 : Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam delectus ex dolorem, consequatur tenetur at cupiditate ab corporis quos sed. Deserunt qui nostrum ullam praesentium sed unde placeat, dolorum aliquid? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore asperiores blanditiis repellendus velit id? Doloribus dolor neque aut expedita, nam nostrum."
      },
      {
        label: "3",
        idPengumuman: "3",
        title: "Pembukaan Pendaftaran Proposal Penelitian & Pengabdian",
        content: " Pengumuman 3 : Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam delectus ex dolorem, consequatur tenetur at cupiditate ab corporis quos sed. Deserunt qui nostrum ullam praesentium sed unde placeat, dolorum aliquid? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore asperiores blanditiis repellendus velit id? Doloribus dolor neque aut expedita, nam nostrum."
      }
    ];
    return [accordionName, pengumuman];
  }
  var Pengumuman = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance3, create_fragment5, safe_not_equal, {});
    }
  };
  var Pengumuman_default = Pengumuman;

  // src/modules/Footer.svelte
  init_define_process();
  function create_fragment6(ctx) {
    let footer;
    return {
      c() {
        footer = element("footer");
        footer.innerHTML = `<div class="content has-text-centered"><p>Copyright \xA9 2023
         <strong class="svelte-1h60z37">LPPM UISI</strong>. All Rights Reserved</p></div>`;
        attr(footer, "class", "footer svelte-1h60z37");
      },
      m(target, anchor) {
        insert(target, footer, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(footer);
        }
      }
    };
  }
  var Footer = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment6, safe_not_equal, {});
    }
  };
  var Footer_default = Footer;

  // src/pages/Index.svelte
  function create_fragment7(ctx) {
    let hero;
    let t0;
    let pengumuman;
    let t1;
    let footer;
    let current;
    hero = new Hero_default({});
    pengumuman = new Pengumuman_default({});
    footer = new Footer_default({});
    return {
      c() {
        create_component(hero.$$.fragment);
        t0 = space();
        create_component(pengumuman.$$.fragment);
        t1 = space();
        create_component(footer.$$.fragment);
      },
      m(target, anchor) {
        mount_component(hero, target, anchor);
        insert(target, t0, anchor);
        mount_component(pengumuman, target, anchor);
        insert(target, t1, anchor);
        mount_component(footer, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(hero.$$.fragment, local);
        transition_in(pengumuman.$$.fragment, local);
        transition_in(footer.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(hero.$$.fragment, local);
        transition_out(pengumuman.$$.fragment, local);
        transition_out(footer.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        destroy_component(hero, detaching);
        destroy_component(pengumuman, detaching);
        destroy_component(footer, detaching);
      }
    };
  }
  var Index = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment7, safe_not_equal, {});
    }
  };
  var Index_default = Index;

  // src/pages/Login.svelte
  init_define_process();

  // src/store/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/store/index.js
  init_define_process();
  var subscriber_queue = [];
  function writable(value, start = noop) {
    let stop;
    const subscribers = /* @__PURE__ */ new Set();
    function set(new_value) {
      if (safe_not_equal(value, new_value)) {
        value = new_value;
        if (stop) {
          const run_queue = !subscriber_queue.length;
          for (const subscriber of subscribers) {
            subscriber[1]();
            subscriber_queue.push(subscriber, value);
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue.length; i += 2) {
              subscriber_queue[i][0](subscriber_queue[i + 1]);
            }
            subscriber_queue.length = 0;
          }
        }
      }
    }
    function update2(fn) {
      set(fn(value));
    }
    function subscribe2(run2, invalidate = noop) {
      const subscriber = [run2, invalidate];
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        stop = start(set, update2) || noop;
      }
      run2(value);
      return () => {
        subscribers.delete(subscriber);
        if (subscribers.size === 0 && stop) {
          stop();
          stop = null;
        }
      };
    }
    return { set, update: update2, subscribe: subscribe2 };
  }

  // src/store/index.js
  var route = writable(0);
  var isLogin = writable(false);
  var isUsername = writable(null);
  var ppmFile = writable({});
  var rabFile = writable({});
  var penilaianFile = writable({});
  var apiURL = writable(
    define_process_default.ENV.production ? "https://lppmuisiapi.dififa.com" : "http://localhost:10443"
  );

  // src/pages/Login.svelte
  function create_fragment8(ctx) {
    let article;
    let div6;
    let h3;
    let t1;
    let div1;
    let div0;
    let t3;
    let input0;
    let t4;
    let div3;
    let div2;
    let t6;
    let input1;
    let t7;
    let br;
    let t8;
    let div4;
    let button0;
    let t10;
    let div5;
    let button1;
    let t13;
    let p;
    let mounted;
    let dispose;
    return {
      c() {
        article = element("article");
        div6 = element("div");
        h3 = element("h3");
        h3.textContent = "Login";
        t1 = space();
        div1 = element("div");
        div0 = element("div");
        div0.textContent = "Username";
        t3 = space();
        input0 = element("input");
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        div2.textContent = "Password";
        t6 = space();
        input1 = element("input");
        t7 = space();
        br = element("br");
        t8 = space();
        div4 = element("div");
        button0 = element("button");
        button0.textContent = "Submit";
        t10 = space();
        div5 = element("div");
        button1 = element("button");
        button1.innerHTML = `<span class="icon"><span class="icon"><img src="/img/iconGoogle.svg" alt="" width="20"/></span></span> <span><h6 class="subtitle is-6">Sign in with Google</h6></span>`;
        t13 = space();
        p = element("p");
        p.textContent = "Maaf, username atau password anda salah. Silahkan cek kembali.";
        attr(h3, "class", "title is-3");
        attr(div0, "class", "svelte-62xoz");
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(div1, "class", "svelte-62xoz");
        attr(div2, "class", "svelte-62xoz");
        attr(input1, "class", "input");
        attr(input1, "type", "password");
        attr(div3, "class", "svelte-62xoz");
        attr(button0, "class", "button is-info svelte-62xoz");
        attr(div4, "class", "svelte-62xoz");
        attr(button1, "class", "button svelte-62xoz");
        attr(div5, "class", "svelte-62xoz");
        attr(p, "id", "errorLoginHandler");
        attr(p, "class", "has-text-danger svelte-62xoz");
        attr(div6, "class", "box svelte-62xoz");
        attr(article, "class", "container svelte-62xoz");
      },
      m(target, anchor) {
        insert(target, article, anchor);
        append(article, div6);
        append(div6, h3);
        append(div6, t1);
        append(div6, div1);
        append(div1, div0);
        append(div1, t3);
        append(div1, input0);
        set_input_value(
          input0,
          /*username*/
          ctx[0]
        );
        append(div6, t4);
        append(div6, div3);
        append(div3, div2);
        append(div3, t6);
        append(div3, input1);
        set_input_value(
          input1,
          /*password*/
          ctx[1]
        );
        append(div6, t7);
        append(div6, br);
        append(div6, t8);
        append(div6, div4);
        append(div4, button0);
        append(div6, t10);
        append(div6, div5);
        append(div5, button1);
        append(div6, t13);
        append(div6, p);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[4]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[5]
            ),
            listen(
              button0,
              "click",
              /*handleSubmit*/
              ctx[2]
            ),
            listen(
              button1,
              "click",
              /*signGoogle*/
              ctx[3]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*username*/
        1 && input0.value !== /*username*/
        ctx2[0]) {
          set_input_value(
            input0,
            /*username*/
            ctx2[0]
          );
        }
        if (dirty & /*password*/
        2 && input1.value !== /*password*/
        ctx2[1]) {
          set_input_value(
            input1,
            /*password*/
            ctx2[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance4($$self, $$props, $$invalidate) {
    let $apiURL;
    let $route;
    let $isUsername;
    let $isLogin;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(6, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(7, $route = $$value));
    component_subscribe($$self, isUsername, ($$value) => $$invalidate(8, $isUsername = $$value));
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(9, $isLogin = $$value));
    let username3 = "";
    let password = "";
    document.addEventListener("keydown", function(event) {
      if (event.key === "Enter") {
        handleSubmit();
      }
    });
    async function handleSubmit(ev) {
      const paragraph = document.getElementById("errorLoginHandler");
      const payload = {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username3, password })
      };
      const response = await fetch($apiURL + "/auth", payload);
      const result = await response.json();
      if (result.sukses) {
        set_store_value(isLogin, $isLogin = true, $isLogin);
        const { id, username: username4, role, token } = result;
        set_store_value(isUsername, $isUsername = username4, $isUsername);
        localStorage.setItem("id", id);
        localStorage.setItem("username", username4);
        localStorage.setItem("role", role);
        localStorage.setItem("token", token);
        if (role === "admin")
          $route("/admin");
        else
          $route("/dosen");
      } else {
        paragraph.style.display = "block";
      }
    }
    async function signGoogle() {
      window.open($apiURL + "/auth/google", "_self");
      return;
    }
    function input0_input_handler() {
      username3 = this.value;
      $$invalidate(0, username3);
    }
    function input1_input_handler() {
      password = this.value;
      $$invalidate(1, password);
    }
    return [
      username3,
      password,
      handleSubmit,
      signGoogle,
      input0_input_handler,
      input1_input_handler
    ];
  }
  var Login = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance4, create_fragment8, safe_not_equal, {});
    }
  };
  var Login_default = Login;

  // src/pages/Logout.svelte
  init_define_process();
  function create_fragment9(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<div class="box svelte-1m5k0v3"><h3 class="title is-3">You are Logged Out</h3> <h6 class="subtitle is-6">Thank you for using our website</h6></div>`;
        attr(article, "class", "svelte-1m5k0v3");
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  function instance5($$self, $$props, $$invalidate) {
    let $isLogin;
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(0, $isLogin = $$value));
    localStorage.clear();
    set_store_value(isLogin, $isLogin = false, $isLogin);
    setTimeout(
      () => {
        location.pathname = "/";
      },
      500
    );
    return [];
  }
  var Logout = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance5, create_fragment9, safe_not_equal, {});
    }
  };
  var Logout_default = Logout;

  // src/pages/Penelitian.svelte
  init_define_process();
  function create_fragment10(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<h1>Penelitian</h1> <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quos repellendus
      nulla soluta odio. Aspernatur deleniti cumque, fugit tempore molestias
      iste eligendi quaerat fugiat esse voluptas! Rerum, sed! Obcaecati, magnam
      eligendi.</p>`;
        attr(article, "class", "container svelte-1hdo9mq");
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  var Penelitian = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment10, safe_not_equal, {});
    }
  };
  var Penelitian_default = Penelitian;

  // src/pages/Register.svelte
  init_define_process();
  function create_fragment11(ctx) {
    let article;
    let div5;
    let h2;
    let t1;
    let div1;
    let div0;
    let t3;
    let input0;
    let t4;
    let div3;
    let div2;
    let t6;
    let input1;
    let t7;
    let div4;
    let br;
    let t8;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        article = element("article");
        div5 = element("div");
        h2 = element("h2");
        h2.textContent = "REGISTER";
        t1 = space();
        div1 = element("div");
        div0 = element("div");
        div0.textContent = "Username";
        t3 = space();
        input0 = element("input");
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        div2.textContent = "Email";
        t6 = space();
        input1 = element("input");
        t7 = space();
        div4 = element("div");
        br = element("br");
        t8 = space();
        button = element("button");
        button.textContent = "Register";
        attr(div0, "class", "svelte-f1u2iy");
        attr(input0, "type", "text");
        attr(div1, "class", "svelte-f1u2iy");
        attr(div2, "class", "svelte-f1u2iy");
        attr(input1, "type", "email");
        attr(div3, "class", "svelte-f1u2iy");
        attr(button, "class", "svelte-f1u2iy");
        attr(div4, "class", "svelte-f1u2iy");
        attr(div5, "class", "box svelte-f1u2iy");
        attr(article, "class", "container svelte-f1u2iy");
      },
      m(target, anchor) {
        insert(target, article, anchor);
        append(article, div5);
        append(div5, h2);
        append(div5, t1);
        append(div5, div1);
        append(div1, div0);
        append(div1, t3);
        append(div1, input0);
        set_input_value(
          input0,
          /*username*/
          ctx[0]
        );
        append(div5, t4);
        append(div5, div3);
        append(div3, div2);
        append(div3, t6);
        append(div3, input1);
        set_input_value(
          input1,
          /*email*/
          ctx[1]
        );
        append(div5, t7);
        append(div5, div4);
        append(div4, br);
        append(div4, t8);
        append(div4, button);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[3]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[4]
            ),
            listen(
              button,
              "click",
              /*handleSubmit*/
              ctx[2]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*username*/
        1 && input0.value !== /*username*/
        ctx2[0]) {
          set_input_value(
            input0,
            /*username*/
            ctx2[0]
          );
        }
        if (dirty & /*email*/
        2 && input1.value !== /*email*/
        ctx2[1]) {
          set_input_value(
            input1,
            /*email*/
            ctx2[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance6($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(5, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(6, $apiURL = $$value));
    let username3 = "dosen";
    let email3 = "";
    async function handleSubmit(ev) {
      const payload = {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username3, email: email3 })
      };
      const response = await fetch($apiURL + "//user", payload);
      const result = await response.json();
      if (response.ok) {
        localStorage.setItem("code", result.code);
        $route("/verify");
      } else {
        console.log(result);
      }
    }
    function input0_input_handler() {
      username3 = this.value;
      $$invalidate(0, username3);
    }
    function input1_input_handler() {
      email3 = this.value;
      $$invalidate(1, email3), $$invalidate(0, username3);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*username*/
      1) {
        $:
          username3, $$invalidate(1, email3 = username3 + "@pt.ac.id");
      }
    };
    return [username3, email3, handleSubmit, input0_input_handler, input1_input_handler];
  }
  var Register = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance6, create_fragment11, safe_not_equal, {});
    }
  };
  var Register_default = Register;

  // src/pages/Testdashboard.svelte
  init_define_process();

  // src/libs/Article.svelte
  init_define_process();

  // node_modules/svelte/src/runtime/transition/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/easing/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/transition/index.js
  function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
      delay,
      duration,
      easing,
      css: (t) => `opacity: ${t * o}`
    };
  }

  // src/libs/Article.svelte
  function create_fragment12(ctx) {
    let article;
    let article_intro;
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        article = element("article");
        if (default_slot)
          default_slot.c();
        attr(article, "class", "svelte-h8uanz");
      },
      m(target, anchor) {
        insert(target, article, anchor);
        if (default_slot) {
          default_slot.m(article, null);
        }
        current = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        if (local) {
          if (!article_intro) {
            add_render_callback(() => {
              article_intro = create_in_transition(article, fade, {});
              article_intro.start();
            });
          }
        }
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(article);
        }
        if (default_slot)
          default_slot.d(detaching);
      }
    };
  }
  function instance7($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2)
        $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  var Article = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance7, create_fragment12, safe_not_equal, {});
    }
  };
  var Article_default = Article;

  // src/pages/Testdashboard.svelte
  function create_default_slot(ctx) {
    let h1;
    let t1;
    let p0;
    let t4;
    let p1;
    let t7;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        h1 = element("h1");
        h1.textContent = "Dashboard";
        t1 = space();
        p0 = element("p");
        p0.textContent = `Pesan : ${/*pesan*/
        ctx[0]}`;
        t4 = space();
        p1 = element("p");
        p1.textContent = `Token : ${/*token*/
        ctx[1]}`;
        t7 = space();
        button = element("button");
        button.textContent = "Back";
        attr(h1, "class", "title is-1");
        attr(button, "class", "button is-danger");
      },
      m(target, anchor) {
        insert(target, h1, anchor);
        insert(target, t1, anchor);
        insert(target, p0, anchor);
        insert(target, t4, anchor);
        insert(target, p1, anchor);
        insert(target, t7, anchor);
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(button, "click", handleLogout);
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h1);
          detach(t1);
          detach(p0);
          detach(t4);
          detach(p1);
          detach(t7);
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment13(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        8) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  async function handleLogout() {
    location.pathname = "/testlogin";
  }
  function instance8($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(2, $apiURL = $$value));
    let pesan;
    let token;
    onMount(async () => {
      let token2 = localStorage.getItem("Ttoken");
      const payload = {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token2}`,
          // Authorization: `${token}`,
          "Content-Type": "application/json"
        }
      };
      const response = await fetch($apiURL + "/testDashboard", payload);
      const result = await response.json();
      console.log(result);
      if (result.statusCode != 200) {
        location.pathname = "/testlogin";
        console.log(result);
      }
    });
    return [pesan, token];
  }
  var Testdashboard = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance8, create_fragment13, safe_not_equal, {});
    }
  };
  var Testdashboard_default = Testdashboard;

  // src/pages/Testlogin.svelte
  init_define_process();
  function create_default_slot2(ctx) {
    let h1;
    let t1;
    let div1;
    let div0;
    let t3;
    let input0;
    let t4;
    let div3;
    let div2;
    let t6;
    let input1;
    let t7;
    let br;
    let t8;
    let button;
    let t10;
    let p;
    let mounted;
    let dispose;
    return {
      c() {
        h1 = element("h1");
        h1.textContent = "Login Page";
        t1 = space();
        div1 = element("div");
        div0 = element("div");
        div0.textContent = "Username";
        t3 = space();
        input0 = element("input");
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        div2.textContent = "Password";
        t6 = space();
        input1 = element("input");
        t7 = space();
        br = element("br");
        t8 = space();
        button = element("button");
        button.textContent = "Submit";
        t10 = space();
        p = element("p");
        p.innerHTML = `<a href="/testdashboard">To Dashboard</a>`;
        attr(h1, "class", "title is-1");
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(input1, "class", "input");
        attr(input1, "type", "password");
        attr(button, "class", "button is-info is-fullwidth");
      },
      m(target, anchor) {
        insert(target, h1, anchor);
        insert(target, t1, anchor);
        insert(target, div1, anchor);
        append(div1, div0);
        append(div1, t3);
        append(div1, input0);
        set_input_value(
          input0,
          /*username*/
          ctx[0]
        );
        insert(target, t4, anchor);
        insert(target, div3, anchor);
        append(div3, div2);
        append(div3, t6);
        append(div3, input1);
        set_input_value(
          input1,
          /*password*/
          ctx[1]
        );
        insert(target, t7, anchor);
        insert(target, br, anchor);
        insert(target, t8, anchor);
        insert(target, button, anchor);
        insert(target, t10, anchor);
        insert(target, p, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[3]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[4]
            ),
            listen(
              button,
              "click",
              /*handleSubmit*/
              ctx[2]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*username*/
        1 && input0.value !== /*username*/
        ctx2[0]) {
          set_input_value(
            input0,
            /*username*/
            ctx2[0]
          );
        }
        if (dirty & /*password*/
        2 && input1.value !== /*password*/
        ctx2[1]) {
          set_input_value(
            input1,
            /*password*/
            ctx2[1]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(h1);
          detach(t1);
          detach(div1);
          detach(t4);
          detach(div3);
          detach(t7);
          detach(br);
          detach(t8);
          detach(button);
          detach(t10);
          detach(p);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment14(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot2] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, password, username*/
        131) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function instance9($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(5, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(6, $apiURL = $$value));
    let username3 = "fiqi";
    let password = "1234";
    onMount(async () => {
      let token = localStorage.getItem("Ttoken");
    });
    async function handleSubmit() {
      const payload = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username3, password })
      };
      const response = await fetch($apiURL + "/testSignIn", payload);
      const result = await response.json();
      if (result.token) {
        localStorage.setItem("Ttoken", result.token);
        $route("/testdashboard");
      } else {
        console.log(
          result
        );
      }
    }
    function input0_input_handler() {
      username3 = this.value;
      $$invalidate(0, username3);
    }
    function input1_input_handler() {
      password = this.value;
      $$invalidate(1, password);
    }
    return [username3, password, handleSubmit, input0_input_handler, input1_input_handler];
  }
  var Testlogin = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance9, create_fragment14, safe_not_equal, {});
    }
  };
  var Testlogin_default = Testlogin;

  // src/pages/Tokenexpired.svelte
  init_define_process();
  function create_fragment15(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<div class="box svelte-1axbk4p"><img src="/img/warning.png" alt="alert-icon" class="svelte-1axbk4p"/> <h4 class="title is-3">Your session has expired</h4> <h6 class="subtitle is-6">You will be redirected to login page</h6></div>`;
        attr(article, "class", "svelte-1axbk4p");
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  function instance10($$self, $$props, $$invalidate) {
    let $isLogin;
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(0, $isLogin = $$value));
    localStorage.clear();
    set_store_value(isLogin, $isLogin = false, $isLogin);
    setTimeout(
      () => {
        location.pathname = "/login";
      },
      500
    );
    return [];
  }
  var Tokenexpired = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance10, create_fragment15, safe_not_equal, {});
    }
  };
  var Tokenexpired_default = Tokenexpired;

  // src/pages/Verify.svelte
  init_define_process();
  function create_fragment16(ctx) {
    let article;
    let div7;
    let h2;
    let t1;
    let p;
    let t2;
    let b;
    let t3;
    let t4;
    let div1;
    let div0;
    let t6;
    let input0;
    let t7;
    let div3;
    let div2;
    let t9;
    let input1;
    let t10;
    let div5;
    let div4;
    let t12;
    let input2;
    let t13;
    let div6;
    let br;
    let t14;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        article = element("article");
        div7 = element("div");
        h2 = element("h2");
        h2.textContent = "VERIFY USER";
        t1 = space();
        p = element("p");
        t2 = text("Code: ");
        b = element("b");
        t3 = text(
          /*code*/
          ctx[1]
        );
        t4 = space();
        div1 = element("div");
        div0 = element("div");
        div0.textContent = "Username";
        t6 = space();
        input0 = element("input");
        t7 = space();
        div3 = element("div");
        div2 = element("div");
        div2.textContent = "Code";
        t9 = space();
        input1 = element("input");
        t10 = space();
        div5 = element("div");
        div4 = element("div");
        div4.textContent = "Password";
        t12 = space();
        input2 = element("input");
        t13 = space();
        div6 = element("div");
        br = element("br");
        t14 = space();
        button = element("button");
        button.textContent = "Verify";
        attr(div0, "class", "svelte-f1u2iy");
        attr(input0, "type", "text");
        attr(div1, "class", "svelte-f1u2iy");
        attr(div2, "class", "svelte-f1u2iy");
        attr(input1, "type", "text");
        attr(div3, "class", "svelte-f1u2iy");
        attr(div4, "class", "svelte-f1u2iy");
        attr(input2, "type", "password");
        attr(div5, "class", "svelte-f1u2iy");
        attr(button, "class", "svelte-f1u2iy");
        attr(div6, "class", "svelte-f1u2iy");
        attr(div7, "class", "box svelte-f1u2iy");
        attr(article, "class", "container svelte-f1u2iy");
      },
      m(target, anchor) {
        insert(target, article, anchor);
        append(article, div7);
        append(div7, h2);
        append(div7, t1);
        append(div7, p);
        append(p, t2);
        append(p, b);
        append(b, t3);
        append(div7, t4);
        append(div7, div1);
        append(div1, div0);
        append(div1, t6);
        append(div1, input0);
        set_input_value(
          input0,
          /*username*/
          ctx[0]
        );
        append(div7, t7);
        append(div7, div3);
        append(div3, div2);
        append(div3, t9);
        append(div3, input1);
        set_input_value(
          input1,
          /*code*/
          ctx[1]
        );
        append(div7, t10);
        append(div7, div5);
        append(div5, div4);
        append(div5, t12);
        append(div5, input2);
        set_input_value(
          input2,
          /*password*/
          ctx[2]
        );
        append(div7, t13);
        append(div7, div6);
        append(div6, br);
        append(div6, t14);
        append(div6, button);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[4]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[5]
            ),
            listen(
              input2,
              "input",
              /*input2_input_handler*/
              ctx[6]
            ),
            listen(
              button,
              "click",
              /*handleSubmit*/
              ctx[3]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*code*/
        2)
          set_data(
            t3,
            /*code*/
            ctx2[1]
          );
        if (dirty & /*username*/
        1 && input0.value !== /*username*/
        ctx2[0]) {
          set_input_value(
            input0,
            /*username*/
            ctx2[0]
          );
        }
        if (dirty & /*code*/
        2 && input1.value !== /*code*/
        ctx2[1]) {
          set_input_value(
            input1,
            /*code*/
            ctx2[1]
          );
        }
        if (dirty & /*password*/
        4 && input2.value !== /*password*/
        ctx2[2]) {
          set_input_value(
            input2,
            /*password*/
            ctx2[2]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance11($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(7, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(8, $apiURL = $$value));
    let username3 = "dosen";
    let code = localStorage.getItem("code");
    let password = "1234";
    async function handleSubmit(ev) {
      const payload = {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username3, code, password })
      };
      const response = await fetch($apiURL + "/verify", payload);
      if (response.status === 204) {
        console.log("Gagal");
      } else if (response.status === 200) {
        console.log("sukses");
        $route("/login");
      }
    }
    function input0_input_handler() {
      username3 = this.value;
      $$invalidate(0, username3);
    }
    function input1_input_handler() {
      code = this.value;
      $$invalidate(1, code);
    }
    function input2_input_handler() {
      password = this.value;
      $$invalidate(2, password);
    }
    return [
      username3,
      code,
      password,
      handleSubmit,
      input0_input_handler,
      input1_input_handler,
      input2_input_handler
    ];
  }
  var Verify = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance11, create_fragment16, safe_not_equal, {});
    }
  };
  var Verify_default = Verify;

  // src/pages/admin/Index.svelte
  init_define_process();

  // src/pages/admin/index.js
  var admin_exports = {};
  __export(admin_exports, {
    aboutuisi: () => aboutuisi_default,
    buatpengumuman: () => buatpengumuman_default,
    createuser: () => createuser_default,
    detailproposal: () => detailproposal_default,
    home: () => home_default,
    pengumuman: () => pengumuman_default,
    profile: () => profile_default,
    proposalmanagement: () => proposalmanagement_default,
    template: () => template_default,
    usersmanagement: () => usersmanagement_default
  });
  init_define_process();

  // src/pages/admin/aboutuisi.svelte
  init_define_process();

  // src/libs/Field.svelte
  init_define_process();
  function get_each_context2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[21] = list[i];
    return child_ctx;
  }
  function create_else_block(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "type", "text");
        attr(input, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*value*/
          ctx[1]
        );
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_1*/
              ctx[18]
            ),
            listen(input, "click", function() {
              if (is_function(
                /*onclick*/
                ctx[8]
              ))
                ctx[8].apply(this, arguments);
            })
          ];
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*value*/
        2 && input.value !== /*value*/
        ctx[1]) {
          set_input_value(
            input,
            /*value*/
            ctx[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_4(ctx) {
    let a;
    let t;
    return {
      c() {
        a = element("a");
        t = text(
          /*value*/
          ctx[1]
        );
        attr(
          a,
          "href",
          /*href*/
          ctx[7]
        );
        attr(a, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, a, anchor);
        append(a, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*value*/
        2)
          set_data(
            t,
            /*value*/
            ctx2[1]
          );
        if (dirty & /*href*/
        128) {
          attr(
            a,
            "href",
            /*href*/
            ctx2[7]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(a);
        }
      }
    };
  }
  function create_if_block_3(ctx) {
    let p;
    let select_1;
    let option;
    let mounted;
    let dispose;
    let each_value = ensure_array_like(
      /*value*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
    }
    return {
      c() {
        p = element("p");
        select_1 = element("select");
        option = element("option");
        option.textContent = "Masukkan evaluator";
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        attr(option, "class", "svelte-1oy4l94");
        attr(
          select_1,
          "id",
          /*id*/
          ctx[2]
        );
        attr(select_1, "class", "svelte-1oy4l94");
        attr(p, "class", "select svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, select_1);
        append(select_1, option);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(select_1, null);
          }
        }
        if (!mounted) {
          dispose = listen(
            select_1,
            "change",
            /*fillSelect*/
            ctx[10]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*value*/
        2) {
          each_value = ensure_array_like(
            /*value*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context2(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block2(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(select_1, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
        if (dirty & /*id*/
        4) {
          attr(
            select_1,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        destroy_each(each_blocks, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input svelte-1oy4l94");
        attr(input, "type", "month");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*value*/
          ctx[1]
        );
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[17]
            ),
            listen(input, "click", function() {
              if (is_function(
                /*onclick*/
                ctx[8]
              ))
                ctx[8].apply(this, arguments);
            })
          ];
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*value*/
        2) {
          set_input_value(
            input,
            /*value*/
            ctx[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_1(ctx) {
    let textarea_1;
    let mounted;
    let dispose;
    return {
      c() {
        textarea_1 = element("textarea");
        attr(
          textarea_1,
          "id",
          /*id*/
          ctx[2]
        );
        attr(textarea_1, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, textarea_1, anchor);
        set_input_value(
          textarea_1,
          /*value*/
          ctx[1]
        );
        if (!mounted) {
          dispose = [
            listen(
              textarea_1,
              "input",
              /*textarea_1_input_handler*/
              ctx[16]
            ),
            listen(textarea_1, "click", function() {
              if (is_function(
                /*onclick*/
                ctx[8]
              ))
                ctx[8].apply(this, arguments);
            })
          ];
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*id*/
        4) {
          attr(
            textarea_1,
            "id",
            /*id*/
            ctx[2]
          );
        }
        if (dirty & /*value*/
        2) {
          set_input_value(
            textarea_1,
            /*value*/
            ctx[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(textarea_1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block(ctx) {
    let a;
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[15].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[14],
      null
    );
    return {
      c() {
        a = element("a");
        if (default_slot)
          default_slot.c();
        attr(a, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, a, anchor);
        if (default_slot) {
          default_slot.m(a, null);
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          16384)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[14],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[14]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[14],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(a);
        }
        if (default_slot)
          default_slot.d(detaching);
      }
    };
  }
  function create_each_block2(ctx) {
    let option;
    let t_value = (
      /*it*/
      ctx[21].username + ""
    );
    let t;
    let option_value_value;
    let goSelect_action;
    let mounted;
    let dispose;
    return {
      c() {
        option = element("option");
        t = text(t_value);
        option.__value = option_value_value = /*it*/
        ctx[21].id;
        set_input_value(option, option.__value);
        attr(option, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, option, anchor);
        append(option, t);
        if (!mounted) {
          dispose = action_destroyer(goSelect_action = /*goSelect*/
          ctx[11].call(null, option));
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*value*/
        2 && t_value !== (t_value = /*it*/
        ctx2[21].username + ""))
          set_data(t, t_value);
        if (dirty & /*value*/
        2 && option_value_value !== (option_value_value = /*it*/
        ctx2[21].id)) {
          option.__value = option_value_value;
          set_input_value(option, option.__value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(option);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment17(ctx) {
    let div;
    let b;
    let t0;
    let t1;
    let current_block_type_index;
    let if_block;
    let current;
    const if_block_creators = [
      create_if_block,
      create_if_block_1,
      create_if_block_2,
      create_if_block_3,
      create_if_block_4,
      create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*hasSlot*/
        ctx2[9]
      )
        return 0;
      if (
        /*textarea*/
        ctx2[3] && !/*view*/
        ctx2[6]
      )
        return 1;
      if (
        /*datepicker*/
        ctx2[4] && !/*view*/
        ctx2[6]
      )
        return 2;
      if (
        /*select*/
        ctx2[5] && /*view*/
        ctx2[6]
      )
        return 3;
      if (
        /*view*/
        ctx2[6]
      )
        return 4;
      return 5;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        div = element("div");
        b = element("b");
        t0 = text(
          /*name*/
          ctx[0]
        );
        t1 = space();
        if_block.c();
        attr(b, "class", "svelte-1oy4l94");
        attr(div, "class", "svelte-1oy4l94");
        toggle_class(
          div,
          "view",
          /*view*/
          ctx[6]
        );
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, b);
        append(b, t0);
        append(div, t1);
        if_blocks[current_block_type_index].m(div, null);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (!current || dirty & /*name*/
        1)
          set_data(
            t0,
            /*name*/
            ctx2[0]
          );
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
        if (!current || dirty & /*view*/
        64) {
          toggle_class(
            div,
            "view",
            /*view*/
            ctx2[6]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if_blocks[current_block_type_index].d();
      }
    };
  }
  function instance12($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { id } = $$props;
    let { name = "" } = $$props;
    let { value = "" } = $$props;
    let { selected } = $$props;
    let { textarea = false } = $$props;
    let { datepicker = false } = $$props;
    let { select = false } = $$props;
    let { view } = $$props;
    let { href } = $$props;
    let { onclick } = $$props;
    let { userId } = $$props;
    const slot = $$props.$$slots || {};
    const hasSlot = slot.hasOwnProperty("default");
    if (name) {
      name = name[0].toUpperCase() + name.slice(1);
      name = name.replaceAll("__", "/").replaceAll("_", " ");
    }
    function fillSelect(event) {
      let select2 = event.target;
      $$invalidate(12, selected = Number(select2.value));
    }
    function goSelect(el) {
      let valueId = el.value;
      if (Number(valueId) === userId) {
        el.setAttribute("selected", "");
      }
    }
    function textarea_1_input_handler() {
      value = this.value;
      $$invalidate(1, value);
    }
    function input_input_handler() {
      value = this.value;
      $$invalidate(1, value);
    }
    function input_input_handler_1() {
      value = this.value;
      $$invalidate(1, value);
    }
    $$self.$$set = ($$new_props) => {
      $$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("id" in $$new_props)
        $$invalidate(2, id = $$new_props.id);
      if ("name" in $$new_props)
        $$invalidate(0, name = $$new_props.name);
      if ("value" in $$new_props)
        $$invalidate(1, value = $$new_props.value);
      if ("selected" in $$new_props)
        $$invalidate(12, selected = $$new_props.selected);
      if ("textarea" in $$new_props)
        $$invalidate(3, textarea = $$new_props.textarea);
      if ("datepicker" in $$new_props)
        $$invalidate(4, datepicker = $$new_props.datepicker);
      if ("select" in $$new_props)
        $$invalidate(5, select = $$new_props.select);
      if ("view" in $$new_props)
        $$invalidate(6, view = $$new_props.view);
      if ("href" in $$new_props)
        $$invalidate(7, href = $$new_props.href);
      if ("onclick" in $$new_props)
        $$invalidate(8, onclick = $$new_props.onclick);
      if ("userId" in $$new_props)
        $$invalidate(13, userId = $$new_props.userId);
      if ("$$scope" in $$new_props)
        $$invalidate(14, $$scope = $$new_props.$$scope);
    };
    $$props = exclude_internal_props($$props);
    return [
      name,
      value,
      id,
      textarea,
      datepicker,
      select,
      view,
      href,
      onclick,
      hasSlot,
      fillSelect,
      goSelect,
      selected,
      userId,
      $$scope,
      slots,
      textarea_1_input_handler,
      input_input_handler,
      input_input_handler_1
    ];
  }
  var Field = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance12, create_fragment17, safe_not_equal, {
        id: 2,
        name: 0,
        value: 1,
        selected: 12,
        textarea: 3,
        datepicker: 4,
        select: 5,
        view: 6,
        href: 7,
        onclick: 8,
        userId: 13
      });
    }
  };
  var Field_default = Field;

  // src/libs/Wysiwyg.svelte
  init_define_process();
  function create_fragment18(ctx) {
    let div;
    let textarea;
    let textarea_value_value;
    return {
      c() {
        div = element("div");
        textarea = element("textarea");
        attr(
          textarea,
          "name",
          /*name*/
          ctx[2]
        );
        attr(
          textarea,
          "id",
          /*id*/
          ctx[0]
        );
        textarea.value = textarea_value_value = "      " + /*content*/
        ctx[1] + "\r\n   ";
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, textarea);
        ctx[4](textarea);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*name*/
        4) {
          attr(
            textarea,
            "name",
            /*name*/
            ctx2[2]
          );
        }
        if (dirty & /*id*/
        1) {
          attr(
            textarea,
            "id",
            /*id*/
            ctx2[0]
          );
        }
        if (dirty & /*content*/
        2 && textarea_value_value !== (textarea_value_value = "      " + /*content*/
        ctx2[1] + "\r\n   ")) {
          textarea.value = textarea_value_value;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        ctx[4](null);
      }
    };
  }
  function instance13($$self, $$props, $$invalidate) {
    let { id } = $$props;
    let { content = "" } = $$props;
    let { name } = $$props;
    let me;
    let selector = "#" + id;
    onMount(() => {
      try {
        tinymce.remove(selector);
      } catch (error) {
      }
      tinymce.init({
        selector,
        height: 500,
        plugins: "anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount ",
        toolbar: "undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat",
        tinycomments_mode: "embedded",
        tinycomments_author: "Author name",
        mergetags_list: [
          { value: "First.Name", title: "First Name" },
          { value: "Email", title: "Email" }
        ]
      });
    });
    function textarea_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        me = $$value;
        $$invalidate(3, me);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("id" in $$props2)
        $$invalidate(0, id = $$props2.id);
      if ("content" in $$props2)
        $$invalidate(1, content = $$props2.content);
      if ("name" in $$props2)
        $$invalidate(2, name = $$props2.name);
    };
    return [id, content, name, me, textarea_binding];
  }
  var Wysiwyg = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance13, create_fragment18, safe_not_equal, { id: 0, content: 1, name: 2 });
    }
  };
  var Wysiwyg_default = Wysiwyg;

  // src/pages/admin/aboutuisi.svelte
  function create_if_block_22(ctx) {
    let wysiwyg;
    let t0;
    let hr;
    let t1;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    wysiwyg = new Wysiwyg_default({
      props: { id: "isi", content: (
        /*lppmUisi*/
        ctx[3]
      ) }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
        t0 = space();
        hr = element("hr");
        t1 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        insert(target, t0, anchor);
        insert(target, hr, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanLppmUISI);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(hr);
          detach(t1);
          detach(div);
        }
        destroy_component(wysiwyg, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_12(ctx) {
    let wysiwyg;
    let t0;
    let hr;
    let t1;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    wysiwyg = new Wysiwyg_default({
      props: {
        id: "isi",
        content: (
          /*fungsiTujuan*/
          ctx[4]
        )
      }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
        t0 = space();
        hr = element("hr");
        t1 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        insert(target, t0, anchor);
        insert(target, hr, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanFungsiTujuan);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(hr);
          detach(t1);
          detach(div);
        }
        destroy_component(wysiwyg, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block2(ctx) {
    let wysiwyg;
    let t0;
    let hr;
    let t1;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    wysiwyg = new Wysiwyg_default({
      props: { id: "isi", content: (
        /*visiMisi*/
        ctx[5]
      ) }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
        t0 = space();
        hr = element("hr");
        t1 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        insert(target, t0, anchor);
        insert(target, hr, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanVisiMisi);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(hr);
          detach(t1);
          detach(div);
        }
        destroy_component(wysiwyg, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot3(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div;
    let ul;
    let li0;
    let t4;
    let li1;
    let t6;
    let li2;
    let t8;
    let t9;
    let t10;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[0] === true && create_if_block_22(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[1] === true && create_if_block_12(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[2] === true && create_if_block2(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "About UISI";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>LPPM UISI</span></a>`;
        t4 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Fungsi &amp; Tujuan</span></a>`;
        t6 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Visi &amp; Misi</span></a>`;
        t8 = space();
        if (if_block0)
          if_block0.c();
        t9 = space();
        if (if_block1)
          if_block1.c();
        t10 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[0]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[1]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[2]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t4);
        append(ul, li1);
        append(ul, t6);
        append(ul, li2);
        insert(target, t8, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t9, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t10, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[6]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[7]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[8]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty & /*tab1*/
        1) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[0]
          );
        }
        if (!current || dirty & /*tab2*/
        2) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[1]
          );
        }
        if (!current || dirty & /*tab3*/
        4) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[2]
          );
        }
        if (
          /*tab1*/
          ctx2[0] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty & /*tab1*/
            1) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_22(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t9.parentNode, t9);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[1] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty & /*tab2*/
            2) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_12(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t10.parentNode, t10);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab3*/
          ctx2[2] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty & /*tab3*/
            4) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block2(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div);
          detach(t8);
          detach(t9);
          detach(t10);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment19(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot3] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, tab3, tab2, tab1*/
        519) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function simpanLppmUISI() {
  }
  function simpanFungsiTujuan() {
  }
  function simpanVisiMisi() {
  }
  function instance14($$self, $$props, $$invalidate) {
    let lppmUisi, fungsiTujuan, visiMisi;
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(0, tab1 = true);
      $$invalidate(1, tab2 = false);
      $$invalidate(2, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(0, tab1 = false);
      $$invalidate(1, tab2 = true);
      $$invalidate(2, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(0, tab1 = false);
      $$invalidate(1, tab2 = false);
      $$invalidate(2, tab3 = true);
    }
    return [
      tab1,
      tab2,
      tab3,
      lppmUisi,
      fungsiTujuan,
      visiMisi,
      clicktab1,
      clicktab2,
      clicktab3
    ];
  }
  var Aboutuisi = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance14, create_fragment19, safe_not_equal, {});
    }
  };
  var aboutuisi_default = Aboutuisi;

  // src/pages/admin/buatpengumuman.svelte
  init_define_process();
  function create_default_slot_2(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Judul Pengumuman");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengumuman*/
          ctx[0]
        );
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*judulPengumuman*/
        1 && input.value !== /*judulPengumuman*/
        ctx2[0]) {
          set_input_value(
            input,
            /*judulPengumuman*/
            ctx2[0]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_1(ctx) {
    let wysiwyg;
    let current;
    wysiwyg = new Wysiwyg_default({
      props: {
        id: "isi",
        content: (
          /*isiPengumuman*/
          ctx[1]
        )
      }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(wysiwyg, detaching);
      }
    };
  }
  function create_default_slot4(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div0;
    let field0;
    let t3;
    let field1;
    let t4;
    let div1;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Judul Pengumuman",
        $$slots: { default: [create_default_slot_2] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Isi Pengumuman",
        $$slots: { default: [create_default_slot_1] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Buat Pengumuman";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div0 = element("div");
        create_component(field0.$$.fragment);
        t3 = space();
        create_component(field1.$$.fragment);
        t4 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(h2, "class", "title is-2");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t3);
        mount_component(field1, div0, null);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanPengumuman);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty & /*$$scope, judulPengumuman*/
        9) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty & /*$$scope*/
        8) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment20(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot4] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, judulPengumuman*/
        9) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function simpanPengumuman() {
  }
  function instance15($$self, $$props, $$invalidate) {
    let judulPengumuman, isiPengumuman;
    function input_input_handler() {
      judulPengumuman = this.value;
      $$invalidate(0, judulPengumuman);
    }
    return [judulPengumuman, isiPengumuman, input_input_handler];
  }
  var Buatpengumuman = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance15, create_fragment20, safe_not_equal, {});
    }
  };
  var buatpengumuman_default = Buatpengumuman;

  // src/pages/admin/createuser.svelte
  init_define_process();

  // src/libs/Modalerror.svelte
  init_define_process();
  function create_fragment21(ctx) {
    let b;
    let div1;
    let div0;
    let img;
    let img_src_value;
    let t0;
    let p;
    let t1;
    let button;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = (
      /*#slots*/
      ctx[4].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    return {
      c() {
        b = element("b");
        div1 = element("div");
        div0 = element("div");
        img = element("img");
        t0 = space();
        p = element("p");
        if (default_slot)
          default_slot.c();
        t1 = space();
        button = element("button");
        button.textContent = "Close";
        if (!src_url_equal(img.src, img_src_value = "/img/warning.png"))
          attr(img, "src", img_src_value);
        attr(img, "alt", "alert-icon");
        attr(img, "class", "svelte-ivfnq6");
        attr(p, "class", "svelte-ivfnq6");
        attr(button, "class", "button is-danger svelte-ivfnq6");
        attr(div0, "class", "cookiesContent svelte-ivfnq6");
        attr(b, "class", "svelte-ivfnq6");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div1);
        append(div1, div0);
        append(div0, img);
        append(div0, t0);
        append(div0, p);
        if (default_slot) {
          default_slot.m(p, null);
        }
        append(div0, t1);
        append(div0, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*clickX*/
              ctx[2]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[1]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance16($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(3, $$scope = $$props2.$$scope);
    };
    return [show, handleClick, clickX, $$scope, slots];
  }
  var Modalerror = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance16, create_fragment21, safe_not_equal, { show: 0 });
    }
  };
  var Modalerror_default = Modalerror;

  // src/pages/admin/createuser.svelte
  function create_default_slot_7(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Username yang anda gunakan telah terdaftar, silahkan gunakan username\r\n         lain";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_6(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi seluruh form!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_else_block2(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Anda tidak memiliki hak akses halaman ini!";
        attr(h4, "class", "title is-4");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block3(ctx) {
    let div1;
    let div0;
    let t1;
    let field0;
    let t2;
    let field1;
    let t3;
    let field2;
    let t4;
    let field3;
    let t5;
    let field4;
    let t6;
    let div4;
    let div2;
    let button0;
    let t8;
    let div3;
    let button1;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Username",
        $$slots: { default: [create_default_slot_5] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Password",
        $$slots: { default: [create_default_slot_4] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Email",
        $$slots: { default: [create_default_slot_3] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_22] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Active",
        $$slots: { default: [create_default_slot_12] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        div0.innerHTML = `<p>Untuk Dosen / Reviewer dari luar UISI!</p>`;
        t1 = space();
        create_component(field0.$$.fragment);
        t2 = space();
        create_component(field1.$$.fragment);
        t3 = space();
        create_component(field2.$$.fragment);
        t4 = space();
        create_component(field3.$$.fragment);
        t5 = space();
        create_component(field4.$$.fragment);
        t6 = space();
        div4 = element("div");
        div2 = element("div");
        button0 = element("button");
        button0.textContent = "Kembali";
        t8 = space();
        div3 = element("div");
        button1 = element("button");
        button1.textContent = "Create";
        attr(div0, "class", "notification is-warning is-light");
        attr(div1, "class", "box");
        attr(button0, "class", "button is-info is-light");
        attr(div2, "class", "control");
        attr(button1, "class", "button is-info");
        attr(div3, "class", "control");
        attr(div4, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div1, t1);
        mount_component(field0, div1, null);
        append(div1, t2);
        mount_component(field1, div1, null);
        append(div1, t3);
        mount_component(field2, div1, null);
        append(div1, t4);
        mount_component(field3, div1, null);
        append(div1, t5);
        mount_component(field4, div1, null);
        insert(target, t6, anchor);
        insert(target, div4, anchor);
        append(div4, div2);
        append(div2, button0);
        append(div4, t8);
        append(div4, div3);
        append(div3, button1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*kembali*/
              ctx[9]
            ),
            listen(
              button1,
              "click",
              /*HandleCreateUser*/
              ctx[10]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty & /*$$scope, error, createUsername*/
        33554465) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty & /*$$scope, error, createPassword*/
        33554466) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty & /*$$scope, error, createEmail*/
        33554468) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty & /*$$scope, error, jenisRole*/
        33554480) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty & /*$$scope, error, selectedActivation*/
        33554472) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
          detach(t6);
          detach(div4);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_5(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].createUsername + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].createUsername + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_5(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].createUsername && create_if_block_5(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "username");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan username");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*createUsername*/
          ctx[0]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[13]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*createUsername*/
        1 && input.value !== /*createUsername*/
        ctx2[0]) {
          set_input_value(
            input,
            /*createUsername*/
            ctx2[0]
          );
        }
        if (
          /*error*/
          ctx2[5].createUsername
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_5(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_42(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].createPassword + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].createPassword + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_4(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].createPassword && create_if_block_42(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "password");
        attr(input, "class", "input");
        attr(input, "type", "password");
        attr(input, "placeholder", "Masukkan password");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*createPassword*/
          ctx[1]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[14]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*createPassword*/
        2 && input.value !== /*createPassword*/
        ctx2[1]) {
          set_input_value(
            input,
            /*createPassword*/
            ctx2[1]
          );
        }
        if (
          /*error*/
          ctx2[5].createPassword
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_42(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_32(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].createEmail + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].createEmail + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_3(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].createEmail && create_if_block_32(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "email");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan email");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*createEmail*/
          ctx[2]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[15]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*createEmail*/
        4 && input.value !== /*createEmail*/
        ctx2[2]) {
          set_input_value(
            input,
            /*createEmail*/
            ctx2[2]
          );
        }
        if (
          /*error*/
          ctx2[5].createEmail
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_32(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_23(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].jenisRole + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].jenisRole + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_22(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let option5;
    let t6;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].jenisRole && create_if_block_23(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Role";
        option1 = element("option");
        option1.textContent = "Dosen";
        option2 = element("option");
        option2.textContent = "Reviewer";
        option3 = element("option");
        option3.textContent = "Kepala Departemen";
        option4 = element("option");
        option4.textContent = "Kepala LPPM";
        option5 = element("option");
        option5.textContent = "Kepala Pusat Kajian";
        t6 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "0";
        set_input_value(option1, option1.__value);
        option2.__value = "10";
        set_input_value(option2, option2.__value);
        option3.__value = "11";
        set_input_value(option3, option3.__value);
        option4.__value = "12";
        set_input_value(option4, option4.__value);
        option5.__value = "13";
        set_input_value(option5, option5.__value);
        attr(select, "id", "jenisRole");
        if (
          /*jenisRole*/
          ctx[4] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[16].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        append(select, option5);
        select_option(
          select,
          /*jenisRole*/
          ctx[4],
          true
        );
        insert(target, t6, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[16]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*jenisRole*/
        16) {
          select_option(
            select,
            /*jenisRole*/
            ctx2[4]
          );
        }
        if (
          /*error*/
          ctx2[5].jenisRole
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_23(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t6);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_13(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].selectedActivation + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].selectedActivation + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_12(ctx) {
    let div;
    let label0;
    let input0;
    let t0;
    let t1;
    let label1;
    let input1;
    let t2;
    let t3;
    let if_block_anchor;
    let binding_group;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].selectedActivation && create_if_block_13(ctx)
    );
    binding_group = init_binding_group(
      /*$$binding_groups*/
      ctx[18][0]
    );
    return {
      c() {
        div = element("div");
        label0 = element("label");
        input0 = element("input");
        t0 = text("\r\n                  Yes");
        t1 = space();
        label1 = element("label");
        input1 = element("input");
        t2 = text("\r\n                  No");
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input0, "id", "selectedActivation");
        attr(input0, "type", "radio");
        attr(input0, "name", "active");
        input0.__value = "1";
        set_input_value(input0, input0.__value);
        attr(label0, "class", "radio");
        attr(input1, "id", "selectedActivation");
        attr(input1, "type", "radio");
        attr(input1, "name", "active");
        input1.__value = "0";
        set_input_value(input1, input1.__value);
        attr(label1, "class", "radio");
        attr(div, "class", "control");
        binding_group.p(input0, input1);
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, label0);
        append(label0, input0);
        input0.checked = input0.__value === /*selectedActivation*/
        ctx[3];
        append(label0, t0);
        append(div, t1);
        append(div, label1);
        append(label1, input1);
        input1.checked = input1.__value === /*selectedActivation*/
        ctx[3];
        append(label1, t2);
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*input0_change_handler*/
              ctx[17]
            ),
            listen(
              input1,
              "change",
              /*input1_change_handler*/
              ctx[19]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*selectedActivation*/
        8) {
          input0.checked = input0.__value === /*selectedActivation*/
          ctx2[3];
        }
        if (dirty & /*selectedActivation*/
        8) {
          input1.checked = input1.__value === /*selectedActivation*/
          ctx2[3];
        }
        if (
          /*error*/
          ctx2[5].selectedActivation
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_13(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        binding_group.r();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot5(ctx) {
    let modalerror0;
    let updating_show;
    let t0;
    let modalerror1;
    let updating_show_1;
    let t1;
    let h2;
    let t3;
    let hr;
    let t4;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    function modalerror0_show_binding(value) {
      ctx[11](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_7] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[6] !== void 0
    ) {
      modalerror0_props.show = /*showModalError*/
      ctx[6];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[12](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorEmptyForm*/
      ctx[7] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorEmptyForm*/
      ctx[7];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    const if_block_creators = [create_if_block3, create_else_block2];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*role*/
        ctx2[8] === "admin"
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        create_component(modalerror0.$$.fragment);
        t0 = space();
        create_component(modalerror1.$$.fragment);
        t1 = space();
        h2 = element("h2");
        h2.textContent = "Create User";
        t3 = space();
        hr = element("hr");
        t4 = space();
        if_block.c();
        if_block_anchor = empty();
        attr(h2, "class", "title is-2");
      },
      m(target, anchor) {
        mount_component(modalerror0, target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t1, anchor);
        insert(target, h2, anchor);
        insert(target, t3, anchor);
        insert(target, hr, anchor);
        insert(target, t4, anchor);
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const modalerror0_changes = {};
        if (dirty & /*$$scope*/
        33554432) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalError*/
        64) {
          updating_show = true;
          modalerror0_changes.show = /*showModalError*/
          ctx2[6];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty & /*$$scope*/
        33554432) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty & /*showModalErrorEmptyForm*/
        128) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorEmptyForm*/
          ctx2[7];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
        if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(h2);
          detach(t3);
          detach(hr);
          detach(t4);
          detach(if_block_anchor);
        }
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_fragment22(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot5] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, error, selectedActivation, jenisRole, createEmail, createPassword, createUsername, showModalErrorEmptyForm, showModalError*/
        33554687) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function instance17($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(20, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(21, $apiURL = $$value));
    let createUsername, createPassword, createEmail, createRole;
    let selectedActivation = "";
    let jenisRole = "";
    let error = {};
    let showModalError = false;
    let showModalErrorEmptyForm = false;
    const role = localStorage.getItem("role");
    const accessToken = localStorage.getItem("token");
    function kembali() {
      $route("/admin/usersmanagement");
    }
    const validateFormCreateUser = () => {
      $$invalidate(5, error = {});
      if (!createUsername)
        $$invalidate(5, error.createUsername = "Username is required.", error);
      if (!createPassword)
        $$invalidate(5, error.createPassword = "Password is required.", error);
      if (!createEmail)
        $$invalidate(5, error.createEmail = "Email is required.", error);
      if (!jenisRole)
        $$invalidate(5, error.jenisRole = "Role is required.", error);
      if (!selectedActivation)
        $$invalidate(5, error.selectedActivation = "Activation is required.", error);
    };
    async function HandleCreateUser() {
      validateFormCreateUser();
      if (Object.keys(error).length > 0) {
        $$invalidate(7, showModalErrorEmptyForm = true);
      } else {
        let payload = {
          createUsername,
          createPassword,
          createEmail,
          selectedActivation,
          jenisRole
        };
        try {
          const response = await fetch($apiURL + "/createUser", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify(payload)
          });
          const result = await response.json();
          if (response.status === 401) {
            location.pathname = "/tokenexpired";
          } else {
            if (response.ok) {
              $route("/admin/usersmanagement");
            } else {
              $$invalidate(6, showModalError = true);
            }
          }
        } catch (error2) {
          console.error("Error", error2);
        }
      }
    }
    const $$binding_groups = [[]];
    function modalerror0_show_binding(value) {
      showModalError = value;
      $$invalidate(6, showModalError);
    }
    function modalerror1_show_binding(value) {
      showModalErrorEmptyForm = value;
      $$invalidate(7, showModalErrorEmptyForm);
    }
    function input_input_handler() {
      createUsername = this.value;
      $$invalidate(0, createUsername);
    }
    function input_input_handler_1() {
      createPassword = this.value;
      $$invalidate(1, createPassword);
    }
    function input_input_handler_2() {
      createEmail = this.value;
      $$invalidate(2, createEmail);
    }
    function select_change_handler() {
      jenisRole = select_value(this);
      $$invalidate(4, jenisRole);
    }
    function input0_change_handler() {
      selectedActivation = this.__value;
      $$invalidate(3, selectedActivation);
    }
    function input1_change_handler() {
      selectedActivation = this.__value;
      $$invalidate(3, selectedActivation);
    }
    return [
      createUsername,
      createPassword,
      createEmail,
      selectedActivation,
      jenisRole,
      error,
      showModalError,
      showModalErrorEmptyForm,
      role,
      kembali,
      HandleCreateUser,
      modalerror0_show_binding,
      modalerror1_show_binding,
      input_input_handler,
      input_input_handler_1,
      input_input_handler_2,
      select_change_handler,
      input0_change_handler,
      $$binding_groups,
      input1_change_handler
    ];
  }
  var Createuser = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance17, create_fragment22, safe_not_equal, {});
    }
  };
  var createuser_default = Createuser;

  // src/pages/admin/detailproposal.svelte
  init_define_process();

  // src/libs/Modal.svelte
  init_define_process();
  var get_header_slot_changes = (dirty) => ({});
  var get_header_slot_context = (ctx) => ({});
  function create_fragment23(ctx) {
    let b;
    let div;
    let span1;
    let span0;
    let t1;
    let t2;
    let hr;
    let t3;
    let current;
    let mounted;
    let dispose;
    const header_slot_template = (
      /*#slots*/
      ctx[4].header
    );
    const header_slot = create_slot(
      header_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      get_header_slot_context
    );
    const default_slot_template = (
      /*#slots*/
      ctx[4].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    return {
      c() {
        b = element("b");
        div = element("div");
        span1 = element("span");
        span0 = element("span");
        span0.textContent = "\xD7";
        t1 = space();
        if (header_slot)
          header_slot.c();
        t2 = space();
        hr = element("hr");
        t3 = space();
        if (default_slot)
          default_slot.c();
        attr(span0, "class", "close svelte-gcisbw");
        attr(div, "class", "svelte-gcisbw");
        attr(b, "class", "svelte-gcisbw");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div);
        append(div, span1);
        append(span1, span0);
        append(span1, t1);
        if (header_slot) {
          header_slot.m(span1, null);
        }
        append(div, t2);
        append(div, hr);
        append(div, t3);
        if (default_slot) {
          default_slot.m(div, null);
        }
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              span0,
              "click",
              /*clickX*/
              ctx[2]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[1]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (header_slot) {
          if (header_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              header_slot,
              header_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                header_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                get_header_slot_changes
              ),
              get_header_slot_context
            );
          }
        }
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(header_slot, local);
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(header_slot, local);
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if (header_slot)
          header_slot.d(detaching);
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance18($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(3, $$scope = $$props2.$$scope);
    };
    return [show, handleClick, clickX, $$scope, slots];
  }
  var Modal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance18, create_fragment23, safe_not_equal, { show: 0 });
    }
  };
  var Modal_default = Modal;

  // src/libs/Icon.svelte
  init_define_process();
  function create_fragment24(ctx) {
    let svg;
    let path;
    return {
      c() {
        svg = svg_element("svg");
        path = svg_element("path");
        attr(path, "fill", "currentColor");
        attr(
          path,
          "d",
          /*src*/
          ctx[1]
        );
        attr(
          svg,
          "id",
          /*id*/
          ctx[0]
        );
        attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        attr(
          svg,
          "width",
          /*width*/
          ctx[2]
        );
        attr(
          svg,
          "height",
          /*tinggi*/
          ctx[3]
        );
        attr(svg, "viewBox", "0 0 24 24");
      },
      m(target, anchor) {
        insert(target, svg, anchor);
        append(svg, path);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*src*/
        2) {
          attr(
            path,
            "d",
            /*src*/
            ctx2[1]
          );
        }
        if (dirty & /*id*/
        1) {
          attr(
            svg,
            "id",
            /*id*/
            ctx2[0]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(svg);
        }
      }
    };
  }
  function instance19($$self, $$props, $$invalidate) {
    let { id } = $$props;
    let { src } = $$props;
    let { size = 1 } = $$props;
    let width = 24 * Number(size);
    let tinggi = 24 * Number(size);
    $$self.$$set = ($$props2) => {
      if ("id" in $$props2)
        $$invalidate(0, id = $$props2.id);
      if ("src" in $$props2)
        $$invalidate(1, src = $$props2.src);
      if ("size" in $$props2)
        $$invalidate(4, size = $$props2.size);
    };
    return [id, src, width, tinggi, size];
  }
  var Icon = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance19, create_fragment24, safe_not_equal, { id: 0, src: 1, size: 4 });
    }
  };
  var Icon_default = Icon;

  // src/libs/Select.svelte
  init_define_process();
  function get_each_context3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[10] = list[i];
    return child_ctx;
  }
  function create_if_block4(ctx) {
    let span;
    let each_value = ensure_array_like(
      /*filteredItems*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
    }
    return {
      c() {
        span = element("span");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(span, "class", "svelte-zkhzei");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(span, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filteredItems, setSelected*/
        12) {
          each_value = ensure_array_like(
            /*filteredItems*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context3(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block3(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(span, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block3(ctx) {
    let a;
    let t_value = (
      /*item*/
      ctx[10].label + ""
    );
    let t;
    let a_data_value_value;
    let mounted;
    let dispose;
    return {
      c() {
        a = element("a");
        t = text(t_value);
        attr(a, "data-value", a_data_value_value = /*item*/
        ctx[10].value);
        attr(a, "class", "svelte-zkhzei");
      },
      m(target, anchor) {
        insert(target, a, anchor);
        append(a, t);
        if (!mounted) {
          dispose = listen(
            a,
            "click",
            /*setSelected*/
            ctx[3]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filteredItems*/
        4 && t_value !== (t_value = /*item*/
        ctx2[10].label + ""))
          set_data(t, t_value);
        if (dirty & /*filteredItems*/
        4 && a_data_value_value !== (a_data_value_value = /*item*/
        ctx2[10].value)) {
          attr(a, "data-value", a_data_value_value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(a);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment25(ctx) {
    let div;
    let input;
    let t;
    let mounted;
    let dispose;
    let if_block = (
      /*filteredItems*/
      ctx[2] && create_if_block4(ctx)
    );
    return {
      c() {
        div = element("div");
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        attr(input, "class", "input svelte-zkhzei");
        attr(input, "placeholder", "Cari user (min 2 huruf)");
        toggle_class(
          input,
          "focused",
          /*focused*/
          ctx[1]
        );
        attr(div, "class", "select svelte-zkhzei");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(
          input,
          /*value*/
          ctx[0]
        );
        append(div, t);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[7]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*value*/
        1 && input.value !== /*value*/
        ctx2[0]) {
          set_input_value(
            input,
            /*value*/
            ctx2[0]
          );
        }
        if (dirty & /*focused*/
        2) {
          toggle_class(
            input,
            "focused",
            /*focused*/
            ctx2[1]
          );
        }
        if (
          /*filteredItems*/
          ctx2[2]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block4(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function instance20($$self, $$props, $$invalidate) {
    let { items } = $$props;
    let { start = 1 } = $$props;
    let { result = [] } = $$props;
    let focused = 0;
    let value = "";
    let filteredItems = items;
    function setSelected(e) {
      e.preventDefault();
      let el = e.target;
      if (el.classList.contains("selected")) {
        el.classList.remove("selected");
        $$invalidate(4, result = result.filter((it) => {
          return it.value !== el.getAttribute("data-value");
        }));
      } else {
        el.classList.add("selected");
        $$invalidate(4, result = [
          ...result,
          {
            value: el.getAttribute("data-value").trim(),
            label: el.innerText.trim(),
            role: "Anggota"
          }
        ]);
      }
    }
    function doFilter() {
      if (value.length >= start) {
        $$invalidate(2, filteredItems = items.filter((item) => {
          let it;
          if (item.label) {
            let idUser2 = Number(localStorage.getItem("id"));
            let itemLabel = item.label.toLowerCase();
            let itemValue = item.value;
            let valueLabel = value.toLowerCase();
            it = itemLabel.includes(valueLabel) && itemValue !== idUser2;
          }
          return it;
        }));
      } else {
        $$invalidate(2, filteredItems = items);
      }
    }
    function clickOutside(e) {
      let el = e.target;
      if (el.tagName !== "A" && el.tagName !== "INPUT") {
        $$invalidate(0, value = "");
        $$invalidate(1, focused = 0);
      }
    }
    document.querySelector("body").addEventListener("click", clickOutside);
    function input_input_handler() {
      value = this.value;
      $$invalidate(0, value);
    }
    $$self.$$set = ($$props2) => {
      if ("items" in $$props2)
        $$invalidate(5, items = $$props2.items);
      if ("start" in $$props2)
        $$invalidate(6, start = $$props2.start);
      if ("result" in $$props2)
        $$invalidate(4, result = $$props2.result);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*value, start*/
      65) {
        $:
          value, $$invalidate(1, focused = value.length >= start ? 1 : 0), doFilter();
      }
    };
    return [
      value,
      focused,
      filteredItems,
      setSelected,
      result,
      items,
      start,
      input_input_handler
    ];
  }
  var Select = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance20, create_fragment25, safe_not_equal, { items: 5, start: 6, result: 4 });
    }
  };
  var Select_default = Select;

  // src/store/icons.js
  init_define_process();
  var accountRounded = "M12 19.2c-2.5 0-4.71-1.28-6-3.2c.03-2 4-3.1 6-3.1s5.97 1.1 6 3.1a7.232 7.232 0 0 1-6 3.2M12 5a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-3A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10c0-5.53-4.5-10-10-10";
  var accountAdd = "M15 4a4 4 0 0 0-4 4a4 4 0 0 0 4 4a4 4 0 0 0 4-4a4 4 0 0 0-4-4m0 1.9a2.1 2.1 0 1 1 0 4.2A2.1 2.1 0 0 1 12.9 8A2.1 2.1 0 0 1 15 5.9M4 7v3H1v2h3v3h2v-3h3v-2H6V7H4m11 6c-2.67 0-8 1.33-8 4v3h16v-3c0-2.67-5.33-4-8-4m0 1.9c2.97 0 6.1 1.46 6.1 2.1v1.1H8.9V17c0-.64 3.1-2.1 6.1-2.1Z";
  var accountEdit = "M2 17v3h8v-1.89H3.9V17c0-.64 3.13-2.1 6.1-2.1c.96.01 1.91.14 2.83.38l1.52-1.52c-1.4-.47-2.85-.73-4.35-.76c-2.67 0-8 1.33-8 4m8-13C7.79 4 6 5.79 6 8s1.79 4 4 4s4-1.79 4-4s-1.79-4-4-4m0 6c-1.1 0-2-.89-2-2s.9-2 2-2s2 .9 2 2s-.89 2-2 2m11.7 3.35l-1 1l-2.05-2l1-1a.55.55 0 0 1 .77 0l1.28 1.28c.21.21.21.56 0 .77M12 18.94l6.06-6.06l2.05 2l-6 6.07H12z";
  var infoOutline = "M11 17h2v-6h-2v6Zm1-8q.425 0 .713-.288T13 8q0-.425-.288-.712T12 7q-.425 0-.712.288T11 8q0 .425.288.713T12 9Zm0 13q-2.075 0-3.9-.788t-3.175-2.137q-1.35-1.35-2.137-3.175T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Zm0-2q3.35 0 5.675-2.325T20 12q0-3.35-2.325-5.675T12 4Q8.65 4 6.325 6.325T4 12q0 3.35 2.325 5.675T12 20Zm0-8Z";
  var addProposal = "M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v6.7q-.475-.225-.975-.387T19 11.075V5H5v14h6.05q.075.55.238 1.05t.387.95H5Zm0-3v1V5v6.075V11v7Zm2-1h4.075q.075-.525.238-1.025t.362-.975H7v2Zm0-4h6.1q.8-.75 1.788-1.25T17 11.075V11H7v2Zm0-4h10V7H7v2Zm11 14q-2.075 0-3.537-1.463T13 18q0-2.075 1.463-3.537T18 13q2.075 0 3.538 1.463T23 18q0 2.075-1.463 3.538T18 23Zm-.5-2h1v-2.5H21v-1h-2.5V15h-1v2.5H15v1h2.5V21Z";
  var add = "M11 13H5v-2h6V5h2v6h6v2h-6v6h-2z";
  var deleteIcon = "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z";
  var penelitian = "M15.5 12c2.5 0 4.5 2 4.5 4.5c0 .88-.25 1.71-.69 2.4l3.08 3.1L21 23.39l-3.12-3.07c-.69.43-1.51.68-2.38.68c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5m0 2a2.5 2.5 0 0 0-2.5 2.5a2.5 2.5 0 0 0 2.5 2.5a2.5 2.5 0 0 0 2.5-2.5a2.5 2.5 0 0 0-2.5-2.5M5 3h14c1.11 0 2 .89 2 2v8.03c-.5-.8-1.19-1.49-2-2.03V5H5v14h4.5c.31.75.76 1.42 1.31 2H5c-1.11 0-2-.89-2-2V5c0-1.11.89-2 2-2m2 4h10v2H7zm0 4h5.03c-.8.5-1.49 1.19-2.03 2H7zm0 4h2.17c-.11.5-.17 1-.17 1.5v.5H7z";
  var pengmas = "M16.5 13c-1.2 0-3.07.34-4.5 1c-1.43-.67-3.3-1-4.5-1C5.33 13 1 14.08 1 16.25V19h22v-2.75c0-2.17-4.33-3.25-6.5-3.25m-4 4.5h-10v-1.25c0-.54 2.56-1.75 5-1.75s5 1.21 5 1.75zm9 0H14v-1.25c0-.46-.2-.86-.52-1.22c.88-.3 1.96-.53 3.02-.53c2.44 0 5 1.21 5 1.75zM7.5 12c1.93 0 3.5-1.57 3.5-3.5S9.43 5 7.5 5S4 6.57 4 8.5S5.57 12 7.5 12m0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2s-2-.9-2-2s.9-2 2-2m9 5.5c1.93 0 3.5-1.57 3.5-3.5S18.43 5 16.5 5S13 6.57 13 8.5s1.57 3.5 3.5 3.5m0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2s-2-.9-2-2s.9-2 2-2";
  var jurnal = "M12.04 6.017a4.75 4.75 0 1 0 .335-.012h-.01a1.35 1.35 0 0 0-.326.012m-1.622 1.835c-.226.677-.368 1.506-.407 2.398h-1.1a3.5 3.5 0 0 1 1.507-2.398m-.374 3.898a8.43 8.43 0 0 0 .379 1.91a3.507 3.507 0 0 1-1.405-1.91zm3.966 2.1l.003-.008c.22-.587.373-1.306.443-2.092h1.276a3.51 3.51 0 0 1-1.722 2.1m-1.061-2.1a6.556 6.556 0 0 1-.34 1.565c-.118.313-.24.514-.336.623a.914.914 0 0 1-.023.025a.914.914 0 0 1-.023-.025c-.097-.11-.218-.31-.335-.623c-.154-.41-.276-.947-.341-1.565zm.039-1.5h-1.476c.042-.828.185-1.547.38-2.065c.117-.313.238-.514.335-.623a.79.79 0 0 1 .023-.025a.79.79 0 0 1 .023.025c.097.11.218.31.335.623c.195.518.338 1.237.38 2.065m1.501 0c-.043-.978-.21-1.88-.475-2.588a3.503 3.503 0 0 1 1.825 2.588zm-2.182-2.76l-.004.002zm-.113 0l.003.002a.014.014 0 0 0-.004-.003zM6.5 2A2.5 2.5 0 0 0 4 4.5v15A2.5 2.5 0 0 0 6.5 22h13.25a.75.75 0 0 0 0-1.5H6.5a1 1 0 0 1-1-1h14.25a.75.75 0 0 0 .75-.75V4.5A2.5 2.5 0 0 0 18 2zM19 4.5V18H5.5V4.5a1 1 0 0 1 1-1H18a1 1 0 0 1 1 1m-6.697 9.509a.019.019 0 0 1 .004.002Z";
  var copyright = "M12 21a9 9 0 1 0 0-18a9 9 0 0 0 0 18m11-9c0 6.075-4.925 11-11 11S1 18.075 1 12S5.925 1 12 1s11 4.925 11 11M9.525 9.526a3.5 3.5 0 0 0 4.95 4.95l.707-.708l1.414 1.415l-.707.707a5.5 5.5 0 1 1 0-7.778l.707.707l-1.414 1.414l-.707-.707a3.5 3.5 0 0 0-4.95 0";
  var edit = "M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h8.925l-2 2H5v14h14v-6.95l2-2V19q0 .825-.587 1.413T19 21zm4-6v-4.25l9.175-9.175q.3-.3.675-.45t.75-.15q.4 0 .763.15t.662.45L22.425 3q.275.3.425.663T23 4.4q0 .375-.137.738t-.438.662L13.25 15zM21.025 4.4l-1.4-1.4zM11 13h1.4l5.8-5.8l-.7-.7l-.725-.7L11 11.575zm6.5-6.5l-.725-.7zl.7.7z";
  var searchIcon = "m19.6 21l-6.3-6.3q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5t1.888-4.612T9.5 3t4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l6.3 6.3zM9.5 14q1.875 0 3.188-1.312T14 9.5t-1.312-3.187T9.5 5T6.313 6.313T5 9.5t1.313 3.188T9.5 14";
  var cancelIcon = "M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2m0 16H5V5h14zM17 8.4L13.4 12l3.6 3.6l-1.4 1.4l-3.6-3.6L8.4 17L7 15.6l3.6-3.6L7 8.4L8.4 7l3.6 3.6L15.6 7z";
  var downloadIcon = "m12 16l-5-5l1.4-1.45l2.6 2.6V4h2v8.15l2.6-2.6L17 11zm-6 4q-.825 0-1.412-.587T4 18v-3h2v3h12v-3h2v3q0 .825-.587 1.413T18 20z";
  var upArrow = "M3 19h18a1.002 1.002 0 0 0 .823-1.569l-9-13c-.373-.539-1.271-.539-1.645 0l-9 13A.999.999 0 0 0 3 19";
  var downArrow = "M11.178 19.569a.998.998 0 0 0 1.644 0l9-13A.999.999 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569z";

  // src/pages/admin/detailproposal.svelte
  function get_each_context4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[130] = list[i];
    return child_ctx;
  }
  function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[133] = list[i];
    return child_ctx;
  }
  function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[136] = list[i];
    return child_ctx;
  }
  function get_each_context_3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[139] = list[i];
    return child_ctx;
  }
  function get_each_context_4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[142] = list[i];
    return child_ctx;
  }
  function get_each_context_5(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[145] = list[i];
    return child_ctx;
  }
  function get_each_context_6(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[148] = list[i];
    return child_ctx;
  }
  function get_each_context_7(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[151] = list[i];
    return child_ctx;
  }
  function get_each_context_9(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[154] = list[i];
    return child_ctx;
  }
  function get_each_context_8(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[154] = list[i];
    child_ctx[156] = i;
    return child_ctx;
  }
  function create_if_block5(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_48] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, isLoading, status, ka_pusat_kajian, reviewer, ka_lppm, ka_departemen, itemsRCR, comment, error, jenisSkema, abstrak, judul, anggotaTim, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, data*/
        2147479807 | dirty[1] & /*judulTugasAkhirS2, judulTugasAkhirS1, tahunLulusS3, tahunLulusS2, tahunLulusS1, tahunMasukS3, tahunMasukS2, tahunMasukS1, bidangIlmuS3, bidangIlmuS2, bidangIlmuS1, pertiS3, pertiS2, pertiS1, mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap, kpkSelected, reviewerSelected, klppmSelected, kdeptSelected*/
        2147483647 | dirty[2] & /*judulTugasAkhirS3, tab2, view, editModeRAB, $rabFile, editModeProposal, $ppmFile, items, $penilaianFile, tab1*/
        1023 | dirty[5] & /*$$scope*/
        16) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function create_if_block_9(ctx) {
    let div0;
    let current_block_type_index;
    let if_block0;
    let t0;
    let t1;
    let t2;
    let div1;
    let t3;
    let t4;
    let t5;
    let t6;
    let current;
    const if_block_creators = [create_if_block_21, create_else_block_5];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (!/*view*/
      ctx2[64])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, [-1, -1, -1, -1, -1, -1]);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = (
      /*status*/
      ctx[25] != 0 && create_if_block_16(ctx)
    );
    let if_block2 = (
      /*status*/
      ctx[25] != 0 && create_if_block_15(ctx)
    );
    let if_block3 = (
      /*status*/
      (ctx[25] === 2 || /*status*/
      ctx[25] === 6) && create_if_block_14(ctx)
    );
    let if_block4 = (
      /*status*/
      ctx[25] === 4 && create_if_block_132(ctx)
    );
    let if_block5 = (
      /*status*/
      ctx[25] === 8 && create_if_block_122(ctx)
    );
    let if_block6 = (
      /*status*/
      ctx[25] === 10 && create_if_block_11(ctx)
    );
    let if_block7 = (
      /*status*/
      (ctx[25] === 1 || /*status*/
      ctx[25] === 3 || /*status*/
      ctx[25] === 5 || /*status*/
      ctx[25] === 7 || /*status*/
      ctx[25] === 9) && create_if_block_10(ctx)
    );
    return {
      c() {
        div0 = element("div");
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        if (if_block2)
          if_block2.c();
        t2 = space();
        div1 = element("div");
        if (if_block3)
          if_block3.c();
        t3 = space();
        if (if_block4)
          if_block4.c();
        t4 = space();
        if (if_block5)
          if_block5.c();
        t5 = space();
        if (if_block6)
          if_block6.c();
        t6 = space();
        if (if_block7)
          if_block7.c();
        attr(div0, "class", "box");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        if_blocks[current_block_type_index].m(div0, null);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t2, anchor);
        insert(target, div1, anchor);
        if (if_block3)
          if_block3.m(div1, null);
        append(div1, t3);
        if (if_block4)
          if_block4.m(div1, null);
        append(div1, t4);
        if (if_block5)
          if_block5.m(div1, null);
        append(div1, t5);
        if (if_block6)
          if_block6.m(div1, null);
        append(div1, t6);
        if (if_block7)
          if_block7.m(div1, null);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(div0, null);
        }
        if (
          /*status*/
          ctx2[25] != 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*status*/
            33554432) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_16(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[25] != 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*status*/
            33554432) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_15(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(t2.parentNode, t2);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[25] === 2 || /*status*/
          ctx2[25] === 6
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_14(ctx2);
            if_block3.c();
            if_block3.m(div1, t3);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*status*/
          ctx2[25] === 4
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_132(ctx2);
            if_block4.c();
            if_block4.m(div1, t4);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*status*/
          ctx2[25] === 8
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_122(ctx2);
            if_block5.c();
            if_block5.m(div1, t5);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*status*/
          ctx2[25] === 10
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_11(ctx2);
            if_block6.c();
            if_block6.m(div1, t6);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*status*/
          ctx2[25] === 1 || /*status*/
          ctx2[25] === 3 || /*status*/
          ctx2[25] === 5 || /*status*/
          ctx2[25] === 7 || /*status*/
          ctx2[25] === 9
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_10(ctx2);
            if_block7.c();
            if_block7.m(div1, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t0);
          detach(t1);
          detach(t2);
          detach(div1);
        }
        if_blocks[current_block_type_index].d();
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
      }
    };
  }
  function create_else_block_5(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let br;
    let t9;
    let table;
    let thead;
    let t13;
    let tbody;
    let t14;
    let hr;
    let t15;
    let field9;
    let t16;
    let field10;
    let t17;
    let field11;
    let t18;
    let t19;
    let if_block2_anchor;
    let current;
    field0 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_47] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_46] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_45] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_44] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_43] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_42] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_41] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_40] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_39] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*anggotaTim*/
      ctx[21].length > 0 && create_if_block_50(ctx)
    );
    field9 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_38] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "abstrak",
        $$slots: { default: [create_default_slot_37] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_36] },
        $$scope: { ctx }
      }
    });
    let if_block1 = (
      /*jenisSkema*/
      (ctx[15] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[15] === "Riset Terapan" || /*jenisSkema*/
      ctx[15] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[15] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[15] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_49(ctx)
    );
    let if_block2 = (
      /*jenisSkema*/
      (ctx[15] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[15] === "Riset Terapan" || /*jenisSkema*/
      ctx[15] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[15] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[15] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_44(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        br = element("br");
        t9 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t13 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t14 = space();
        hr = element("hr");
        t15 = space();
        create_component(field9.$$.fragment);
        t16 = space();
        create_component(field10.$$.fragment);
        t17 = space();
        create_component(field11.$$.fragment);
        t18 = space();
        if (if_block1)
          if_block1.c();
        t19 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        mount_component(field5, target, anchor);
        insert(target, t5, anchor);
        mount_component(field6, target, anchor);
        insert(target, t6, anchor);
        mount_component(field7, target, anchor);
        insert(target, t7, anchor);
        mount_component(field8, target, anchor);
        insert(target, t8, anchor);
        insert(target, br, anchor);
        insert(target, t9, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t13);
        append(table, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        insert(target, t14, anchor);
        insert(target, hr, anchor);
        insert(target, t15, anchor);
        mount_component(field9, target, anchor);
        insert(target, t16, anchor);
        mount_component(field10, target, anchor);
        insert(target, t17, anchor);
        mount_component(field11, target, anchor);
        insert(target, t18, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t19, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*jenisProposal*/
        8192 | dirty[5] & /*$$scope*/
        16) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        16384 | dirty[5] & /*$$scope*/
        16) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*jenisSkema*/
        32768 | dirty[5] & /*$$scope*/
        16) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*kelompokKeahlian*/
        65536 | dirty[5] & /*$$scope*/
        16) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*topik*/
        131072 | dirty[5] & /*$$scope*/
        16) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*tanggalMulai*/
        262144 | dirty[5] & /*$$scope*/
        16) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*tanggalSelesai*/
        524288 | dirty[5] & /*$$scope*/
        16) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*biayaPenelitian*/
        1048576 | dirty[5] & /*$$scope*/
        16) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        if (
          /*anggotaTim*/
          ctx2[21].length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_50(ctx2);
            if_block0.c();
            if_block0.m(tbody, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        const field9_changes = {};
        if (dirty[0] & /*data*/
        2 | dirty[5] & /*$$scope*/
        16) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*data*/
        2 | dirty[5] & /*$$scope*/
        16) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*jenisSkema*/
          ctx2[15] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[15] === "Riset Terapan" || /*jenisSkema*/
          ctx2[15] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[15] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[15] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            32768) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_49(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t19.parentNode, t19);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*jenisSkema*/
          ctx2[15] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[15] === "Riset Terapan" || /*jenisSkema*/
          ctx2[15] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[15] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[15] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            32768) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_44(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(br);
          detach(t9);
          detach(table);
          detach(t14);
          detach(hr);
          detach(t15);
          detach(t16);
          detach(t17);
          detach(t18);
          detach(t19);
          detach(if_block2_anchor);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        if (if_block0)
          if_block0.d();
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
      }
    };
  }
  function create_if_block_21(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let br;
    let t9;
    let table;
    let thead;
    let t14;
    let tbody;
    let t15;
    let hr;
    let t16;
    let field9;
    let t17;
    let field10;
    let t18;
    let field11;
    let t19;
    let if_block1_anchor;
    let current;
    field0 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_32] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_31] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_30] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_29] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_28] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_27] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_26] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_25] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_24] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*anggotaTim*/
      ctx[21].length > 0 && create_if_block_322(ctx)
    );
    field9 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_23] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_222] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_21] },
        $$scope: { ctx }
      }
    });
    let if_block1 = (
      /*jenisSkema*/
      (ctx[15] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[15] === "Riset Terapan" || /*jenisSkema*/
      ctx[15] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[15] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[15] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_222(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        br = element("br");
        t9 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:65px"></th> <th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t14 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t15 = space();
        hr = element("hr");
        t16 = space();
        create_component(field9.$$.fragment);
        t17 = space();
        create_component(field10.$$.fragment);
        t18 = space();
        create_component(field11.$$.fragment);
        t19 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        mount_component(field5, target, anchor);
        insert(target, t5, anchor);
        mount_component(field6, target, anchor);
        insert(target, t6, anchor);
        mount_component(field7, target, anchor);
        insert(target, t7, anchor);
        mount_component(field8, target, anchor);
        insert(target, t8, anchor);
        insert(target, br, anchor);
        insert(target, t9, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t14);
        append(table, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        insert(target, t15, anchor);
        insert(target, hr, anchor);
        insert(target, t16, anchor);
        mount_component(field9, target, anchor);
        insert(target, t17, anchor);
        mount_component(field10, target, anchor);
        insert(target, t18, anchor);
        mount_component(field11, target, anchor);
        insert(target, t19, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        8193 | dirty[5] & /*$$scope*/
        16) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        16385 | dirty[5] & /*$$scope*/
        16) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        49153 | dirty[5] & /*$$scope*/
        16) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        65537 | dirty[5] & /*$$scope*/
        16) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, topik*/
        131073 | dirty[5] & /*$$scope*/
        16) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        262145 | dirty[5] & /*$$scope*/
        16) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        524289 | dirty[5] & /*$$scope*/
        16) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        1048577 | dirty[5] & /*$$scope*/
        16) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, anggotaTim*/
        2097153 | dirty[2] & /*items*/
        2 | dirty[5] & /*$$scope*/
        16) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        if (
          /*anggotaTim*/
          ctx2[21].length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            2097152) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_322(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        const field9_changes = {};
        if (dirty[0] & /*error, judul*/
        4194305 | dirty[5] & /*$$scope*/
        16) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error, abstrak*/
        8388609 | dirty[5] & /*$$scope*/
        16) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*editModeProposal, $ppmFile*/
        520 | dirty[5] & /*$$scope*/
        16) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*jenisSkema*/
          ctx2[15] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[15] === "Riset Terapan" || /*jenisSkema*/
          ctx2[15] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[15] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[15] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            32768) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_222(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(if_block0);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(if_block0);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(br);
          detach(t9);
          detach(table);
          detach(t15);
          detach(hr);
          detach(t16);
          detach(t17);
          detach(t18);
          detach(t19);
          detach(if_block1_anchor);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        if (if_block0)
          if_block0.d();
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function create_default_slot_47(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisProposal*/
          ctx[13]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        8192)
          set_data(
            t,
            /*jenisProposal*/
            ctx2[13]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_46(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisKegiatan*/
          ctx[14]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        16384)
          set_data(
            t,
            /*jenisKegiatan*/
            ctx2[14]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_45(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisSkema*/
          ctx[15]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisSkema*/
        32768)
          set_data(
            t,
            /*jenisSkema*/
            ctx2[15]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_44(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*kelompokKeahlian*/
          ctx[16]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        65536)
          set_data(
            t,
            /*kelompokKeahlian*/
            ctx2[16]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_43(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*topik*/
          ctx[17]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        131072)
          set_data(
            t,
            /*topik*/
            ctx2[17]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_42(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*tanggalMulai*/
          ctx[18]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        262144)
          set_data(
            t,
            /*tanggalMulai*/
            ctx2[18]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_41(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*tanggalSelesai*/
          ctx[19]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        524288)
          set_data(
            t,
            /*tanggalSelesai*/
            ctx2[19]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_40(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*biayaPenelitian*/
          ctx[20]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        1048576)
          set_data(
            t,
            /*biayaPenelitian*/
            ctx2[20]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_39(ctx) {
    let span;
    return {
      c() {
        span = element("span");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_50(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*anggotaTim*/
      ctx[21]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        2097152) {
          each_value_9 = ensure_array_like(
            /*anggotaTim*/
            ctx2[21]
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_9(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_9(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_9(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*member*/
      ctx[154].role + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*member*/
      ctx[154].label + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        2097152 && t0_value !== (t0_value = /*member*/
        ctx2[154].role + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*anggotaTim*/
        2097152 && t2_value !== (t2_value = /*member*/
        ctx2[154].label + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_38(ctx) {
    let t_value = (
      /*data*/
      ctx[1].judul + ""
    );
    let t;
    return {
      c() {
        t = text(t_value);
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*data*/
        2 && t_value !== (t_value = /*data*/
        ctx2[1].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_37(ctx) {
    let html_tag;
    let raw_value = (
      /*data*/
      ctx[1].abstrak + ""
    );
    let html_anchor;
    return {
      c() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m(target, anchor) {
        html_tag.m(raw_value, target, anchor);
        insert(target, html_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*data*/
        2 && raw_value !== (raw_value = /*data*/
        ctx2[1].abstrak + ""))
          html_tag.p(raw_value);
      },
      d(detaching) {
        if (detaching) {
          detach(html_anchor);
          html_tag.d();
        }
      }
    };
  }
  function create_default_slot_36(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download Proposal";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPpm*/
            ctx[79]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_49(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "RAB",
        $$slots: { default: [create_default_slot_35] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_35(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download RAB";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadRab*/
            ctx[78]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_44(ctx) {
    let t;
    let if_block1_anchor;
    let current;
    let if_block0 = (
      /*status*/
      ctx[25] === 8 && create_if_block_46(ctx)
    );
    let if_block1 = (
      /*status*/
      ctx[25] > 8 && create_if_block_45(ctx)
    );
    return {
      c() {
        if (if_block0)
          if_block0.c();
        t = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
      },
      m(target, anchor) {
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[25] === 8
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*status*/
            33554432) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_46(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t.parentNode, t);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[25] > 8
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*status*/
            33554432) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_45(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function create_if_block_46(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Penilaian Proposal",
        $$slots: { default: [create_default_slot_34] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*$penilaianFile*/
        128 | dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block_6(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_48(ctx) {
    let span;
    let t_value = (
      /*$penilaianFile*/
      ctx[69].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*$penilaianFile*/
        128 && t_value !== (t_value = /*$penilaianFile*/
        ctx2[69].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_47(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].filePenilaian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].filePenilaian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_34(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_6(ctx2, dirty) {
      if (
        /*$penilaianFile*/
        ctx2[69]?.name
      )
        return create_if_block_48;
      return create_else_block_6;
    }
    let current_block_type = select_block_type_6(ctx, [-1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[0].filePenilaian && create_if_block_47(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "filePenilaian");
        attr(input0, "class", "inputf custom-file-input svelte-wzx0zq");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-wzx0zq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePenilaian");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "inputf__wrapper svelte-wzx0zq");
        attr(p, "class", "help svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePenilaianChange*/
            ctx[85]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_6(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[0].filePenilaian
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_47(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_45(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Penilaian Proposal",
        $$slots: { default: [create_default_slot_33] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_33(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download Form Penilaian";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPenilaian*/
            ctx[80]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_43(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_32(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisProposal && create_if_block_43(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        if (
          /*jenisProposal*/
          ctx[13] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[89].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[13],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[89]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        8192) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_43(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_422(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_31(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisKegiatan && create_if_block_422(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*jenisKegiatan*/
          ctx[14] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[90].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[14],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[90]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        16384) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_422(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_4(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat Mandiri";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option3, option3.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
        }
      }
    };
  }
  function create_if_block_41(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option3 = element("option");
        option3.textContent = "Riset Mandiri";
        option4 = element("option");
        option4.textContent = "Riset Eksternal";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
        option3.__value = "Riset Mandiri";
        set_input_value(option3, option3.__value);
        option4.__value = "Riset Eksternal";
        set_input_value(option4, option4.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
        insert(target, option4, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
          detach(option4);
        }
      }
    };
  }
  function create_if_block_40(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_30(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[14] === "Penelitian"
      )
        return create_if_block_41;
      return create_else_block_4;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[0].jenisSkema && create_if_block_40(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\r\n                        ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        if (
          /*jenisSkema*/
          ctx[15] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[91].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[15],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[91]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        32768) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[15]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_40(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_39(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_29(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].kelompokKeahlian && create_if_block_39(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Kelompok Keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[16]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[92]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        65536 && input.value !== /*kelompokKeahlian*/
        ctx2[16]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[16]
          );
        }
        if (
          /*error*/
          ctx2[0].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_39(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_38(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_28(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].topik && create_if_block_38(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[17]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[93]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        131072 && input.value !== /*topik*/
        ctx2[17]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[17]
          );
        }
        if (
          /*error*/
          ctx2[0].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_38(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_37(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_27(ctx) {
    let div;
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tanggalMulai && create_if_block_37(ctx)
    );
    return {
      c() {
        div = element("div");
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
        attr(div, "class", "field");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[18]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[94]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        262144) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[18]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_37(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_36(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_26(ctx) {
    let div;
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tanggalSelesai && create_if_block_36(ctx)
    );
    return {
      c() {
        div = element("div");
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
        attr(div, "class", "field");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[19]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[95]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        524288) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[19]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_36(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_35(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_25(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].biayaPenelitian && create_if_block_35(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[20]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_4*/
              ctx[96]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[97]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        1048576 && input.value !== /*biayaPenelitian*/
        ctx2[20]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[20]
          );
        }
        if (
          /*error*/
          ctx2[0].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_35(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_34(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_24(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[98](value);
    }
    let select_props = { start: "2", items: (
      /*items*/
      ctx[63]
    ) };
    if (
      /*anggotaTim*/
      ctx[21] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[21];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[0].anggotaTim && create_if_block_34(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[2] & /*items*/
        2)
          select_changes.items = /*items*/
          ctx2[63];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        2097152) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[21];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[0].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_34(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_322(ctx) {
    let each_1_anchor;
    let current;
    let each_value_8 = ensure_array_like(
      /*anggotaTim*/
      ctx[21]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        2097152 | dirty[2] & /*deleteMember*/
        32768) {
          each_value_8 = ensure_array_like(
            /*anggotaTim*/
            ctx2[21]
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_8(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_8(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_8.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_8.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_33(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-rounded is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[154].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[77]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        2097152 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[154].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_8(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[154].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[154].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[156] > 0 && create_if_block_33(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[156] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        2097152) && t1_value !== (t1_value = /*member*/
        ctx2[154].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        2097152) && t3_value !== (t3_value = /*member*/
        ctx2[154].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_31(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_23(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judul && create_if_block_31(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[22]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[99]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        4194304 && input.value !== /*judul*/
        ctx2[22]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[22]
          );
        }
        if (
          /*error*/
          ctx2[0].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_31(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_30(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].abstrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].abstrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_222(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].abstrak && create_if_block_30(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "class", "textarea");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*abstrak*/
          ctx[23]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[100]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*abstrak*/
        8388608) {
          set_input_value(
            textarea,
            /*abstrak*/
            ctx2[23]
          );
        }
        if (
          /*error*/
          ctx2[0].abstrak
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_30(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_2(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_3(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[71]?.name
      )
        return create_if_block_29;
      return create_else_block_3;
    }
    let current_block_type = select_block_type_3(ctx, [-1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[0].fileProposal && create_if_block_28(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-wzx0zq");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-wzx0zq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-wzx0zq");
        attr(p, "class", "help svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*filePpmChange*/
              ctx[83]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeProposal*/
              ctx[81]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[0].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_28(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_27(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download Proposal";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadPpm*/
              ctx[79]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeProposal*/
              ctx[81]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_3(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_29(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[71].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*$ppmFile*/
        512 && t_value !== (t_value = /*$ppmFile*/
        ctx2[71].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_28(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_21(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_27, create_else_block_2];
    const if_blocks = [];
    function select_block_type_2(ctx2, dirty) {
      if (!/*editModeProposal*/
      ctx2[65])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_2(ctx, [-1, -1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_2(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_222(ctx) {
    let field;
    let t;
    let if_block_anchor;
    let current;
    field = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_20] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*status*/
      ctx[25] > 8 && create_if_block_232(ctx)
    );
    return {
      c() {
        create_component(field.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*editModeRAB, $rabFile*/
        272 | dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
        if (
          /*status*/
          ctx2[25] > 8
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*status*/
            33554432) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_232(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(field, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_else_block3(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_5(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[70]?.name
      )
        return create_if_block_26;
      return create_else_block_1;
    }
    let current_block_type = select_block_type_5(ctx, [-1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[0].fileRAB && create_if_block_25(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-wzx0zq");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-wzx0zq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileRab");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-wzx0zq");
        attr(p, "class", "help svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileRabChange*/
              ctx[84]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeRAB*/
              ctx[82]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_5(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[0].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_25(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_24(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download RAB";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadRab*/
              ctx[78]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeRAB*/
              ctx[82]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_1(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_26(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[70]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*$rabFile*/
        256 && t_value !== (t_value = /*$rabFile*/
        ctx2[70]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_25(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_20(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_24, create_else_block3];
    const if_blocks = [];
    function select_block_type_4(ctx2, dirty) {
      if (!/*editModeRAB*/
      ctx2[66])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_4(ctx, [-1, -1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_4(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_232(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Penilaian Proposal",
        $$slots: { default: [create_default_slot_19] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_19(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download Form Penilaian";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPenilaian*/
            ctx[80]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_16(ctx) {
    let div;
    let h4;
    let t1;
    let hr;
    let t2;
    let current_block_type_index;
    let if_block0;
    let t3;
    let table;
    let thead;
    let t9;
    let current;
    const if_block_creators = [create_if_block_18, create_if_block_19];
    const if_blocks = [];
    function select_block_type_7(ctx2, dirty) {
      if (!/*view*/
      ctx2[64])
        return 0;
      if (
        /*status*/
        ctx2[25] != 8
      )
        return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type_7(ctx, [-1, -1, -1, -1, -1, -1]))) {
      if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    let if_block1 = (
      /*itemsRCR*/
      ctx[26] && create_if_block_17(ctx)
    );
    return {
      c() {
        div = element("div");
        h4 = element("h4");
        h4.textContent = "Informasi Revisi";
        t1 = space();
        hr = element("hr");
        t2 = space();
        if (if_block0)
          if_block0.c();
        t3 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%;">Evaluator</th> <th style="width: 15%;">Waktu</th></tr>`;
        t9 = space();
        if (if_block1)
          if_block1.c();
        attr(h4, "class", "title is-4");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h4);
        append(div, t1);
        append(div, hr);
        append(div, t2);
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(div, null);
        }
        append(div, t3);
        append(div, table);
        append(table, thead);
        append(table, t9);
        if (if_block1)
          if_block1.m(table, null);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_7(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx2, dirty);
          }
        } else {
          if (if_block0) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block0 = if_blocks[current_block_type_index];
            if (!if_block0) {
              if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block0.c();
            } else {
              if_block0.p(ctx2, dirty);
            }
            transition_in(if_block0, 1);
            if_block0.m(div, t3);
          } else {
            if_block0 = null;
          }
        }
        if (
          /*itemsRCR*/
          ctx2[26]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_17(ctx2);
            if_block1.c();
            if_block1.m(table, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d();
        }
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function create_if_block_19(ctx) {
    let div;
    let t1;
    let field;
    let t2;
    let br;
    let current;
    field = new Field_default({
      props: {
        name: "Catatan Revisi",
        $$slots: { default: [create_default_slot_18] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Berikan catatan revisi jika ingin revisi proposal.</p>`;
        t1 = space();
        create_component(field.$$.fragment);
        t2 = space();
        br = element("br");
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        insert(target, t1, anchor);
        mount_component(field, target, anchor);
        insert(target, t2, anchor);
        insert(target, br, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, comment*/
        16777217 | dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(t2);
          detach(br);
        }
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_18(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Catatan Revisi",
        $$slots: { default: [create_default_slot_17] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*comment*/
        16777216 | dirty[5] & /*$$scope*/
        16) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_20(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].comment + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].comment + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_18(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].comment && create_if_block_20(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "class", "textarea");
        attr(textarea, "name", "komentar");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*comment*/
          ctx[24]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler_1*/
            ctx[101]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*comment*/
        16777216) {
          set_input_value(
            textarea,
            /*comment*/
            ctx2[24]
          );
        }
        if (
          /*error*/
          ctx2[0].comment
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_20(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_17(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*comment*/
          ctx[24]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*comment*/
        16777216)
          set_data(
            t,
            /*comment*/
            ctx2[24]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_17(ctx) {
    let tbody;
    let each_value_7 = ensure_array_like(
      /*itemsRCR*/
      ctx[26]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        67108864) {
          each_value_7 = ensure_array_like(
            /*itemsRCR*/
            ctx2[26]
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_7(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_7(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_7(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[151].comment + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[151].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[151].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        67108864 && t0_value !== (t0_value = /*item*/
        ctx2[151].comment + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsRCR*/
        67108864 && t2_value !== (t2_value = /*item*/
        ctx2[151].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsRCR*/
        67108864 && t4_value !== (t4_value = /*item*/
        ctx2[151].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_15(ctx) {
    let div1;
    let h4;
    let t1;
    let hr;
    let t2;
    let field0;
    let updating_value;
    let updating_selected;
    let t3;
    let br0;
    let t4;
    let field1;
    let updating_value_1;
    let updating_selected_1;
    let t5;
    let br1;
    let t6;
    let field2;
    let updating_value_2;
    let updating_selected_2;
    let t7;
    let br2;
    let t8;
    let field3;
    let updating_value_3;
    let updating_selected_3;
    let t9;
    let div0;
    let current;
    function field0_value_binding(value) {
      ctx[102](value);
    }
    function field0_selected_binding(value) {
      ctx[103](value);
    }
    let field0_props = {
      id: "evaluatorKdept",
      name: "Ka. Departemen",
      select: true,
      view: true,
      userId: (
        /*kdeptSelected*/
        ctx[31]
      )
    };
    if (
      /*ka_departemen*/
      ctx[27] !== void 0
    ) {
      field0_props.value = /*ka_departemen*/
      ctx[27];
    }
    if (
      /*kdeptSelected*/
      ctx[31] !== void 0
    ) {
      field0_props.selected = /*kdeptSelected*/
      ctx[31];
    }
    field0 = new Field_default({ props: field0_props });
    binding_callbacks.push(() => bind(field0, "value", field0_value_binding));
    binding_callbacks.push(() => bind(field0, "selected", field0_selected_binding));
    function field1_value_binding(value) {
      ctx[104](value);
    }
    function field1_selected_binding(value) {
      ctx[105](value);
    }
    let field1_props = {
      id: "evaluatorKlppm",
      name: "Ka. LPPM",
      select: true,
      view: true,
      userId: (
        /*klppmSelected*/
        ctx[32]
      )
    };
    if (
      /*ka_lppm*/
      ctx[28] !== void 0
    ) {
      field1_props.value = /*ka_lppm*/
      ctx[28];
    }
    if (
      /*klppmSelected*/
      ctx[32] !== void 0
    ) {
      field1_props.selected = /*klppmSelected*/
      ctx[32];
    }
    field1 = new Field_default({ props: field1_props });
    binding_callbacks.push(() => bind(field1, "value", field1_value_binding));
    binding_callbacks.push(() => bind(field1, "selected", field1_selected_binding));
    function field2_value_binding(value) {
      ctx[106](value);
    }
    function field2_selected_binding(value) {
      ctx[107](value);
    }
    let field2_props = {
      id: "evaluatorReviewer",
      name: "Reviewer",
      select: true,
      view: true,
      userId: (
        /*reviewerSelected*/
        ctx[34]
      )
    };
    if (
      /*reviewer*/
      ctx[29] !== void 0
    ) {
      field2_props.value = /*reviewer*/
      ctx[29];
    }
    if (
      /*reviewerSelected*/
      ctx[34] !== void 0
    ) {
      field2_props.selected = /*reviewerSelected*/
      ctx[34];
    }
    field2 = new Field_default({ props: field2_props });
    binding_callbacks.push(() => bind(field2, "value", field2_value_binding));
    binding_callbacks.push(() => bind(field2, "selected", field2_selected_binding));
    function field3_value_binding(value) {
      ctx[108](value);
    }
    function field3_selected_binding(value) {
      ctx[109](value);
    }
    let field3_props = {
      id: "evaluatorKpk",
      name: "Ka. Pusat Kajian",
      select: true,
      view: true,
      userId: (
        /*kpkSelected*/
        ctx[33]
      )
    };
    if (
      /*ka_pusat_kajian*/
      ctx[30] !== void 0
    ) {
      field3_props.value = /*ka_pusat_kajian*/
      ctx[30];
    }
    if (
      /*kpkSelected*/
      ctx[33] !== void 0
    ) {
      field3_props.selected = /*kpkSelected*/
      ctx[33];
    }
    field3 = new Field_default({ props: field3_props });
    binding_callbacks.push(() => bind(field3, "value", field3_value_binding));
    binding_callbacks.push(() => bind(field3, "selected", field3_selected_binding));
    return {
      c() {
        div1 = element("div");
        h4 = element("h4");
        h4.textContent = "Input Evaluator";
        t1 = space();
        hr = element("hr");
        t2 = space();
        create_component(field0.$$.fragment);
        t3 = space();
        br0 = element("br");
        t4 = space();
        create_component(field1.$$.fragment);
        t5 = space();
        br1 = element("br");
        t6 = space();
        create_component(field2.$$.fragment);
        t7 = space();
        br2 = element("br");
        t8 = space();
        create_component(field3.$$.fragment);
        t9 = space();
        div0 = element("div");
        div0.innerHTML = `<p class="control"><button class="button is-success">Submit Evaluator</button></p>`;
        attr(h4, "class", "title is-4");
        attr(div0, "class", "field is-grouped is-grouped-right");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, h4);
        append(div1, t1);
        append(div1, hr);
        append(div1, t2);
        mount_component(field0, div1, null);
        append(div1, t3);
        append(div1, br0);
        append(div1, t4);
        mount_component(field1, div1, null);
        append(div1, t5);
        append(div1, br1);
        append(div1, t6);
        mount_component(field2, div1, null);
        append(div1, t7);
        append(div1, br2);
        append(div1, t8);
        mount_component(field3, div1, null);
        append(div1, t9);
        append(div1, div0);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[1] & /*kdeptSelected*/
        1)
          field0_changes.userId = /*kdeptSelected*/
          ctx2[31];
        if (!updating_value && dirty[0] & /*ka_departemen*/
        134217728) {
          updating_value = true;
          field0_changes.value = /*ka_departemen*/
          ctx2[27];
          add_flush_callback(() => updating_value = false);
        }
        if (!updating_selected && dirty[1] & /*kdeptSelected*/
        1) {
          updating_selected = true;
          field0_changes.selected = /*kdeptSelected*/
          ctx2[31];
          add_flush_callback(() => updating_selected = false);
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[1] & /*klppmSelected*/
        2)
          field1_changes.userId = /*klppmSelected*/
          ctx2[32];
        if (!updating_value_1 && dirty[0] & /*ka_lppm*/
        268435456) {
          updating_value_1 = true;
          field1_changes.value = /*ka_lppm*/
          ctx2[28];
          add_flush_callback(() => updating_value_1 = false);
        }
        if (!updating_selected_1 && dirty[1] & /*klppmSelected*/
        2) {
          updating_selected_1 = true;
          field1_changes.selected = /*klppmSelected*/
          ctx2[32];
          add_flush_callback(() => updating_selected_1 = false);
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[1] & /*reviewerSelected*/
        8)
          field2_changes.userId = /*reviewerSelected*/
          ctx2[34];
        if (!updating_value_2 && dirty[0] & /*reviewer*/
        536870912) {
          updating_value_2 = true;
          field2_changes.value = /*reviewer*/
          ctx2[29];
          add_flush_callback(() => updating_value_2 = false);
        }
        if (!updating_selected_2 && dirty[1] & /*reviewerSelected*/
        8) {
          updating_selected_2 = true;
          field2_changes.selected = /*reviewerSelected*/
          ctx2[34];
          add_flush_callback(() => updating_selected_2 = false);
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[1] & /*kpkSelected*/
        4)
          field3_changes.userId = /*kpkSelected*/
          ctx2[33];
        if (!updating_value_3 && dirty[0] & /*ka_pusat_kajian*/
        1073741824) {
          updating_value_3 = true;
          field3_changes.value = /*ka_pusat_kajian*/
          ctx2[30];
          add_flush_callback(() => updating_value_3 = false);
        }
        if (!updating_selected_3 && dirty[1] & /*kpkSelected*/
        4) {
          updating_selected_3 = true;
          field3_changes.selected = /*kpkSelected*/
          ctx2[33];
          add_flush_callback(() => updating_selected_3 = false);
        }
        field3.$set(field3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
      }
    };
  }
  function create_if_block_14(ctx) {
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let mounted;
    let dispose;
    return {
      c() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Proses";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p1, "class", "control");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        append(p0, button0);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
        append(p1, button1);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[73]
            ),
            listen(
              button1,
              "click",
              /*handlePass*/
              ctx[76]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_132(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Proses";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePass*/
            ctx[76]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_122(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Proses";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePassReviewer*/
            ctx[75]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_11(ctx) {
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Ditolak";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Proses";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-danger is-light is-outlined");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p2, "class", "control");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        append(p0, button0);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
        append(p1, button1);
        insert(target, t3, anchor);
        insert(target, p2, anchor);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[73]
            ),
            listen(
              button1,
              "click",
              /*handleDitolak*/
              ctx[74]
            ),
            listen(
              button2,
              "click",
              /*handlePass*/
              ctx[76]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
          detach(t3);
          detach(p2);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_10(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Remediasi";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*remediasi*/
            ctx[72]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_110(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let div1;
    let h60;
    let t13;
    let table0;
    let thead0;
    let t21;
    let tbody0;
    let tr1;
    let th4;
    let t23;
    let td0;
    let t24;
    let t25;
    let td1;
    let t26;
    let t27;
    let td2;
    let t28;
    let t29;
    let tr2;
    let th5;
    let t31;
    let td3;
    let t32;
    let t33;
    let td4;
    let t34;
    let t35;
    let td5;
    let t36;
    let t37;
    let tr3;
    let th6;
    let t39;
    let td6;
    let t40;
    let t41;
    let td7;
    let t42;
    let t43;
    let td8;
    let t44;
    let t45;
    let tr4;
    let th7;
    let t47;
    let td9;
    let t48;
    let t49;
    let td10;
    let t50;
    let t51;
    let td11;
    let t52;
    let t53;
    let tr5;
    let th8;
    let t55;
    let td12;
    let t56;
    let t57;
    let td13;
    let t58;
    let t59;
    let td14;
    let t60;
    let t61;
    let div2;
    let h61;
    let t63;
    let table1;
    let thead1;
    let t73;
    let tbody1;
    let t74;
    let div3;
    let h62;
    let t76;
    let table2;
    let thead2;
    let t86;
    let tbody2;
    let t87;
    let div4;
    let h63;
    let t89;
    let table3;
    let thead3;
    let t97;
    let tbody3;
    let t98;
    let div5;
    let h64;
    let t100;
    let table4;
    let thead4;
    let t108;
    let tbody4;
    let t109;
    let div6;
    let h65;
    let t111;
    let table5;
    let thead5;
    let t121;
    let tbody5;
    let t122;
    let div7;
    let h66;
    let t124;
    let table6;
    let thead6;
    let t134;
    let tbody6;
    let current;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_16] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_15] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_14] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_13] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat / Tanggal Lahir",
        $$slots: { default: [create_default_slot_122] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_11] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_10] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Nomoh Handphone",
        $$slots: { default: [create_default_slot_9] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_8] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_72] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Email",
        $$slots: { default: [create_default_slot_62] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_52] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*dataPP*/
      ctx[2] && create_if_block_7(ctx)
    );
    let if_block1 = (
      /*dataPM*/
      ctx[3] && create_if_block_6(ctx)
    );
    let if_block2 = (
      /*dataPD*/
      ctx[4] && create_if_block_52(ctx)
    );
    let if_block3 = (
      /*dataPPub*/
      ctx[5] && create_if_block_410(ctx)
    );
    let if_block4 = (
      /*dataPPB*/
      ctx[6] && create_if_block_310(ctx)
    );
    let if_block5 = (
      /*dataPHKI*/
      ctx[7] && create_if_block_210(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        div1 = element("div");
        h60 = element("h6");
        h60.textContent = "Riwayat Pendidikan";
        t13 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow">Program</th> <th class="is-narrow">S1</th> <th class="is-narrow">S2</th> <th class="is-narrow">S3</th></tr>`;
        t21 = space();
        tbody0 = element("tbody");
        tr1 = element("tr");
        th4 = element("th");
        th4.textContent = "Nama Perguruan Tinggi";
        t23 = space();
        td0 = element("td");
        t24 = text(
          /*pertiS1*/
          ctx[48]
        );
        t25 = space();
        td1 = element("td");
        t26 = text(
          /*pertiS2*/
          ctx[49]
        );
        t27 = space();
        td2 = element("td");
        t28 = text(
          /*pertiS3*/
          ctx[50]
        );
        t29 = space();
        tr2 = element("tr");
        th5 = element("th");
        th5.textContent = "Bidang Ilmu";
        t31 = space();
        td3 = element("td");
        t32 = text(
          /*bidangIlmuS1*/
          ctx[51]
        );
        t33 = space();
        td4 = element("td");
        t34 = text(
          /*bidangIlmuS2*/
          ctx[52]
        );
        t35 = space();
        td5 = element("td");
        t36 = text(
          /*bidangIlmuS3*/
          ctx[53]
        );
        t37 = space();
        tr3 = element("tr");
        th6 = element("th");
        th6.textContent = "Tahun Masuk";
        t39 = space();
        td6 = element("td");
        t40 = text(
          /*tahunMasukS1*/
          ctx[54]
        );
        t41 = space();
        td7 = element("td");
        t42 = text(
          /*tahunMasukS2*/
          ctx[55]
        );
        t43 = space();
        td8 = element("td");
        t44 = text(
          /*tahunMasukS3*/
          ctx[56]
        );
        t45 = space();
        tr4 = element("tr");
        th7 = element("th");
        th7.textContent = "Tahun Lulus";
        t47 = space();
        td9 = element("td");
        t48 = text(
          /*tahunLulusS1*/
          ctx[57]
        );
        t49 = space();
        td10 = element("td");
        t50 = text(
          /*tahunLulusS2*/
          ctx[58]
        );
        t51 = space();
        td11 = element("td");
        t52 = text(
          /*tahunLulusS3*/
          ctx[59]
        );
        t53 = space();
        tr5 = element("tr");
        th8 = element("th");
        th8.textContent = "Judul Skripsi/Tesis/Disertasi";
        t55 = space();
        td12 = element("td");
        t56 = text(
          /*judulTugasAkhirS1*/
          ctx[60]
        );
        t57 = space();
        td13 = element("td");
        t58 = text(
          /*judulTugasAkhirS2*/
          ctx[61]
        );
        t59 = space();
        td14 = element("td");
        t60 = text(
          /*judulTugasAkhirS3*/
          ctx[62]
        );
        t61 = space();
        div2 = element("div");
        h61 = element("h6");
        h61.textContent = "Pengalaman Penelitian";
        t63 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th class="is-narrow">Jumlah Rp.</th></tr>`;
        t73 = space();
        tbody1 = element("tbody");
        if (if_block0)
          if_block0.c();
        t74 = space();
        div3 = element("div");
        h62 = element("h6");
        h62.textContent = "Pengalaman Pengabdian Masyarakat";
        t76 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th class="is-narrow">Jumlah Rp.</th></tr>`;
        t86 = space();
        tbody2 = element("tbody");
        if (if_block1)
          if_block1.c();
        t87 = space();
        div4 = element("div");
        h63 = element("h6");
        h63.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t89 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t97 = space();
        tbody3 = element("tbody");
        if (if_block2)
          if_block2.c();
        t98 = space();
        div5 = element("div");
        h64 = element("h6");
        h64.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)";
        t100 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t108 = space();
        tbody4 = element("tbody");
        if (if_block3)
          if_block3.c();
        t109 = space();
        div6 = element("div");
        h65 = element("h6");
        h65.textContent = "Pengalaman Penulisan Buku";
        t111 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t121 = space();
        tbody5 = element("tbody");
        if (if_block4)
          if_block4.c();
        t122 = space();
        div7 = element("div");
        h66 = element("h6");
        h66.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t124 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t134 = space();
        tbody6 = element("tbody");
        if (if_block5)
          if_block5.c();
        attr(div0, "class", "box");
        attr(h60, "class", "title is-6");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "box");
        attr(h61, "class", "title is-6");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div2, "class", "box");
        attr(h62, "class", "title is-6");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div3, "class", "box");
        attr(h63, "class", "title is-6");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(h64, "class", "title is-6");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div5, "class", "box");
        attr(h65, "class", "title is-6");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div6, "class", "box");
        attr(h66, "class", "title is-6");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div7, "class", "box");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        mount_component(field9, div0, null);
        append(div0, t9);
        mount_component(field10, div0, null);
        append(div0, t10);
        mount_component(field11, div0, null);
        insert(target, t11, anchor);
        insert(target, div1, anchor);
        append(div1, h60);
        append(div1, t13);
        append(div1, table0);
        append(table0, thead0);
        append(table0, t21);
        append(table0, tbody0);
        append(tbody0, tr1);
        append(tr1, th4);
        append(tr1, t23);
        append(tr1, td0);
        append(td0, t24);
        append(tr1, t25);
        append(tr1, td1);
        append(td1, t26);
        append(tr1, t27);
        append(tr1, td2);
        append(td2, t28);
        append(tbody0, t29);
        append(tbody0, tr2);
        append(tr2, th5);
        append(tr2, t31);
        append(tr2, td3);
        append(td3, t32);
        append(tr2, t33);
        append(tr2, td4);
        append(td4, t34);
        append(tr2, t35);
        append(tr2, td5);
        append(td5, t36);
        append(tbody0, t37);
        append(tbody0, tr3);
        append(tr3, th6);
        append(tr3, t39);
        append(tr3, td6);
        append(td6, t40);
        append(tr3, t41);
        append(tr3, td7);
        append(td7, t42);
        append(tr3, t43);
        append(tr3, td8);
        append(td8, t44);
        append(tbody0, t45);
        append(tbody0, tr4);
        append(tr4, th7);
        append(tr4, t47);
        append(tr4, td9);
        append(td9, t48);
        append(tr4, t49);
        append(tr4, td10);
        append(td10, t50);
        append(tr4, t51);
        append(tr4, td11);
        append(td11, t52);
        append(tbody0, t53);
        append(tbody0, tr5);
        append(tr5, th8);
        append(tr5, t55);
        append(tr5, td12);
        append(td12, t56);
        append(tr5, t57);
        append(tr5, td13);
        append(td13, t58);
        append(tr5, t59);
        append(tr5, td14);
        append(td14, t60);
        insert(target, t61, anchor);
        insert(target, div2, anchor);
        append(div2, h61);
        append(div2, t63);
        append(div2, table1);
        append(table1, thead1);
        append(table1, t73);
        append(table1, tbody1);
        if (if_block0)
          if_block0.m(tbody1, null);
        insert(target, t74, anchor);
        insert(target, div3, anchor);
        append(div3, h62);
        append(div3, t76);
        append(div3, table2);
        append(table2, thead2);
        append(table2, t86);
        append(table2, tbody2);
        if (if_block1)
          if_block1.m(tbody2, null);
        insert(target, t87, anchor);
        insert(target, div4, anchor);
        append(div4, h63);
        append(div4, t89);
        append(div4, table3);
        append(table3, thead3);
        append(table3, t97);
        append(table3, tbody3);
        if (if_block2)
          if_block2.m(tbody3, null);
        insert(target, t98, anchor);
        insert(target, div5, anchor);
        append(div5, h64);
        append(div5, t100);
        append(div5, table4);
        append(table4, thead4);
        append(table4, t108);
        append(table4, tbody4);
        if (if_block3)
          if_block3.m(tbody4, null);
        insert(target, t109, anchor);
        insert(target, div6, anchor);
        append(div6, h65);
        append(div6, t111);
        append(div6, table5);
        append(table5, thead5);
        append(table5, t121);
        append(table5, tbody5);
        if (if_block4)
          if_block4.m(tbody5, null);
        insert(target, t122, anchor);
        insert(target, div7, anchor);
        append(div7, h66);
        append(div7, t124);
        append(div7, table6);
        append(table6, thead6);
        append(table6, t134);
        append(table6, tbody6);
        if (if_block5)
          if_block5.m(tbody6, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[1] & /*namaLengkap*/
        16 | dirty[5] & /*$$scope*/
        16) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[1] & /*jabatanFungsional*/
        32 | dirty[5] & /*$$scope*/
        16) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[1] & /*nip*/
        64 | dirty[5] & /*$$scope*/
        16) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[1] & /*nidn*/
        128 | dirty[5] & /*$$scope*/
        16) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[1] & /*tanggalLahir, tempatLahir*/
        768 | dirty[5] & /*$$scope*/
        16) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[1] & /*alamatRumah*/
        1024 | dirty[5] & /*$$scope*/
        16) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[1] & /*telpFaxRumah*/
        2048 | dirty[5] & /*$$scope*/
        16) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[1] & /*nomorHandphone*/
        4096 | dirty[5] & /*$$scope*/
        16) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[1] & /*alamatKantor*/
        8192 | dirty[5] & /*$$scope*/
        16) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[1] & /*telpFaxKantor*/
        16384 | dirty[5] & /*$$scope*/
        16) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[1] & /*email*/
        32768 | dirty[5] & /*$$scope*/
        16) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[1] & /*mataKuliah*/
        65536 | dirty[5] & /*$$scope*/
        16) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (!current || dirty[1] & /*pertiS1*/
        131072)
          set_data(
            t24,
            /*pertiS1*/
            ctx2[48]
          );
        if (!current || dirty[1] & /*pertiS2*/
        262144)
          set_data(
            t26,
            /*pertiS2*/
            ctx2[49]
          );
        if (!current || dirty[1] & /*pertiS3*/
        524288)
          set_data(
            t28,
            /*pertiS3*/
            ctx2[50]
          );
        if (!current || dirty[1] & /*bidangIlmuS1*/
        1048576)
          set_data(
            t32,
            /*bidangIlmuS1*/
            ctx2[51]
          );
        if (!current || dirty[1] & /*bidangIlmuS2*/
        2097152)
          set_data(
            t34,
            /*bidangIlmuS2*/
            ctx2[52]
          );
        if (!current || dirty[1] & /*bidangIlmuS3*/
        4194304)
          set_data(
            t36,
            /*bidangIlmuS3*/
            ctx2[53]
          );
        if (!current || dirty[1] & /*tahunMasukS1*/
        8388608)
          set_data(
            t40,
            /*tahunMasukS1*/
            ctx2[54]
          );
        if (!current || dirty[1] & /*tahunMasukS2*/
        16777216)
          set_data(
            t42,
            /*tahunMasukS2*/
            ctx2[55]
          );
        if (!current || dirty[1] & /*tahunMasukS3*/
        33554432)
          set_data(
            t44,
            /*tahunMasukS3*/
            ctx2[56]
          );
        if (!current || dirty[1] & /*tahunLulusS1*/
        67108864)
          set_data(
            t48,
            /*tahunLulusS1*/
            ctx2[57]
          );
        if (!current || dirty[1] & /*tahunLulusS2*/
        134217728)
          set_data(
            t50,
            /*tahunLulusS2*/
            ctx2[58]
          );
        if (!current || dirty[1] & /*tahunLulusS3*/
        268435456)
          set_data(
            t52,
            /*tahunLulusS3*/
            ctx2[59]
          );
        if (!current || dirty[1] & /*judulTugasAkhirS1*/
        536870912)
          set_data(
            t56,
            /*judulTugasAkhirS1*/
            ctx2[60]
          );
        if (!current || dirty[1] & /*judulTugasAkhirS2*/
        1073741824)
          set_data(
            t58,
            /*judulTugasAkhirS2*/
            ctx2[61]
          );
        if (!current || dirty[2] & /*judulTugasAkhirS3*/
        1)
          set_data(
            t60,
            /*judulTugasAkhirS3*/
            ctx2[62]
          );
        if (
          /*dataPP*/
          ctx2[2]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_7(ctx2);
            if_block0.c();
            if_block0.m(tbody1, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*dataPM*/
          ctx2[3]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_6(ctx2);
            if_block1.c();
            if_block1.m(tbody2, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*dataPD*/
          ctx2[4]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_52(ctx2);
            if_block2.c();
            if_block2.m(tbody3, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*dataPPub*/
          ctx2[5]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_410(ctx2);
            if_block3.c();
            if_block3.m(tbody4, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*dataPPB*/
          ctx2[6]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_310(ctx2);
            if_block4.c();
            if_block4.m(tbody5, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*dataPHKI*/
          ctx2[7]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_210(ctx2);
            if_block5.c();
            if_block5.m(tbody6, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t11);
          detach(div1);
          detach(t61);
          detach(div2);
          detach(t74);
          detach(div3);
          detach(t87);
          detach(div4);
          detach(t98);
          detach(div5);
          detach(t109);
          detach(div6);
          detach(t122);
          detach(div7);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
      }
    };
  }
  function create_default_slot_16(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*namaLengkap*/
          ctx[35]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        16)
          set_data(
            t,
            /*namaLengkap*/
            ctx2[35]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_15(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jabatanFungsional*/
          ctx[36]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        32)
          set_data(
            t,
            /*jabatanFungsional*/
            ctx2[36]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_14(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nip*/
          ctx[37]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        64)
          set_data(
            t,
            /*nip*/
            ctx2[37]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_13(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nidn*/
          ctx[38]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        128)
          set_data(
            t,
            /*nidn*/
            ctx2[38]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_122(ctx) {
    let t0;
    let t1;
    let t2;
    return {
      c() {
        t0 = text(
          /*tempatLahir*/
          ctx[39]
        );
        t1 = text(" / ");
        t2 = text(
          /*tanggalLahir*/
          ctx[40]
        );
      },
      m(target, anchor) {
        insert(target, t0, anchor);
        insert(target, t1, anchor);
        insert(target, t2, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        256)
          set_data(
            t0,
            /*tempatLahir*/
            ctx2[39]
          );
        if (dirty[1] & /*tanggalLahir*/
        512)
          set_data(
            t2,
            /*tanggalLahir*/
            ctx2[40]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
        }
      }
    };
  }
  function create_default_slot_11(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*alamatRumah*/
          ctx[41]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        1024)
          set_data(
            t,
            /*alamatRumah*/
            ctx2[41]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_10(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*telpFaxRumah*/
          ctx[42]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxRumah*/
        2048)
          set_data(
            t,
            /*telpFaxRumah*/
            ctx2[42]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_9(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nomorHandphone*/
          ctx[43]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nomorHandphone*/
        4096)
          set_data(
            t,
            /*nomorHandphone*/
            ctx2[43]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_8(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*alamatKantor*/
          ctx[44]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatKantor*/
        8192)
          set_data(
            t,
            /*alamatKantor*/
            ctx2[44]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_72(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*telpFaxKantor*/
          ctx[45]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxKantor*/
        16384)
          set_data(
            t,
            /*telpFaxKantor*/
            ctx2[45]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_62(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*email*/
          ctx[46]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*email*/
        32768)
          set_data(
            t,
            /*email*/
            ctx2[46]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_8(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*mataKuliah*/
      ctx[47]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        65536) {
          each_value_6 = ensure_array_like(
            /*mataKuliah*/
            ctx2[47]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_6(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_6(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_6(ctx) {
    let tr;
    let td;
    let t0_value = (
      /*matkul*/
      ctx[148].label + ""
    );
    let t0;
    let t1;
    return {
      c() {
        tr = element("tr");
        td = element("td");
        t0 = text(t0_value);
        t1 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td);
        append(td, t0);
        append(tr, t1);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        65536 && t0_value !== (t0_value = /*matkul*/
        ctx2[148].label + ""))
          set_data(t0, t0_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_52(ctx) {
    let table;
    let thead;
    let t1;
    let tbody;
    let if_block = (
      /*mataKuliah*/
      ctx[47] && /*mataKuliah*/
      ctx[47].length > 0 && create_if_block_8(ctx)
    );
    return {
      c() {
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Mata Kuliah</th></tr>`;
        t1 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, table, anchor);
        append(table, thead);
        append(table, t1);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
      },
      p(ctx2, dirty) {
        if (
          /*mataKuliah*/
          ctx2[47] && /*mataKuliah*/
          ctx2[47].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_8(ctx2);
            if_block.c();
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_7(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        4) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_5(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_5(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_5(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[145].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[145].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[145].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[145].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[145].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        4 && t0_value !== (t0_value = /*PP*/
        ctx2[145].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPP*/
        4 && t2_value !== (t2_value = /*PP*/
        ctx2[145].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPP*/
        4 && t4_value !== (t4_value = /*PP*/
        ctx2[145].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPP*/
        4 && t6_value !== (t6_value = /*PP*/
        ctx2[145].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPP*/
        4 && t8_value !== (t8_value = /*PP*/
        ctx2[145].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_6(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        8) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_4(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_4(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_4(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[142].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[142].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[142].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[142].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[142].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        8 && t0_value !== (t0_value = /*PM*/
        ctx2[142].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPM*/
        8 && t2_value !== (t2_value = /*PM*/
        ctx2[142].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPM*/
        8 && t4_value !== (t4_value = /*PM*/
        ctx2[142].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPM*/
        8 && t6_value !== (t6_value = /*PM*/
        ctx2[142].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPM*/
        8 && t8_value !== (t8_value = /*PM*/
        ctx2[142].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_52(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[4]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        16) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[4]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_3(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_3(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_3(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[139].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[139].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[139].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[139].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        16 && t0_value !== (t0_value = /*PD*/
        ctx2[139].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPD*/
        16 && t2_value !== (t2_value = /*PD*/
        ctx2[139].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPD*/
        16 && t4_value !== (t4_value = /*PD*/
        ctx2[139].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPD*/
        16 && t6_value !== (t6_value = /*PD*/
        ctx2[139].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_410(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        32) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_2(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_2(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[136].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[136].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[136].nama_jurnal + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[136].impact + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        32 && t0_value !== (t0_value = /*PPub*/
        ctx2[136].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPPub*/
        32 && t2_value !== (t2_value = /*PPub*/
        ctx2[136].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPPub*/
        32 && t4_value !== (t4_value = /*PPub*/
        ctx2[136].nama_jurnal + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPPub*/
        32 && t6_value !== (t6_value = /*PPub*/
        ctx2[136].impact + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_310(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[6]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        64) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[6]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_1(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_1(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[133].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[133].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[133].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[133].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[133].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        64 && t0_value !== (t0_value = /*PPB*/
        ctx2[133].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPPB*/
        64 && t2_value !== (t2_value = /*PPB*/
        ctx2[133].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPPB*/
        64 && t4_value !== (t4_value = /*PPB*/
        ctx2[133].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPPB*/
        64 && t6_value !== (t6_value = /*PPB*/
        ctx2[133].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPPB*/
        64 && t8_value !== (t8_value = /*PPB*/
        ctx2[133].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_210(ctx) {
    let each_1_anchor;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        128) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context4(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block4(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block4(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[130].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[130].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[130].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[130].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[130].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        128 && t0_value !== (t0_value = /*PHKI*/
        ctx2[130].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPHKI*/
        128 && t2_value !== (t2_value = /*PHKI*/
        ctx2[130].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPHKI*/
        128 && t4_value !== (t4_value = /*PHKI*/
        ctx2[130].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPHKI*/
        128 && t6_value !== (t6_value = /*PHKI*/
        ctx2[130].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPHKI*/
        128 && t8_value !== (t8_value = /*PHKI*/
        ctx2[130].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_48(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let t6;
    let if_block1_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[67] === true && create_if_block_9(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[68] === true && create_if_block_110(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Detail Proposal";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas PPM</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Biodata Peneliti</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[67]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[68]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[86]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[87]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1*/
        32) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[67]
          );
        }
        if (!current || dirty[2] & /*tab2*/
        64) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[68]
          );
        }
        if (
          /*tab1*/
          ctx2[67] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1*/
            32) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_9(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[68] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[2] & /*tab2*/
            64) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_110(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t5);
          detach(t6);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_310(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_210(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berikan catatan revisi jika ingin revisi proposal.";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_110(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum mengupload file penilaian proposal";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot6(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum menambahkan evaluator pada proposal";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment26(ctx) {
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let t2;
    let modalerror2;
    let updating_show_2;
    let t3;
    let modalerror3;
    let updating_show_3;
    let current;
    let if_block = (
      /*data*/
      ctx[1] && create_if_block5(ctx)
    );
    function modalerror0_show_binding(value) {
      ctx[110](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_310] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[8] !== void 0
    ) {
      modalerror0_props.show = /*showModalError*/
      ctx[8];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[111](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_210] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorRevisi*/
      ctx[9] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorRevisi*/
      ctx[9];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    function modalerror2_show_binding(value) {
      ctx[112](value);
    }
    let modalerror2_props = {
      $$slots: { default: [create_default_slot_110] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorPassReviewer*/
      ctx[10] !== void 0
    ) {
      modalerror2_props.show = /*showModalErrorPassReviewer*/
      ctx[10];
    }
    modalerror2 = new Modalerror_default({ props: modalerror2_props });
    binding_callbacks.push(() => bind(modalerror2, "show", modalerror2_show_binding));
    function modalerror3_show_binding(value) {
      ctx[113](value);
    }
    let modalerror3_props = {
      $$slots: { default: [create_default_slot6] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorInputEvaluator*/
      ctx[11] !== void 0
    ) {
      modalerror3_props.show = /*showModalErrorInputEvaluator*/
      ctx[11];
    }
    modalerror3 = new Modalerror_default({ props: modalerror3_props });
    binding_callbacks.push(() => bind(modalerror3, "show", modalerror3_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
        t2 = space();
        create_component(modalerror2.$$.fragment);
        t3 = space();
        create_component(modalerror3.$$.fragment);
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modalerror2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modalerror3, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*data*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*data*/
            2) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block5(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        const modalerror0_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalError*/
        256) {
          updating_show = true;
          modalerror0_changes.show = /*showModalError*/
          ctx2[8];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorRevisi*/
        512) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorRevisi*/
          ctx2[9];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
        const modalerror2_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          modalerror2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[0] & /*showModalErrorPassReviewer*/
        1024) {
          updating_show_2 = true;
          modalerror2_changes.show = /*showModalErrorPassReviewer*/
          ctx2[10];
          add_flush_callback(() => updating_show_2 = false);
        }
        modalerror2.$set(modalerror2_changes);
        const modalerror3_changes = {};
        if (dirty[5] & /*$$scope*/
        16) {
          modalerror3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[0] & /*showModalErrorInputEvaluator*/
        2048) {
          updating_show_3 = true;
          modalerror3_changes.show = /*showModalErrorInputEvaluator*/
          ctx2[11];
          add_flush_callback(() => updating_show_3 = false);
        }
        modalerror3.$set(modalerror3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(modalerror2.$$.fragment, local);
        transition_in(modalerror3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(modalerror2.$$.fragment, local);
        transition_out(modalerror3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
        }
        if (if_block)
          if_block.d(detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        destroy_component(modalerror2, detaching);
        destroy_component(modalerror3, detaching);
      }
    };
  }
  function isEdit(code) {
    const edit2 = [0, 1, 3, 5, 7, 9];
    return edit2.some((x) => x === code);
  }
  function isObjectEmpty(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function formatRupiah(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance21($$self, $$props, $$invalidate) {
    let $penilaianFile;
    let $rabFile;
    let $ppmFile;
    let $apiURL;
    let $route;
    component_subscribe($$self, penilaianFile, ($$value) => $$invalidate(69, $penilaianFile = $$value));
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(70, $rabFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(71, $ppmFile = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(122, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(123, $route = $$value));
    let { params } = $$props;
    const id = params["1"];
    let error = {};
    const idEvaluator = localStorage.getItem("id");
    let data2, dataGP, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let showModalError = false;
    let showModalErrorRevisi = false;
    let showModalErrorPassReviewer = false;
    let showModalErrorInputEvaluator = false;
    let isLoading = false;
    let randomPenilaianFileName = "";
    let jenisProposal;
    let jenisKegiatan;
    let jenisSkema;
    let kelompokKeahlian;
    let topik;
    let tanggalMulai;
    let tanggalSelesai;
    let biayaPenelitian;
    let anggotaTim = [];
    let judul;
    let abstrak;
    let isi;
    let comment;
    let status;
    let itemsRCR;
    let ka_departemen;
    let ka_lppm;
    let reviewer;
    let ka_pusat_kajian;
    let kdeptSelected2;
    let klppmSelected2;
    let kpkSelected2;
    let reviewerSelected2;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email3, mataKuliah = [];
    let pertiS1, pertiS2, pertiS3, bidangIlmuS1, bidangIlmuS2, bidangIlmuS3, tahunMasukS1, tahunMasukS2, tahunMasukS3, tahunLulusS1, tahunLulusS2, tahunLulusS3, judulTugasAkhirS1, judulTugasAkhirS2, judulTugasAkhirS3;
    let uidProposal;
    let fileRab;
    let filePpm;
    let items = [];
    let file;
    let view;
    let editModeProposal = false;
    let editModeRAB = false;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      $$invalidate(27, ka_departemen = await findRole(11));
      $$invalidate(28, ka_lppm = await findRole(12));
      $$invalidate(30, ka_pusat_kajian = await findRole(13));
      $$invalidate(29, reviewer = await findRole(10));
      const response = await fetch($apiURL + "/ppm/" + id, { method: "GET", headers });
      const result = await response.json();
      $$invalidate(64, view = !isEdit(result.status));
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(1, data2 = result);
          ppmId = data2.id;
          uidProposal = data2.uid;
          $$invalidate(13, jenisProposal = data2.jenis_proposal);
          $$invalidate(14, jenisKegiatan = data2.jenis_kegiatan);
          $$invalidate(15, jenisSkema = data2.jenis_skema);
          $$invalidate(16, kelompokKeahlian = data2.kelompok_keahlian);
          $$invalidate(17, topik = data2.topik);
          $$invalidate(18, tanggalMulai = data2.tanggal_mulai);
          $$invalidate(19, tanggalSelesai = data2.tanggal_selesai);
          $$invalidate(20, biayaPenelitian = data2.biaya_penelitian);
          $$invalidate(21, anggotaTim = typeof data2.anggota_tim === "string" ? JSON.parse(data2.anggota_tim) : data2.anggota_tim);
          $$invalidate(22, judul = data2.judul);
          $$invalidate(23, abstrak = data2.abstrak);
          isi = data2.isi;
          $$invalidate(24, comment = data2.comment);
          $$invalidate(25, status = data2.status);
          $$invalidate(31, kdeptSelected2 = data2.uid_kdept);
          $$invalidate(32, klppmSelected2 = data2.uid_klppm);
          $$invalidate(33, kpkSelected2 = data2.uid_kpk);
          $$invalidate(34, reviewerSelected2 = data2.uid_reviewer);
          randomRabFileName = data2.random_rab_file_name;
          randomPpmFileName = data2.random_ppm_file_name;
          randomPenilaianFileNamedb = data2.random_penilaian_file_name;
        }
      }
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      let resultPenilaianChar = "";
      for (let i = 0; i < 30; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultPenilaianChar += characters.charAt(randomIndex);
      }
      randomPenilaianFileName = resultPenilaianChar;
      const responseEvl = await fetch($apiURL + "/user/" + idEvaluator, { method: "GET", headers });
      const resultEvl = await responseEvl.json();
      if (resultEvl.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseEvl.ok) {
          dataEvl = resultEvl;
          namaLengkapEvl = dataEvl.nama_lengkap;
        }
      }
      const responseRCR = await fetch($apiURL + "/riwayatCatatanRevisi/" + ppmId, { method: "GET", headers });
      const dataRCR = await responseRCR.json();
      if (dataRCR.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRCR.ok) {
          $$invalidate(26, itemsRCR = dataRCR.dbData);
        }
      }
      const responseGP = await fetch($apiURL + "/user/" + uidProposal, { method: "GET", headers });
      const resultGP = await responseGP.json();
      if (resultGP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseGP.ok) {
          dataGP = resultGP;
          idProfile = dataGP.id;
          idUser = dataGP.uid;
          $$invalidate(35, namaLengkap = dataGP.nama_lengkap);
          $$invalidate(36, jabatanFungsional = dataGP.jabatan_fungsional);
          $$invalidate(37, nip = dataGP.nip);
          $$invalidate(38, nidn = dataGP.nidn);
          $$invalidate(39, tempatLahir = dataGP.tempat_lahir);
          $$invalidate(40, tanggalLahir = dataGP.tanggal_lahir);
          $$invalidate(41, alamatRumah = dataGP.alamat_rumah);
          $$invalidate(42, telpFaxRumah = dataGP.telp_fax_rumah);
          $$invalidate(43, nomorHandphone = dataGP.nomor_handphone);
          $$invalidate(44, alamatKantor = dataGP.alamat_kantor);
          $$invalidate(45, telpFaxKantor = dataGP.telp_fax_kantor);
          $$invalidate(46, email3 = dataGP.email);
          $$invalidate(47, mataKuliah = typeof dataGP.mata_kuliah === "string" ? JSON.parse(dataGP.mata_kuliah) : dataGP.mata_kuliah || []);
        }
      }
      const responseRP = await fetch($apiURL + "/riwayatpendidikan/" + uidProposal, { method: "GET", headers });
      const dataRP = await responseRP.json();
      if (dataRP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRP.ok) {
          $$invalidate(48, pertiS1 = dataRP.nama_perti_s1);
          $$invalidate(49, pertiS2 = dataRP.nama_perti_s2);
          $$invalidate(50, pertiS3 = dataRP.nama_perti_s3);
          $$invalidate(51, bidangIlmuS1 = dataRP.bidang_ilmu_s1);
          $$invalidate(52, bidangIlmuS2 = dataRP.bidang_ilmu_s2);
          $$invalidate(53, bidangIlmuS3 = dataRP.bidang_ilmu_s3);
          $$invalidate(54, tahunMasukS1 = dataRP.tahun_masuk_s1);
          $$invalidate(55, tahunMasukS2 = dataRP.tahun_masuk_s2);
          $$invalidate(56, tahunMasukS3 = dataRP.tahun_masuk_s3);
          $$invalidate(57, tahunLulusS1 = dataRP.tahun_lulus_s1);
          $$invalidate(58, tahunLulusS2 = dataRP.tahun_lulus_s2);
          $$invalidate(59, tahunLulusS3 = dataRP.tahun_lulus_s3);
          $$invalidate(60, judulTugasAkhirS1 = dataRP.judul_tugasakhir_s1);
          $$invalidate(61, judulTugasAkhirS2 = dataRP.judul_tugasakhir_s2);
          $$invalidate(62, judulTugasAkhirS3 = dataRP.judul_tugasakhir_s3);
        }
      }
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + uidProposal, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (resultPP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(2, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + uidProposal, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (resultPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(3, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + uidProposal, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (resultPD.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(4, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + uidProposal, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (resultPPub.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(5, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + uidProposal, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (resultPPB.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(6, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + uidProposal, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (resultPHKI.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(7, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
      const responsee = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const results = await responsee.json();
      if (results.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsee.ok) {
          listUser = results;
          for (const [key, value] of Object.entries(listUser)) {
            $$invalidate(63, items = [
              ...items,
              {
                value: value.uid,
                label: value.nama_lengkap
              }
            ]);
          }
        } else {
          console.log(responsee);
        }
      }
    });
    async function remediasi() {
      $$invalidate(0, error = {});
      $$invalidate(12, isLoading = true);
      const readerRab = new FileReader();
      const readerPpm = new FileReader();
      const payload = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        id,
        judul,
        abstrak,
        comment: "",
        status: Number(data2.status) + 1,
        kdeptSelected: kdeptSelected2,
        klppmSelected: klppmSelected2,
        kpkSelected: kpkSelected2,
        reviewerSelected: reviewerSelected2,
        randomRabFileName,
        randomPpmFileName
      };
      if (editModeProposal) {
        if (isObjectEmpty($ppmFile)) {
          $$invalidate(0, error["fileProposal"] = `*`, error);
        }
      }
      if (editModeRAB) {
        if (isObjectEmpty($rabFile)) {
          $$invalidate(0, error["fileRAB"] = `*`, error);
        }
      }
      for (const [key, value] of Object.entries(payload)) {
        if (!["comment"].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(8, showModalError = true);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            randomPpmFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            randomRabFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileRab)
          readerRab.readAsDataURL(fileRab);
        const response = await fetch($apiURL + "/ppm", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/admin/proposalmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handleRevisi() {
      $$invalidate(0, error = {});
      $$invalidate(12, isLoading = true);
      let payload = {
        comment,
        status: Number(data2.status) - 1,
        id
      };
      const payloadCttnRevisi = { ppmId, comment, namaLengkapEvl };
      if (!payload.comment) {
        $$invalidate(0, error.comment = `This field is required`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(9, showModalErrorRevisi = true);
      } else {
        const responseRev = await fetch($apiURL + "/riwayatCatatanRevisi", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadCttnRevisi)
        });
        const resultRev = await responseRev.json();
        if (resultRev.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (!responseRev.ok) {
            console.log(responseRev);
          }
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/admin/proposalmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handleDitolak() {
      $$invalidate(12, isLoading = true);
      const payload = {
        comment: "",
        status: Number(data2.status) + 1,
        id
      };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/admin/proposalmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handlePassReviewer() {
      $$invalidate(0, error = {});
      $$invalidate(12, isLoading = true);
      const readerPenilaian = new FileReader();
      const payload = {
        comment: "",
        status: Number(data2.status) + 2,
        randomPenilaianFileName,
        id
      };
      if (isObjectEmpty($penilaianFile)) {
        $$invalidate(0, error["filePenilaian"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(10, showModalErrorPassReviewer = true);
      } else {
        if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
          readerPenilaian.onloadend = async () => {
            const base64Data = readerPenilaian.result.split(",")[1];
            const payloadPenilaianFile = {
              filePenilaian: {
                name: filePenilaian.name,
                type: filePenilaian.type,
                data: base64Data
              },
              randomPenilaianFileName
            };
            try {
              const responseUpload = await fetch($apiURL + "/uploadPenilaian", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadPenilaianFile)
              });
              const resultUpload = await responseUpload.json();
              if (responseUpload.status === 401) {
                location.pathname = "/tokenexpired";
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
            }
          };
          readerPenilaian.readAsDataURL(filePenilaian);
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/admin/proposalmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handlePass() {
      $$invalidate(12, isLoading = true);
      let payload = {
        comment: "",
        status: Number(data2.status) + 2,
        id
      };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/admin/proposalmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(12, isLoading = false);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(21, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    async function handleDownloadRab(e) {
      let filename = "RAB_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadRab/${randomRabFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPpm(e) {
      let filename = "Proposal_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadPpm/${randomPpmFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPenilaian(e) {
      let filename = "Penilaian Proposal_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadPenilaian/${randomPenilaianFileNamedb}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    let options;
    async function findRole(role) {
      const response = await fetch($apiURL + "/role/" + role, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          options = result;
          return options;
        } else {
          console.log(response);
        }
      }
    }
    function toggleEditModeProposal() {
      $$invalidate(65, editModeProposal = !editModeProposal);
    }
    function toggleEditModeRAB() {
      $$invalidate(66, editModeRAB = !editModeRAB);
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function filePenilaianChange(e) {
      filePenilaian = e.target.files[0];
      set_store_value(penilaianFile, $penilaianFile = e.target.files[0], $penilaianFile);
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(67, tab1 = true);
      $$invalidate(68, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(67, tab1 = false);
      $$invalidate(68, tab2 = true);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(13, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(14, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(15, jenisSkema);
    }
    function input_input_handler() {
      kelompokKeahlian = this.value;
      $$invalidate(16, kelompokKeahlian);
    }
    function input_input_handler_1() {
      topik = this.value;
      $$invalidate(17, topik);
    }
    function input_input_handler_2() {
      tanggalMulai = this.value;
      $$invalidate(18, tanggalMulai);
    }
    function input_input_handler_3() {
      tanggalSelesai = this.value;
      $$invalidate(19, tanggalSelesai);
    }
    function input_input_handler_4() {
      biayaPenelitian = this.value;
      $$invalidate(20, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(20, biayaPenelitian = formatRupiah(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(21, anggotaTim);
    }
    function input_input_handler_5() {
      judul = this.value;
      $$invalidate(22, judul);
    }
    function textarea_input_handler() {
      abstrak = this.value;
      $$invalidate(23, abstrak);
    }
    function textarea_input_handler_1() {
      comment = this.value;
      $$invalidate(24, comment);
    }
    function field0_value_binding(value) {
      ka_departemen = value;
      $$invalidate(27, ka_departemen);
    }
    function field0_selected_binding(value) {
      kdeptSelected2 = value;
      $$invalidate(31, kdeptSelected2);
    }
    function field1_value_binding(value) {
      ka_lppm = value;
      $$invalidate(28, ka_lppm);
    }
    function field1_selected_binding(value) {
      klppmSelected2 = value;
      $$invalidate(32, klppmSelected2);
    }
    function field2_value_binding(value) {
      reviewer = value;
      $$invalidate(29, reviewer);
    }
    function field2_selected_binding(value) {
      reviewerSelected2 = value;
      $$invalidate(34, reviewerSelected2);
    }
    function field3_value_binding(value) {
      ka_pusat_kajian = value;
      $$invalidate(30, ka_pusat_kajian);
    }
    function field3_selected_binding(value) {
      kpkSelected2 = value;
      $$invalidate(33, kpkSelected2);
    }
    function modalerror0_show_binding(value) {
      showModalError = value;
      $$invalidate(8, showModalError);
    }
    function modalerror1_show_binding(value) {
      showModalErrorRevisi = value;
      $$invalidate(9, showModalErrorRevisi);
    }
    function modalerror2_show_binding(value) {
      showModalErrorPassReviewer = value;
      $$invalidate(10, showModalErrorPassReviewer);
    }
    function modalerror3_show_binding(value) {
      showModalErrorInputEvaluator = value;
      $$invalidate(11, showModalErrorInputEvaluator);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(88, params = $$props2.params);
    };
    return [
      error,
      data2,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      showModalError,
      showModalErrorRevisi,
      showModalErrorPassReviewer,
      showModalErrorInputEvaluator,
      isLoading,
      jenisProposal,
      jenisKegiatan,
      jenisSkema,
      kelompokKeahlian,
      topik,
      tanggalMulai,
      tanggalSelesai,
      biayaPenelitian,
      anggotaTim,
      judul,
      abstrak,
      comment,
      status,
      itemsRCR,
      ka_departemen,
      ka_lppm,
      reviewer,
      ka_pusat_kajian,
      kdeptSelected2,
      klppmSelected2,
      kpkSelected2,
      reviewerSelected2,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email3,
      mataKuliah,
      pertiS1,
      pertiS2,
      pertiS3,
      bidangIlmuS1,
      bidangIlmuS2,
      bidangIlmuS3,
      tahunMasukS1,
      tahunMasukS2,
      tahunMasukS3,
      tahunLulusS1,
      tahunLulusS2,
      tahunLulusS3,
      judulTugasAkhirS1,
      judulTugasAkhirS2,
      judulTugasAkhirS3,
      items,
      view,
      editModeProposal,
      editModeRAB,
      tab1,
      tab2,
      $penilaianFile,
      $rabFile,
      $ppmFile,
      remediasi,
      handleRevisi,
      handleDitolak,
      handlePassReviewer,
      handlePass,
      deleteMember,
      handleDownloadRab,
      handleDownloadPpm,
      handleDownloadPenilaian,
      toggleEditModeProposal,
      toggleEditModeRAB,
      filePpmChange,
      fileRabChange,
      filePenilaianChange,
      clicktab1,
      clicktab2,
      params,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      keyup_handler,
      select_result_binding,
      input_input_handler_5,
      textarea_input_handler,
      textarea_input_handler_1,
      field0_value_binding,
      field0_selected_binding,
      field1_value_binding,
      field1_selected_binding,
      field2_value_binding,
      field2_selected_binding,
      field3_value_binding,
      field3_selected_binding,
      modalerror0_show_binding,
      modalerror1_show_binding,
      modalerror2_show_binding,
      modalerror3_show_binding
    ];
  }
  var Detailproposal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance21, create_fragment26, safe_not_equal, { params: 88 }, null, [-1, -1, -1, -1, -1, -1]);
    }
  };
  var detailproposal_default = Detailproposal;

  // src/pages/admin/home.svelte
  init_define_process();
  function create_default_slot7(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div16;
    let div3;
    let div2;
    let div0;
    let icon0;
    let t3;
    let div1;
    let p0;
    let t5;
    let p1;
    let t6;
    let t7;
    let div7;
    let div6;
    let div4;
    let icon1;
    let t8;
    let div5;
    let p2;
    let t10;
    let p3;
    let t11;
    let t12;
    let div11;
    let div10;
    let div8;
    let icon2;
    let t13;
    let div9;
    let t17;
    let div15;
    let div14;
    let div12;
    let icon3;
    let t18;
    let div13;
    let current;
    icon0 = new Icon_default({
      props: { id: "logo", src: penelitian, size: "2" }
    });
    icon1 = new Icon_default({
      props: { id: "logo", src: pengmas, size: "2" }
    });
    icon2 = new Icon_default({
      props: { id: "logo", src: jurnal, size: "2" }
    });
    icon3 = new Icon_default({
      props: { id: "logo", src: copyright, size: "2" }
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Dashboard";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div16 = element("div");
        div3 = element("div");
        div2 = element("div");
        div0 = element("div");
        create_component(icon0.$$.fragment);
        t3 = space();
        div1 = element("div");
        p0 = element("p");
        p0.textContent = "Penelitian";
        t5 = space();
        p1 = element("p");
        t6 = text(
          /*penelitianCounter*/
          ctx[0]
        );
        t7 = space();
        div7 = element("div");
        div6 = element("div");
        div4 = element("div");
        create_component(icon1.$$.fragment);
        t8 = space();
        div5 = element("div");
        p2 = element("p");
        p2.textContent = "Pengmas";
        t10 = space();
        p3 = element("p");
        t11 = text(
          /*pengmasCounter*/
          ctx[1]
        );
        t12 = space();
        div11 = element("div");
        div10 = element("div");
        div8 = element("div");
        create_component(icon2.$$.fragment);
        t13 = space();
        div9 = element("div");
        div9.innerHTML = `<p class="heading">Jurnal</p> <p class="title">...</p>`;
        t17 = space();
        div15 = element("div");
        div14 = element("div");
        div12 = element("div");
        create_component(icon3.$$.fragment);
        t18 = space();
        div13 = element("div");
        div13.innerHTML = `<p class="heading">HKI</p> <p class="title">...</p>`;
        attr(h2, "class", "title is-2");
        attr(div0, "class", "flex-item-left svelte-lfygnb");
        attr(p0, "class", "heading");
        attr(p1, "class", "title");
        attr(div1, "class", "flex-item-right has-text-centered svelte-lfygnb");
        attr(div2, "class", "box svelte-lfygnb");
        attr(div3, "class", "column");
        attr(div4, "class", "flex-item-left svelte-lfygnb");
        attr(p2, "class", "heading");
        attr(p3, "class", "title");
        attr(div5, "class", "flex-item-right has-text-centered svelte-lfygnb");
        attr(div6, "class", "box svelte-lfygnb");
        attr(div7, "class", "column");
        attr(div8, "class", "flex-item-left svelte-lfygnb");
        attr(div9, "class", "flex-item-right has-text-centered svelte-lfygnb");
        attr(div10, "class", "box svelte-lfygnb");
        attr(div11, "class", "column");
        attr(div12, "class", "flex-item-left svelte-lfygnb");
        attr(div13, "class", "flex-item-right has-text-centered svelte-lfygnb");
        attr(div14, "class", "box svelte-lfygnb");
        attr(div15, "class", "column");
        attr(div16, "class", "columns");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div16, anchor);
        append(div16, div3);
        append(div3, div2);
        append(div2, div0);
        mount_component(icon0, div0, null);
        append(div2, t3);
        append(div2, div1);
        append(div1, p0);
        append(div1, t5);
        append(div1, p1);
        append(p1, t6);
        append(div16, t7);
        append(div16, div7);
        append(div7, div6);
        append(div6, div4);
        mount_component(icon1, div4, null);
        append(div6, t8);
        append(div6, div5);
        append(div5, p2);
        append(div5, t10);
        append(div5, p3);
        append(p3, t11);
        append(div16, t12);
        append(div16, div11);
        append(div11, div10);
        append(div10, div8);
        mount_component(icon2, div8, null);
        append(div10, t13);
        append(div10, div9);
        append(div16, t17);
        append(div16, div15);
        append(div15, div14);
        append(div14, div12);
        mount_component(icon3, div12, null);
        append(div14, t18);
        append(div14, div13);
        current = true;
      },
      p(ctx2, dirty) {
        if (!current || dirty & /*penelitianCounter*/
        1)
          set_data(
            t6,
            /*penelitianCounter*/
            ctx2[0]
          );
        if (!current || dirty & /*pengmasCounter*/
        2)
          set_data(
            t11,
            /*pengmasCounter*/
            ctx2[1]
          );
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div16);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
      }
    };
  }
  function create_fragment27(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot7] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, pengmasCounter, penelitianCounter*/
        11) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function instance22($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(2, $apiURL = $$value));
    let penelitianCounter, pengmasCounter;
    onMount(async () => {
      const accessToken = localStorage.getItem("token");
      const headers = {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json"
      };
      const responseCP = await fetch($apiURL + "/counterPenelitian", { method: "GET", headers });
      const resultCP = await responseCP.json();
      if (resultCP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCP.ok) {
          $$invalidate(0, penelitianCounter = resultCP.penelitianCounter);
        } else {
          console.log(responseCP);
        }
      }
      const responseCPM = await fetch($apiURL + "/counterPengmas", { method: "GET", headers });
      const resultCPM = await responseCPM.json();
      if (resultCPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCPM.ok) {
          $$invalidate(1, pengmasCounter = resultCPM.pengmasCounter);
        } else {
          console.log(responseCPM);
        }
      }
    });
    return [penelitianCounter, pengmasCounter];
  }
  var Home = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance22, create_fragment27, safe_not_equal, {});
    }
  };
  var home_default = Home;

  // src/pages/admin/pengumuman.svelte
  init_define_process();
  function create_default_slot8(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div4;
    let div0;
    let button0;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let input;
    let t6;
    let span2;
    let icon1;
    let t7;
    let div6;
    let table;
    let thead;
    let t10;
    let tbody;
    let tr1;
    let td0;
    let t12;
    let td1;
    let div5;
    let p0;
    let button1;
    let span3;
    let icon2;
    let t13;
    let p1;
    let button2;
    let span4;
    let icon3;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "accountAdd", src: add } });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pengumuman";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div4 = element("div");
        div0 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Buat Pengumuman</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        input = element("input");
        t6 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t7 = space();
        div6 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Judul</th> <th class="is-narrow"></th></tr>`;
        t10 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Contoh Nama Pengumuman 1";
        t12 = space();
        td1 = element("td");
        div5 = element("div");
        p0 = element("p");
        button1 = element("button");
        span3 = element("span");
        create_component(icon2.$$.fragment);
        t13 = space();
        p1 = element("p");
        button2 = element("button");
        span4 = element("span");
        create_component(icon3.$$.fragment);
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div0, "class", "column");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span2, "class", "icon is-left");
        attr(div1, "class", "control has-icons-left");
        attr(div2, "class", "field");
        attr(div3, "class", "column");
        attr(div4, "class", "columns");
        attr(span3, "class", "icon");
        attr(button1, "class", "button is-danger is-outlined is-small");
        attr(p0, "class", "control");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-link is-outlined is-small");
        attr(p1, "class", "control");
        attr(div5, "class", "field is-grouped");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div6, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        append(div4, div0);
        append(div0, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t3);
        append(button0, span1);
        append(div4, t5);
        append(div4, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, input);
        append(div1, t6);
        append(div1, span2);
        mount_component(icon1, span2, null);
        insert(target, t7, anchor);
        insert(target, div6, anchor);
        append(div6, table);
        append(table, thead);
        append(table, t10);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t12);
        append(tr1, td1);
        append(td1, div5);
        append(div5, p0);
        append(p0, button1);
        append(button1, span3);
        mount_component(icon2, span3, null);
        append(div5, t13);
        append(div5, p1);
        append(p1, button2);
        append(button2, span4);
        mount_component(icon3, span4, null);
        current = true;
        if (!mounted) {
          dispose = listen(button0, "click", addPengumuman);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div4);
          detach(t7);
          detach(div6);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment28(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot8] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        1) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function addPengumuman() {
    location.href = "/admin/buatpengumuman";
  }
  var Pengumuman2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment28, safe_not_equal, {});
    }
  };
  var pengumuman_default = Pengumuman2;

  // src/pages/admin/profile.svelte
  init_define_process();
  function get_each_context5(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[180] = list[i];
    return child_ctx;
  }
  function get_each_context_12(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[183] = list[i];
    return child_ctx;
  }
  function get_each_context_22(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[186] = list[i];
    return child_ctx;
  }
  function get_each_context_32(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[189] = list[i];
    return child_ctx;
  }
  function get_each_context_42(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[192] = list[i];
    return child_ctx;
  }
  function get_each_context_52(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[195] = list[i];
    return child_ctx;
  }
  function get_each_context_62(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[198] = list[i];
    return child_ctx;
  }
  function create_if_block_372(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let field12;
    let t12;
    let br;
    let t13;
    let table;
    let thead;
    let t16;
    let tbody;
    let t17;
    let div1;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_49] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_482] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_472] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_462] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat Lahir",
        $$slots: { default: [create_default_slot_452] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Lahir",
        $$slots: { default: [create_default_slot_442] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_432] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_422] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Nomor Handphone",
        $$slots: { default: [create_default_slot_412] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_402] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_392] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        class: "input",
        name: "Email",
        $$slots: { default: [create_default_slot_382] },
        $$scope: { ctx }
      }
    });
    field12 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_372] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*mataKuliah*/
      ctx[49] && /*mataKuliah*/
      ctx[49].length > 0 && create_if_block_382(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        create_component(field12.$$.fragment);
        t12 = space();
        br = element("br");
        t13 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow"></th> <th>Mata Kuliah</th></tr>`;
        t16 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        t17 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        mount_component(field9, div0, null);
        append(div0, t9);
        mount_component(field10, div0, null);
        append(div0, t10);
        mount_component(field11, div0, null);
        append(div0, t11);
        mount_component(field12, div0, null);
        append(div0, t12);
        append(div0, br);
        append(div0, t13);
        append(div0, table);
        append(table, thead);
        append(table, t16);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
        insert(target, t17, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanIdentitas*/
            ctx[88]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaLengkap*/
        64 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jabatanFungsional*/
        128 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nip*/
        256 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nidn*/
        512 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tempatLahir*/
        1024 | dirty[6] & /*$$scope*/
        32768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tanggalLahir*/
        2048 | dirty[6] & /*$$scope*/
        32768) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*alamatRumah*/
        4096 | dirty[6] & /*$$scope*/
        32768) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*telpFaxRumah*/
        8192 | dirty[6] & /*$$scope*/
        32768) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nomorHandphone*/
        16384 | dirty[6] & /*$$scope*/
        32768) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*alamatKantor*/
        32768 | dirty[6] & /*$$scope*/
        32768) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*telpFaxKantor*/
        65536 | dirty[6] & /*$$scope*/
        32768) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*email*/
        131072 | dirty[6] & /*$$scope*/
        32768) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        const field12_changes = {};
        if (dirty[0] & /*vmataKuliah, error*/
        3 | dirty[6] & /*$$scope*/
        32768) {
          field12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field12.$set(field12_changes);
        if (
          /*mataKuliah*/
          ctx2[49] && /*mataKuliah*/
          ctx2[49].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[1] & /*mataKuliah*/
            262144) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_382(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(field12.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(field12.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t17);
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        destroy_component(field12);
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_51(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaLengkap + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaLengkap + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_49(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaLengkap && create_if_block_51(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan nama lengkap dengan gelar");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaLengkap*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[101]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        64 && input.value !== /*namaLengkap*/
        ctx2[37]) {
          set_input_value(
            input,
            /*namaLengkap*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[1].namaLengkap
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_51(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_502(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].jabatanFungsional + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jabatanFungsional + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_482(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let t5;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jabatanFungsional && create_if_block_502(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jabatan Fungsional";
        option1 = element("option");
        option1.textContent = "Asisten Ahli";
        option2 = element("option");
        option2.textContent = "Lektor";
        option3 = element("option");
        option3.textContent = "Lektor Kepala";
        option4 = element("option");
        option4.textContent = "Profesor";
        t5 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Asisten Ahli";
        set_input_value(option1, option1.__value);
        option2.__value = "Lektor";
        set_input_value(option2, option2.__value);
        option3.__value = "Lektor Kepala";
        set_input_value(option3, option3.__value);
        option4.__value = "Profesor";
        set_input_value(option4, option4.__value);
        if (
          /*jabatanFungsional*/
          ctx[38] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[102].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        select_option(
          select,
          /*jabatanFungsional*/
          ctx[38],
          true
        );
        insert(target, t5, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[102]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        128) {
          select_option(
            select,
            /*jabatanFungsional*/
            ctx2[38]
          );
        }
        if (
          /*error*/
          ctx2[1].jabatanFungsional
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_502(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t5);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_492(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nip + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nip + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_472(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nip && create_if_block_492(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nip*/
          ctx[39]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[103]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        256 && to_number(input.value) !== /*nip*/
        ctx2[39]) {
          set_input_value(
            input,
            /*nip*/
            ctx2[39]
          );
        }
        if (
          /*error*/
          ctx2[1].nip
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_492(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_482(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nidn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nidn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_462(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nidn && create_if_block_482(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nidn*/
          ctx[40]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[104]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        512 && to_number(input.value) !== /*nidn*/
        ctx2[40]) {
          set_input_value(
            input,
            /*nidn*/
            ctx2[40]
          );
        }
        if (
          /*error*/
          ctx2[1].nidn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_482(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_472(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tempatLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tempatLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_452(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tempatLahir && create_if_block_472(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tempatLahir*/
          ctx[41]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[105]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        1024 && input.value !== /*tempatLahir*/
        ctx2[41]) {
          set_input_value(
            input,
            /*tempatLahir*/
            ctx2[41]
          );
        }
        if (
          /*error*/
          ctx2[1].tempatLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_472(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_462(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tanggalLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tanggalLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_442(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tanggalLahir && create_if_block_462(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalLahir*/
          ctx[42]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[106]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalLahir*/
        2048) {
          set_input_value(
            input,
            /*tanggalLahir*/
            ctx2[42]
          );
        }
        if (
          /*error*/
          ctx2[1].tanggalLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_462(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_452(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_432(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatRumah && create_if_block_452(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatRumah*/
          ctx[43]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[107]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        4096 && input.value !== /*alamatRumah*/
        ctx2[43]) {
          set_input_value(
            input,
            /*alamatRumah*/
            ctx2[43]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_452(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_442(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_422(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxRumah && create_if_block_442(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxRumah*/
          ctx[44]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_6*/
            ctx[108]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxRumah*/
        8192 && to_number(input.value) !== /*telpFaxRumah*/
        ctx2[44]) {
          set_input_value(
            input,
            /*telpFaxRumah*/
            ctx2[44]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_442(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_432(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nomorHandphone + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nomorHandphone + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_412(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nomorHandphone && create_if_block_432(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nomorHandphone*/
          ctx[45]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_7*/
            ctx[109]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nomorHandphone*/
        16384 && to_number(input.value) !== /*nomorHandphone*/
        ctx2[45]) {
          set_input_value(
            input,
            /*nomorHandphone*/
            ctx2[45]
          );
        }
        if (
          /*error*/
          ctx2[1].nomorHandphone
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_432(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_423(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_402(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatKantor && create_if_block_423(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatKantor*/
          ctx[46]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_8*/
            ctx[110]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatKantor*/
        32768 && input.value !== /*alamatKantor*/
        ctx2[46]) {
          set_input_value(
            input,
            /*alamatKantor*/
            ctx2[46]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_423(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_412(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_392(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxKantor && create_if_block_412(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxKantor*/
          ctx[47]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_9*/
            ctx[111]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxKantor*/
        65536 && to_number(input.value) !== /*telpFaxKantor*/
        ctx2[47]) {
          set_input_value(
            input,
            /*telpFaxKantor*/
            ctx2[47]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_412(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_402(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].email + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].email + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_382(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].email && create_if_block_402(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*email*/
          ctx[48]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_10*/
            ctx[112]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*email*/
        131072 && input.value !== /*email*/
        ctx2[48]) {
          set_input_value(
            input,
            /*email*/
            ctx2[48]
          );
        }
        if (
          /*error*/
          ctx2[1].email
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_402(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_392(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].mataKuliah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].mataKuliah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_372(ctx) {
    let div;
    let p0;
    let input;
    let t0;
    let t1;
    let p1;
    let button;
    let span0;
    let icon;
    let t2;
    let span1;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].mataKuliah && create_if_block_392(ctx)
    );
    icon = new Icon_default({ props: { id: "orang", src: add } });
    return {
      c() {
        div = element("div");
        p0 = element("p");
        input = element("input");
        t0 = space();
        if (if_block)
          if_block.c();
        t1 = space();
        p1 = element("p");
        button = element("button");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Tambahkan mata kuliah yang diampu");
        attr(p0, "class", "control is-expanded");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        button.disabled = button_disabled_value = /*vmataKuliah*/
        ctx[0] ? false : true;
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, input);
        set_input_value(
          input,
          /*vmataKuliah*/
          ctx[0]
        );
        append(p0, t0);
        if (if_block)
          if_block.m(p0, null);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        append(button, span0);
        mount_component(icon, span0, null);
        append(button, t2);
        append(button, span1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_11*/
              ctx[113]
            ),
            listen(
              button,
              "click",
              /*addMatkul*/
              ctx[92]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*vmataKuliah*/
        1 && input.value !== /*vmataKuliah*/
        ctx2[0]) {
          set_input_value(
            input,
            /*vmataKuliah*/
            ctx2[0]
          );
        }
        if (
          /*error*/
          ctx2[1].mataKuliah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_392(ctx2);
            if_block.c();
            if_block.m(p0, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (!current || dirty[0] & /*vmataKuliah*/
        1 && button_disabled_value !== (button_disabled_value = /*vmataKuliah*/
        ctx2[0] ? false : true)) {
          button.disabled = button_disabled_value;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_382(ctx) {
    let each_1_anchor;
    let current;
    let each_value_6 = ensure_array_like(
      /*mataKuliah*/
      ctx[49]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_62(get_each_context_62(ctx, each_value_6, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        262144 | dirty[3] & /*deleteMatkul*/
        64) {
          each_value_6 = ensure_array_like(
            /*mataKuliah*/
            ctx2[49]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_62(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_62(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_6.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_6.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_62(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let t0;
    let td1;
    let t1_value = (
      /*matkul*/
      ctx[198].label + ""
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*matkul*/
        ctx[198].label);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMatkul*/
            ctx[99]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*mataKuliah*/
        262144 && button_data_value_value !== (button_data_value_value = /*matkul*/
        ctx2[198].label)) {
          attr(button, "data-value", button_data_value_value);
        }
        if ((!current || dirty[1] & /*mataKuliah*/
        262144) && t1_value !== (t1_value = /*matkul*/
        ctx2[198].label + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_362(ctx) {
    let div0;
    let table;
    let thead;
    let t7;
    let tbody;
    let tr1;
    let th4;
    let t9;
    let td0;
    let input0;
    let t10;
    let td1;
    let input1;
    let t11;
    let td2;
    let input2;
    let t12;
    let tr2;
    let th5;
    let t14;
    let td3;
    let input3;
    let t15;
    let td4;
    let input4;
    let t16;
    let td5;
    let input5;
    let t17;
    let tr3;
    let th6;
    let t19;
    let td6;
    let input6;
    let t20;
    let td7;
    let input7;
    let t21;
    let td8;
    let input8;
    let t22;
    let tr4;
    let th7;
    let t24;
    let td9;
    let input9;
    let t25;
    let td10;
    let input10;
    let t26;
    let td11;
    let input11;
    let t27;
    let tr5;
    let th8;
    let t29;
    let td12;
    let textarea0;
    let t30;
    let td13;
    let textarea1;
    let t31;
    let td14;
    let textarea2;
    let t32;
    let div1;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div0 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Program</th> <th>S1</th> <th>S2</th> <th>S3</th></tr>`;
        t7 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        th4 = element("th");
        th4.textContent = "Nama Perguruan Tinggi";
        t9 = space();
        td0 = element("td");
        input0 = element("input");
        t10 = space();
        td1 = element("td");
        input1 = element("input");
        t11 = space();
        td2 = element("td");
        input2 = element("input");
        t12 = space();
        tr2 = element("tr");
        th5 = element("th");
        th5.textContent = "Bidang Ilmu";
        t14 = space();
        td3 = element("td");
        input3 = element("input");
        t15 = space();
        td4 = element("td");
        input4 = element("input");
        t16 = space();
        td5 = element("td");
        input5 = element("input");
        t17 = space();
        tr3 = element("tr");
        th6 = element("th");
        th6.textContent = "Tahun Masuk";
        t19 = space();
        td6 = element("td");
        input6 = element("input");
        t20 = space();
        td7 = element("td");
        input7 = element("input");
        t21 = space();
        td8 = element("td");
        input8 = element("input");
        t22 = space();
        tr4 = element("tr");
        th7 = element("th");
        th7.textContent = "Tahun Lulus";
        t24 = space();
        td9 = element("td");
        input9 = element("input");
        t25 = space();
        td10 = element("td");
        input10 = element("input");
        t26 = space();
        td11 = element("td");
        input11 = element("input");
        t27 = space();
        tr5 = element("tr");
        th8 = element("th");
        th8.textContent = "Judul Skripsi/Tesis/Disertasi";
        t29 = space();
        td12 = element("td");
        textarea0 = element("textarea");
        t30 = space();
        td13 = element("td");
        textarea1 = element("textarea");
        t31 = space();
        td14 = element("td");
        textarea2 = element("textarea");
        t32 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(input1, "class", "input");
        attr(input1, "type", "text");
        attr(input2, "class", "input");
        attr(input2, "type", "text");
        attr(input3, "class", "input");
        attr(input3, "type", "text");
        attr(input4, "class", "input");
        attr(input4, "type", "text");
        attr(input5, "class", "input");
        attr(input5, "type", "text");
        attr(input6, "class", "input");
        attr(input6, "type", "number");
        attr(input7, "class", "input");
        attr(input7, "type", "number");
        attr(input8, "class", "input");
        attr(input8, "type", "number");
        attr(input9, "class", "input");
        attr(input9, "type", "number");
        attr(input10, "class", "input");
        attr(input10, "type", "number");
        attr(input11, "class", "input");
        attr(input11, "type", "number");
        attr(textarea0, "class", "textarea");
        attr(textarea1, "class", "textarea");
        attr(textarea2, "class", "textarea");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        append(div0, table);
        append(table, thead);
        append(table, t7);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, th4);
        append(tr1, t9);
        append(tr1, td0);
        append(td0, input0);
        set_input_value(
          input0,
          /*pertiS1*/
          ctx[50]
        );
        append(tr1, t10);
        append(tr1, td1);
        append(td1, input1);
        set_input_value(
          input1,
          /*pertiS2*/
          ctx[51]
        );
        append(tr1, t11);
        append(tr1, td2);
        append(td2, input2);
        set_input_value(
          input2,
          /*pertiS3*/
          ctx[52]
        );
        append(tbody, t12);
        append(tbody, tr2);
        append(tr2, th5);
        append(tr2, t14);
        append(tr2, td3);
        append(td3, input3);
        set_input_value(
          input3,
          /*bidangIlmuS1*/
          ctx[53]
        );
        append(tr2, t15);
        append(tr2, td4);
        append(td4, input4);
        set_input_value(
          input4,
          /*bidangIlmuS2*/
          ctx[54]
        );
        append(tr2, t16);
        append(tr2, td5);
        append(td5, input5);
        set_input_value(
          input5,
          /*bidangIlmuS3*/
          ctx[55]
        );
        append(tbody, t17);
        append(tbody, tr3);
        append(tr3, th6);
        append(tr3, t19);
        append(tr3, td6);
        append(td6, input6);
        set_input_value(
          input6,
          /*tahunMasukS1*/
          ctx[56]
        );
        append(tr3, t20);
        append(tr3, td7);
        append(td7, input7);
        set_input_value(
          input7,
          /*tahunMasukS2*/
          ctx[57]
        );
        append(tr3, t21);
        append(tr3, td8);
        append(td8, input8);
        set_input_value(
          input8,
          /*tahunMasukS3*/
          ctx[58]
        );
        append(tbody, t22);
        append(tbody, tr4);
        append(tr4, th7);
        append(tr4, t24);
        append(tr4, td9);
        append(td9, input9);
        set_input_value(
          input9,
          /*tahunLulusS1*/
          ctx[59]
        );
        append(tr4, t25);
        append(tr4, td10);
        append(td10, input10);
        set_input_value(
          input10,
          /*tahunLulusS2*/
          ctx[60]
        );
        append(tr4, t26);
        append(tr4, td11);
        append(td11, input11);
        set_input_value(
          input11,
          /*tahunLulusS3*/
          ctx[61]
        );
        append(tbody, t27);
        append(tbody, tr5);
        append(tr5, th8);
        append(tr5, t29);
        append(tr5, td12);
        append(td12, textarea0);
        set_input_value(
          textarea0,
          /*judulTugasAkhirS1*/
          ctx[62]
        );
        append(tr5, t30);
        append(tr5, td13);
        append(td13, textarea1);
        set_input_value(
          textarea1,
          /*judulTugasAkhirS2*/
          ctx[63]
        );
        append(tr5, t31);
        append(tr5, td14);
        append(td14, textarea2);
        set_input_value(
          textarea2,
          /*judulTugasAkhirS3*/
          ctx[64]
        );
        insert(target, t32, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[114]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[115]
            ),
            listen(
              input2,
              "input",
              /*input2_input_handler*/
              ctx[116]
            ),
            listen(
              input3,
              "input",
              /*input3_input_handler*/
              ctx[117]
            ),
            listen(
              input4,
              "input",
              /*input4_input_handler*/
              ctx[118]
            ),
            listen(
              input5,
              "input",
              /*input5_input_handler*/
              ctx[119]
            ),
            listen(
              input6,
              "input",
              /*input6_input_handler*/
              ctx[120]
            ),
            listen(
              input7,
              "input",
              /*input7_input_handler*/
              ctx[121]
            ),
            listen(
              input8,
              "input",
              /*input8_input_handler*/
              ctx[122]
            ),
            listen(
              input9,
              "input",
              /*input9_input_handler*/
              ctx[123]
            ),
            listen(
              input10,
              "input",
              /*input10_input_handler*/
              ctx[124]
            ),
            listen(
              input11,
              "input",
              /*input11_input_handler*/
              ctx[125]
            ),
            listen(
              textarea0,
              "input",
              /*textarea0_input_handler*/
              ctx[126]
            ),
            listen(
              textarea1,
              "input",
              /*textarea1_input_handler*/
              ctx[127]
            ),
            listen(
              textarea2,
              "input",
              /*textarea2_input_handler*/
              ctx[128]
            ),
            listen(
              button,
              "click",
              /*simpanRiwayatPendidikan*/
              ctx[87]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*pertiS1*/
        524288 && input0.value !== /*pertiS1*/
        ctx2[50]) {
          set_input_value(
            input0,
            /*pertiS1*/
            ctx2[50]
          );
        }
        if (dirty[1] & /*pertiS2*/
        1048576 && input1.value !== /*pertiS2*/
        ctx2[51]) {
          set_input_value(
            input1,
            /*pertiS2*/
            ctx2[51]
          );
        }
        if (dirty[1] & /*pertiS3*/
        2097152 && input2.value !== /*pertiS3*/
        ctx2[52]) {
          set_input_value(
            input2,
            /*pertiS3*/
            ctx2[52]
          );
        }
        if (dirty[1] & /*bidangIlmuS1*/
        4194304 && input3.value !== /*bidangIlmuS1*/
        ctx2[53]) {
          set_input_value(
            input3,
            /*bidangIlmuS1*/
            ctx2[53]
          );
        }
        if (dirty[1] & /*bidangIlmuS2*/
        8388608 && input4.value !== /*bidangIlmuS2*/
        ctx2[54]) {
          set_input_value(
            input4,
            /*bidangIlmuS2*/
            ctx2[54]
          );
        }
        if (dirty[1] & /*bidangIlmuS3*/
        16777216 && input5.value !== /*bidangIlmuS3*/
        ctx2[55]) {
          set_input_value(
            input5,
            /*bidangIlmuS3*/
            ctx2[55]
          );
        }
        if (dirty[1] & /*tahunMasukS1*/
        33554432 && to_number(input6.value) !== /*tahunMasukS1*/
        ctx2[56]) {
          set_input_value(
            input6,
            /*tahunMasukS1*/
            ctx2[56]
          );
        }
        if (dirty[1] & /*tahunMasukS2*/
        67108864 && to_number(input7.value) !== /*tahunMasukS2*/
        ctx2[57]) {
          set_input_value(
            input7,
            /*tahunMasukS2*/
            ctx2[57]
          );
        }
        if (dirty[1] & /*tahunMasukS3*/
        134217728 && to_number(input8.value) !== /*tahunMasukS3*/
        ctx2[58]) {
          set_input_value(
            input8,
            /*tahunMasukS3*/
            ctx2[58]
          );
        }
        if (dirty[1] & /*tahunLulusS1*/
        268435456 && to_number(input9.value) !== /*tahunLulusS1*/
        ctx2[59]) {
          set_input_value(
            input9,
            /*tahunLulusS1*/
            ctx2[59]
          );
        }
        if (dirty[1] & /*tahunLulusS2*/
        536870912 && to_number(input10.value) !== /*tahunLulusS2*/
        ctx2[60]) {
          set_input_value(
            input10,
            /*tahunLulusS2*/
            ctx2[60]
          );
        }
        if (dirty[1] & /*tahunLulusS3*/
        1073741824 && to_number(input11.value) !== /*tahunLulusS3*/
        ctx2[61]) {
          set_input_value(
            input11,
            /*tahunLulusS3*/
            ctx2[61]
          );
        }
        if (dirty[2] & /*judulTugasAkhirS1*/
        1) {
          set_input_value(
            textarea0,
            /*judulTugasAkhirS1*/
            ctx2[62]
          );
        }
        if (dirty[2] & /*judulTugasAkhirS2*/
        2) {
          set_input_value(
            textarea1,
            /*judulTugasAkhirS2*/
            ctx2[63]
          );
        }
        if (dirty[2] & /*judulTugasAkhirS3*/
        4) {
          set_input_value(
            textarea2,
            /*judulTugasAkhirS3*/
            ctx2[64]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t32);
          detach(div1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_292(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let div9;
    let nav1;
    let div6;
    let t18;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t19;
    let span3;
    let t21;
    let table1;
    let thead1;
    let t32;
    let tbody1;
    let t33;
    let div14;
    let nav2;
    let div11;
    let t35;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t36;
    let span5;
    let t38;
    let table2;
    let thead2;
    let t47;
    let tbody2;
    let t48;
    let div19;
    let nav3;
    let div16;
    let t50;
    let div18;
    let div17;
    let button3;
    let span6;
    let icon3;
    let t51;
    let span7;
    let t53;
    let table3;
    let thead3;
    let t64;
    let tbody3;
    let t65;
    let div24;
    let nav4;
    let div21;
    let t67;
    let div23;
    let div22;
    let button4;
    let span8;
    let icon4;
    let t68;
    let span9;
    let t70;
    let table4;
    let thead4;
    let t81;
    let tbody4;
    let t82;
    let div29;
    let nav5;
    let div26;
    let t84;
    let div28;
    let div27;
    let button5;
    let span10;
    let icon5;
    let t85;
    let span11;
    let t87;
    let table5;
    let thead5;
    let t98;
    let tbody5;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block0 = (
      /*dataPP*/
      ctx[2] && create_if_block_352(ctx)
    );
    icon1 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block1 = (
      /*dataPM*/
      ctx[3] && create_if_block_342(ctx)
    );
    icon2 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block2 = (
      /*dataPD*/
      ctx[4] && create_if_block_332(ctx)
    );
    icon3 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block3 = (
      /*dataPPub*/
      ctx[5] && create_if_block_323(ctx)
    );
    icon4 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block4 = (
      /*dataPPB*/
      ctx[6] && create_if_block_312(ctx)
    );
    icon5 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block5 = (
      /*dataPHKI*/
      ctx[7] && create_if_block_302(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penelitian</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Pengabdian Masyarakat</h6></div>`;
        t18 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t19 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t21 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t32 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t33 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran</h6></div>`;
        t35 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t36 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t38 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t47 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t48 = space();
        div19 = element("div");
        nav3 = element("nav");
        div16 = element("div");
        div16.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)</h6></div>`;
        t50 = space();
        div18 = element("div");
        div17 = element("div");
        button3 = element("button");
        span6 = element("span");
        create_component(icon3.$$.fragment);
        t51 = space();
        span7 = element("span");
        span7.innerHTML = `<a>Tambah</a>`;
        t53 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t64 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t65 = space();
        div24 = element("div");
        nav4 = element("nav");
        div21 = element("div");
        div21.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penulisan Buku</h6></div>`;
        t67 = space();
        div23 = element("div");
        div22 = element("div");
        button4 = element("button");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t68 = space();
        span9 = element("span");
        span9.innerHTML = `<a>Tambah</a>`;
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t81 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t82 = space();
        div29 = element("div");
        nav5 = element("nav");
        div26 = element("div");
        div26.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Hak Kekayaan Intelektual</h6></div>`;
        t84 = space();
        div28 = element("div");
        div27 = element("div");
        button5 = element("button");
        span10 = element("span");
        create_component(icon5.$$.fragment);
        t85 = space();
        span11 = element("span");
        span11.innerHTML = `<a>Tambah</a>`;
        t87 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t98 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div14, "class", "box");
        attr(div16, "class", "level-left");
        attr(span6, "class", "icon");
        attr(button3, "class", "button is-info");
        attr(div17, "class", "level-item");
        attr(div18, "class", "level-right");
        attr(nav3, "class", "level");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div19, "class", "box");
        attr(div21, "class", "level-left");
        attr(span8, "class", "icon");
        attr(button4, "class", "button is-info");
        attr(div22, "class", "level-item");
        attr(div23, "class", "level-right");
        attr(nav4, "class", "level");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div24, "class", "box");
        attr(div26, "class", "level-left");
        attr(span10, "class", "icon");
        attr(button5, "class", "button is-info");
        attr(div27, "class", "level-item");
        attr(div28, "class", "level-right");
        attr(nav5, "class", "level");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div29, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t18);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t19);
        append(button1, span3);
        append(div9, t21);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t32);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t33, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t35);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t36);
        append(button2, span5);
        append(div14, t38);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t47);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t48, anchor);
        insert(target, div19, anchor);
        append(div19, nav3);
        append(nav3, div16);
        append(nav3, t50);
        append(nav3, div18);
        append(div18, div17);
        append(div17, button3);
        append(button3, span6);
        mount_component(icon3, span6, null);
        append(button3, t51);
        append(button3, span7);
        append(div19, t53);
        append(div19, table3);
        append(table3, thead3);
        append(table3, t64);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t65, anchor);
        insert(target, div24, anchor);
        append(div24, nav4);
        append(nav4, div21);
        append(nav4, t67);
        append(nav4, div23);
        append(div23, div22);
        append(div22, button4);
        append(button4, span8);
        mount_component(icon4, span8, null);
        append(button4, t68);
        append(button4, span9);
        append(div24, t70);
        append(div24, table4);
        append(table4, thead4);
        append(table4, t81);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t82, anchor);
        insert(target, div29, anchor);
        append(div29, nav5);
        append(nav5, div26);
        append(nav5, t84);
        append(nav5, div28);
        append(div28, div27);
        append(div27, button5);
        append(button5, span10);
        mount_component(icon5, span10, null);
        append(button5, t85);
        append(button5, span11);
        append(div29, t87);
        append(div29, table5);
        append(table5, thead5);
        append(table5, t98);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clickModalPenelitian*/
              ctx[75]
            ),
            listen(
              button1,
              "click",
              /*clickModalPengmas*/
              ctx[76]
            ),
            listen(
              button2,
              "click",
              /*clickModalDiseminasi*/
              ctx[77]
            ),
            listen(
              button3,
              "click",
              /*clickModalPublikasi*/
              ctx[78]
            ),
            listen(
              button4,
              "click",
              /*clickModalPenulisanBuku*/
              ctx[79]
            ),
            listen(
              button5,
              "click",
              /*clickModalHKI*/
              ctx[80]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataPP*/
          ctx2[2]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*dataPP*/
            4) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_352(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataPM*/
          ctx2[3]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*dataPM*/
            8) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_342(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataPD*/
          ctx2[4]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*dataPD*/
            16) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_332(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*dataPPub*/
          ctx2[5]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[0] & /*dataPPub*/
            32) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_323(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*dataPPB*/
          ctx2[6]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[0] & /*dataPPB*/
            64) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_312(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
        if (
          /*dataPHKI*/
          ctx2[7]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
            if (dirty[0] & /*dataPHKI*/
            128) {
              transition_in(if_block5, 1);
            }
          } else {
            if_block5 = create_if_block_302(ctx2);
            if_block5.c();
            transition_in(if_block5, 1);
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          group_outros();
          transition_out(if_block5, 1, 1, () => {
            if_block5 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        transition_in(icon3.$$.fragment, local);
        transition_in(if_block3);
        transition_in(icon4.$$.fragment, local);
        transition_in(if_block4);
        transition_in(icon5.$$.fragment, local);
        transition_in(if_block5);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        transition_out(icon3.$$.fragment, local);
        transition_out(if_block3);
        transition_out(icon4.$$.fragment, local);
        transition_out(if_block4);
        transition_out(icon5.$$.fragment, local);
        transition_out(if_block5);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(div9);
          detach(t33);
          detach(div14);
          detach(t48);
          detach(div19);
          detach(t65);
          detach(div24);
          detach(t82);
          detach(div29);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        destroy_component(icon3);
        if (if_block3)
          if_block3.d();
        destroy_component(icon4);
        if (if_block4)
          if_block4.d();
        destroy_component(icon5);
        if (if_block5)
          if_block5.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_352(ctx) {
    let each_1_anchor;
    let current;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_52(get_each_context_52(ctx, each_value_5, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        4 | dirty[3] & /*delrowPP*/
        1) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_52(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_52(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_5.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_5.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_52(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PP*/
      ctx[195].tahun_penelitian + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PP*/
      ctx[195].judul_penelitian + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PP*/
      ctx[195].role_penelitian + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PP*/
      ctx[195].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PP*/
      ctx[195].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PP*/
        ctx[195].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPP*/
            ctx[93]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPP*/
        4 && button_pid_value !== (button_pid_value = /*PP*/
        ctx2[195].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPP*/
        4) && t1_value !== (t1_value = /*PP*/
        ctx2[195].tahun_penelitian + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t3_value !== (t3_value = /*PP*/
        ctx2[195].judul_penelitian + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t5_value !== (t5_value = /*PP*/
        ctx2[195].role_penelitian + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t7_value !== (t7_value = /*PP*/
        ctx2[195].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t9_value !== (t9_value = /*PP*/
        ctx2[195].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_342(ctx) {
    let each_1_anchor;
    let current;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_42(get_each_context_42(ctx, each_value_4, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        8 | dirty[3] & /*delrowPM*/
        2) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_42(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_42(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_4.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_4.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_42(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PM*/
      ctx[192].tahun_pengmas + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PM*/
      ctx[192].judul_pengmas + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PM*/
      ctx[192].role_pengmas + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PM*/
      ctx[192].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PM*/
      ctx[192].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PM*/
        ctx[192].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPM*/
            ctx[94]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPM*/
        8 && button_pid_value !== (button_pid_value = /*PM*/
        ctx2[192].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPM*/
        8) && t1_value !== (t1_value = /*PM*/
        ctx2[192].tahun_pengmas + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t3_value !== (t3_value = /*PM*/
        ctx2[192].judul_pengmas + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t5_value !== (t5_value = /*PM*/
        ctx2[192].role_pengmas + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t7_value !== (t7_value = /*PM*/
        ctx2[192].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t9_value !== (t9_value = /*PM*/
        ctx2[192].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_332(ctx) {
    let each_1_anchor;
    let current;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[4]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_32(get_each_context_32(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        16 | dirty[3] & /*delrowPD*/
        4) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[4]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_32(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_32(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_32(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PD*/
      ctx[189].tahun_diseminasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PD*/
      ctx[189].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PD*/
      ctx[189].nama_pemakalah + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PD*/
      ctx[189].nama_pertemuan + ""
    );
    let t7;
    let t8;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PD*/
        ctx[189].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPD*/
            ctx[95]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPD*/
        16 && button_pid_value !== (button_pid_value = /*PD*/
        ctx2[189].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPD*/
        16) && t1_value !== (t1_value = /*PD*/
        ctx2[189].tahun_diseminasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPD*/
        16) && t3_value !== (t3_value = /*PD*/
        ctx2[189].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPD*/
        16) && t5_value !== (t5_value = /*PD*/
        ctx2[189].nama_pemakalah + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPD*/
        16) && t7_value !== (t7_value = /*PD*/
        ctx2[189].nama_pertemuan + ""))
          set_data(t7, t7_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_323(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_22(get_each_context_22(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        32 | dirty[3] & /*delrowPPub*/
        8) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_22(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_22(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_22(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPub*/
      ctx[186].tahun_publikasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPub*/
      ctx[186].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPub*/
      ctx[186].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPub*/
      ctx[186].nama_jurnal + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPub*/
      ctx[186].impact + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPub*/
        ctx[186].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPub*/
            ctx[96]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPub*/
        32 && button_pid_value !== (button_pid_value = /*PPub*/
        ctx2[186].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t1_value !== (t1_value = /*PPub*/
        ctx2[186].tahun_publikasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t3_value !== (t3_value = /*PPub*/
        ctx2[186].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t5_value !== (t5_value = /*PPub*/
        ctx2[186].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t7_value !== (t7_value = /*PPub*/
        ctx2[186].nama_jurnal + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t9_value !== (t9_value = /*PPub*/
        ctx2[186].impact + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_312(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[6]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        64 | dirty[3] & /*delrowPPB*/
        16) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[6]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_12(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_12(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_12(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPB*/
      ctx[183].tahun_buku + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPB*/
      ctx[183].judul_buku + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPB*/
      ctx[183].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPB*/
      ctx[183].penerbit + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPB*/
      ctx[183].isbn + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPB*/
        ctx[183].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPB*/
            ctx[97]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPB*/
        64 && button_pid_value !== (button_pid_value = /*PPB*/
        ctx2[183].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t1_value !== (t1_value = /*PPB*/
        ctx2[183].tahun_buku + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t3_value !== (t3_value = /*PPB*/
        ctx2[183].judul_buku + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t5_value !== (t5_value = /*PPB*/
        ctx2[183].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t7_value !== (t7_value = /*PPB*/
        ctx2[183].penerbit + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t9_value !== (t9_value = /*PPB*/
        ctx2[183].isbn + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_302(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        128 | dirty[3] & /*delrowPHKI*/
        32) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context5(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block5(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block5(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PHKI*/
      ctx[180].tahun_hki + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PHKI*/
      ctx[180].judul_hki + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PHKI*/
      ctx[180].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PHKI*/
      ctx[180].jenis_hki + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PHKI*/
      ctx[180].no_hki + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PHKI*/
        ctx[180].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPHKI*/
            ctx[98]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPHKI*/
        128 && button_pid_value !== (button_pid_value = /*PHKI*/
        ctx2[180].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t1_value !== (t1_value = /*PHKI*/
        ctx2[180].tahun_hki + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t3_value !== (t3_value = /*PHKI*/
        ctx2[180].judul_hki + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t5_value !== (t5_value = /*PHKI*/
        ctx2[180].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t7_value !== (t7_value = /*PHKI*/
        ctx2[180].jenis_hki + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t9_value !== (t9_value = /*PHKI*/
        ctx2[180].no_hki + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_362(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let li2;
    let t7;
    let t8;
    let t9;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[72] === true && create_if_block_372(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[73] === true && create_if_block_362(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[74] === true && create_if_block_292(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Profile";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Riwayat Pendidikan</span></a>`;
        t5 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Pengalaman</span></a>`;
        t7 = space();
        if (if_block0)
          if_block0.c();
        t8 = space();
        if (if_block1)
          if_block1.c();
        t9 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[72]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[73]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[74]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        append(ul, t5);
        append(ul, li2);
        insert(target, t7, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t8, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t9, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[89]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[90]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[91]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1*/
        1024) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[72]
          );
        }
        if (!current || dirty[2] & /*tab2*/
        2048) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[73]
          );
        }
        if (!current || dirty[2] & /*tab3*/
        4096) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[74]
          );
        }
        if (
          /*tab1*/
          ctx2[72] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1*/
            1024) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_372(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t8.parentNode, t8);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[73] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_362(ctx2);
            if_block1.c();
            if_block1.m(t9.parentNode, t9);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*tab3*/
          ctx2[74] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[2] & /*tab3*/
            4096) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_292(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_282(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_352(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPenelitian && create_if_block_282(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPenelitian*/
          ctx[9]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_12*/
            ctx[129]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPenelitian*/
        512 && to_number(input.value) !== /*tahunPenelitian*/
        ctx2[9]) {
          set_input_value(
            input,
            /*tahunPenelitian*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_282(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_272(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_342(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPenelitian && create_if_block_272(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPenelitian*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_13*/
            ctx[130]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPenelitian*/
        1024 && input.value !== /*judulPenelitian*/
        ctx2[10]) {
          set_input_value(
            input,
            /*judulPenelitian*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_272(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_262(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_332(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePenelitian && create_if_block_262(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePenelitian*/
          ctx[11] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[131].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePenelitian*/
          ctx[11],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[131]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*rolePenelitian*/
        2048) {
          select_option(
            select,
            /*rolePenelitian*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_262(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_252(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_322(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPenelitian && create_if_block_252(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPenelitian*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_14*/
            ctx[132]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*sumberDanaPenelitian*/
        4096 && input.value !== /*sumberDanaPenelitian*/
        ctx2[12]) {
          set_input_value(
            input,
            /*sumberDanaPenelitian*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_252(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_242(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPP + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPP + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_312(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPP && create_if_block_242(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPP*/
          ctx[8]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_15*/
              ctx[133]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[134]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPP*/
        256 && input.value !== /*biayaPP*/
        ctx2[8]) {
          set_input_value(
            input,
            /*biayaPP*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPP
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_242(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_302(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_352] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Penelitian",
        $$slots: { default: [create_default_slot_342] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Ketua/Anggota",
        $$slots: { default: [create_default_slot_332] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_322] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_312] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPP*/
            ctx[81]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPenelitian*/
        514 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPenelitian*/
        1026 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, rolePenelitian*/
        2050 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, sumberDanaPenelitian*/
        4098 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, biayaPP*/
        258 | dirty[6] & /*$$scope*/
        32768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_5(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penelitian";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_233(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_292(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPengmas && create_if_block_233(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPengmas*/
          ctx[14]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_16*/
            ctx[136]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPengmas*/
        16384 && to_number(input.value) !== /*tahunPengmas*/
        ctx2[14]) {
          set_input_value(
            input,
            /*tahunPengmas*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_233(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_223(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_282(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPengmas && create_if_block_223(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengmas*/
          ctx[15]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_17*/
            ctx[137]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPengmas*/
        32768 && input.value !== /*judulPengmas*/
        ctx2[15]) {
          set_input_value(
            input,
            /*judulPengmas*/
            ctx2[15]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_223(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_212(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_272(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePengmas && create_if_block_212(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePengmas*/
          ctx[16] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[138].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePengmas*/
          ctx[16],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[138]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*rolePengmas*/
        65536) {
          select_option(
            select,
            /*rolePengmas*/
            ctx2[16]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_212(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_202(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_262(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPengmas && create_if_block_202(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPengmas*/
          ctx[17]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_18*/
            ctx[139]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*sumberDanaPengmas*/
        131072 && input.value !== /*sumberDanaPengmas*/
        ctx2[17]) {
          set_input_value(
            input,
            /*sumberDanaPengmas*/
            ctx2[17]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_202(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_192(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_252(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPengmas && create_if_block_192(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Pengmas");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPengmas*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_19*/
              ctx[140]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler_1*/
              ctx[141]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPengmas*/
        8192 && input.value !== /*biayaPengmas*/
        ctx2[13]) {
          set_input_value(
            input,
            /*biayaPengmas*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_192(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_242(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_292] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Pengmas",
        $$slots: { default: [create_default_slot_282] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Ketua/Anggota",
        $$slots: { default: [create_default_slot_272] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_262] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_252] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPM*/
            ctx[82]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPengmas*/
        16386 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPengmas*/
        32770 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, rolePengmas*/
        65538 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, sumberDanaPengmas*/
        131074 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, biayaPengmas*/
        8194 | dirty[6] & /*$$scope*/
        32768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_4(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Pengabdian Masyarakat";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_182(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_232(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunDiseminasi && create_if_block_182(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunDiseminasi*/
          ctx[18]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_20*/
            ctx[143]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunDiseminasi*/
        262144 && to_number(input.value) !== /*tahunDiseminasi*/
        ctx2[18]) {
          set_input_value(
            input,
            /*tahunDiseminasi*/
            ctx2[18]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_182(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_172(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_223(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulDiseminasi && create_if_block_172(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDiseminasi*/
          ctx[19]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_21*/
            ctx[144]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulDiseminasi*/
        524288 && input.value !== /*judulDiseminasi*/
        ctx2[19]) {
          set_input_value(
            input,
            /*judulDiseminasi*/
            ctx2[19]
          );
        }
        if (
          /*error*/
          ctx2[1].judulDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_172(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_162(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPemakalahDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_212(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi && create_if_block_162(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPemakalahDiseminasi*/
          ctx[20]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_22*/
            ctx[145]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPemakalahDiseminasi*/
        1048576 && input.value !== /*namaPemakalahDiseminasi*/
        ctx2[20]) {
          set_input_value(
            input,
            /*namaPemakalahDiseminasi*/
            ctx2[20]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPemakalahDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_162(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_152(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPertemuanDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_202(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi && create_if_block_152(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPertemuanDiseminasi*/
          ctx[21]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_23*/
            ctx[146]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPertemuanDiseminasi*/
        2097152 && input.value !== /*namaPertemuanDiseminasi*/
        ctx2[21]) {
          set_input_value(
            input,
            /*namaPertemuanDiseminasi*/
            ctx2[21]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPertemuanDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_152(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_192(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let hr;
    let t4;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_232] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_223] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Pemakalah",
        $$slots: { default: [create_default_slot_212] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Pertemuan Ilmiah/Pameran",
        $$slots: { default: [create_default_slot_202] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        hr = element("hr");
        t4 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        insert(target, hr, anchor);
        insert(target, t4, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPD*/
            ctx[83]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunDiseminasi*/
        262146 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulDiseminasi*/
        524290 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, namaPemakalahDiseminasi*/
        1048578 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, namaPertemuanDiseminasi*/
        2097154 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(hr);
          detach(t4);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_3(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Diseminasi Ilmiah dalam<br/>Pertemuan / Pameran`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_142(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_182(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPublikasi && create_if_block_142(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPublikasi*/
          ctx[22]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_24*/
            ctx[148]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPublikasi*/
        4194304 && to_number(input.value) !== /*tahunPublikasi*/
        ctx2[22]) {
          set_input_value(
            input,
            /*tahunPublikasi*/
            ctx2[22]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_142(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_133(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_172(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPublikasi && create_if_block_133(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPublikasi*/
          ctx[23]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_25*/
            ctx[149]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPublikasi*/
        8388608 && input.value !== /*judulPublikasi*/
        ctx2[23]) {
          set_input_value(
            input,
            /*judulPublikasi*/
            ctx2[23]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_133(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_123(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_162(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulis && create_if_block_123(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulis*/
          ctx[24]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_26*/
            ctx[150]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPenulis*/
        16777216 && input.value !== /*namaPenulis*/
        ctx2[24]) {
          set_input_value(
            input,
            /*namaPenulis*/
            ctx2[24]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_123(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_112(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaJurnal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaJurnal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_152(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaJurnal && create_if_block_112(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaJurnal*/
          ctx[25]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_27*/
            ctx[151]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaJurnal*/
        33554432 && input.value !== /*namaJurnal*/
        ctx2[25]) {
          set_input_value(
            input,
            /*namaJurnal*/
            ctx2[25]
          );
        }
        if (
          /*error*/
          ctx2[1].namaJurnal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_112(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_102(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].impactFactor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].impactFactor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_142(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].impactFactor && create_if_block_102(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*impactFactor*/
          ctx[26]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_28*/
            ctx[152]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*impactFactor*/
        67108864 && input.value !== /*impactFactor*/
        ctx2[26]) {
          set_input_value(
            input,
            /*impactFactor*/
            ctx2[26]
          );
        }
        if (
          /*error*/
          ctx2[1].impactFactor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_102(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_132(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_182] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_172] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_162] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Jurnal, Vol., No Issue/No Artikel, Halaman",
        $$slots: { default: [create_default_slot_152] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Impact Factor/Scopus Quarter/Akreditasi",
        $$slots: { default: [create_default_slot_142] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPublikasi*/
            ctx[84]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPublikasi*/
        4194306 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPublikasi*/
        8388610 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, namaPenulis*/
        16777218 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, namaJurnal*/
        33554434 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, impactFactor*/
        67108866 | dirty[6] & /*$$scope*/
        32768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_2(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Publikasi Ilmiah <br/> dalam Jurnal (bukan Proceeding)`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_92(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_123(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunBuku && create_if_block_92(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunBuku*/
          ctx[27]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_29*/
            ctx[154]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunBuku*/
        134217728 && to_number(input.value) !== /*tahunBuku*/
        ctx2[27]) {
          set_input_value(
            input,
            /*tahunBuku*/
            ctx2[27]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_92(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_82(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_112(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulBuku && create_if_block_82(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulBuku*/
          ctx[28]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_30*/
            ctx[155]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*JudulBuku*/
        268435456 && input.value !== /*JudulBuku*/
        ctx2[28]) {
          set_input_value(
            input,
            /*JudulBuku*/
            ctx2[28]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_82(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_72(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_102(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisBuku && create_if_block_72(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisBuku*/
          ctx[29]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_31*/
            ctx[156]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPenulisBuku*/
        536870912 && input.value !== /*namaPenulisBuku*/
        ctx2[29]) {
          set_input_value(
            input,
            /*namaPenulisBuku*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_72(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_62(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].PenerbitBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].PenerbitBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_92(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].PenerbitBuku && create_if_block_62(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*PenerbitBuku*/
          ctx[30]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_32*/
            ctx[157]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*PenerbitBuku*/
        1073741824 && input.value !== /*PenerbitBuku*/
        ctx2[30]) {
          set_input_value(
            input,
            /*PenerbitBuku*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[1].PenerbitBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_62(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_53(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].Isbn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].Isbn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_82(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].Isbn && create_if_block_53(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*Isbn*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_33*/
            ctx[158]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*Isbn*/
        1 && input.value !== /*Isbn*/
        ctx2[31]) {
          set_input_value(
            input,
            /*Isbn*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[1].Isbn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_53(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_73(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_123] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Buku",
        $$slots: { default: [create_default_slot_112] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_102] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_92] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_82] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPB*/
            ctx[85]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunBuku*/
        134217730 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, JudulBuku*/
        268435458 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, namaPenulisBuku*/
        536870914 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, PenerbitBuku*/
        1073741826 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*Isbn*/
        1 | dirty[6] & /*$$scope*/
        32768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_1(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penulisan Buku";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_411(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_63(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunHKI && create_if_block_411(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunHKI*/
          ctx[32]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_34*/
            ctx[160]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunHKI*/
        2 && to_number(input.value) !== /*tahunHKI*/
        ctx2[32]) {
          set_input_value(
            input,
            /*tahunHKI*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_411(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_311(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_53(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulHKI && create_if_block_311(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulHKI*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_35*/
            ctx[161]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*JudulHKI*/
        4 && input.value !== /*JudulHKI*/
        ctx2[33]) {
          set_input_value(
            input,
            /*JudulHKI*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_311(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_211(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_410(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisHKI && create_if_block_211(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisHKI*/
          ctx[34]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_36*/
            ctx[162]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulisHKI*/
        8 && input.value !== /*namaPenulisHKI*/
        ctx2[34]) {
          set_input_value(
            input,
            /*namaPenulisHKI*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_211(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_111(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[1].jenisHKI + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jenisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_311(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jenisHKI && create_if_block_111(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*jenisHKI*/
          ctx[35]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_37*/
            ctx[163]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisHKI*/
        16 && input.value !== /*jenisHKI*/
        ctx2[35]) {
          set_input_value(
            input,
            /*jenisHKI*/
            ctx2[35]
          );
        }
        if (
          /*error*/
          ctx2[1].jenisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_111(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block6(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].noHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].noHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_211(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].noHKI && create_if_block6(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*noHKI*/
          ctx[36]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_38*/
            ctx[164]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*noHKI*/
        32 && input.value !== /*noHKI*/
        ctx2[36]) {
          set_input_value(
            input,
            /*noHKI*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[1].noHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block6(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_111(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_63] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul HKI",
        $$slots: { default: [create_default_slot_53] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_410] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_311] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_211] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPHKI*/
            ctx[86]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunHKI*/
        2 | dirty[6] & /*$$scope*/
        32768) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*JudulHKI*/
        4 | dirty[6] & /*$$scope*/
        32768) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulisHKI*/
        8 | dirty[6] & /*$$scope*/
        32768) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jenisHKI*/
        16 | dirty[6] & /*$$scope*/
        32768) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI*/
        32 | dirty[6] & /*$$scope*/
        32768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Hak Kekayaan Intelektual";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_default_slot9(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form sebelum disimpan";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment29(ctx) {
    let article;
    let t0;
    let modal0;
    let updating_show;
    let t1;
    let modal1;
    let updating_show_1;
    let t2;
    let modal2;
    let updating_show_2;
    let t3;
    let modal3;
    let updating_show_3;
    let t4;
    let modal4;
    let updating_show_4;
    let t5;
    let modal5;
    let updating_show_5;
    let t6;
    let modalerror;
    let updating_show_6;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_362] },
        $$scope: { ctx }
      }
    });
    function modal0_show_binding(value) {
      ctx[135](value);
    }
    let modal0_props = {
      $$slots: {
        header: [create_header_slot_5],
        default: [create_default_slot_302]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenelitian*/
      ctx[65] !== void 0
    ) {
      modal0_props.show = /*showModalPenelitian*/
      ctx[65];
    }
    modal0 = new Modal_default({ props: modal0_props });
    binding_callbacks.push(() => bind(modal0, "show", modal0_show_binding));
    function modal1_show_binding(value) {
      ctx[142](value);
    }
    let modal1_props = {
      $$slots: {
        header: [create_header_slot_4],
        default: [create_default_slot_242]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPengmas*/
      ctx[66] !== void 0
    ) {
      modal1_props.show = /*showModalPengmas*/
      ctx[66];
    }
    modal1 = new Modal_default({ props: modal1_props });
    binding_callbacks.push(() => bind(modal1, "show", modal1_show_binding));
    function modal2_show_binding(value) {
      ctx[147](value);
    }
    let modal2_props = {
      $$slots: {
        header: [create_header_slot_3],
        default: [create_default_slot_192]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalDiseminasi*/
      ctx[67] !== void 0
    ) {
      modal2_props.show = /*showModalDiseminasi*/
      ctx[67];
    }
    modal2 = new Modal_default({ props: modal2_props });
    binding_callbacks.push(() => bind(modal2, "show", modal2_show_binding));
    function modal3_show_binding(value) {
      ctx[153](value);
    }
    let modal3_props = {
      $$slots: {
        header: [create_header_slot_2],
        default: [create_default_slot_132]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPublikasi*/
      ctx[68] !== void 0
    ) {
      modal3_props.show = /*showModalPublikasi*/
      ctx[68];
    }
    modal3 = new Modal_default({ props: modal3_props });
    binding_callbacks.push(() => bind(modal3, "show", modal3_show_binding));
    function modal4_show_binding(value) {
      ctx[159](value);
    }
    let modal4_props = {
      $$slots: {
        header: [create_header_slot_1],
        default: [create_default_slot_73]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenulisanBuku*/
      ctx[69] !== void 0
    ) {
      modal4_props.show = /*showModalPenulisanBuku*/
      ctx[69];
    }
    modal4 = new Modal_default({ props: modal4_props });
    binding_callbacks.push(() => bind(modal4, "show", modal4_show_binding));
    function modal5_show_binding(value) {
      ctx[165](value);
    }
    let modal5_props = {
      $$slots: {
        header: [create_header_slot],
        default: [create_default_slot_111]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalHKI*/
      ctx[70] !== void 0
    ) {
      modal5_props.show = /*showModalHKI*/
      ctx[70];
    }
    modal5 = new Modal_default({ props: modal5_props });
    binding_callbacks.push(() => bind(modal5, "show", modal5_show_binding));
    function modalerror_show_binding(value) {
      ctx[166](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot9] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorForm*/
      ctx[71] !== void 0
    ) {
      modalerror_props.show = /*showModalErrorForm*/
      ctx[71];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    return {
      c() {
        create_component(article.$$.fragment);
        t0 = space();
        create_component(modal0.$$.fragment);
        t1 = space();
        create_component(modal1.$$.fragment);
        t2 = space();
        create_component(modal2.$$.fragment);
        t3 = space();
        create_component(modal3.$$.fragment);
        t4 = space();
        create_component(modal4.$$.fragment);
        t5 = space();
        create_component(modal5.$$.fragment);
        t6 = space();
        create_component(modalerror.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        insert(target, t0, anchor);
        mount_component(modal0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modal1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modal2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modal3, target, anchor);
        insert(target, t4, anchor);
        mount_component(modal4, target, anchor);
        insert(target, t5, anchor);
        mount_component(modal5, target, anchor);
        insert(target, t6, anchor);
        mount_component(modalerror, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, vmataKuliah, error*/
        255 | dirty[1] & /*tahunLulusS3, tahunLulusS2, tahunLulusS1, tahunMasukS3, tahunMasukS2, tahunMasukS1, bidangIlmuS3, bidangIlmuS2, bidangIlmuS1, pertiS3, pertiS2, pertiS1, mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap*/
        2147483584 | dirty[2] & /*tab3, judulTugasAkhirS3, judulTugasAkhirS2, judulTugasAkhirS1, tab2, tab1*/
        7175 | dirty[6] & /*$$scope*/
        32768) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
        const modal0_changes = {};
        if (dirty[0] & /*error, biayaPP, sumberDanaPenelitian, rolePenelitian, judulPenelitian, tahunPenelitian*/
        7938 | dirty[6] & /*$$scope*/
        32768) {
          modal0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[2] & /*showModalPenelitian*/
        8) {
          updating_show = true;
          modal0_changes.show = /*showModalPenelitian*/
          ctx2[65];
          add_flush_callback(() => updating_show = false);
        }
        modal0.$set(modal0_changes);
        const modal1_changes = {};
        if (dirty[0] & /*error, biayaPengmas, sumberDanaPengmas, rolePengmas, judulPengmas, tahunPengmas*/
        253954 | dirty[6] & /*$$scope*/
        32768) {
          modal1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[2] & /*showModalPengmas*/
        16) {
          updating_show_1 = true;
          modal1_changes.show = /*showModalPengmas*/
          ctx2[66];
          add_flush_callback(() => updating_show_1 = false);
        }
        modal1.$set(modal1_changes);
        const modal2_changes = {};
        if (dirty[0] & /*error, namaPertemuanDiseminasi, namaPemakalahDiseminasi, judulDiseminasi, tahunDiseminasi*/
        3932162 | dirty[6] & /*$$scope*/
        32768) {
          modal2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[2] & /*showModalDiseminasi*/
        32) {
          updating_show_2 = true;
          modal2_changes.show = /*showModalDiseminasi*/
          ctx2[67];
          add_flush_callback(() => updating_show_2 = false);
        }
        modal2.$set(modal2_changes);
        const modal3_changes = {};
        if (dirty[0] & /*error, impactFactor, namaJurnal, namaPenulis, judulPublikasi, tahunPublikasi*/
        130023426 | dirty[6] & /*$$scope*/
        32768) {
          modal3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[2] & /*showModalPublikasi*/
        64) {
          updating_show_3 = true;
          modal3_changes.show = /*showModalPublikasi*/
          ctx2[68];
          add_flush_callback(() => updating_show_3 = false);
        }
        modal3.$set(modal3_changes);
        const modal4_changes = {};
        if (dirty[0] & /*error, PenerbitBuku, namaPenulisBuku, JudulBuku, tahunBuku*/
        2013265922 | dirty[1] & /*Isbn*/
        1 | dirty[6] & /*$$scope*/
        32768) {
          modal4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_4 && dirty[2] & /*showModalPenulisanBuku*/
        128) {
          updating_show_4 = true;
          modal4_changes.show = /*showModalPenulisanBuku*/
          ctx2[69];
          add_flush_callback(() => updating_show_4 = false);
        }
        modal4.$set(modal4_changes);
        const modal5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI, jenisHKI, namaPenulisHKI, JudulHKI, tahunHKI*/
        62 | dirty[6] & /*$$scope*/
        32768) {
          modal5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_5 && dirty[2] & /*showModalHKI*/
        256) {
          updating_show_5 = true;
          modal5_changes.show = /*showModalHKI*/
          ctx2[70];
          add_flush_callback(() => updating_show_5 = false);
        }
        modal5.$set(modal5_changes);
        const modalerror_changes = {};
        if (dirty[6] & /*$$scope*/
        32768) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_6 && dirty[2] & /*showModalErrorForm*/
        512) {
          updating_show_6 = true;
          modalerror_changes.show = /*showModalErrorForm*/
          ctx2[71];
          add_flush_callback(() => updating_show_6 = false);
        }
        modalerror.$set(modalerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        transition_in(modal0.$$.fragment, local);
        transition_in(modal1.$$.fragment, local);
        transition_in(modal2.$$.fragment, local);
        transition_in(modal3.$$.fragment, local);
        transition_in(modal4.$$.fragment, local);
        transition_in(modal5.$$.fragment, local);
        transition_in(modalerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        transition_out(modal0.$$.fragment, local);
        transition_out(modal1.$$.fragment, local);
        transition_out(modal2.$$.fragment, local);
        transition_out(modal3.$$.fragment, local);
        transition_out(modal4.$$.fragment, local);
        transition_out(modal5.$$.fragment, local);
        transition_out(modalerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
        }
        destroy_component(article, detaching);
        destroy_component(modal0, detaching);
        destroy_component(modal1, detaching);
        destroy_component(modal2, detaching);
        destroy_component(modal3, detaching);
        destroy_component(modal4, detaching);
        destroy_component(modal5, detaching);
        destroy_component(modalerror, detaching);
      }
    };
  }
  function formatRupiah2(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance23($$self, $$props, $$invalidate) {
    let $apiURL;
    let $route;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(169, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(170, $route = $$value));
    let { params } = $$props;
    const id = params["1"];
    let vmataKuliah;
    let error = {};
    let data2, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let biayaPP, tahunPenelitian, judulPenelitian, rolePenelitian, sumberDanaPenelitian;
    let biayaPengmas, tahunPengmas, judulPengmas, rolePengmas, sumberDanaPengmas;
    let tahunDiseminasi, judulDiseminasi, namaPemakalahDiseminasi, namaPertemuanDiseminasi;
    let tahunPublikasi, judulPublikasi, namaPenulis, namaJurnal, impactFactor;
    let tahunBuku, JudulBuku, namaPenulisBuku, PenerbitBuku, Isbn;
    let tahunHKI, JudulHKI, namaPenulisHKI, jenisHKI, noHKI;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email3, mataKuliah = [];
    let pertiS1, pertiS2, pertiS3, bidangIlmuS1, bidangIlmuS2, bidangIlmuS3, tahunMasukS1, tahunMasukS2, tahunMasukS3, tahunLulusS1, tahunLulusS2, tahunLulusS3, judulTugasAkhirS1, judulTugasAkhirS2, judulTugasAkhirS3;
    let showModalPenelitian = false;
    let showModalPengmas = false;
    let showModalDiseminasi = false;
    let showModalPublikasi = false;
    let showModalPenulisanBuku = false;
    let showModalHKI = false;
    let showModalErrorForm = false;
    async function clickModalPenelitian() {
      $$invalidate(65, showModalPenelitian = true);
    }
    async function clickModalPengmas() {
      $$invalidate(66, showModalPengmas = true);
    }
    async function clickModalDiseminasi() {
      $$invalidate(67, showModalDiseminasi = true);
    }
    async function clickModalPublikasi() {
      $$invalidate(68, showModalPublikasi = true);
    }
    async function clickModalPenulisanBuku() {
      $$invalidate(69, showModalPenulisanBuku = true);
    }
    async function clickModalHKI() {
      $$invalidate(70, showModalHKI = true);
    }
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          data2 = result;
          idProfile = data2.id;
          idUser = data2.uid;
          $$invalidate(37, namaLengkap = data2.nama_lengkap);
          $$invalidate(38, jabatanFungsional = data2.jabatan_fungsional);
          $$invalidate(39, nip = data2.nip);
          $$invalidate(40, nidn = data2.nidn);
          $$invalidate(41, tempatLahir = data2.tempat_lahir);
          $$invalidate(42, tanggalLahir = data2.tanggal_lahir);
          $$invalidate(43, alamatRumah = data2.alamat_rumah);
          $$invalidate(44, telpFaxRumah = data2.telp_fax_rumah);
          $$invalidate(45, nomorHandphone = data2.nomor_handphone);
          $$invalidate(46, alamatKantor = data2.alamat_kantor);
          $$invalidate(47, telpFaxKantor = data2.telp_fax_kantor);
          $$invalidate(48, email3 = data2.email);
          $$invalidate(49, mataKuliah = typeof data2.mata_kuliah === "string" ? JSON.parse(data2.mata_kuliah) : data2.mata_kuliah || []);
        }
      }
      const responseRP = await fetch($apiURL + "/riwayatpendidikan/" + id, { method: "GET", headers });
      const dataRP = await responseRP.json();
      if (dataRP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRP.ok) {
          $$invalidate(50, pertiS1 = dataRP.nama_perti_s1);
          $$invalidate(51, pertiS2 = dataRP.nama_perti_s2);
          $$invalidate(52, pertiS3 = dataRP.nama_perti_s3);
          $$invalidate(53, bidangIlmuS1 = dataRP.bidang_ilmu_s1);
          $$invalidate(54, bidangIlmuS2 = dataRP.bidang_ilmu_s2);
          $$invalidate(55, bidangIlmuS3 = dataRP.bidang_ilmu_s3);
          $$invalidate(56, tahunMasukS1 = dataRP.tahun_masuk_s1);
          $$invalidate(57, tahunMasukS2 = dataRP.tahun_masuk_s2);
          $$invalidate(58, tahunMasukS3 = dataRP.tahun_masuk_s3);
          $$invalidate(59, tahunLulusS1 = dataRP.tahun_lulus_s1);
          $$invalidate(60, tahunLulusS2 = dataRP.tahun_lulus_s2);
          $$invalidate(61, tahunLulusS3 = dataRP.tahun_lulus_s3);
          $$invalidate(62, judulTugasAkhirS1 = dataRP.judul_tugasakhir_s1);
          $$invalidate(63, judulTugasAkhirS2 = dataRP.judul_tugasakhir_s2);
          $$invalidate(64, judulTugasAkhirS3 = dataRP.judul_tugasakhir_s3);
        }
      }
      getPengalamanPenelitian();
      getPengalamanPengmas();
      getPengalamanDiseminasi();
      getPengalamanPublikasi();
      getPengalamanPenulisanBuku();
      getPengalamanHKI();
    });
    async function getPengalamanPenelitian() {
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + id, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (resultPP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(2, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
    }
    async function getPengalamanPengmas() {
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + id, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (resultPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(3, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
    }
    async function getPengalamanDiseminasi() {
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + id, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (resultPD.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(4, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
    }
    async function getPengalamanPublikasi() {
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + id, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (resultPPub.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(5, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
    }
    async function getPengalamanPenulisanBuku() {
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + id, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (resultPPB.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(6, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
    }
    async function getPengalamanHKI() {
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + id, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (resultPHKI.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(7, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
    }
    async function simpanPP() {
      $$invalidate(1, error = {});
      let payload = {
        tahunPenelitian,
        judulPenelitian,
        rolePenelitian,
        sumberDanaPenelitian,
        biayaPP,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenelitian", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(65, showModalPenelitian = false);
            $$invalidate(9, tahunPenelitian = "");
            $$invalidate(10, judulPenelitian = "");
            $$invalidate(11, rolePenelitian = "");
            $$invalidate(12, sumberDanaPenelitian = "");
            $$invalidate(8, biayaPP = "");
            getPengalamanPenelitian();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPM() {
      $$invalidate(1, error = {});
      let payload = {
        tahunPengmas,
        judulPengmas,
        rolePengmas,
        sumberDanaPengmas,
        biayaPengmas,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPengmas", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(66, showModalPengmas = false);
            $$invalidate(14, tahunPengmas = "");
            $$invalidate(15, judulPengmas = "");
            $$invalidate(16, rolePengmas = "");
            $$invalidate(17, sumberDanaPengmas = "");
            $$invalidate(13, biayaPengmas = "");
            getPengalamanPengmas();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPD() {
      $$invalidate(1, error = {});
      let payload = {
        tahunDiseminasi,
        judulDiseminasi,
        namaPemakalahDiseminasi,
        namaPertemuanDiseminasi,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanDiseminasi", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(67, showModalDiseminasi = false);
            $$invalidate(18, tahunDiseminasi = "");
            $$invalidate(19, judulDiseminasi = "");
            $$invalidate(20, namaPemakalahDiseminasi = "");
            $$invalidate(21, namaPertemuanDiseminasi = "");
            getPengalamanDiseminasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPublikasi() {
      $$invalidate(1, error = {});
      let payload = {
        tahunPublikasi,
        judulPublikasi,
        namaPenulis,
        namaJurnal,
        impactFactor,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPublikasi", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(68, showModalPublikasi = false);
            $$invalidate(22, tahunPublikasi = "");
            $$invalidate(23, judulPublikasi = "");
            $$invalidate(24, namaPenulis = "");
            $$invalidate(25, namaJurnal = "");
            $$invalidate(26, impactFactor = "");
            getPengalamanPublikasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPB() {
      $$invalidate(1, error = {});
      let payload = {
        tahunBuku,
        JudulBuku,
        namaPenulisBuku,
        PenerbitBuku,
        Isbn,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenulisanBuku", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(69, showModalPenulisanBuku = false);
            $$invalidate(27, tahunBuku = "");
            $$invalidate(28, JudulBuku = "");
            $$invalidate(29, namaPenulisBuku = "");
            $$invalidate(30, PenerbitBuku = "");
            $$invalidate(31, Isbn = "");
            getPengalamanPenulisanBuku();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPHKI() {
      $$invalidate(1, error = {});
      let payload = {
        tahunHKI,
        JudulHKI,
        namaPenulisHKI,
        jenisHKI,
        noHKI,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanHKI", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(70, showModalHKI = false);
            $$invalidate(32, tahunHKI = "");
            $$invalidate(33, JudulHKI = "");
            $$invalidate(34, namaPenulisHKI = "");
            $$invalidate(35, jenisHKI = "");
            $$invalidate(36, noHKI = "");
            getPengalamanHKI();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRiwayatPendidikan() {
      const payload = {
        pertiS1,
        pertiS2,
        pertiS3,
        bidangIlmuS1,
        bidangIlmuS2,
        bidangIlmuS3,
        tahunMasukS1,
        tahunMasukS2,
        tahunMasukS3,
        tahunLulusS1,
        tahunLulusS2,
        tahunLulusS3,
        judulTugasAkhirS1,
        judulTugasAkhirS2,
        judulTugasAkhirS3,
        id
      };
      const response = await fetch($apiURL + "/riwayatpendidikan", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/admin/usersmanagement");
        } else {
          console.log(response);
        }
      }
    }
    async function simpanIdentitas() {
      $$invalidate(1, error = {});
      let payload = {
        idProfile,
        namaLengkap,
        jabatanFungsional,
        nip,
        nidn,
        tempatLahir,
        tanggalLahir,
        alamatRumah,
        telpFaxRumah,
        nomorHandphone,
        alamatKantor,
        telpFaxKantor,
        email: email3,
        mataKuliah
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      console.log(error);
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/userprofile", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/admin/usersmanagement");
          } else {
            console.log(response);
          }
        }
      }
    }
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(72, tab1 = true);
      $$invalidate(73, tab2 = false);
      $$invalidate(74, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(72, tab1 = false);
      $$invalidate(73, tab2 = true);
      $$invalidate(74, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(72, tab1 = false);
      $$invalidate(73, tab2 = false);
      $$invalidate(74, tab3 = true);
    }
    function addMatkul() {
      let addVmatkul = { label: vmataKuliah };
      $$invalidate(49, mataKuliah = [...mataKuliah, addVmatkul]);
      $$invalidate(0, vmataKuliah = "");
    }
    async function delrowPP(ev) {
      let idPP = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenelitian/" + idPP, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenelitian();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPM(ev) {
      let idPM = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPengmas/" + idPM, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPengmas();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPD(ev) {
      let idPD = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanDiseminasi/" + idPD, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanDiseminasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPub(ev) {
      let idPPub = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPublikasi/" + idPPub, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPublikasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPB(ev) {
      let idPPB = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idPPB, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenulisanBuku();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPHKI(ev) {
      let idPHKI = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanHKI/" + idPHKI, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanHKI();
        } else {
          console.log(response);
        }
      }
    }
    function deleteMatkul(e) {
      let delMatkul = e.target.getAttribute("data-value");
      $$invalidate(49, mataKuliah = mataKuliah.filter((matkul) => {
        return matkul.label !== delMatkul;
      }));
    }
    function input_input_handler() {
      namaLengkap = this.value;
      $$invalidate(37, namaLengkap);
    }
    function select_change_handler() {
      jabatanFungsional = select_value(this);
      $$invalidate(38, jabatanFungsional);
    }
    function input_input_handler_1() {
      nip = to_number(this.value);
      $$invalidate(39, nip);
    }
    function input_input_handler_2() {
      nidn = to_number(this.value);
      $$invalidate(40, nidn);
    }
    function input_input_handler_3() {
      tempatLahir = this.value;
      $$invalidate(41, tempatLahir);
    }
    function input_input_handler_4() {
      tanggalLahir = this.value;
      $$invalidate(42, tanggalLahir);
    }
    function input_input_handler_5() {
      alamatRumah = this.value;
      $$invalidate(43, alamatRumah);
    }
    function input_input_handler_6() {
      telpFaxRumah = to_number(this.value);
      $$invalidate(44, telpFaxRumah);
    }
    function input_input_handler_7() {
      nomorHandphone = to_number(this.value);
      $$invalidate(45, nomorHandphone);
    }
    function input_input_handler_8() {
      alamatKantor = this.value;
      $$invalidate(46, alamatKantor);
    }
    function input_input_handler_9() {
      telpFaxKantor = to_number(this.value);
      $$invalidate(47, telpFaxKantor);
    }
    function input_input_handler_10() {
      email3 = this.value;
      $$invalidate(48, email3);
    }
    function input_input_handler_11() {
      vmataKuliah = this.value;
      $$invalidate(0, vmataKuliah);
    }
    function input0_input_handler() {
      pertiS1 = this.value;
      $$invalidate(50, pertiS1);
    }
    function input1_input_handler() {
      pertiS2 = this.value;
      $$invalidate(51, pertiS2);
    }
    function input2_input_handler() {
      pertiS3 = this.value;
      $$invalidate(52, pertiS3);
    }
    function input3_input_handler() {
      bidangIlmuS1 = this.value;
      $$invalidate(53, bidangIlmuS1);
    }
    function input4_input_handler() {
      bidangIlmuS2 = this.value;
      $$invalidate(54, bidangIlmuS2);
    }
    function input5_input_handler() {
      bidangIlmuS3 = this.value;
      $$invalidate(55, bidangIlmuS3);
    }
    function input6_input_handler() {
      tahunMasukS1 = to_number(this.value);
      $$invalidate(56, tahunMasukS1);
    }
    function input7_input_handler() {
      tahunMasukS2 = to_number(this.value);
      $$invalidate(57, tahunMasukS2);
    }
    function input8_input_handler() {
      tahunMasukS3 = to_number(this.value);
      $$invalidate(58, tahunMasukS3);
    }
    function input9_input_handler() {
      tahunLulusS1 = to_number(this.value);
      $$invalidate(59, tahunLulusS1);
    }
    function input10_input_handler() {
      tahunLulusS2 = to_number(this.value);
      $$invalidate(60, tahunLulusS2);
    }
    function input11_input_handler() {
      tahunLulusS3 = to_number(this.value);
      $$invalidate(61, tahunLulusS3);
    }
    function textarea0_input_handler() {
      judulTugasAkhirS1 = this.value;
      $$invalidate(62, judulTugasAkhirS1);
    }
    function textarea1_input_handler() {
      judulTugasAkhirS2 = this.value;
      $$invalidate(63, judulTugasAkhirS2);
    }
    function textarea2_input_handler() {
      judulTugasAkhirS3 = this.value;
      $$invalidate(64, judulTugasAkhirS3);
    }
    function input_input_handler_12() {
      tahunPenelitian = to_number(this.value);
      $$invalidate(9, tahunPenelitian);
    }
    function input_input_handler_13() {
      judulPenelitian = this.value;
      $$invalidate(10, judulPenelitian);
    }
    function select_change_handler_1() {
      rolePenelitian = select_value(this);
      $$invalidate(11, rolePenelitian);
    }
    function input_input_handler_14() {
      sumberDanaPenelitian = this.value;
      $$invalidate(12, sumberDanaPenelitian);
    }
    function input_input_handler_15() {
      biayaPP = this.value;
      $$invalidate(8, biayaPP);
    }
    const keyup_handler = () => $$invalidate(8, biayaPP = formatRupiah2(biayaPP, "Rp. "));
    function modal0_show_binding(value) {
      showModalPenelitian = value;
      $$invalidate(65, showModalPenelitian);
    }
    function input_input_handler_16() {
      tahunPengmas = to_number(this.value);
      $$invalidate(14, tahunPengmas);
    }
    function input_input_handler_17() {
      judulPengmas = this.value;
      $$invalidate(15, judulPengmas);
    }
    function select_change_handler_2() {
      rolePengmas = select_value(this);
      $$invalidate(16, rolePengmas);
    }
    function input_input_handler_18() {
      sumberDanaPengmas = this.value;
      $$invalidate(17, sumberDanaPengmas);
    }
    function input_input_handler_19() {
      biayaPengmas = this.value;
      $$invalidate(13, biayaPengmas);
    }
    const keyup_handler_1 = () => $$invalidate(13, biayaPengmas = formatRupiah2(biayaPengmas, "Rp. "));
    function modal1_show_binding(value) {
      showModalPengmas = value;
      $$invalidate(66, showModalPengmas);
    }
    function input_input_handler_20() {
      tahunDiseminasi = to_number(this.value);
      $$invalidate(18, tahunDiseminasi);
    }
    function input_input_handler_21() {
      judulDiseminasi = this.value;
      $$invalidate(19, judulDiseminasi);
    }
    function input_input_handler_22() {
      namaPemakalahDiseminasi = this.value;
      $$invalidate(20, namaPemakalahDiseminasi);
    }
    function input_input_handler_23() {
      namaPertemuanDiseminasi = this.value;
      $$invalidate(21, namaPertemuanDiseminasi);
    }
    function modal2_show_binding(value) {
      showModalDiseminasi = value;
      $$invalidate(67, showModalDiseminasi);
    }
    function input_input_handler_24() {
      tahunPublikasi = to_number(this.value);
      $$invalidate(22, tahunPublikasi);
    }
    function input_input_handler_25() {
      judulPublikasi = this.value;
      $$invalidate(23, judulPublikasi);
    }
    function input_input_handler_26() {
      namaPenulis = this.value;
      $$invalidate(24, namaPenulis);
    }
    function input_input_handler_27() {
      namaJurnal = this.value;
      $$invalidate(25, namaJurnal);
    }
    function input_input_handler_28() {
      impactFactor = this.value;
      $$invalidate(26, impactFactor);
    }
    function modal3_show_binding(value) {
      showModalPublikasi = value;
      $$invalidate(68, showModalPublikasi);
    }
    function input_input_handler_29() {
      tahunBuku = to_number(this.value);
      $$invalidate(27, tahunBuku);
    }
    function input_input_handler_30() {
      JudulBuku = this.value;
      $$invalidate(28, JudulBuku);
    }
    function input_input_handler_31() {
      namaPenulisBuku = this.value;
      $$invalidate(29, namaPenulisBuku);
    }
    function input_input_handler_32() {
      PenerbitBuku = this.value;
      $$invalidate(30, PenerbitBuku);
    }
    function input_input_handler_33() {
      Isbn = this.value;
      $$invalidate(31, Isbn);
    }
    function modal4_show_binding(value) {
      showModalPenulisanBuku = value;
      $$invalidate(69, showModalPenulisanBuku);
    }
    function input_input_handler_34() {
      tahunHKI = to_number(this.value);
      $$invalidate(32, tahunHKI);
    }
    function input_input_handler_35() {
      JudulHKI = this.value;
      $$invalidate(33, JudulHKI);
    }
    function input_input_handler_36() {
      namaPenulisHKI = this.value;
      $$invalidate(34, namaPenulisHKI);
    }
    function input_input_handler_37() {
      jenisHKI = this.value;
      $$invalidate(35, jenisHKI);
    }
    function input_input_handler_38() {
      noHKI = this.value;
      $$invalidate(36, noHKI);
    }
    function modal5_show_binding(value) {
      showModalHKI = value;
      $$invalidate(70, showModalHKI);
    }
    function modalerror_show_binding(value) {
      showModalErrorForm = value;
      $$invalidate(71, showModalErrorForm);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(100, params = $$props2.params);
    };
    return [
      vmataKuliah,
      error,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      biayaPP,
      tahunPenelitian,
      judulPenelitian,
      rolePenelitian,
      sumberDanaPenelitian,
      biayaPengmas,
      tahunPengmas,
      judulPengmas,
      rolePengmas,
      sumberDanaPengmas,
      tahunDiseminasi,
      judulDiseminasi,
      namaPemakalahDiseminasi,
      namaPertemuanDiseminasi,
      tahunPublikasi,
      judulPublikasi,
      namaPenulis,
      namaJurnal,
      impactFactor,
      tahunBuku,
      JudulBuku,
      namaPenulisBuku,
      PenerbitBuku,
      Isbn,
      tahunHKI,
      JudulHKI,
      namaPenulisHKI,
      jenisHKI,
      noHKI,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email3,
      mataKuliah,
      pertiS1,
      pertiS2,
      pertiS3,
      bidangIlmuS1,
      bidangIlmuS2,
      bidangIlmuS3,
      tahunMasukS1,
      tahunMasukS2,
      tahunMasukS3,
      tahunLulusS1,
      tahunLulusS2,
      tahunLulusS3,
      judulTugasAkhirS1,
      judulTugasAkhirS2,
      judulTugasAkhirS3,
      showModalPenelitian,
      showModalPengmas,
      showModalDiseminasi,
      showModalPublikasi,
      showModalPenulisanBuku,
      showModalHKI,
      showModalErrorForm,
      tab1,
      tab2,
      tab3,
      clickModalPenelitian,
      clickModalPengmas,
      clickModalDiseminasi,
      clickModalPublikasi,
      clickModalPenulisanBuku,
      clickModalHKI,
      simpanPP,
      simpanPM,
      simpanPD,
      simpanPPublikasi,
      simpanPPB,
      simpanPHKI,
      simpanRiwayatPendidikan,
      simpanIdentitas,
      clicktab1,
      clicktab2,
      clicktab3,
      addMatkul,
      delrowPP,
      delrowPM,
      delrowPD,
      delrowPPub,
      delrowPPB,
      delrowPHKI,
      deleteMatkul,
      params,
      input_input_handler,
      select_change_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      input_input_handler_6,
      input_input_handler_7,
      input_input_handler_8,
      input_input_handler_9,
      input_input_handler_10,
      input_input_handler_11,
      input0_input_handler,
      input1_input_handler,
      input2_input_handler,
      input3_input_handler,
      input4_input_handler,
      input5_input_handler,
      input6_input_handler,
      input7_input_handler,
      input8_input_handler,
      input9_input_handler,
      input10_input_handler,
      input11_input_handler,
      textarea0_input_handler,
      textarea1_input_handler,
      textarea2_input_handler,
      input_input_handler_12,
      input_input_handler_13,
      select_change_handler_1,
      input_input_handler_14,
      input_input_handler_15,
      keyup_handler,
      modal0_show_binding,
      input_input_handler_16,
      input_input_handler_17,
      select_change_handler_2,
      input_input_handler_18,
      input_input_handler_19,
      keyup_handler_1,
      modal1_show_binding,
      input_input_handler_20,
      input_input_handler_21,
      input_input_handler_22,
      input_input_handler_23,
      modal2_show_binding,
      input_input_handler_24,
      input_input_handler_25,
      input_input_handler_26,
      input_input_handler_27,
      input_input_handler_28,
      modal3_show_binding,
      input_input_handler_29,
      input_input_handler_30,
      input_input_handler_31,
      input_input_handler_32,
      input_input_handler_33,
      modal4_show_binding,
      input_input_handler_34,
      input_input_handler_35,
      input_input_handler_36,
      input_input_handler_37,
      input_input_handler_38,
      modal5_show_binding,
      modalerror_show_binding
    ];
  }
  var Profile = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance23, create_fragment29, safe_not_equal, { params: 100 }, null, [-1, -1, -1, -1, -1, -1, -1]);
    }
  };
  var profile_default = Profile;

  // src/pages/admin/proposalmanagement.svelte
  init_define_process();

  // src/modules/Status.svelte
  init_define_process();
  function create_if_block_124(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Proposal Diterima";
        attr(span, "class", "tag is-link is-success");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_113(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Proposal Ditolak";
        attr(span, "class", "tag is-danger");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_103(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Ka. Pusat Kajian";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_93(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Ka. Pusat Kajian";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_83(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Reviewer";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_73(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Reviewer";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_63(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Ka. LPPM";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_54(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Ka. LPPM";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_413(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Ka. Departemen";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_313(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Ka.Departemen";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_213(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Administrasi";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_114(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Proposal";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block7(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Draft Proposal";
        attr(span, "class", "tag is-warning is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_fragment30(ctx) {
    let if_block_anchor;
    function select_block_type(ctx2, dirty) {
      if (
        /*code*/
        ctx2[0] === 0
      )
        return create_if_block7;
      if (
        /*code*/
        ctx2[0] === 1
      )
        return create_if_block_114;
      if (
        /*code*/
        ctx2[0] === 2
      )
        return create_if_block_213;
      if (
        /*code*/
        ctx2[0] === 3
      )
        return create_if_block_313;
      if (
        /*code*/
        ctx2[0] === 4
      )
        return create_if_block_413;
      if (
        /*code*/
        ctx2[0] === 5
      )
        return create_if_block_54;
      if (
        /*code*/
        ctx2[0] === 6
      )
        return create_if_block_63;
      if (
        /*code*/
        ctx2[0] === 7
      )
        return create_if_block_73;
      if (
        /*code*/
        ctx2[0] === 8
      )
        return create_if_block_83;
      if (
        /*code*/
        ctx2[0] === 9
      )
        return create_if_block_93;
      if (
        /*code*/
        ctx2[0] === 10
      )
        return create_if_block_103;
      if (
        /*code*/
        ctx2[0] === 11
      )
        return create_if_block_113;
      if (
        /*code*/
        ctx2[0] === 12
      )
        return create_if_block_124;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type && current_block_type(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
          if (if_block)
            if_block.d(1);
          if_block = current_block_type && current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) {
          if_block.d(detaching);
        }
      }
    };
  }
  function instance24($$self, $$props, $$invalidate) {
    let { code } = $$props;
    $$self.$$set = ($$props2) => {
      if ("code" in $$props2)
        $$invalidate(0, code = $$props2.code);
    };
    return [code];
  }
  var Status = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance24, create_fragment30, safe_not_equal, { code: 0 });
    }
  };
  var Status_default = Status;

  // src/pages/admin/proposalmanagement.svelte
  function get_each_context6(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function create_if_block8(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot10] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty & /*$$scope, items*/
        513) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function create_each_block6(ctx) {
    let tr;
    let td0;
    let p0;
    let t0_value = (
      /*item*/
      ctx[6].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p1;
    let t2_value = (
      /*item*/
      ctx[6].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p2;
    let t4_value = (
      /*item*/
      ctx[6].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_uid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({ props: { code: (
      /*item*/
      ctx[6].status
    ) } });
    icon = new Icon_default({
      props: { id: "review", src: infoOutline }
    });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        p0 = element("p");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p1 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p2 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1lg2tz8");
        attr(td1, "class", "kegiatan svelte-1lg2tz8");
        attr(td2, "class", "skema svelte-1lg2tz8");
        attr(td3, "class", "status svelte-1lg2tz8");
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "uid", button_uid_value = /*item*/
        ctx[6].id);
        attr(td4, "class", "review svelte-1lg2tz8");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, p0);
        append(p0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p1);
        append(p1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p2);
        append(p2, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleReview*/
            ctx[1]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items*/
        1) && t0_value !== (t0_value = /*item*/
        ctx2[6].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items*/
        1) && t2_value !== (t2_value = /*item*/
        ctx2[6].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items*/
        1) && t4_value !== (t4_value = /*item*/
        ctx2[6].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items*/
        1)
          status_changes.code = /*item*/
          ctx2[6].status;
        status.$set(status_changes);
        if (!current || dirty & /*items*/
        1 && button_uid_value !== (button_uid_value = /*item*/
        ctx2[6].id)) {
          attr(button, "uid", button_uid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot10(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div1;
    let div0;
    let input;
    let t3;
    let span;
    let icon;
    let t4;
    let div3;
    let div2;
    let table;
    let thead;
    let t14;
    let tbody;
    let current;
    icon = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let each_value = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Proposal Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div1 = element("div");
        div0 = element("div");
        input = element("input");
        t3 = space();
        span = element("span");
        create_component(icon.$$.fragment);
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t14 = space();
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(h2, "class", "title is-2");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span, "class", "icon is-left");
        attr(div0, "class", "control has-icons-left");
        attr(div1, "class", "field");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div2, "class", "child svelte-1lg2tz8");
        attr(div3, "class", "box parent svelte-1lg2tz8");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, input);
        append(div0, t3);
        append(div0, span);
        mount_component(icon, span, null);
        insert(target, t4, anchor);
        insert(target, div3, anchor);
        append(div3, div2);
        append(div2, table);
        append(table, thead);
        append(table, t14);
        append(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, handleReview*/
        3) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context6(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block6(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tbody, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div1);
          detach(t4);
          detach(div3);
        }
        destroy_component(icon);
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_fragment31(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*items*/
      ctx[0] && create_if_block8(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block8(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function instance25($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(2, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(3, $apiURL = $$value));
    let items;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/ppm", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(0, items = result.dbData);
        }
      }
    });
    async function handleReview(ev) {
      const id = ev.target.getAttribute("uid");
      $route("/admin/detailproposal/" + id);
    }
    return [items, handleReview];
  }
  var Proposalmanagement = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance25, create_fragment31, safe_not_equal, {});
    }
  };
  var proposalmanagement_default = Proposalmanagement;

  // src/pages/admin/template.svelte
  init_define_process();
  function create_default_slot_313(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div4;
    let div0;
    let button0;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let input;
    let t6;
    let span2;
    let icon1;
    let t7;
    let div6;
    let table;
    let thead;
    let t11;
    let tbody;
    let tr1;
    let td0;
    let t13;
    let td1;
    let button1;
    let t15;
    let td2;
    let div5;
    let p0;
    let button2;
    let span3;
    let icon2;
    let t16;
    let p1;
    let button3;
    let span4;
    let icon3;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "accountAdd", src: add } });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Template";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div4 = element("div");
        div0 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah Template</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        input = element("input");
        t6 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t7 = space();
        div6 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Nama Template</th> <th class="is-narrow"></th> <th class="is-narrow"></th></tr>`;
        t11 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Contoh Template Penelitian Internal";
        t13 = space();
        td1 = element("td");
        button1 = element("button");
        button1.textContent = "Download";
        t15 = space();
        td2 = element("td");
        div5 = element("div");
        p0 = element("p");
        button2 = element("button");
        span3 = element("span");
        create_component(icon2.$$.fragment);
        t16 = space();
        p1 = element("p");
        button3 = element("button");
        span4 = element("span");
        create_component(icon3.$$.fragment);
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div0, "class", "column");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span2, "class", "icon is-left");
        attr(div1, "class", "control has-icons-left");
        attr(div2, "class", "field");
        attr(div3, "class", "column");
        attr(div4, "class", "columns");
        attr(button1, "class", "button is-link button is-small");
        attr(span3, "class", "icon");
        attr(button2, "class", "button is-danger is-outlined is-small");
        attr(p0, "class", "control");
        attr(span4, "class", "icon");
        attr(button3, "class", "button is-link is-outlined is-small");
        attr(p1, "class", "control");
        attr(div5, "class", "field is-grouped");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div6, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        append(div4, div0);
        append(div0, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t3);
        append(button0, span1);
        append(div4, t5);
        append(div4, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, input);
        append(div1, t6);
        append(div1, span2);
        mount_component(icon1, span2, null);
        insert(target, t7, anchor);
        insert(target, div6, anchor);
        append(div6, table);
        append(table, thead);
        append(table, t11);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t13);
        append(tr1, td1);
        append(td1, button1);
        append(tr1, t15);
        append(tr1, td2);
        append(td2, div5);
        append(div5, p0);
        append(p0, button2);
        append(button2, span3);
        mount_component(icon2, span3, null);
        append(div5, t16);
        append(div5, p1);
        append(p1, button3);
        append(button3, span4);
        mount_component(icon3, span4, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(button0, "click", simpanTemplate),
            listen(button1, "click", handleDownloadTemplate)
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div4);
          detach(t7);
          detach(div6);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_213(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaTemplate*/
          ctx[0]
        );
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[3]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*namaTemplate*/
        1 && input.value !== /*namaTemplate*/
        ctx2[0]) {
          set_input_value(
            input,
            /*namaTemplate*/
            ctx2[0]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_113(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "accept", ".xlsx");
        attr(input, "type", "file");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "change",
            /*change_handler*/
            ctx[4]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot11(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let hr;
    let t2;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Template",
        $$slots: { default: [create_default_slot_213] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "File Template",
        $$slots: { default: [create_default_slot_113] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        hr = element("hr");
        t2 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanTemplate);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty & /*$$scope, namaTemplate*/
        129) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty & /*$$scope, file*/
        130) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot2(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Tambah Template";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_fragment32(ctx) {
    let article;
    let t;
    let modal;
    let updating_show;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_313] },
        $$scope: { ctx }
      }
    });
    function modal_show_binding(value) {
      ctx[5](value);
    }
    let modal_props = {
      $$slots: {
        header: [create_header_slot2],
        default: [create_default_slot11]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalTambahTemplate*/
      ctx[2] !== void 0
    ) {
      modal_props.show = /*showModalTambahTemplate*/
      ctx[2];
    }
    modal = new Modal_default({ props: modal_props });
    binding_callbacks.push(() => bind(modal, "show", modal_show_binding));
    return {
      c() {
        create_component(article.$$.fragment);
        t = space();
        create_component(modal.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        insert(target, t, anchor);
        mount_component(modal, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        128) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
        const modal_changes = {};
        if (dirty & /*$$scope, file, namaTemplate*/
        131) {
          modal_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalTambahTemplate*/
        4) {
          updating_show = true;
          modal_changes.show = /*showModalTambahTemplate*/
          ctx2[2];
          add_flush_callback(() => updating_show = false);
        }
        modal.$set(modal_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        transition_in(modal.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        transition_out(modal.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(article, detaching);
        destroy_component(modal, detaching);
      }
    };
  }
  function simpanTemplate() {
  }
  function handleDownloadTemplate() {
  }
  function instance26($$self, $$props, $$invalidate) {
    let namaTemplate;
    let file;
    let showModalTambahTemplate = false;
    function clickModalTambahTemplate() {
      $$invalidate(2, showModalTambahTemplate = true);
    }
    function input_input_handler() {
      namaTemplate = this.value;
      $$invalidate(0, namaTemplate);
    }
    const change_handler = (e) => $$invalidate(1, file = e.target.files[0]);
    function modal_show_binding(value) {
      showModalTambahTemplate = value;
      $$invalidate(2, showModalTambahTemplate);
    }
    return [
      namaTemplate,
      file,
      showModalTambahTemplate,
      input_input_handler,
      change_handler,
      modal_show_binding
    ];
  }
  var Template = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance26, create_fragment32, safe_not_equal, {});
    }
  };
  var template_default = Template;

  // src/pages/admin/usersmanagement.svelte
  init_define_process();
  function get_each_context7(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[13] = list[i];
    child_ctx[15] = i;
    return child_ctx;
  }
  function create_else_block4(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Anda tidak memiliki hak akses halaman ini!";
        attr(h4, "class", "title is-4");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block9(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*items*/
      ctx[0] && create_if_block_115(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_115(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_115(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div4;
    let div0;
    let button;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let input;
    let t6;
    let span2;
    let icon1;
    let t7;
    let div6;
    let div5;
    let table;
    let thead;
    let t15;
    let tbody;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "accountAdd", src: accountAdd }
    });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let each_value = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
    }
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "User Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div4 = element("div");
        div0 = element("div");
        button = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Create user</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        input = element("input");
        t6 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t7 = space();
        div6 = element("div");
        div5 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Username</th> <th>Email</th> <th class="is-narrow">Role</th> <th class="is-narrow">Active</th></tr>`;
        t15 = space();
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        attr(div0, "class", "column");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span2, "class", "icon is-left");
        attr(div1, "class", "control has-icons-left");
        attr(div2, "class", "field");
        attr(div3, "class", "column");
        attr(div4, "class", "columns");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div5, "class", "child svelte-1amf2xn");
        attr(div6, "class", "box parent svelte-1amf2xn");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        append(div4, div0);
        append(div0, button);
        append(button, span0);
        mount_component(icon0, span0, null);
        append(button, t3);
        append(button, span1);
        append(div4, t5);
        append(div4, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, input);
        append(div1, t6);
        append(div1, span2);
        mount_component(icon1, span2, null);
        insert(target, t7, anchor);
        insert(target, div6, anchor);
        append(div6, div5);
        append(div5, table);
        append(table, thead);
        append(table, t15);
        append(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*addUser*/
            ctx[4]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*items, handleActive, handleGroup*/
        13) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context7(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block7(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div4);
          detach(t7);
          detach(div6);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_each(each_blocks, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block7(ctx) {
    let tr;
    let td0;
    let a;
    let t0_value = (
      /*item*/
      ctx[13].username + ""
    );
    let t0;
    let a_href_value;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[13].email + ""
    );
    let t2;
    let t3;
    let td2;
    let div;
    let select;
    let option0;
    let t4;
    let option0_selected_value;
    let option1;
    let t5;
    let option1_selected_value;
    let option2;
    let t6;
    let option2_selected_value;
    let option3;
    let t7;
    let option3_selected_value;
    let option4;
    let t8;
    let option4_selected_value;
    let option5;
    let t9;
    let option5_selected_value;
    let select_uid_value;
    let t10;
    let td3;
    let t11_value = (
      /*item*/
      ctx[13].active ? "\u2714" : "\u2718"
    );
    let t11;
    let td3_uid_value;
    let td3_role_value;
    let t12;
    let mounted;
    let dispose;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        a = element("a");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        div = element("div");
        select = element("select");
        option0 = element("option");
        t4 = text("Admin");
        option1 = element("option");
        t5 = text("Dosen");
        option2 = element("option");
        t6 = text("Reviewer");
        option3 = element("option");
        t7 = text("Ka. Departemen");
        option4 = element("option");
        t8 = text("Ka. LPPM");
        option5 = element("option");
        t9 = text("Ka. Pusat Kajian");
        t10 = space();
        td3 = element("td");
        t11 = text(t11_value);
        t12 = space();
        attr(a, "href", a_href_value = "/admin/profile/" + /*item*/
        ctx[13].id);
        option0.__value = "9";
        set_input_value(option0, option0.__value);
        option0.selected = option0_selected_value = /*item*/
        ctx[13].role === 9;
        option1.__value = "0";
        set_input_value(option1, option1.__value);
        option1.selected = option1_selected_value = /*item*/
        ctx[13].role === 0;
        option2.__value = "10";
        set_input_value(option2, option2.__value);
        option2.selected = option2_selected_value = /*item*/
        ctx[13].role === 10;
        option3.__value = "11";
        set_input_value(option3, option3.__value);
        option3.selected = option3_selected_value = /*item*/
        ctx[13].role === 11;
        option4.__value = "12";
        set_input_value(option4, option4.__value);
        option4.selected = option4_selected_value = /*item*/
        ctx[13].role === 12;
        option5.__value = "13";
        set_input_value(option5, option5.__value);
        option5.selected = option5_selected_value = /*item*/
        ctx[13].role === 13;
        attr(select, "uid", select_uid_value = /*idx*/
        ctx[15]);
        attr(select, "class", "svelte-1amf2xn");
        attr(div, "class", "select");
        attr(td2, "fixed", "");
        attr(td2, "class", "group svelte-1amf2xn");
        attr(td3, "fixed", "");
        attr(td3, "uid", td3_uid_value = /*idx*/
        ctx[15]);
        attr(td3, "role", td3_role_value = /*item*/
        ctx[13].role);
        attr(td3, "class", "active svelte-1amf2xn");
        toggle_class(td3, "red", !/*item*/
        ctx[13].active);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, a);
        append(a, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, div);
        append(div, select);
        append(select, option0);
        append(option0, t4);
        append(select, option1);
        append(option1, t5);
        append(select, option2);
        append(option2, t6);
        append(select, option3);
        append(option3, t7);
        append(select, option4);
        append(option4, t8);
        append(select, option5);
        append(option5, t9);
        append(tr, t10);
        append(tr, td3);
        append(td3, t11);
        append(tr, t12);
        if (!mounted) {
          dispose = [
            listen(
              select,
              "change",
              /*handleGroup*/
              ctx[3]
            ),
            listen(
              td3,
              "click",
              /*handleActive*/
              ctx[2]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*items*/
        1 && t0_value !== (t0_value = /*item*/
        ctx2[13].username + ""))
          set_data(t0, t0_value);
        if (dirty & /*items*/
        1 && a_href_value !== (a_href_value = "/admin/profile/" + /*item*/
        ctx2[13].id)) {
          attr(a, "href", a_href_value);
        }
        if (dirty & /*items*/
        1 && t2_value !== (t2_value = /*item*/
        ctx2[13].email + ""))
          set_data(t2, t2_value);
        if (dirty & /*items*/
        1 && option0_selected_value !== (option0_selected_value = /*item*/
        ctx2[13].role === 9)) {
          option0.selected = option0_selected_value;
        }
        if (dirty & /*items*/
        1 && option1_selected_value !== (option1_selected_value = /*item*/
        ctx2[13].role === 0)) {
          option1.selected = option1_selected_value;
        }
        if (dirty & /*items*/
        1 && option2_selected_value !== (option2_selected_value = /*item*/
        ctx2[13].role === 10)) {
          option2.selected = option2_selected_value;
        }
        if (dirty & /*items*/
        1 && option3_selected_value !== (option3_selected_value = /*item*/
        ctx2[13].role === 11)) {
          option3.selected = option3_selected_value;
        }
        if (dirty & /*items*/
        1 && option4_selected_value !== (option4_selected_value = /*item*/
        ctx2[13].role === 12)) {
          option4.selected = option4_selected_value;
        }
        if (dirty & /*items*/
        1 && option5_selected_value !== (option5_selected_value = /*item*/
        ctx2[13].role === 13)) {
          option5.selected = option5_selected_value;
        }
        if (dirty & /*items*/
        1 && t11_value !== (t11_value = /*item*/
        ctx2[13].active ? "\u2714" : "\u2718"))
          set_data(t11, t11_value);
        if (dirty & /*items*/
        1 && td3_role_value !== (td3_role_value = /*item*/
        ctx2[13].role)) {
          attr(td3, "role", td3_role_value);
        }
        if (dirty & /*items*/
        1) {
          toggle_class(td3, "red", !/*item*/
          ctx2[13].active);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot12(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block9, create_else_block4];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*roleFromToken*/
        ctx2[1] === "admin"
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_fragment33(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot12] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items*/
        65537) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function instance27($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(7, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(8, $apiURL = $$value));
    let { params } = $$props;
    let profile;
    let items;
    const accessToken = localStorage.getItem("token");
    const roleFromToken = localStorage.getItem("role");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    async function populateTable() {
      const response = await fetch($apiURL + "/user", { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.status === 200) {
          $$invalidate(0, items = result.dbData);
        }
      }
    }
    async function handleActive(ev) {
      const value = ev.target.getAttribute("role");
      const id = ev.target.getAttribute("uid");
      const payload = {
        id: items[id].id,
        role: Number(value),
        active: !items[id].active
      };
      const response = await fetch($apiURL + "/user", {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          populateTable();
        } else {
          console.log(response);
        }
      }
    }
    async function handleGroup(ev) {
      const value = ev.target.value;
      const id = ev.target.getAttribute("uid");
      const payload = {
        id: items[id].id,
        role: Number(value),
        active: items[id].active
      };
      const response = await fetch($apiURL + "/user", {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          populateTable();
        } else {
          console.log(response);
        }
      }
    }
    async function getPage() {
      if (params["1"] === "profile") {
        let id = params["2"];
        const response = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            if (!result.length)
              return;
            $$invalidate(6, profile = []);
            for (const [field, value] of Object.entries(result[0])) {
              profile.push({ field, value });
            }
          } else {
            data = null;
          }
        }
      }
    }
    function addUser() {
      $route("/admin/createuser");
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(5, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      32) {
        $:
          params, getPage();
      }
      if ($$self.$$.dirty & /*profile*/
      64) {
        $:
          profile, profile ? $$invalidate(0, items = null) : populateTable();
      }
    };
    return [items, roleFromToken, handleActive, handleGroup, addUser, params, profile];
  }
  var Usersmanagement = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance27, create_fragment33, safe_not_equal, { params: 5 });
    }
  };
  var usersmanagement_default = Usersmanagement;

  // src/modules/E404.svelte
  init_define_process();
  function create_fragment34(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<h1>404</h1> <h6>PAGE NOT FOUND</h6>`;
        attr(article, "class", "svelte-12yf9li");
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  var E404 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment34, safe_not_equal, {});
    }
  };
  var E404_default = E404;

  // src/pages/admin/Index.svelte
  function create_else_block5(ctx) {
    let e404;
    let current;
    e404 = new E404_default({});
    return {
      c() {
        create_component(e404.$$.fragment);
      },
      m(target, anchor) {
        mount_component(e404, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(e404.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(e404.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(e404, detaching);
      }
    };
  }
  function create_if_block_116(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        2 && switch_value !== (switch_value = /*cmp*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block10(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = home_default;
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = home_default)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_fragment35(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block10, create_if_block_116, create_else_block5];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (dirty & /*params*/
      1)
        show_if = null;
      if (show_if == null)
        show_if = !!(Object.keys(
          /*params*/
          ctx2[0]
        ).length === 0);
      if (show_if)
        return 0;
      if (
        /*cmp*/
        ctx2[1]
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance28($$self, $$props, $$invalidate) {
    let { params = {} } = $$props;
    let cmp;
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      1) {
        $:
          params, $$invalidate(1, cmp = admin_exports[params["0"]] || null);
      }
    };
    return [params, cmp];
  }
  var Index2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance28, create_fragment35, safe_not_equal, { params: 0 });
    }
  };
  var Index_default2 = Index2;

  // src/pages/auth/Index.svelte
  init_define_process();
  var pages = __toESM(require_auth());
  function create_else_block6(ctx) {
    let e404;
    let current;
    e404 = new E404_default({});
    return {
      c() {
        create_component(e404.$$.fragment);
      },
      m(target, anchor) {
        mount_component(e404, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(e404.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(e404.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(e404, detaching);
      }
    };
  }
  function create_if_block_117(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        2 && switch_value !== (switch_value = /*cmp*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block11(ctx) {
    let article;
    return {
      c() {
        article = element("article");
        article.innerHTML = `<h1>Auth Google</h1>`;
      },
      m(target, anchor) {
        insert(target, article, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article);
        }
      }
    };
  }
  function create_fragment36(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block11, create_if_block_117, create_else_block6];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (dirty & /*params*/
      1)
        show_if = null;
      if (show_if == null)
        show_if = !!(Object.keys(
          /*params*/
          ctx2[0]
        ).length === 0);
      if (show_if)
        return 0;
      if (
        /*cmp*/
        ctx2[1]
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance29($$self, $$props, $$invalidate) {
    let $route;
    let $isLogin;
    component_subscribe($$self, route, ($$value) => $$invalidate(2, $route = $$value));
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(3, $isLogin = $$value));
    let { params = {} } = $$props;
    const token = params.token || null;
    if (token) {
      set_store_value(isLogin, $isLogin = true, $isLogin);
      localStorage.setItem("id", params.id);
      localStorage.setItem("username", params.username);
      localStorage.setItem("role", params.role);
      localStorage.setItem("token", params.token);
      let role = params.role;
      if (role === "admin")
        $route("/admin");
      else
        $route("/dosen");
    } else {
      $route("/login");
    }
    let cmp;
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      1) {
        $:
          params, $$invalidate(1, cmp = pages[params["0"]] || null);
      }
    };
    return [params, cmp];
  }
  var Index3 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance29, create_fragment36, safe_not_equal, { params: 0 });
    }
  };
  var Index_default3 = Index3;

  // src/pages/dosen/Index.svelte
  init_define_process();

  // src/pages/dosen/index.js
  var dosen_exports = {};
  __export(dosen_exports, {
    approvalmanagement: () => approvalmanagement_default,
    completedppm: () => completedppm_default,
    detailapproval: () => detailapproval_default,
    detailproposal: () => detailproposal_default2,
    home: () => home_default2,
    ongoingppm: () => ongoingppm_default,
    pendaftaranproposal: () => pendaftaranproposal_default,
    profile: () => profile_default2,
    proposalppm: () => proposalppm_default,
    select: () => select_default,
    testform: () => testform_default
  });
  init_define_process();

  // src/pages/dosen/approvalmanagement.svelte
  init_define_process();
  function get_each_context8(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function get_each_context_13(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function get_each_context_23(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function get_each_context_33(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
  }
  function create_if_block12(ctx) {
    let div1;
    let div0;
    let table;
    let thead;
    let t9;
    let tbody;
    let t10;
    let t11;
    let t12;
    let current;
    let if_block0 = (
      /*role*/
      ctx[1] === "Ka.PusatKajian" && create_if_block_74(ctx)
    );
    let if_block1 = (
      /*role*/
      ctx[1] === "reviewer" && create_if_block_55(ctx)
    );
    let if_block2 = (
      /*role*/
      ctx[1] === "Ka.LPPM" && create_if_block_314(ctx)
    );
    let if_block3 = (
      /*role*/
      ctx[1] === "Ka.Departemen" && create_if_block_118(ctx)
    );
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t9 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t10 = space();
        if (if_block1)
          if_block1.c();
        t11 = space();
        if (if_block2)
          if_block2.c();
        t12 = space();
        if (if_block3)
          if_block3.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div0, "class", "child svelte-1mtjhz7");
        attr(div1, "class", "box parent svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, table);
        append(table, thead);
        append(table, t9);
        append(table, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        append(tbody, t10);
        if (if_block1)
          if_block1.m(tbody, null);
        append(tbody, t11);
        if (if_block2)
          if_block2.m(tbody, null);
        append(tbody, t12);
        if (if_block3)
          if_block3.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*role*/
          ctx2[1] === "Ka.PusatKajian"
        )
          if_block0.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[1] === "reviewer"
        )
          if_block1.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[1] === "Ka.LPPM"
        )
          if_block2.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[1] === "Ka.Departemen"
        )
          if_block3.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        transition_in(if_block3);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        transition_out(if_block3);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
      }
    };
  }
  function create_if_block_74(ctx) {
    let each_1_anchor;
    let current;
    let each_value_3 = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_33(get_each_context_33(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, detail*/
        5) {
          each_value_3 = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_33(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_33(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_84(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[6].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[6].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[6].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({ props: { code: (
      /*item*/
      ctx[6].status
    ) } });
    icon = new Icon_default({ props: { id: "info", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[6].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[6].id);
        attr(td4, "class", "review svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items*/
        1) && t0_value !== (t0_value = /*item*/
        ctx2[6].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items*/
        1) && t2_value !== (t2_value = /*item*/
        ctx2[6].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items*/
        1) && t4_value !== (t4_value = /*item*/
        ctx2[6].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items*/
        1)
          status_changes.code = /*item*/
          ctx2[6].status;
        status.$set(status_changes);
        if (!current || dirty & /*items*/
        1 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[6].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items*/
        1 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[6].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_33(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*item*/
      ctx[6].status === 10 && create_if_block_84(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*item*/
          ctx2[6].status === 10
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_84(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_55(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_23(get_each_context_23(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, detail*/
        5) {
          each_value_2 = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_23(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_23(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_64(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[6].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[6].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[6].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({ props: { code: (
      /*item*/
      ctx[6].status
    ) } });
    icon = new Icon_default({ props: { id: "orang", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[6].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[6].id);
        attr(td4, "class", "review svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items*/
        1) && t0_value !== (t0_value = /*item*/
        ctx2[6].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items*/
        1) && t2_value !== (t2_value = /*item*/
        ctx2[6].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items*/
        1) && t4_value !== (t4_value = /*item*/
        ctx2[6].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items*/
        1)
          status_changes.code = /*item*/
          ctx2[6].status;
        status.$set(status_changes);
        if (!current || dirty & /*items*/
        1 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[6].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items*/
        1 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[6].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_23(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*item*/
      ctx[6].status === 8 && create_if_block_64(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*item*/
          ctx2[6].status === 8
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_64(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_314(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, detail*/
        5) {
          each_value_1 = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_13(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_13(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_414(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[6].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[6].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[6].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({ props: { code: (
      /*item*/
      ctx[6].status
    ) } });
    icon = new Icon_default({ props: { id: "orang", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[6].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[6].id);
        attr(td4, "class", "review svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items*/
        1) && t0_value !== (t0_value = /*item*/
        ctx2[6].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items*/
        1) && t2_value !== (t2_value = /*item*/
        ctx2[6].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items*/
        1) && t4_value !== (t4_value = /*item*/
        ctx2[6].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items*/
        1)
          status_changes.code = /*item*/
          ctx2[6].status;
        status.$set(status_changes);
        if (!current || dirty & /*items*/
        1 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[6].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items*/
        1 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[6].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_13(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*item*/
      ctx[6].status === 6 && create_if_block_414(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*item*/
          ctx2[6].status === 6
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_414(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_118(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, detail*/
        5) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context8(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block8(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_214(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[6].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[6].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[6].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({ props: { code: (
      /*item*/
      ctx[6].status
    ) } });
    icon = new Icon_default({ props: { id: "orang", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[6].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[6].id);
        attr(td4, "class", "review svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items*/
        1) && t0_value !== (t0_value = /*item*/
        ctx2[6].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items*/
        1) && t2_value !== (t2_value = /*item*/
        ctx2[6].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items*/
        1) && t4_value !== (t4_value = /*item*/
        ctx2[6].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items*/
        1)
          status_changes.code = /*item*/
          ctx2[6].status;
        status.$set(status_changes);
        if (!current || dirty & /*items*/
        1 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[6].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items*/
        1 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[6].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block8(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*item*/
      ctx[6].status === 4 && create_if_block_214(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*item*/
          ctx2[6].status === 4
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_214(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_default_slot13(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div1;
    let div0;
    let input;
    let t3;
    let span;
    let icon;
    let t4;
    let if_block_anchor;
    let current;
    icon = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let if_block = (
      /*items*/
      ctx[0] && create_if_block12(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Approval Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div1 = element("div");
        div0 = element("div");
        input = element("input");
        t3 = space();
        span = element("span");
        create_component(icon.$$.fragment);
        t4 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(h2, "class", "title is-2");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span, "class", "icon is-left");
        attr(div0, "class", "control has-icons-left");
        attr(div1, "class", "field");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, input);
        append(div0, t3);
        append(div0, span);
        mount_component(icon, span, null);
        insert(target, t4, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block12(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div1);
          detach(t4);
          detach(if_block_anchor);
        }
        destroy_component(icon);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_fragment37(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot13] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items*/
        32769) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function instance30($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(3, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(4, $apiURL = $$value));
    const id = localStorage.id;
    let role = localStorage.role;
    let items;
    onMount(async () => {
      const accessToken = localStorage.getItem("token");
      const headers = {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json"
      };
      const response = await fetch($apiURL + "/approval/" + id, { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(0, items = result.dbData);
        } else {
          console.log(response);
        }
      }
    });
    function detail2(ev) {
      let propId = ev.target.getAttribute("pid");
      $route("/dosen/detailapproval/" + propId);
    }
    return [items, role, detail2];
  }
  var Approvalmanagement = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance30, create_fragment37, safe_not_equal, {});
    }
  };
  var approvalmanagement_default = Approvalmanagement;

  // src/pages/dosen/completedppm.svelte
  init_define_process();
  function create_default_slot14(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div1;
    let div0;
    let input;
    let t3;
    let span0;
    let icon0;
    let t4;
    let div3;
    let div2;
    let table;
    let thead;
    let t14;
    let tbody;
    let tr1;
    let td0;
    let t15;
    let td1;
    let t16;
    let td2;
    let t17;
    let td3;
    let t18;
    let td4;
    let button;
    let span1;
    let icon1;
    let current;
    icon0 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    icon1 = new Icon_default({ props: { id: "info", src: infoOutline } });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Completed Penelitian / Pengabdian Masyarakat";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div1 = element("div");
        div0 = element("div");
        input = element("input");
        t3 = space();
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t14 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        t15 = space();
        td1 = element("td");
        t16 = space();
        td2 = element("td");
        t17 = space();
        td3 = element("td");
        td3.innerHTML = ``;
        t18 = space();
        td4 = element("td");
        button = element("button");
        span1 = element("span");
        create_component(icon1.$$.fragment);
        attr(h2, "class", "title is-2");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span0, "class", "icon is-left");
        attr(div0, "class", "control has-icons-left");
        attr(div1, "class", "field");
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(span1, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(td4, "class", "review svelte-1mtjhz7");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div2, "class", "child svelte-1mtjhz7");
        attr(div3, "class", "box parent svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, input);
        append(div0, t3);
        append(div0, span0);
        mount_component(icon0, span0, null);
        insert(target, t4, anchor);
        insert(target, div3, anchor);
        append(div3, div2);
        append(div2, table);
        append(table, thead);
        append(table, t14);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t15);
        append(tr1, td1);
        append(tr1, t16);
        append(tr1, td2);
        append(tr1, t17);
        append(tr1, td3);
        append(tr1, t18);
        append(tr1, td4);
        append(td4, button);
        append(button, span1);
        mount_component(icon1, span1, null);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div1);
          detach(t4);
          detach(div3);
        }
        destroy_component(icon0);
        destroy_component(icon1);
      }
    };
  }
  function create_fragment38(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot14] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        1) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  var Completedppm = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment38, safe_not_equal, {});
    }
  };
  var completedppm_default = Completedppm;

  // src/pages/dosen/detailapproval.svelte
  init_define_process();
  function get_each_context9(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[94] = list[i];
    return child_ctx;
  }
  function get_each_context_14(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[97] = list[i];
    return child_ctx;
  }
  function get_each_context_24(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[100] = list[i];
    return child_ctx;
  }
  function get_each_context_34(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[103] = list[i];
    return child_ctx;
  }
  function get_each_context_43(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[106] = list[i];
    return child_ctx;
  }
  function get_each_context_53(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[109] = list[i];
    return child_ctx;
  }
  function get_each_context_63(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[112] = list[i];
    return child_ctx;
  }
  function get_each_context_72(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[115] = list[i];
    return child_ctx;
  }
  function get_each_context_82(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[118] = list[i];
    return child_ctx;
  }
  function create_if_block13(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_215] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, judulTugasAkhirS3, judulTugasAkhirS2, judulTugasAkhirS1, tahunLulusS3, tahunLulusS2, tahunLulusS1, tahunMasukS3, tahunMasukS2, tahunMasukS1, bidangIlmuS3, bidangIlmuS2, bidangIlmuS1, pertiS3, pertiS2, pertiS1, nidn, nip, jabatanFungsional, namaLengkap, isLoading, itemsRCR, error, data*/
        2147483644 | dirty[1] & /*mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, alamatRumah, tanggalLahir, tempatLahir, tab2, status, comment, $penilaianFile, jenisSkema, anggotaTim, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, tab1*/
        8388607 | dirty[3] & /*$$scope*/
        268435456) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function create_if_block_94(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let br;
    let t9;
    let table0;
    let thead0;
    let t13;
    let tbody;
    let t14;
    let hr0;
    let t15;
    let field9;
    let t16;
    let field10;
    let t17;
    let field11;
    let t18;
    let t19;
    let t20;
    let div1;
    let h4;
    let t22;
    let hr1;
    let t23;
    let t24;
    let table1;
    let thead1;
    let t30;
    let t31;
    let t32;
    let t33;
    let t34;
    let if_block8_anchor;
    let current;
    field0 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_303] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_293] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_283] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_273] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_263] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_253] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_243] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_233] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_224] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*anggotaTim*/
      ctx[48].length > 0 && create_if_block_273(ctx)
    );
    field9 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_214] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "abstrak",
        $$slots: { default: [create_default_slot_203] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_193] },
        $$scope: { ctx }
      }
    });
    let if_block1 = (
      /*jenisSkema*/
      (ctx[42] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[42] === "Riset Terapan" || /*jenisSkema*/
      ctx[42] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[42] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[42] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_263(ctx)
    );
    let if_block2 = (
      /*jenisSkema*/
      (ctx[42] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[42] === "Riset Terapan" || /*jenisSkema*/
      ctx[42] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[42] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[42] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_215(ctx)
    );
    let if_block3 = (
      /*status*/
      ctx[50] != 8 && create_if_block_193(ctx)
    );
    let if_block4 = (
      /*itemsRCR*/
      ctx[11] && create_if_block_183(ctx)
    );
    let if_block5 = (
      /*role*/
      ctx[54] === "Ka.Departemen" && create_if_block_163(ctx)
    );
    let if_block6 = (
      /*role*/
      ctx[54] === "Ka.LPPM" && create_if_block_143(ctx)
    );
    let if_block7 = (
      /*role*/
      ctx[54] === "reviewer" && create_if_block_125(ctx)
    );
    let if_block8 = (
      /*role*/
      ctx[54] === "Ka.PusatKajian" && create_if_block_104(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        br = element("br");
        t9 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t13 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t14 = space();
        hr0 = element("hr");
        t15 = space();
        create_component(field9.$$.fragment);
        t16 = space();
        create_component(field10.$$.fragment);
        t17 = space();
        create_component(field11.$$.fragment);
        t18 = space();
        if (if_block1)
          if_block1.c();
        t19 = space();
        if (if_block2)
          if_block2.c();
        t20 = space();
        div1 = element("div");
        h4 = element("h4");
        h4.textContent = "Informasi Revisi";
        t22 = space();
        hr1 = element("hr");
        t23 = space();
        if (if_block3)
          if_block3.c();
        t24 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 70%;">Catatan Revisi</th> <th style="width: 15%;">Evaluator</th> <th style="width: 15%;">Waktu</th></tr>`;
        t30 = space();
        if (if_block4)
          if_block4.c();
        t31 = space();
        if (if_block5)
          if_block5.c();
        t32 = space();
        if (if_block6)
          if_block6.c();
        t33 = space();
        if (if_block7)
          if_block7.c();
        t34 = space();
        if (if_block8)
          if_block8.c();
        if_block8_anchor = empty();
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(h4, "class", "title is-4");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        append(div0, br);
        append(div0, t9);
        append(div0, table0);
        append(table0, thead0);
        append(table0, t13);
        append(table0, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        append(div0, t14);
        append(div0, hr0);
        append(div0, t15);
        mount_component(field9, div0, null);
        append(div0, t16);
        mount_component(field10, div0, null);
        append(div0, t17);
        mount_component(field11, div0, null);
        append(div0, t18);
        if (if_block1)
          if_block1.m(div0, null);
        append(div0, t19);
        if (if_block2)
          if_block2.m(div0, null);
        insert(target, t20, anchor);
        insert(target, div1, anchor);
        append(div1, h4);
        append(div1, t22);
        append(div1, hr1);
        append(div1, t23);
        if (if_block3)
          if_block3.m(div1, null);
        append(div1, t24);
        append(div1, table1);
        append(table1, thead1);
        append(table1, t30);
        if (if_block4)
          if_block4.m(table1, null);
        insert(target, t31, anchor);
        if (if_block5)
          if_block5.m(target, anchor);
        insert(target, t32, anchor);
        if (if_block6)
          if_block6.m(target, anchor);
        insert(target, t33, anchor);
        if (if_block7)
          if_block7.m(target, anchor);
        insert(target, t34, anchor);
        if (if_block8)
          if_block8.m(target, anchor);
        insert(target, if_block8_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[1] & /*jenisProposal*/
        512 | dirty[3] & /*$$scope*/
        268435456) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[1] & /*jenisKegiatan*/
        1024 | dirty[3] & /*$$scope*/
        268435456) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[1] & /*jenisSkema*/
        2048 | dirty[3] & /*$$scope*/
        268435456) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[1] & /*kelompokKeahlian*/
        4096 | dirty[3] & /*$$scope*/
        268435456) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[1] & /*topik*/
        8192 | dirty[3] & /*$$scope*/
        268435456) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[1] & /*tanggalMulai*/
        16384 | dirty[3] & /*$$scope*/
        268435456) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[1] & /*tanggalSelesai*/
        32768 | dirty[3] & /*$$scope*/
        268435456) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[1] & /*biayaPenelitian*/
        65536 | dirty[3] & /*$$scope*/
        268435456) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[3] & /*$$scope*/
        268435456) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        if (
          /*anggotaTim*/
          ctx2[48].length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_273(ctx2);
            if_block0.c();
            if_block0.m(tbody, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        const field9_changes = {};
        if (dirty[0] & /*data*/
        16 | dirty[3] & /*$$scope*/
        268435456) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*data*/
        16 | dirty[3] & /*$$scope*/
        268435456) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[3] & /*$$scope*/
        268435456) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*jenisSkema*/
          ctx2[42] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[42] === "Riset Terapan" || /*jenisSkema*/
          ctx2[42] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[42] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[42] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*jenisSkema*/
            2048) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_263(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div0, t19);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*jenisSkema*/
          ctx2[42] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[42] === "Riset Terapan" || /*jenisSkema*/
          ctx2[42] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[42] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[42] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[1] & /*jenisSkema*/
            2048) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_215(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(div0, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[50] != 8
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[1] & /*status*/
            524288) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_193(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(div1, t24);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*itemsRCR*/
          ctx2[11]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_183(ctx2);
            if_block4.c();
            if_block4.m(table1, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*role*/
          ctx2[54] === "Ka.Departemen"
        )
          if_block5.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[54] === "Ka.LPPM"
        )
          if_block6.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[54] === "reviewer"
        )
          if_block7.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[54] === "Ka.PusatKajian"
        )
          if_block8.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block1);
        transition_in(if_block2);
        transition_in(if_block3);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block1);
        transition_out(if_block2);
        transition_out(if_block3);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t20);
          detach(div1);
          detach(t31);
          detach(t32);
          detach(t33);
          detach(t34);
          detach(if_block8_anchor);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        if (if_block0)
          if_block0.d();
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d(detaching);
        if (if_block6)
          if_block6.d(detaching);
        if (if_block7)
          if_block7.d(detaching);
        if (if_block8)
          if_block8.d(detaching);
      }
    };
  }
  function create_default_slot_303(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisProposal*/
          ctx[40]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisProposal*/
        512)
          set_data(
            t,
            /*jenisProposal*/
            ctx2[40]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_293(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisKegiatan*/
          ctx[41]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisKegiatan*/
        1024)
          set_data(
            t,
            /*jenisKegiatan*/
            ctx2[41]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_283(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisSkema*/
          ctx[42]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisSkema*/
        2048)
          set_data(
            t,
            /*jenisSkema*/
            ctx2[42]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_273(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*kelompokKeahlian*/
          ctx[43]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*kelompokKeahlian*/
        4096)
          set_data(
            t,
            /*kelompokKeahlian*/
            ctx2[43]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_263(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*topik*/
          ctx[44]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*topik*/
        8192)
          set_data(
            t,
            /*topik*/
            ctx2[44]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_253(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*tanggalMulai*/
          ctx[45]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalMulai*/
        16384)
          set_data(
            t,
            /*tanggalMulai*/
            ctx2[45]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_243(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*tanggalSelesai*/
          ctx[46]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalSelesai*/
        32768)
          set_data(
            t,
            /*tanggalSelesai*/
            ctx2[46]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_233(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*biayaPenelitian*/
          ctx[47]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPenelitian*/
        65536)
          set_data(
            t,
            /*biayaPenelitian*/
            ctx2[47]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_224(ctx) {
    let span;
    return {
      c() {
        span = element("span");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_273(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*anggotaTim*/
      ctx[48]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_82(get_each_context_82(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*anggotaTim*/
        131072) {
          each_value_8 = ensure_array_like(
            /*anggotaTim*/
            ctx2[48]
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_82(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_82(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_82(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*member*/
      ctx[118].role + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*member*/
      ctx[118].label + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*anggotaTim*/
        131072 && t0_value !== (t0_value = /*member*/
        ctx2[118].role + ""))
          set_data(t0, t0_value);
        if (dirty[1] & /*anggotaTim*/
        131072 && t2_value !== (t2_value = /*member*/
        ctx2[118].label + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_214(ctx) {
    let t_value = (
      /*data*/
      ctx[4].judul + ""
    );
    let t;
    return {
      c() {
        t = text(t_value);
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*data*/
        16 && t_value !== (t_value = /*data*/
        ctx2[4].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_203(ctx) {
    let html_tag;
    let raw_value = (
      /*data*/
      ctx[4].abstrak + ""
    );
    let html_anchor;
    return {
      c() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m(target, anchor) {
        html_tag.m(raw_value, target, anchor);
        insert(target, html_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*data*/
        16 && raw_value !== (raw_value = /*data*/
        ctx2[4].abstrak + ""))
          html_tag.p(raw_value);
      },
      d(detaching) {
        if (detaching) {
          detach(html_anchor);
          html_tag.d();
        }
      }
    };
  }
  function create_default_slot_193(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download Proposal";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPpm*/
            ctx[60]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_263(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_183] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[3] & /*$$scope*/
        268435456) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_183(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download RAB";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadRab*/
            ctx[59]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_215(ctx) {
    let t;
    let if_block1_anchor;
    let current;
    let if_block0 = (
      /*status*/
      ctx[50] === 8 && create_if_block_234(ctx)
    );
    let if_block1 = (
      /*status*/
      ctx[50] > 8 && create_if_block_224(ctx)
    );
    return {
      c() {
        if (if_block0)
          if_block0.c();
        t = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
      },
      m(target, anchor) {
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[50] === 8
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*status*/
            524288) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_234(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t.parentNode, t);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[50] > 8
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*status*/
            524288) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_224(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function create_if_block_234(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Penilaian Proposal",
        $$slots: { default: [create_default_slot_173] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        8 | dirty[1] & /*$penilaianFile*/
        4194304 | dirty[3] & /*$$scope*/
        268435456) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block7(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_253(ctx) {
    let span;
    let t_value = (
      /*$penilaianFile*/
      ctx[53].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$penilaianFile*/
        4194304 && t_value !== (t_value = /*$penilaianFile*/
        ctx2[53].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_243(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[3].filePenilaian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        8 && t_value !== (t_value = /*error*/
        ctx2[3].filePenilaian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_173(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type(ctx2, dirty) {
      if (
        /*$penilaianFile*/
        ctx2[53]?.name
      )
        return create_if_block_253;
      return create_else_block7;
    }
    let current_block_type = select_block_type(ctx, [-1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[3].filePenilaian && create_if_block_243(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "filePenilaian");
        attr(input0, "class", "inputf custom-file-input svelte-14mnqgg");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-14mnqgg");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePenilaian");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "inputf__wrapper svelte-14mnqgg");
        attr(p, "class", "help svelte-14mnqgg");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePenilaianChange*/
            ctx[64]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[3].filePenilaian
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_243(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_224(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Penilaian Proposal",
        $$slots: { default: [create_default_slot_163] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[3] & /*$$scope*/
        268435456) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_163(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download Form Penilaian";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPenilaian*/
            ctx[61]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_193(ctx) {
    let div;
    let t1;
    let field;
    let t2;
    let br;
    let current;
    field = new Field_default({
      props: {
        name: "Catatan Revisi",
        $$slots: { default: [create_default_slot_153] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Berikan catatan revisi jika ingin revisi proposal.</p>`;
        t1 = space();
        create_component(field.$$.fragment);
        t2 = space();
        br = element("br");
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        insert(target, t1, anchor);
        mount_component(field, target, anchor);
        insert(target, t2, anchor);
        insert(target, br, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        8 | dirty[1] & /*comment*/
        262144 | dirty[3] & /*$$scope*/
        268435456) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(t2);
          detach(br);
        }
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_203(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[3].comment + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-14mnqgg");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        8 && t_value !== (t_value = /*error*/
        ctx2[3].comment + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_153(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[3].comment && create_if_block_203(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "class", "textarea");
        attr(textarea, "name", "komentar");
        attr(textarea, "id", "komentar");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*comment*/
          ctx[49]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[66]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*comment*/
        262144) {
          set_input_value(
            textarea,
            /*comment*/
            ctx2[49]
          );
        }
        if (
          /*error*/
          ctx2[3].comment
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_203(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_183(ctx) {
    let tbody;
    let each_value_7 = ensure_array_like(
      /*itemsRCR*/
      ctx[11]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_72(get_each_context_72(ctx, each_value_7, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        2048) {
          each_value_7 = ensure_array_like(
            /*itemsRCR*/
            ctx2[11]
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_72(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_72(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_72(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[115].comment + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[115].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[115].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        2048 && t0_value !== (t0_value = /*item*/
        ctx2[115].comment + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsRCR*/
        2048 && t2_value !== (t2_value = /*item*/
        ctx2[115].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsRCR*/
        2048 && t4_value !== (t4_value = /*item*/
        ctx2[115].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_163(ctx) {
    let if_block_anchor;
    let if_block = (
      /*status*/
      ctx[50] === 4 && create_if_block_173(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[50] === 4
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_173(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_173(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Proses";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePass*/
            ctx[57]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_143(ctx) {
    let if_block_anchor;
    let if_block = (
      /*status*/
      ctx[50] === 6 && create_if_block_153(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[50] === 6
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_153(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_153(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Proses";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[55]
            ),
            listen(
              button1,
              "click",
              /*handlePass*/
              ctx[57]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_125(ctx) {
    let if_block_anchor;
    let if_block = (
      /*status*/
      ctx[50] === 8 && create_if_block_134(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[50] === 8
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_134(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_134(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Proses";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePassReviewer*/
            ctx[58]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_104(ctx) {
    let if_block_anchor;
    let if_block = (
      /*status*/
      ctx[50] === 10 && create_if_block_119(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[50] === 10
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_119(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_119(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Ditolak";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Proses";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-danger is-light is-outlined");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[55]
            ),
            listen(
              button1,
              "click",
              /*handleDitolak*/
              ctx[56]
            ),
            listen(
              button2,
              "click",
              /*handlePass*/
              ctx[57]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_120(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let div1;
    let h60;
    let t13;
    let table0;
    let thead0;
    let t21;
    let tbody0;
    let tr1;
    let th4;
    let t23;
    let td0;
    let t24;
    let t25;
    let td1;
    let t26;
    let t27;
    let td2;
    let t28;
    let t29;
    let tr2;
    let th5;
    let t31;
    let td3;
    let t32;
    let t33;
    let td4;
    let t34;
    let t35;
    let td5;
    let t36;
    let t37;
    let tr3;
    let th6;
    let t39;
    let td6;
    let t40;
    let t41;
    let td7;
    let t42;
    let t43;
    let td8;
    let t44;
    let t45;
    let tr4;
    let th7;
    let t47;
    let td9;
    let t48;
    let t49;
    let td10;
    let t50;
    let t51;
    let td11;
    let t52;
    let t53;
    let tr5;
    let th8;
    let t55;
    let td12;
    let t56;
    let t57;
    let td13;
    let t58;
    let t59;
    let td14;
    let t60;
    let t61;
    let div2;
    let h61;
    let t63;
    let table1;
    let thead1;
    let t73;
    let tbody1;
    let t74;
    let div3;
    let h62;
    let t76;
    let table2;
    let thead2;
    let t86;
    let tbody2;
    let t87;
    let div4;
    let h63;
    let t89;
    let table3;
    let thead3;
    let t97;
    let tbody3;
    let t98;
    let div5;
    let h64;
    let t100;
    let table4;
    let thead4;
    let t110;
    let tbody4;
    let t111;
    let div6;
    let h65;
    let t113;
    let table5;
    let thead5;
    let t123;
    let tbody5;
    let t124;
    let div7;
    let h66;
    let t126;
    let table6;
    let thead6;
    let t136;
    let tbody6;
    let current;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_143] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_133] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_124] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_114] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat / Tanggal Lahir",
        $$slots: { default: [create_default_slot_103] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_93] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_83] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Nomoh Handphone",
        $$slots: { default: [create_default_slot_74] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_64] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_54] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Email",
        $$slots: { default: [create_default_slot_411] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_314] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*dataPP*/
      ctx[5] && create_if_block_75(ctx)
    );
    let if_block1 = (
      /*dataPM*/
      ctx[6] && create_if_block_65(ctx)
    );
    let if_block2 = (
      /*dataPD*/
      ctx[7] && create_if_block_56(ctx)
    );
    let if_block3 = (
      /*dataPPub*/
      ctx[8] && create_if_block_415(ctx)
    );
    let if_block4 = (
      /*dataPPB*/
      ctx[9] && create_if_block_315(ctx)
    );
    let if_block5 = (
      /*dataPHKI*/
      ctx[10] && create_if_block_216(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        div1 = element("div");
        h60 = element("h6");
        h60.textContent = "Riwayat Pendidikan";
        t13 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow">Program</th> <th class="is-narrow">S1</th> <th class="is-narrow">S2</th> <th class="is-narrow">S3</th></tr>`;
        t21 = space();
        tbody0 = element("tbody");
        tr1 = element("tr");
        th4 = element("th");
        th4.textContent = "Nama Perguruan Tinggi";
        t23 = space();
        td0 = element("td");
        t24 = text(
          /*pertiS1*/
          ctx[12]
        );
        t25 = space();
        td1 = element("td");
        t26 = text(
          /*pertiS2*/
          ctx[13]
        );
        t27 = space();
        td2 = element("td");
        t28 = text(
          /*pertiS3*/
          ctx[14]
        );
        t29 = space();
        tr2 = element("tr");
        th5 = element("th");
        th5.textContent = "Bidang Ilmu";
        t31 = space();
        td3 = element("td");
        t32 = text(
          /*bidangIlmuS1*/
          ctx[15]
        );
        t33 = space();
        td4 = element("td");
        t34 = text(
          /*bidangIlmuS2*/
          ctx[16]
        );
        t35 = space();
        td5 = element("td");
        t36 = text(
          /*bidangIlmuS3*/
          ctx[17]
        );
        t37 = space();
        tr3 = element("tr");
        th6 = element("th");
        th6.textContent = "Tahun Masuk";
        t39 = space();
        td6 = element("td");
        t40 = text(
          /*tahunMasukS1*/
          ctx[18]
        );
        t41 = space();
        td7 = element("td");
        t42 = text(
          /*tahunMasukS2*/
          ctx[19]
        );
        t43 = space();
        td8 = element("td");
        t44 = text(
          /*tahunMasukS3*/
          ctx[20]
        );
        t45 = space();
        tr4 = element("tr");
        th7 = element("th");
        th7.textContent = "Tahun Lulus";
        t47 = space();
        td9 = element("td");
        t48 = text(
          /*tahunLulusS1*/
          ctx[21]
        );
        t49 = space();
        td10 = element("td");
        t50 = text(
          /*tahunLulusS2*/
          ctx[22]
        );
        t51 = space();
        td11 = element("td");
        t52 = text(
          /*tahunLulusS3*/
          ctx[23]
        );
        t53 = space();
        tr5 = element("tr");
        th8 = element("th");
        th8.textContent = "Judul Skripsi/Tesis/Disertasi";
        t55 = space();
        td12 = element("td");
        t56 = text(
          /*judulTugasAkhirS1*/
          ctx[24]
        );
        t57 = space();
        td13 = element("td");
        t58 = text(
          /*judulTugasAkhirS2*/
          ctx[25]
        );
        t59 = space();
        td14 = element("td");
        t60 = text(
          /*judulTugasAkhirS3*/
          ctx[26]
        );
        t61 = space();
        div2 = element("div");
        h61 = element("h6");
        h61.textContent = "Pengalaman Penelitian";
        t63 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th class="is-narrow">Jumlah Rp.</th></tr>`;
        t73 = space();
        tbody1 = element("tbody");
        if (if_block0)
          if_block0.c();
        t74 = space();
        div3 = element("div");
        h62 = element("h6");
        h62.textContent = "Pengalaman Pengabdian Masyarakat";
        t76 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th class="is-narrow">Jumlah Rp.</th></tr>`;
        t86 = space();
        tbody2 = element("tbody");
        if (if_block1)
          if_block1.c();
        t87 = space();
        div4 = element("div");
        h63 = element("h6");
        h63.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t89 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t97 = space();
        tbody3 = element("tbody");
        if (if_block2)
          if_block2.c();
        t98 = space();
        div5 = element("div");
        h64 = element("h6");
        h64.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)";
        t100 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t110 = space();
        tbody4 = element("tbody");
        if (if_block3)
          if_block3.c();
        t111 = space();
        div6 = element("div");
        h65 = element("h6");
        h65.textContent = "Pengalaman Penulisan Buku";
        t113 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t123 = space();
        tbody5 = element("tbody");
        if (if_block4)
          if_block4.c();
        t124 = space();
        div7 = element("div");
        h66 = element("h6");
        h66.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t126 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t136 = space();
        tbody6 = element("tbody");
        if (if_block5)
          if_block5.c();
        attr(div0, "class", "box");
        attr(h60, "class", "title is-6");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "box");
        attr(h61, "class", "title is-6");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div2, "class", "box");
        attr(h62, "class", "title is-6");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div3, "class", "box");
        attr(h63, "class", "title is-6");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(h64, "class", "title is-6");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div5, "class", "box");
        attr(h65, "class", "title is-6");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div6, "class", "box");
        attr(h66, "class", "title is-6");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div7, "class", "box");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        mount_component(field9, div0, null);
        append(div0, t9);
        mount_component(field10, div0, null);
        append(div0, t10);
        mount_component(field11, div0, null);
        insert(target, t11, anchor);
        insert(target, div1, anchor);
        append(div1, h60);
        append(div1, t13);
        append(div1, table0);
        append(table0, thead0);
        append(table0, t21);
        append(table0, tbody0);
        append(tbody0, tr1);
        append(tr1, th4);
        append(tr1, t23);
        append(tr1, td0);
        append(td0, t24);
        append(tr1, t25);
        append(tr1, td1);
        append(td1, t26);
        append(tr1, t27);
        append(tr1, td2);
        append(td2, t28);
        append(tbody0, t29);
        append(tbody0, tr2);
        append(tr2, th5);
        append(tr2, t31);
        append(tr2, td3);
        append(td3, t32);
        append(tr2, t33);
        append(tr2, td4);
        append(td4, t34);
        append(tr2, t35);
        append(tr2, td5);
        append(td5, t36);
        append(tbody0, t37);
        append(tbody0, tr3);
        append(tr3, th6);
        append(tr3, t39);
        append(tr3, td6);
        append(td6, t40);
        append(tr3, t41);
        append(tr3, td7);
        append(td7, t42);
        append(tr3, t43);
        append(tr3, td8);
        append(td8, t44);
        append(tbody0, t45);
        append(tbody0, tr4);
        append(tr4, th7);
        append(tr4, t47);
        append(tr4, td9);
        append(td9, t48);
        append(tr4, t49);
        append(tr4, td10);
        append(td10, t50);
        append(tr4, t51);
        append(tr4, td11);
        append(td11, t52);
        append(tbody0, t53);
        append(tbody0, tr5);
        append(tr5, th8);
        append(tr5, t55);
        append(tr5, td12);
        append(td12, t56);
        append(tr5, t57);
        append(tr5, td13);
        append(td13, t58);
        append(tr5, t59);
        append(tr5, td14);
        append(td14, t60);
        insert(target, t61, anchor);
        insert(target, div2, anchor);
        append(div2, h61);
        append(div2, t63);
        append(div2, table1);
        append(table1, thead1);
        append(table1, t73);
        append(table1, tbody1);
        if (if_block0)
          if_block0.m(tbody1, null);
        insert(target, t74, anchor);
        insert(target, div3, anchor);
        append(div3, h62);
        append(div3, t76);
        append(div3, table2);
        append(table2, thead2);
        append(table2, t86);
        append(table2, tbody2);
        if (if_block1)
          if_block1.m(tbody2, null);
        insert(target, t87, anchor);
        insert(target, div4, anchor);
        append(div4, h63);
        append(div4, t89);
        append(div4, table3);
        append(table3, thead3);
        append(table3, t97);
        append(table3, tbody3);
        if (if_block2)
          if_block2.m(tbody3, null);
        insert(target, t98, anchor);
        insert(target, div5, anchor);
        append(div5, h64);
        append(div5, t100);
        append(div5, table4);
        append(table4, thead4);
        append(table4, t110);
        append(table4, tbody4);
        if (if_block3)
          if_block3.m(tbody4, null);
        insert(target, t111, anchor);
        insert(target, div6, anchor);
        append(div6, h65);
        append(div6, t113);
        append(div6, table5);
        append(table5, thead5);
        append(table5, t123);
        append(table5, tbody5);
        if (if_block4)
          if_block4.m(tbody5, null);
        insert(target, t124, anchor);
        insert(target, div7, anchor);
        append(div7, h66);
        append(div7, t126);
        append(div7, table6);
        append(table6, thead6);
        append(table6, t136);
        append(table6, tbody6);
        if (if_block5)
          if_block5.m(tbody6, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*namaLengkap*/
        134217728 | dirty[3] & /*$$scope*/
        268435456) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*jabatanFungsional*/
        268435456 | dirty[3] & /*$$scope*/
        268435456) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*nip*/
        536870912 | dirty[3] & /*$$scope*/
        268435456) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*nidn*/
        1073741824 | dirty[3] & /*$$scope*/
        268435456) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[1] & /*tanggalLahir, tempatLahir*/
        3 | dirty[3] & /*$$scope*/
        268435456) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[1] & /*alamatRumah*/
        4 | dirty[3] & /*$$scope*/
        268435456) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[1] & /*telpFaxRumah*/
        8 | dirty[3] & /*$$scope*/
        268435456) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[1] & /*nomorHandphone*/
        16 | dirty[3] & /*$$scope*/
        268435456) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[1] & /*alamatKantor*/
        32 | dirty[3] & /*$$scope*/
        268435456) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[1] & /*telpFaxKantor*/
        64 | dirty[3] & /*$$scope*/
        268435456) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[1] & /*email*/
        128 | dirty[3] & /*$$scope*/
        268435456) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[1] & /*mataKuliah*/
        256 | dirty[3] & /*$$scope*/
        268435456) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (!current || dirty[0] & /*pertiS1*/
        4096)
          set_data(
            t24,
            /*pertiS1*/
            ctx2[12]
          );
        if (!current || dirty[0] & /*pertiS2*/
        8192)
          set_data(
            t26,
            /*pertiS2*/
            ctx2[13]
          );
        if (!current || dirty[0] & /*pertiS3*/
        16384)
          set_data(
            t28,
            /*pertiS3*/
            ctx2[14]
          );
        if (!current || dirty[0] & /*bidangIlmuS1*/
        32768)
          set_data(
            t32,
            /*bidangIlmuS1*/
            ctx2[15]
          );
        if (!current || dirty[0] & /*bidangIlmuS2*/
        65536)
          set_data(
            t34,
            /*bidangIlmuS2*/
            ctx2[16]
          );
        if (!current || dirty[0] & /*bidangIlmuS3*/
        131072)
          set_data(
            t36,
            /*bidangIlmuS3*/
            ctx2[17]
          );
        if (!current || dirty[0] & /*tahunMasukS1*/
        262144)
          set_data(
            t40,
            /*tahunMasukS1*/
            ctx2[18]
          );
        if (!current || dirty[0] & /*tahunMasukS2*/
        524288)
          set_data(
            t42,
            /*tahunMasukS2*/
            ctx2[19]
          );
        if (!current || dirty[0] & /*tahunMasukS3*/
        1048576)
          set_data(
            t44,
            /*tahunMasukS3*/
            ctx2[20]
          );
        if (!current || dirty[0] & /*tahunLulusS1*/
        2097152)
          set_data(
            t48,
            /*tahunLulusS1*/
            ctx2[21]
          );
        if (!current || dirty[0] & /*tahunLulusS2*/
        4194304)
          set_data(
            t50,
            /*tahunLulusS2*/
            ctx2[22]
          );
        if (!current || dirty[0] & /*tahunLulusS3*/
        8388608)
          set_data(
            t52,
            /*tahunLulusS3*/
            ctx2[23]
          );
        if (!current || dirty[0] & /*judulTugasAkhirS1*/
        16777216)
          set_data(
            t56,
            /*judulTugasAkhirS1*/
            ctx2[24]
          );
        if (!current || dirty[0] & /*judulTugasAkhirS2*/
        33554432)
          set_data(
            t58,
            /*judulTugasAkhirS2*/
            ctx2[25]
          );
        if (!current || dirty[0] & /*judulTugasAkhirS3*/
        67108864)
          set_data(
            t60,
            /*judulTugasAkhirS3*/
            ctx2[26]
          );
        if (
          /*dataPP*/
          ctx2[5]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_75(ctx2);
            if_block0.c();
            if_block0.m(tbody1, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*dataPM*/
          ctx2[6]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_65(ctx2);
            if_block1.c();
            if_block1.m(tbody2, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*dataPD*/
          ctx2[7]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_56(ctx2);
            if_block2.c();
            if_block2.m(tbody3, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*dataPPub*/
          ctx2[8]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_415(ctx2);
            if_block3.c();
            if_block3.m(tbody4, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*dataPPB*/
          ctx2[9]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_315(ctx2);
            if_block4.c();
            if_block4.m(tbody5, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*dataPHKI*/
          ctx2[10]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_216(ctx2);
            if_block5.c();
            if_block5.m(tbody6, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t11);
          detach(div1);
          detach(t61);
          detach(div2);
          detach(t74);
          detach(div3);
          detach(t87);
          detach(div4);
          detach(t98);
          detach(div5);
          detach(t111);
          detach(div6);
          detach(t124);
          detach(div7);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
      }
    };
  }
  function create_default_slot_143(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*namaLengkap*/
          ctx[27]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaLengkap*/
        134217728)
          set_data(
            t,
            /*namaLengkap*/
            ctx2[27]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_133(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jabatanFungsional*/
          ctx[28]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jabatanFungsional*/
        268435456)
          set_data(
            t,
            /*jabatanFungsional*/
            ctx2[28]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_124(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nip*/
          ctx[29]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nip*/
        536870912)
          set_data(
            t,
            /*nip*/
            ctx2[29]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_114(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nidn*/
          ctx[30]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nidn*/
        1073741824)
          set_data(
            t,
            /*nidn*/
            ctx2[30]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_103(ctx) {
    let t0;
    let t1;
    let t2;
    return {
      c() {
        t0 = text(
          /*tempatLahir*/
          ctx[31]
        );
        t1 = text(" / ");
        t2 = text(
          /*tanggalLahir*/
          ctx[32]
        );
      },
      m(target, anchor) {
        insert(target, t0, anchor);
        insert(target, t1, anchor);
        insert(target, t2, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        1)
          set_data(
            t0,
            /*tempatLahir*/
            ctx2[31]
          );
        if (dirty[1] & /*tanggalLahir*/
        2)
          set_data(
            t2,
            /*tanggalLahir*/
            ctx2[32]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
        }
      }
    };
  }
  function create_default_slot_93(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*alamatRumah*/
          ctx[33]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        4)
          set_data(
            t,
            /*alamatRumah*/
            ctx2[33]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_83(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*telpFaxRumah*/
          ctx[34]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxRumah*/
        8)
          set_data(
            t,
            /*telpFaxRumah*/
            ctx2[34]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_74(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nomorHandphone*/
          ctx[35]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nomorHandphone*/
        16)
          set_data(
            t,
            /*nomorHandphone*/
            ctx2[35]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_64(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*alamatKantor*/
          ctx[36]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatKantor*/
        32)
          set_data(
            t,
            /*alamatKantor*/
            ctx2[36]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_54(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*telpFaxKantor*/
          ctx[37]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxKantor*/
        64)
          set_data(
            t,
            /*telpFaxKantor*/
            ctx2[37]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_411(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*email*/
          ctx[38]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*email*/
        128)
          set_data(
            t,
            /*email*/
            ctx2[38]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_85(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*mataKuliah*/
      ctx[39]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_63(get_each_context_63(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        256) {
          each_value_6 = ensure_array_like(
            /*mataKuliah*/
            ctx2[39]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_63(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_63(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_63(ctx) {
    let tr;
    let td;
    let t0_value = (
      /*matkul*/
      ctx[112].label + ""
    );
    let t0;
    let t1;
    return {
      c() {
        tr = element("tr");
        td = element("td");
        t0 = text(t0_value);
        t1 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td);
        append(td, t0);
        append(tr, t1);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        256 && t0_value !== (t0_value = /*matkul*/
        ctx2[112].label + ""))
          set_data(t0, t0_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_314(ctx) {
    let table;
    let thead;
    let t1;
    let tbody;
    let if_block = (
      /*mataKuliah*/
      ctx[39] && /*mataKuliah*/
      ctx[39].length > 0 && create_if_block_85(ctx)
    );
    return {
      c() {
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Mata Kuliah</th></tr>`;
        t1 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, table, anchor);
        append(table, thead);
        append(table, t1);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
      },
      p(ctx2, dirty) {
        if (
          /*mataKuliah*/
          ctx2[39] && /*mataKuliah*/
          ctx2[39].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_85(ctx2);
            if_block.c();
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_75(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_53(get_each_context_53(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        32) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_53(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_53(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_53(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[109].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[109].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[109].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[109].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[109].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        32 && t0_value !== (t0_value = /*PP*/
        ctx2[109].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPP*/
        32 && t2_value !== (t2_value = /*PP*/
        ctx2[109].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPP*/
        32 && t4_value !== (t4_value = /*PP*/
        ctx2[109].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPP*/
        32 && t6_value !== (t6_value = /*PP*/
        ctx2[109].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPP*/
        32 && t8_value !== (t8_value = /*PP*/
        ctx2[109].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_65(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[6]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_43(get_each_context_43(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        64) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[6]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_43(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_43(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_43(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[106].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[106].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[106].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[106].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[106].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        64 && t0_value !== (t0_value = /*PM*/
        ctx2[106].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPM*/
        64 && t2_value !== (t2_value = /*PM*/
        ctx2[106].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPM*/
        64 && t4_value !== (t4_value = /*PM*/
        ctx2[106].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPM*/
        64 && t6_value !== (t6_value = /*PM*/
        ctx2[106].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPM*/
        64 && t8_value !== (t8_value = /*PM*/
        ctx2[106].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_56(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_34(get_each_context_34(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        128) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_34(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_34(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_34(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[103].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[103].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[103].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[103].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        128 && t0_value !== (t0_value = /*PD*/
        ctx2[103].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPD*/
        128 && t2_value !== (t2_value = /*PD*/
        ctx2[103].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPD*/
        128 && t4_value !== (t4_value = /*PD*/
        ctx2[103].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPD*/
        128 && t6_value !== (t6_value = /*PD*/
        ctx2[103].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_415(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[8]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_24(get_each_context_24(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        256) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[8]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_24(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_24(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_24(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[100].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[100].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[100].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[100].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[100].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        256 && t0_value !== (t0_value = /*PPub*/
        ctx2[100].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPPub*/
        256 && t2_value !== (t2_value = /*PPub*/
        ctx2[100].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPPub*/
        256 && t4_value !== (t4_value = /*PPub*/
        ctx2[100].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPPub*/
        256 && t6_value !== (t6_value = /*PPub*/
        ctx2[100].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPPub*/
        256 && t8_value !== (t8_value = /*PPub*/
        ctx2[100].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_315(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[9]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_14(get_each_context_14(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        512) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[9]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_14(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_14(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_14(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[97].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[97].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[97].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[97].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[97].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        512 && t0_value !== (t0_value = /*PPB*/
        ctx2[97].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPPB*/
        512 && t2_value !== (t2_value = /*PPB*/
        ctx2[97].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPPB*/
        512 && t4_value !== (t4_value = /*PPB*/
        ctx2[97].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPPB*/
        512 && t6_value !== (t6_value = /*PPB*/
        ctx2[97].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPPB*/
        512 && t8_value !== (t8_value = /*PPB*/
        ctx2[97].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_216(ctx) {
    let each_1_anchor;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[10]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        1024) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[10]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context9(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block9(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block9(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[94].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[94].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[94].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[94].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[94].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        1024 && t0_value !== (t0_value = /*PHKI*/
        ctx2[94].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPHKI*/
        1024 && t2_value !== (t2_value = /*PHKI*/
        ctx2[94].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPHKI*/
        1024 && t4_value !== (t4_value = /*PHKI*/
        ctx2[94].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPHKI*/
        1024 && t6_value !== (t6_value = /*PHKI*/
        ctx2[94].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPHKI*/
        1024 && t8_value !== (t8_value = /*PHKI*/
        ctx2[94].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_215(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let t6;
    let if_block1_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[51] === true && create_if_block_94(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[52] === true && create_if_block_120(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Detail Proposal";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas PPM</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Biodata Peneliti</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[51]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[52]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[62]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[63]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*tab1*/
        1048576) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[51]
          );
        }
        if (!current || dirty[1] & /*tab2*/
        2097152) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[52]
          );
        }
        if (
          /*tab1*/
          ctx2[51] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*tab1*/
            1048576) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_94(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[52] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*tab2*/
            2097152) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_120(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t5);
          detach(t6);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_115(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berikan catatan revisi jika ingin revisi proposal.";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot15(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum mengupload file penilaian proposal";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment39(ctx) {
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let current;
    let if_block = (
      /*data*/
      ctx[4] && create_if_block13(ctx)
    );
    function modalerror0_show_binding(value) {
      ctx[67](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_115] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorRevisi*/
      ctx[0] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorRevisi*/
      ctx[0];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[68](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot15] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorPassReviewer*/
      ctx[1] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorPassReviewer*/
      ctx[1];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*data*/
          ctx2[4]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*data*/
            16) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block13(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        const modalerror0_changes = {};
        if (dirty[3] & /*$$scope*/
        268435456) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalErrorRevisi*/
        1) {
          updating_show = true;
          modalerror0_changes.show = /*showModalErrorRevisi*/
          ctx2[0];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[3] & /*$$scope*/
        268435456) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorPassReviewer*/
        2) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorPassReviewer*/
          ctx2[1];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        if (if_block)
          if_block.d(detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
      }
    };
  }
  function isObjectEmpty2(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function instance31($$self, $$props, $$invalidate) {
    let $penilaianFile;
    let $apiURL;
    let $route;
    component_subscribe($$self, penilaianFile, ($$value) => $$invalidate(53, $penilaianFile = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(86, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(87, $route = $$value));
    let { params } = $$props;
    let randomPenilaianFileName = "";
    let showModalErrorRevisi = false;
    let showModalErrorPassReviewer = false;
    let isLoading = false;
    const id = params["1"];
    const role = localStorage.getItem("role");
    const idEvaluator = localStorage.getItem("id");
    let error = {};
    let filePenilaian2;
    let data2, dataGP, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let itemsRCR;
    let pertiS1, pertiS2, pertiS3, bidangIlmuS1, bidangIlmuS2, bidangIlmuS3, tahunMasukS1, tahunMasukS2, tahunMasukS3, tahunLulusS1, tahunLulusS2, tahunLulusS3, judulTugasAkhirS1, judulTugasAkhirS2, judulTugasAkhirS3;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email3, mataKuliah = [];
    let ka_departemen, ka_lppm, reviewer, ka_pusat_kajian;
    let uidProposal, jenisProposal, jenisKegiatan, jenisSkema, kelompokKeahlian, topik, tanggalMulai, tanggalSelesai, biayaPenelitian, anggotaTim, rab, judul, abstrak, comment, status, kdeptSelected2, klppmSelected2, kpkSelected2, reviewerSelected2;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      ka_departemen = await findRole(11);
      ka_lppm = await findRole(12);
      ka_pusat_kajian = await findRole(13);
      reviewer = await findRole(10);
      const response = await fetch($apiURL + "/ppm/" + id, { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(4, data2 = result);
          ppmId = data2.id;
          uidProposal = data2.uid;
          $$invalidate(40, jenisProposal = data2.jenis_proposal);
          $$invalidate(41, jenisKegiatan = data2.jenis_kegiatan);
          $$invalidate(42, jenisSkema = data2.jenis_skema);
          $$invalidate(43, kelompokKeahlian = data2.kelompok_keahlian);
          $$invalidate(44, topik = data2.topik);
          $$invalidate(45, tanggalMulai = data2.tanggal_mulai);
          $$invalidate(46, tanggalSelesai = data2.tanggal_selesai);
          $$invalidate(47, biayaPenelitian = data2.biaya_penelitian);
          $$invalidate(48, anggotaTim = typeof data2.anggota_tim === "string" ? JSON.parse(data2.anggota_tim) : data2.anggota_tim);
          rab = data2.rab;
          judul = data2.judul;
          abstrak = data2.abstrak;
          $$invalidate(49, comment = data2.comment);
          $$invalidate(50, status = data2.status);
          kdeptSelected2 = data2.uid_kdept;
          klppmSelected2 = data2.uid_klppm;
          kpkSelected2 = data2.uid_kpk;
          reviewerSelected2 = data2.uid_reviewer;
          randomRabFileName = data2.random_rab_file_name;
          randomPpmFileName = data2.random_ppm_file_name;
          randomPenilaianFileNamedb = data2.random_penilaian_file_name;
        }
      }
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      let resultPenilaianChar = "";
      for (let i = 0; i < 30; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultPenilaianChar += characters.charAt(randomIndex);
      }
      randomPenilaianFileName = resultPenilaianChar;
      const responseEvl = await fetch($apiURL + "/user/" + idEvaluator, { method: "GET", headers });
      const resultEvl = await responseEvl.json();
      if (resultEvl.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseEvl.ok) {
          dataEvl = resultEvl;
          namaLengkapEvl = dataEvl.nama_lengkap;
        }
      }
      const responseRCR = await fetch($apiURL + "/riwayatCatatanRevisi/" + ppmId, { method: "GET", headers });
      const dataRCR = await responseRCR.json();
      if (dataRCR.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRCR.ok) {
          $$invalidate(11, itemsRCR = dataRCR.dbData);
        }
      }
      const responseGP = await fetch($apiURL + "/user/" + uidProposal, { method: "GET", headers });
      const resultGP = await responseGP.json();
      if (resultGP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseGP.ok) {
          dataGP = resultGP;
          idProfile = dataGP.id;
          idUser = dataGP.uid;
          $$invalidate(27, namaLengkap = dataGP.nama_lengkap);
          $$invalidate(28, jabatanFungsional = dataGP.jabatan_fungsional);
          $$invalidate(29, nip = dataGP.nip);
          $$invalidate(30, nidn = dataGP.nidn);
          $$invalidate(31, tempatLahir = dataGP.tempat_lahir);
          $$invalidate(32, tanggalLahir = dataGP.tanggal_lahir);
          $$invalidate(33, alamatRumah = dataGP.alamat_rumah);
          $$invalidate(34, telpFaxRumah = dataGP.telp_fax_rumah);
          $$invalidate(35, nomorHandphone = dataGP.nomor_handphone);
          $$invalidate(36, alamatKantor = dataGP.alamat_kantor);
          $$invalidate(37, telpFaxKantor = dataGP.telp_fax_kantor);
          $$invalidate(38, email3 = dataGP.email);
          $$invalidate(39, mataKuliah = typeof dataGP.mata_kuliah === "string" ? JSON.parse(dataGP.mata_kuliah) : dataGP.mata_kuliah || []);
        }
      }
      const responseRP = await fetch($apiURL + "/riwayatpendidikan/" + uidProposal, { method: "GET", headers });
      const dataRP = await responseRP.json();
      if (dataRP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRP.ok) {
          $$invalidate(12, pertiS1 = dataRP.nama_perti_s1);
          $$invalidate(13, pertiS2 = dataRP.nama_perti_s2);
          $$invalidate(14, pertiS3 = dataRP.nama_perti_s3);
          $$invalidate(15, bidangIlmuS1 = dataRP.bidang_ilmu_s1);
          $$invalidate(16, bidangIlmuS2 = dataRP.bidang_ilmu_s2);
          $$invalidate(17, bidangIlmuS3 = dataRP.bidang_ilmu_s3);
          $$invalidate(18, tahunMasukS1 = dataRP.tahun_masuk_s1);
          $$invalidate(19, tahunMasukS2 = dataRP.tahun_masuk_s2);
          $$invalidate(20, tahunMasukS3 = dataRP.tahun_masuk_s3);
          $$invalidate(21, tahunLulusS1 = dataRP.tahun_lulus_s1);
          $$invalidate(22, tahunLulusS2 = dataRP.tahun_lulus_s2);
          $$invalidate(23, tahunLulusS3 = dataRP.tahun_lulus_s3);
          $$invalidate(24, judulTugasAkhirS1 = dataRP.judul_tugasakhir_s1);
          $$invalidate(25, judulTugasAkhirS2 = dataRP.judul_tugasakhir_s2);
          $$invalidate(26, judulTugasAkhirS3 = dataRP.judul_tugasakhir_s3);
        }
      }
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + uidProposal, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (resultPP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(5, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + uidProposal, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (resultPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(6, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + uidProposal, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (resultPD.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(7, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + uidProposal, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (resultPPub.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(8, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + uidProposal, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (resultPPB.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(9, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + uidProposal, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (resultPHKI.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(10, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
    });
    async function handleRevisi() {
      $$invalidate(3, error = {});
      $$invalidate(2, isLoading = true);
      let payload = {
        comment,
        status: Number(data2.status) - 1,
        id
      };
      let payloadCttnRevisi = { ppmId, comment, namaLengkapEvl };
      if (!payload.comment) {
        $$invalidate(3, error.comment = `This field is required`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(0, showModalErrorRevisi = true);
      } else {
        const responseRev = await fetch($apiURL + "/riwayatCatatanRevisi", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadCttnRevisi)
        });
        const resultRev = await responseRev.json();
        if (resultRev.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (!responseRev.ok) {
            console.log(responseRev);
          }
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/approvalmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(2, isLoading = false);
    }
    async function handleDitolak() {
      $$invalidate(2, isLoading = true);
      const payload = {
        comment: "",
        status: Number(data2.status) + 1,
        id
      };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/dosen/approvalmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(2, isLoading = false);
    }
    async function handlePass() {
      $$invalidate(2, isLoading = true);
      const payload = {
        comment: "",
        status: Number(data2.status) + 2,
        id
      };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/dosen/approvalmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(2, isLoading = false);
    }
    async function handlePassReviewer() {
      $$invalidate(3, error = {});
      $$invalidate(2, isLoading = true);
      const readerPenilaian = new FileReader();
      const payload = {
        comment: "",
        status: Number(data2.status) + 2,
        randomPenilaianFileName,
        id
      };
      if (isObjectEmpty2($penilaianFile)) {
        $$invalidate(3, error["filePenilaian"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(1, showModalErrorPassReviewer = true);
      } else {
        if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
          readerPenilaian.onloadend = async () => {
            const base64Data = readerPenilaian.result.split(",")[1];
            const payloadPenilaianFile = {
              filePenilaian: {
                name: filePenilaian2.name,
                type: filePenilaian2.type,
                data: base64Data
              },
              randomPenilaianFileName
            };
            try {
              const responseUpload = await fetch($apiURL + "/uploadPenilaian", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadPenilaianFile)
              });
              const resultUpload = await responseUpload.json();
              if (responseUpload.status === 401) {
                location.pathname = "/tokenexpired";
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
            }
          };
          readerPenilaian.readAsDataURL(filePenilaian2);
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/approvalmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(2, isLoading = false);
    }
    async function searchUser(ev) {
      const response = await fetch($apiURL + "/user");
      const result = await response.json();
      if (response.ok) {
        showModal = true;
      }
    }
    let options;
    async function findRole(role2) {
      const response = await fetch($apiURL + "/role/" + role2, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          options = result;
          return options;
        } else {
          console.log(response);
        }
      }
    }
    async function handleDownloadRab(e) {
      let filename = "RAB_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadRab/${randomRabFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPpm(e) {
      let filename = "Proposal_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadPpm/${randomPpmFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPenilaian(e) {
      let filename = "Penilaian Proposal_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadPenilaian/${randomPenilaianFileNamedb}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(51, tab1 = true);
      $$invalidate(52, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(51, tab1 = false);
      $$invalidate(52, tab2 = true);
    }
    function filePenilaianChange(e) {
      filePenilaian2 = e.target.files[0];
      set_store_value(penilaianFile, $penilaianFile = e.target.files[0], $penilaianFile);
    }
    function textarea_input_handler() {
      comment = this.value;
      $$invalidate(49, comment);
    }
    function modalerror0_show_binding(value) {
      showModalErrorRevisi = value;
      $$invalidate(0, showModalErrorRevisi);
    }
    function modalerror1_show_binding(value) {
      showModalErrorPassReviewer = value;
      $$invalidate(1, showModalErrorPassReviewer);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(65, params = $$props2.params);
    };
    return [
      showModalErrorRevisi,
      showModalErrorPassReviewer,
      isLoading,
      error,
      data2,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      itemsRCR,
      pertiS1,
      pertiS2,
      pertiS3,
      bidangIlmuS1,
      bidangIlmuS2,
      bidangIlmuS3,
      tahunMasukS1,
      tahunMasukS2,
      tahunMasukS3,
      tahunLulusS1,
      tahunLulusS2,
      tahunLulusS3,
      judulTugasAkhirS1,
      judulTugasAkhirS2,
      judulTugasAkhirS3,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email3,
      mataKuliah,
      jenisProposal,
      jenisKegiatan,
      jenisSkema,
      kelompokKeahlian,
      topik,
      tanggalMulai,
      tanggalSelesai,
      biayaPenelitian,
      anggotaTim,
      comment,
      status,
      tab1,
      tab2,
      $penilaianFile,
      role,
      handleRevisi,
      handleDitolak,
      handlePass,
      handlePassReviewer,
      handleDownloadRab,
      handleDownloadPpm,
      handleDownloadPenilaian,
      clicktab1,
      clicktab2,
      filePenilaianChange,
      params,
      textarea_input_handler,
      modalerror0_show_binding,
      modalerror1_show_binding
    ];
  }
  var Detailapproval = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance31, create_fragment39, safe_not_equal, { params: 65 }, null, [-1, -1, -1, -1]);
    }
  };
  var detailapproval_default = Detailapproval;

  // src/pages/dosen/detailproposal.svelte
  init_define_process();
  function get_each_context10(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[98] = list[i];
    return child_ctx;
  }
  function get_each_context_15(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[101] = list[i];
    return child_ctx;
  }
  function get_each_context_25(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[104] = list[i];
    return child_ctx;
  }
  function get_each_context_35(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[107] = list[i];
    return child_ctx;
  }
  function get_each_context_44(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[110] = list[i];
    return child_ctx;
  }
  function get_each_context_54(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[113] = list[i];
    return child_ctx;
  }
  function get_each_context_64(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[116] = list[i];
    return child_ctx;
  }
  function get_each_context_73(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[119] = list[i];
    return child_ctx;
  }
  function get_each_context_92(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[122] = list[i];
    return child_ctx;
  }
  function get_each_context_83(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[122] = list[i];
    child_ctx[124] = i;
    return child_ctx;
  }
  function create_if_block14(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_117] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, judulTugasAkhirS3, judulTugasAkhirS2, judulTugasAkhirS1, tahunLulusS3, tahunLulusS2, tahunLulusS1, tahunMasukS3, tahunMasukS2, tahunMasukS1, bidangIlmuS3, bidangIlmuS2, bidangIlmuS1, pertiS3, pertiS2, pertiS1, uidProposal, view, itemsRCR, error, jenisSkema, items, kelompokKeahlian, jenisKegiatan, jenisProposal, data*/
        2147483647 | dirty[1] & /*mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap, tab2, isLoading, status, comment, editModeRAB, $rabFile, editModeProposal, $ppmFile, abstrak, judul, anggotaTim, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, tab1*/
        1040187391 | dirty[4] & /*$$scope*/
        8) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function create_if_block_126(ctx) {
    let div0;
    let current_block_type_index;
    let if_block0;
    let t0;
    let t1;
    let div1;
    let current;
    const if_block_creators = [create_if_block_174, create_else_block_8];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (!/*view*/
      ctx2[2])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, [-1, -1, -1, -1, -1]);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = !/*view*/
    ctx[2] && create_if_block_154(ctx);
    let if_block2 = !/*view*/
    ctx[2] && create_if_block_135(ctx);
    return {
      c() {
        div0 = element("div");
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        div1 = element("div");
        if (if_block2)
          if_block2.c();
        attr(div0, "class", "box");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        if_blocks[current_block_type_index].m(div0, null);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        insert(target, div1, anchor);
        if (if_block2)
          if_block2.m(div1, null);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(div0, null);
        }
        if (!/*view*/
        ctx2[2]) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*view*/
            4) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_154(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (!/*view*/
        ctx2[2]) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_135(ctx2);
            if_block2.c();
            if_block2.m(div1, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t0);
          detach(t1);
          detach(div1);
        }
        if_blocks[current_block_type_index].d();
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d();
      }
    };
  }
  function create_else_block_8(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let br;
    let t9;
    let table;
    let thead;
    let t13;
    let tbody;
    let t14;
    let hr;
    let t15;
    let field9;
    let t16;
    let field10;
    let t17;
    let field11;
    let t18;
    let if_block1_anchor;
    let current;
    field0 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_423] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_413] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_403] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_393] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_383] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_373] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_363] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_353] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_343] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*anggotaTim*/
      ctx[35].length > 0 && create_if_block_403(ctx)
    );
    field9 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_333] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_323] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_315] },
        $$scope: { ctx }
      }
    });
    let if_block1 = (
      /*jenisSkema*/
      (ctx[29] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[29] === "Riset Terapan" || /*jenisSkema*/
      ctx[29] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[29] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[29] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_393(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        br = element("br");
        t9 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t13 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t14 = space();
        hr = element("hr");
        t15 = space();
        create_component(field9.$$.fragment);
        t16 = space();
        create_component(field10.$$.fragment);
        t17 = space();
        create_component(field11.$$.fragment);
        t18 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        mount_component(field5, target, anchor);
        insert(target, t5, anchor);
        mount_component(field6, target, anchor);
        insert(target, t6, anchor);
        mount_component(field7, target, anchor);
        insert(target, t7, anchor);
        mount_component(field8, target, anchor);
        insert(target, t8, anchor);
        insert(target, br, anchor);
        insert(target, t9, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t13);
        append(table, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        insert(target, t14, anchor);
        insert(target, hr, anchor);
        insert(target, t15, anchor);
        mount_component(field9, target, anchor);
        insert(target, t16, anchor);
        mount_component(field10, target, anchor);
        insert(target, t17, anchor);
        mount_component(field11, target, anchor);
        insert(target, t18, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*jenisProposal*/
        134217728 | dirty[4] & /*$$scope*/
        8) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        268435456 | dirty[4] & /*$$scope*/
        8) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*jenisSkema*/
        536870912 | dirty[4] & /*$$scope*/
        8) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*kelompokKeahlian*/
        1073741824 | dirty[4] & /*$$scope*/
        8) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[1] & /*topik*/
        1 | dirty[4] & /*$$scope*/
        8) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[1] & /*tanggalMulai*/
        2 | dirty[4] & /*$$scope*/
        8) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[1] & /*tanggalSelesai*/
        4 | dirty[4] & /*$$scope*/
        8) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[1] & /*biayaPenelitian*/
        8 | dirty[4] & /*$$scope*/
        8) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[4] & /*$$scope*/
        8) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        if (
          /*anggotaTim*/
          ctx2[35].length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_403(ctx2);
            if_block0.c();
            if_block0.m(tbody, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        const field9_changes = {};
        if (dirty[0] & /*data*/
        8 | dirty[4] & /*$$scope*/
        8) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*data*/
        8 | dirty[4] & /*$$scope*/
        8) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[4] & /*$$scope*/
        8) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*jenisSkema*/
          ctx2[29] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[29] === "Riset Terapan" || /*jenisSkema*/
          ctx2[29] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[29] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[29] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            536870912) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_393(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(br);
          detach(t9);
          detach(table);
          detach(t14);
          detach(hr);
          detach(t15);
          detach(t16);
          detach(t17);
          detach(t18);
          detach(if_block1_anchor);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        if (if_block0)
          if_block0.d();
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function create_if_block_174(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let br;
    let t9;
    let table;
    let thead;
    let t14;
    let tbody;
    let t15;
    let hr;
    let t16;
    let field9;
    let t17;
    let field10;
    let t18;
    let field11;
    let t19;
    let if_block1_anchor;
    let current;
    field0 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_294] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_284] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_274] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_264] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_254] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_244] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_234] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_225] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_216] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*anggotaTim*/
      ctx[35].length > 0 && create_if_block_274(ctx)
    );
    field9 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_204] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_194] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_184] },
        $$scope: { ctx }
      }
    });
    let if_block1 = (
      /*jenisSkema*/
      (ctx[29] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[29] === "Riset Terapan" || /*jenisSkema*/
      ctx[29] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[29] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[29] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_184(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        br = element("br");
        t9 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:65px"></th> <th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t14 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t15 = space();
        hr = element("hr");
        t16 = space();
        create_component(field9.$$.fragment);
        t17 = space();
        create_component(field10.$$.fragment);
        t18 = space();
        create_component(field11.$$.fragment);
        t19 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        mount_component(field5, target, anchor);
        insert(target, t5, anchor);
        mount_component(field6, target, anchor);
        insert(target, t6, anchor);
        mount_component(field7, target, anchor);
        insert(target, t7, anchor);
        mount_component(field8, target, anchor);
        insert(target, t8, anchor);
        insert(target, br, anchor);
        insert(target, t9, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t14);
        append(table, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        insert(target, t15, anchor);
        insert(target, hr, anchor);
        insert(target, t16, anchor);
        mount_component(field9, target, anchor);
        insert(target, t17, anchor);
        mount_component(field10, target, anchor);
        insert(target, t18, anchor);
        mount_component(field11, target, anchor);
        insert(target, t19, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        134217729 | dirty[4] & /*$$scope*/
        8) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        268435457 | dirty[4] & /*$$scope*/
        8) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        805306369 | dirty[4] & /*$$scope*/
        8) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        1073741825 | dirty[4] & /*$$scope*/
        8) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*topik*/
        1 | dirty[4] & /*$$scope*/
        8) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*tanggalMulai*/
        2 | dirty[4] & /*$$scope*/
        8) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*tanggalSelesai*/
        4 | dirty[4] & /*$$scope*/
        8) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*biayaPenelitian*/
        8 | dirty[4] & /*$$scope*/
        8) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, items*/
        3 | dirty[1] & /*anggotaTim*/
        16 | dirty[4] & /*$$scope*/
        8) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        if (
          /*anggotaTim*/
          ctx2[35].length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*anggotaTim*/
            16) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_274(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        const field9_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*judul*/
        32 | dirty[4] & /*$$scope*/
        8) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*abstrak*/
        64 | dirty[4] & /*$$scope*/
        8) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*editModeProposal, $ppmFile*/
        545259520 | dirty[4] & /*$$scope*/
        8) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*jenisSkema*/
          ctx2[29] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[29] === "Riset Terapan" || /*jenisSkema*/
          ctx2[29] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[29] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[29] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            536870912) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_184(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(if_block0);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(if_block0);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(br);
          detach(t9);
          detach(table);
          detach(t15);
          detach(hr);
          detach(t16);
          detach(t17);
          detach(t18);
          detach(t19);
          detach(if_block1_anchor);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        if (if_block0)
          if_block0.d();
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function create_default_slot_423(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisProposal*/
          ctx[27]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        134217728)
          set_data(
            t,
            /*jenisProposal*/
            ctx2[27]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_413(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisKegiatan*/
          ctx[28]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        268435456)
          set_data(
            t,
            /*jenisKegiatan*/
            ctx2[28]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_403(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jenisSkema*/
          ctx[29]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisSkema*/
        536870912)
          set_data(
            t,
            /*jenisSkema*/
            ctx2[29]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_393(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*kelompokKeahlian*/
          ctx[30]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        1073741824)
          set_data(
            t,
            /*kelompokKeahlian*/
            ctx2[30]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_383(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*topik*/
          ctx[31]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*topik*/
        1)
          set_data(
            t,
            /*topik*/
            ctx2[31]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_373(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*tanggalMulai*/
          ctx[32]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalMulai*/
        2)
          set_data(
            t,
            /*tanggalMulai*/
            ctx2[32]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_363(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*tanggalSelesai*/
          ctx[33]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalSelesai*/
        4)
          set_data(
            t,
            /*tanggalSelesai*/
            ctx2[33]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_353(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*biayaPenelitian*/
          ctx[34]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPenelitian*/
        8)
          set_data(
            t,
            /*biayaPenelitian*/
            ctx2[34]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_343(ctx) {
    let span;
    return {
      c() {
        span = element("span");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_403(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*anggotaTim*/
      ctx[35]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_92(get_each_context_92(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*anggotaTim*/
        16) {
          each_value_9 = ensure_array_like(
            /*anggotaTim*/
            ctx2[35]
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_92(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_92(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_92(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*member*/
      ctx[122].role + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*member*/
      ctx[122].label + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*anggotaTim*/
        16 && t0_value !== (t0_value = /*member*/
        ctx2[122].role + ""))
          set_data(t0, t0_value);
        if (dirty[1] & /*anggotaTim*/
        16 && t2_value !== (t2_value = /*member*/
        ctx2[122].label + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_333(ctx) {
    let t_value = (
      /*data*/
      ctx[3].judul + ""
    );
    let t;
    return {
      c() {
        t = text(t_value);
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*data*/
        8 && t_value !== (t_value = /*data*/
        ctx2[3].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_323(ctx) {
    let html_tag;
    let raw_value = (
      /*data*/
      ctx[3].abstrak + ""
    );
    let html_anchor;
    return {
      c() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m(target, anchor) {
        html_tag.m(raw_value, target, anchor);
        insert(target, html_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*data*/
        8 && raw_value !== (raw_value = /*data*/
        ctx2[3].abstrak + ""))
          html_tag.p(raw_value);
      },
      d(detaching) {
        if (detaching) {
          detach(html_anchor);
          html_tag.d();
        }
      }
    };
  }
  function create_default_slot_315(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download Proposal";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPpm*/
            ctx[67]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_393(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_304] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_304(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Download RAB";
        attr(button, "class", "button is-link button");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadRab*/
            ctx[66]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_383(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_294(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisProposal && create_if_block_383(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.selected = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        if (
          /*jenisProposal*/
          ctx[27] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[75].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[27],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[75]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        134217728) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[27]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_383(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_373(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_284(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisKegiatan && create_if_block_373(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*jenisKegiatan*/
          ctx[28] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[76].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[28],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[76]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        268435456) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[28]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_373(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_7(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat Mandiri";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option3, option3.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
        }
      }
    };
  }
  function create_if_block_363(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option3 = element("option");
        option3.textContent = "Riset Mandiri";
        option4 = element("option");
        option4.textContent = "Riset Eksternal";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
        option3.__value = "Riset Mandiri";
        set_input_value(option3, option3.__value);
        option4.__value = "Riset Eksternal";
        set_input_value(option4, option4.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
        insert(target, option4, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
          detach(option4);
        }
      }
    };
  }
  function create_if_block_353(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_274(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[28] === "Penelitian"
      )
        return create_if_block_363;
      return create_else_block_7;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[0].jenisSkema && create_if_block_353(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\r\n                        ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        if (
          /*jenisSkema*/
          ctx[29] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[77].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[29],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[77]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        536870912) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_353(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_343(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_264(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].kelompokKeahlian && create_if_block_343(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Kelompok Keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[30]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[78]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        1073741824 && input.value !== /*kelompokKeahlian*/
        ctx2[30]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[0].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_343(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_333(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_254(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].topik && create_if_block_333(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[79]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*topik*/
        1 && input.value !== /*topik*/
        ctx2[31]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[0].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_333(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_324(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_244(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tanggalMulai && create_if_block_324(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[32]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[80]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalMulai*/
        2) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_324(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_316(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_234(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tanggalSelesai && create_if_block_316(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[81]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalSelesai*/
        4) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_316(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_303(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_225(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].biayaPenelitian && create_if_block_303(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[34]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_4*/
              ctx[82]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[83]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPenelitian*/
        8 && input.value !== /*biayaPenelitian*/
        ctx2[34]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[0].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_303(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_293(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_216(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[84](value);
    }
    let select_props = { start: "2", items: (
      /*items*/
      ctx[1]
    ) };
    if (
      /*anggotaTim*/
      ctx[35] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[35];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[0].anggotaTim && create_if_block_293(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        2)
          select_changes.items = /*items*/
          ctx2[1];
        if (!updating_result && dirty[1] & /*anggotaTim*/
        16) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[35];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[0].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_293(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_274(ctx) {
    let each_1_anchor;
    let current;
    let each_value_8 = ensure_array_like(
      /*anggotaTim*/
      ctx[35]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_83(get_each_context_83(ctx, each_value_8, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*anggotaTim*/
        16 | dirty[2] & /*deleteMember*/
        2048) {
          each_value_8 = ensure_array_like(
            /*anggotaTim*/
            ctx2[35]
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_83(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_83(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_8.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_8.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_283(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[122].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[73]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*anggotaTim*/
        16 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[122].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_83(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[122].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[122].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[124] > 0 && create_if_block_283(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[124] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[1] & /*anggotaTim*/
        16) && t1_value !== (t1_value = /*member*/
        ctx2[122].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*anggotaTim*/
        16) && t3_value !== (t3_value = /*member*/
        ctx2[122].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_264(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_204(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judul && create_if_block_264(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[36]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[85]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judul*/
        32 && input.value !== /*judul*/
        ctx2[36]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[0].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_264(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_254(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].abstrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].abstrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_194(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].abstrak && create_if_block_254(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "class", "textarea");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*abstrak*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[86]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*abstrak*/
        64) {
          set_input_value(
            textarea,
            /*abstrak*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[0].abstrak
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_254(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_52(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_3(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[60]?.name
      )
        return create_if_block_244;
      return create_else_block_62;
    }
    let current_block_type = select_block_type_3(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[0].fileProposal && create_if_block_235(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-wzx0zq");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-wzx0zq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-wzx0zq");
        attr(p, "class", "help svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*filePpmChange*/
              ctx[62]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeProposal*/
              ctx[64]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[0].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_235(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_225(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download Proposal";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadPpm*/
              ctx[67]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeProposal*/
              ctx[64]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_62(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_244(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[60].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$ppmFile*/
        536870912 && t_value !== (t_value = /*$ppmFile*/
        ctx2[60].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_235(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_184(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_225, create_else_block_52];
    const if_blocks = [];
    function select_block_type_2(ctx2, dirty) {
      if (!/*editModeProposal*/
      ctx2[54])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_2(ctx, [-1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_2(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_184(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_174] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*editModeRAB, $rabFile*/
        285212672 | dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block_32(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_5(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[59]?.name
      )
        return create_if_block_217;
      return create_else_block_42;
    }
    let current_block_type = select_block_type_5(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[0].fileRAB && create_if_block_204(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-wzx0zq");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-wzx0zq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileRab");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-wzx0zq");
        attr(p, "class", "help svelte-wzx0zq");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileRabChange*/
              ctx[63]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeRAB*/
              ctx[65]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_5(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[0].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_204(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_194(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download RAB";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadRab*/
              ctx[66]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeRAB*/
              ctx[65]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_42(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_217(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[59]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$rabFile*/
        268435456 && t_value !== (t_value = /*$rabFile*/
        ctx2[59]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_204(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_174(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_194, create_else_block_32];
    const if_blocks = [];
    function select_block_type_4(ctx2, dirty) {
      if (!/*editModeRAB*/
      ctx2[55])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_4(ctx, [-1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_4(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_154(ctx) {
    let div1;
    let h4;
    let t1;
    let hr;
    let t2;
    let div0;
    let t4;
    let field;
    let t5;
    let br;
    let t6;
    let table;
    let thead;
    let t12;
    let current;
    field = new Field_default({
      props: {
        name: "Catatan Revisi",
        $$slots: { default: [create_default_slot_164] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*itemsRCR*/
      ctx[10] && create_if_block_164(ctx)
    );
    return {
      c() {
        div1 = element("div");
        h4 = element("h4");
        h4.textContent = "Informasi Revisi";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Perhatikan catatan revisi dari evaluator untuk detail yang
                     akan direvisi!</p>`;
        t4 = space();
        create_component(field.$$.fragment);
        t5 = space();
        br = element("br");
        t6 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Catatan Revisi</th> <th style="width: 15%;">Evaluator</th> <th style="width: 15%;">Waktu</th></tr>`;
        t12 = space();
        if (if_block)
          if_block.c();
        attr(h4, "class", "title is-4");
        attr(div0, "class", "notification is-danger is-light");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, h4);
        append(div1, t1);
        append(div1, hr);
        append(div1, t2);
        append(div1, div0);
        append(div1, t4);
        mount_component(field, div1, null);
        append(div1, t5);
        append(div1, br);
        append(div1, t6);
        append(div1, table);
        append(table, thead);
        append(table, t12);
        if (if_block)
          if_block.m(table, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[1] & /*comment*/
        128 | dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
        if (
          /*itemsRCR*/
          ctx2[10]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_164(ctx2);
            if_block.c();
            if_block.m(table, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        destroy_component(field);
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_default_slot_164(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*comment*/
          ctx[38]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*comment*/
        128)
          set_data(
            t,
            /*comment*/
            ctx2[38]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_164(ctx) {
    let tbody;
    let each_value_7 = ensure_array_like(
      /*itemsRCR*/
      ctx[10]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_73(get_each_context_73(ctx, each_value_7, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        1024) {
          each_value_7 = ensure_array_like(
            /*itemsRCR*/
            ctx2[10]
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_73(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_73(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_73(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[119].comment + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[119].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[119].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        1024 && t0_value !== (t0_value = /*item*/
        ctx2[119].comment + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsRCR*/
        1024 && t2_value !== (t2_value = /*item*/
        ctx2[119].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsRCR*/
        1024 && t4_value !== (t4_value = /*item*/
        ctx2[119].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_135(ctx) {
    let if_block_anchor;
    function select_block_type_6(ctx2, dirty) {
      if (
        /*status*/
        ctx2[39] === 0
      )
        return create_if_block_144;
      return create_else_block_22;
    }
    let current_block_type = select_block_type_6(ctx, [-1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_6(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function create_else_block_22(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Remediasi";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*remediasi*/
            ctx[68]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_144(ctx) {
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let mounted;
    let dispose;
    return {
      c() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Simpan";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Submit";
        attr(button0, "class", "button is-info is-light");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[53]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[53]
        );
        attr(p1, "class", "control");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        append(p0, button0);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
        append(p1, button1);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*simpanProposal*/
              ctx[70]
            ),
            listen(
              button1,
              "click",
              /*submitProposal*/
              ctx[69]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*isLoading*/
        4194304) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[53]
          );
        }
        if (dirty[1] & /*isLoading*/
        4194304) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[53]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_121(ctx) {
    let t0;
    let div0;
    let field0;
    let t1;
    let field1;
    let t2;
    let field2;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let current_block_type_index;
    let if_block1;
    let t10;
    let current_block_type_index_1;
    let if_block2;
    let t11;
    let field9;
    let t12;
    let div1;
    let h60;
    let t14;
    let table0;
    let thead0;
    let t22;
    let tbody0;
    let tr1;
    let th4;
    let t24;
    let td0;
    let t25;
    let t26;
    let td1;
    let t27;
    let t28;
    let td2;
    let t29;
    let t30;
    let tr2;
    let th5;
    let t32;
    let td3;
    let t33;
    let t34;
    let td4;
    let t35;
    let t36;
    let td5;
    let t37;
    let t38;
    let tr3;
    let th6;
    let t40;
    let td6;
    let t41;
    let t42;
    let td7;
    let t43;
    let t44;
    let td8;
    let t45;
    let t46;
    let tr4;
    let th7;
    let t48;
    let td9;
    let t49;
    let t50;
    let td10;
    let t51;
    let t52;
    let td11;
    let t53;
    let t54;
    let tr5;
    let th8;
    let t56;
    let td12;
    let t57;
    let t58;
    let td13;
    let t59;
    let t60;
    let td14;
    let t61;
    let t62;
    let div2;
    let h61;
    let t64;
    let table1;
    let thead1;
    let t74;
    let tbody1;
    let t75;
    let div3;
    let h62;
    let t77;
    let table2;
    let thead2;
    let t87;
    let tbody2;
    let t88;
    let div4;
    let h63;
    let t90;
    let table3;
    let thead3;
    let t98;
    let tbody3;
    let t99;
    let div5;
    let h64;
    let t101;
    let table4;
    let thead4;
    let t111;
    let tbody4;
    let t112;
    let div6;
    let h65;
    let t114;
    let table5;
    let thead5;
    let t124;
    let tbody5;
    let t125;
    let div7;
    let h66;
    let t127;
    let table6;
    let thead6;
    let t137;
    let tbody6;
    let current;
    let if_block0 = (
      /*uidProposal*/
      ctx[26] === /*own_id*/
      ctx[61] && create_if_block_1110(ctx)
    );
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_154] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_144] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_134] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_125] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat / Tanggal Lahir",
        $$slots: { default: [create_default_slot_116] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_104] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_94] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Nomoh Handphone",
        $$slots: { default: [create_default_slot_84] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_75] },
        $$scope: { ctx }
      }
    });
    const if_block_creators = [create_if_block_105, create_else_block_12];
    const if_blocks = [];
    function select_block_type_7(ctx2, dirty) {
      if (
        /*telpFaxKantor*/
        ctx2[50] !== null
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_7(ctx, [-1, -1, -1, -1, -1]);
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const if_block_creators_1 = [create_if_block_95, create_else_block8];
    const if_blocks_1 = [];
    function select_block_type_8(ctx2, dirty) {
      if (
        /*email*/
        ctx2[51] !== null
      )
        return 0;
      return 1;
    }
    current_block_type_index_1 = select_block_type_8(ctx, [-1, -1, -1, -1, -1]);
    if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    field9 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_217] },
        $$scope: { ctx }
      }
    });
    let if_block3 = (
      /*dataPP*/
      ctx[4] && create_if_block_76(ctx)
    );
    let if_block4 = (
      /*dataPM*/
      ctx[5] && create_if_block_66(ctx)
    );
    let if_block5 = (
      /*dataPD*/
      ctx[6] && create_if_block_57(ctx)
    );
    let if_block6 = (
      /*dataPPub*/
      ctx[7] && create_if_block_416(ctx)
    );
    let if_block7 = (
      /*dataPPB*/
      ctx[8] && create_if_block_317(ctx)
    );
    let if_block8 = (
      /*dataPHKI*/
      ctx[9] && create_if_block_218(ctx)
    );
    return {
      c() {
        if (if_block0)
          if_block0.c();
        t0 = space();
        div0 = element("div");
        create_component(field0.$$.fragment);
        t1 = space();
        create_component(field1.$$.fragment);
        t2 = space();
        create_component(field2.$$.fragment);
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        if_block1.c();
        t10 = space();
        if_block2.c();
        t11 = space();
        create_component(field9.$$.fragment);
        t12 = space();
        div1 = element("div");
        h60 = element("h6");
        h60.textContent = "Riwayat Pendidikan";
        t14 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow">Program</th> <th class="is-narrow">S1</th> <th class="is-narrow">S2</th> <th class="is-narrow">S3</th></tr>`;
        t22 = space();
        tbody0 = element("tbody");
        tr1 = element("tr");
        th4 = element("th");
        th4.textContent = "Nama Perguruan Tinggi";
        t24 = space();
        td0 = element("td");
        t25 = text(
          /*pertiS1*/
          ctx[11]
        );
        t26 = space();
        td1 = element("td");
        t27 = text(
          /*pertiS2*/
          ctx[12]
        );
        t28 = space();
        td2 = element("td");
        t29 = text(
          /*pertiS3*/
          ctx[13]
        );
        t30 = space();
        tr2 = element("tr");
        th5 = element("th");
        th5.textContent = "Bidang Ilmu";
        t32 = space();
        td3 = element("td");
        t33 = text(
          /*bidangIlmuS1*/
          ctx[14]
        );
        t34 = space();
        td4 = element("td");
        t35 = text(
          /*bidangIlmuS2*/
          ctx[15]
        );
        t36 = space();
        td5 = element("td");
        t37 = text(
          /*bidangIlmuS3*/
          ctx[16]
        );
        t38 = space();
        tr3 = element("tr");
        th6 = element("th");
        th6.textContent = "Tahun Masuk";
        t40 = space();
        td6 = element("td");
        t41 = text(
          /*tahunMasukS1*/
          ctx[17]
        );
        t42 = space();
        td7 = element("td");
        t43 = text(
          /*tahunMasukS2*/
          ctx[18]
        );
        t44 = space();
        td8 = element("td");
        t45 = text(
          /*tahunMasukS3*/
          ctx[19]
        );
        t46 = space();
        tr4 = element("tr");
        th7 = element("th");
        th7.textContent = "Tahun Lulus";
        t48 = space();
        td9 = element("td");
        t49 = text(
          /*tahunLulusS1*/
          ctx[20]
        );
        t50 = space();
        td10 = element("td");
        t51 = text(
          /*tahunLulusS2*/
          ctx[21]
        );
        t52 = space();
        td11 = element("td");
        t53 = text(
          /*tahunLulusS3*/
          ctx[22]
        );
        t54 = space();
        tr5 = element("tr");
        th8 = element("th");
        th8.textContent = "Judul Skripsi/Tesis/Disertasi";
        t56 = space();
        td12 = element("td");
        t57 = text(
          /*judulTugasAkhirS1*/
          ctx[23]
        );
        t58 = space();
        td13 = element("td");
        t59 = text(
          /*judulTugasAkhirS2*/
          ctx[24]
        );
        t60 = space();
        td14 = element("td");
        t61 = text(
          /*judulTugasAkhirS3*/
          ctx[25]
        );
        t62 = space();
        div2 = element("div");
        h61 = element("h6");
        h61.textContent = "Pengalaman Penelitian";
        t64 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th class="is-narrow">Jumlah Rp.</th></tr>`;
        t74 = space();
        tbody1 = element("tbody");
        if (if_block3)
          if_block3.c();
        t75 = space();
        div3 = element("div");
        h62 = element("h6");
        h62.textContent = "Pengalaman Pengabdian Masyarakat";
        t77 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th class="is-narrow">Jumlah Rp.</th></tr>`;
        t87 = space();
        tbody2 = element("tbody");
        if (if_block4)
          if_block4.c();
        t88 = space();
        div4 = element("div");
        h63 = element("h6");
        h63.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t90 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t98 = space();
        tbody3 = element("tbody");
        if (if_block5)
          if_block5.c();
        t99 = space();
        div5 = element("div");
        h64 = element("h6");
        h64.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)";
        t101 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t111 = space();
        tbody4 = element("tbody");
        if (if_block6)
          if_block6.c();
        t112 = space();
        div6 = element("div");
        h65 = element("h6");
        h65.textContent = "Pengalaman Penulisan Buku";
        t114 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t124 = space();
        tbody5 = element("tbody");
        if (if_block7)
          if_block7.c();
        t125 = space();
        div7 = element("div");
        h66 = element("h6");
        h66.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t127 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t137 = space();
        tbody6 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(div0, "class", "box");
        attr(h60, "class", "title is-6");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "box");
        attr(h61, "class", "title is-6");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div2, "class", "box");
        attr(h62, "class", "title is-6");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div3, "class", "box");
        attr(h63, "class", "title is-6");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(h64, "class", "title is-6");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div5, "class", "box");
        attr(h65, "class", "title is-6");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div6, "class", "box");
        attr(h66, "class", "title is-6");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div7, "class", "box");
      },
      m(target, anchor) {
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t0, anchor);
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t1);
        mount_component(field1, div0, null);
        append(div0, t2);
        mount_component(field2, div0, null);
        append(div0, t3);
        mount_component(field3, div0, null);
        append(div0, t4);
        mount_component(field4, div0, null);
        append(div0, t5);
        mount_component(field5, div0, null);
        append(div0, t6);
        mount_component(field6, div0, null);
        append(div0, t7);
        mount_component(field7, div0, null);
        append(div0, t8);
        mount_component(field8, div0, null);
        append(div0, t9);
        if_blocks[current_block_type_index].m(div0, null);
        append(div0, t10);
        if_blocks_1[current_block_type_index_1].m(div0, null);
        append(div0, t11);
        mount_component(field9, div0, null);
        insert(target, t12, anchor);
        insert(target, div1, anchor);
        append(div1, h60);
        append(div1, t14);
        append(div1, table0);
        append(table0, thead0);
        append(table0, t22);
        append(table0, tbody0);
        append(tbody0, tr1);
        append(tr1, th4);
        append(tr1, t24);
        append(tr1, td0);
        append(td0, t25);
        append(tr1, t26);
        append(tr1, td1);
        append(td1, t27);
        append(tr1, t28);
        append(tr1, td2);
        append(td2, t29);
        append(tbody0, t30);
        append(tbody0, tr2);
        append(tr2, th5);
        append(tr2, t32);
        append(tr2, td3);
        append(td3, t33);
        append(tr2, t34);
        append(tr2, td4);
        append(td4, t35);
        append(tr2, t36);
        append(tr2, td5);
        append(td5, t37);
        append(tbody0, t38);
        append(tbody0, tr3);
        append(tr3, th6);
        append(tr3, t40);
        append(tr3, td6);
        append(td6, t41);
        append(tr3, t42);
        append(tr3, td7);
        append(td7, t43);
        append(tr3, t44);
        append(tr3, td8);
        append(td8, t45);
        append(tbody0, t46);
        append(tbody0, tr4);
        append(tr4, th7);
        append(tr4, t48);
        append(tr4, td9);
        append(td9, t49);
        append(tr4, t50);
        append(tr4, td10);
        append(td10, t51);
        append(tr4, t52);
        append(tr4, td11);
        append(td11, t53);
        append(tbody0, t54);
        append(tbody0, tr5);
        append(tr5, th8);
        append(tr5, t56);
        append(tr5, td12);
        append(td12, t57);
        append(tr5, t58);
        append(tr5, td13);
        append(td13, t59);
        append(tr5, t60);
        append(tr5, td14);
        append(td14, t61);
        insert(target, t62, anchor);
        insert(target, div2, anchor);
        append(div2, h61);
        append(div2, t64);
        append(div2, table1);
        append(table1, thead1);
        append(table1, t74);
        append(table1, tbody1);
        if (if_block3)
          if_block3.m(tbody1, null);
        insert(target, t75, anchor);
        insert(target, div3, anchor);
        append(div3, h62);
        append(div3, t77);
        append(div3, table2);
        append(table2, thead2);
        append(table2, t87);
        append(table2, tbody2);
        if (if_block4)
          if_block4.m(tbody2, null);
        insert(target, t88, anchor);
        insert(target, div4, anchor);
        append(div4, h63);
        append(div4, t90);
        append(div4, table3);
        append(table3, thead3);
        append(table3, t98);
        append(table3, tbody3);
        if (if_block5)
          if_block5.m(tbody3, null);
        insert(target, t99, anchor);
        insert(target, div5, anchor);
        append(div5, h64);
        append(div5, t101);
        append(div5, table4);
        append(table4, thead4);
        append(table4, t111);
        append(table4, tbody4);
        if (if_block6)
          if_block6.m(tbody4, null);
        insert(target, t112, anchor);
        insert(target, div6, anchor);
        append(div6, h65);
        append(div6, t114);
        append(div6, table5);
        append(table5, thead5);
        append(table5, t124);
        append(table5, tbody5);
        if (if_block7)
          if_block7.m(tbody5, null);
        insert(target, t125, anchor);
        insert(target, div7, anchor);
        append(div7, h66);
        append(div7, t127);
        append(div7, table6);
        append(table6, thead6);
        append(table6, t137);
        append(table6, tbody6);
        if (if_block8)
          if_block8.m(tbody6, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*uidProposal*/
          ctx2[26] === /*own_id*/
          ctx2[61]
        ) {
          if (if_block0) {
          } else {
            if_block0 = create_if_block_1110(ctx2);
            if_block0.c();
            if_block0.m(t0.parentNode, t0);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        const field0_changes = {};
        if (dirty[1] & /*namaLengkap*/
        512 | dirty[4] & /*$$scope*/
        8) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[1] & /*jabatanFungsional*/
        1024 | dirty[4] & /*$$scope*/
        8) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[1] & /*nip*/
        2048 | dirty[4] & /*$$scope*/
        8) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[1] & /*nidn*/
        4096 | dirty[4] & /*$$scope*/
        8) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[1] & /*tanggalLahir, tempatLahir*/
        24576 | dirty[4] & /*$$scope*/
        8) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[1] & /*alamatRumah*/
        32768 | dirty[4] & /*$$scope*/
        8) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[1] & /*telpFaxRumah*/
        65536 | dirty[4] & /*$$scope*/
        8) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[1] & /*nomorHandphone*/
        131072 | dirty[4] & /*$$scope*/
        8) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[1] & /*alamatKantor*/
        262144 | dirty[4] & /*$$scope*/
        8) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_7(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div0, t10);
        }
        let previous_block_index_1 = current_block_type_index_1;
        current_block_type_index_1 = select_block_type_8(ctx2, dirty);
        if (current_block_type_index_1 === previous_block_index_1) {
          if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
            if_blocks_1[previous_block_index_1] = null;
          });
          check_outros();
          if_block2 = if_blocks_1[current_block_type_index_1];
          if (!if_block2) {
            if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
            if_block2.c();
          } else {
            if_block2.p(ctx2, dirty);
          }
          transition_in(if_block2, 1);
          if_block2.m(div0, t11);
        }
        const field9_changes = {};
        if (dirty[1] & /*mataKuliah*/
        2097152 | dirty[4] & /*$$scope*/
        8) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        if (!current || dirty[0] & /*pertiS1*/
        2048)
          set_data(
            t25,
            /*pertiS1*/
            ctx2[11]
          );
        if (!current || dirty[0] & /*pertiS2*/
        4096)
          set_data(
            t27,
            /*pertiS2*/
            ctx2[12]
          );
        if (!current || dirty[0] & /*pertiS3*/
        8192)
          set_data(
            t29,
            /*pertiS3*/
            ctx2[13]
          );
        if (!current || dirty[0] & /*bidangIlmuS1*/
        16384)
          set_data(
            t33,
            /*bidangIlmuS1*/
            ctx2[14]
          );
        if (!current || dirty[0] & /*bidangIlmuS2*/
        32768)
          set_data(
            t35,
            /*bidangIlmuS2*/
            ctx2[15]
          );
        if (!current || dirty[0] & /*bidangIlmuS3*/
        65536)
          set_data(
            t37,
            /*bidangIlmuS3*/
            ctx2[16]
          );
        if (!current || dirty[0] & /*tahunMasukS1*/
        131072)
          set_data(
            t41,
            /*tahunMasukS1*/
            ctx2[17]
          );
        if (!current || dirty[0] & /*tahunMasukS2*/
        262144)
          set_data(
            t43,
            /*tahunMasukS2*/
            ctx2[18]
          );
        if (!current || dirty[0] & /*tahunMasukS3*/
        524288)
          set_data(
            t45,
            /*tahunMasukS3*/
            ctx2[19]
          );
        if (!current || dirty[0] & /*tahunLulusS1*/
        1048576)
          set_data(
            t49,
            /*tahunLulusS1*/
            ctx2[20]
          );
        if (!current || dirty[0] & /*tahunLulusS2*/
        2097152)
          set_data(
            t51,
            /*tahunLulusS2*/
            ctx2[21]
          );
        if (!current || dirty[0] & /*tahunLulusS3*/
        4194304)
          set_data(
            t53,
            /*tahunLulusS3*/
            ctx2[22]
          );
        if (!current || dirty[0] & /*judulTugasAkhirS1*/
        8388608)
          set_data(
            t57,
            /*judulTugasAkhirS1*/
            ctx2[23]
          );
        if (!current || dirty[0] & /*judulTugasAkhirS2*/
        16777216)
          set_data(
            t59,
            /*judulTugasAkhirS2*/
            ctx2[24]
          );
        if (!current || dirty[0] & /*judulTugasAkhirS3*/
        33554432)
          set_data(
            t61,
            /*judulTugasAkhirS3*/
            ctx2[25]
          );
        if (
          /*dataPP*/
          ctx2[4]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_76(ctx2);
            if_block3.c();
            if_block3.m(tbody1, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*dataPM*/
          ctx2[5]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_66(ctx2);
            if_block4.c();
            if_block4.m(tbody2, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*dataPD*/
          ctx2[6]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_57(ctx2);
            if_block5.c();
            if_block5.m(tbody3, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*dataPPub*/
          ctx2[7]
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_416(ctx2);
            if_block6.c();
            if_block6.m(tbody4, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*dataPPB*/
          ctx2[8]
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_317(ctx2);
            if_block7.c();
            if_block7.m(tbody5, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*dataPHKI*/
          ctx2[9]
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_218(ctx2);
            if_block8.c();
            if_block8.m(tbody6, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(if_block1);
        transition_in(if_block2);
        transition_in(field9.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(if_block1);
        transition_out(if_block2);
        transition_out(field9.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(div0);
          detach(t12);
          detach(div1);
          detach(t62);
          detach(div2);
          detach(t75);
          detach(div3);
          detach(t88);
          detach(div4);
          detach(t99);
          detach(div5);
          detach(t112);
          detach(div6);
          detach(t125);
          detach(div7);
        }
        if (if_block0)
          if_block0.d(detaching);
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        if_blocks[current_block_type_index].d();
        if_blocks_1[current_block_type_index_1].d();
        destroy_component(field9);
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_1110(ctx) {
    let div;
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p style="text-align: justify;"><strong>Biodata</strong> sebagai salah satu syarat dalam
                  pengajuan hibah Penelitian dan Pengabdian Masyarakat dan
                  apabila dikemudian hari ternyata dijumpai ketidak sesuaian,
                  peneliti sanggup menerima sanksinya. Jika ada perubahan, klik
                  <a href="${"/dosen/profile"}"><strong>Disini!</strong></a></p>`;
        attr(div, "class", "notification is-danger is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_default_slot_154(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*namaLengkap*/
          ctx[40]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        512)
          set_data(
            t,
            /*namaLengkap*/
            ctx2[40]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_144(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*jabatanFungsional*/
          ctx[41]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        1024)
          set_data(
            t,
            /*jabatanFungsional*/
            ctx2[41]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_134(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nip*/
          ctx[42]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        2048)
          set_data(
            t,
            /*nip*/
            ctx2[42]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_125(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nidn*/
          ctx[43]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        4096)
          set_data(
            t,
            /*nidn*/
            ctx2[43]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_116(ctx) {
    let t0;
    let t1;
    let t2;
    return {
      c() {
        t0 = text(
          /*tempatLahir*/
          ctx[44]
        );
        t1 = text(" / ");
        t2 = text(
          /*tanggalLahir*/
          ctx[45]
        );
      },
      m(target, anchor) {
        insert(target, t0, anchor);
        insert(target, t1, anchor);
        insert(target, t2, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        8192)
          set_data(
            t0,
            /*tempatLahir*/
            ctx2[44]
          );
        if (dirty[1] & /*tanggalLahir*/
        16384)
          set_data(
            t2,
            /*tanggalLahir*/
            ctx2[45]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
        }
      }
    };
  }
  function create_default_slot_104(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*alamatRumah*/
          ctx[46]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        32768)
          set_data(
            t,
            /*alamatRumah*/
            ctx2[46]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_94(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*telpFaxRumah*/
          ctx[47]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxRumah*/
        65536)
          set_data(
            t,
            /*telpFaxRumah*/
            ctx2[47]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_84(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*nomorHandphone*/
          ctx[48]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nomorHandphone*/
        131072)
          set_data(
            t,
            /*nomorHandphone*/
            ctx2[48]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_default_slot_75(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*alamatKantor*/
          ctx[49]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatKantor*/
        262144)
          set_data(
            t,
            /*alamatKantor*/
            ctx2[49]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_else_block_12(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_65] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_105(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_55] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[1] & /*telpFaxKantor*/
        524288 | dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_65(ctx) {
    let span;
    return {
      c() {
        span = element("span");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_55(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*telpFaxKantor*/
          ctx[50]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxKantor*/
        524288)
          set_data(
            t,
            /*telpFaxKantor*/
            ctx2[50]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_else_block8(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Email",
        $$slots: { default: [create_default_slot_414] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_95(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Email",
        $$slots: { default: [create_default_slot_316] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[1] & /*email*/
        1048576 | dirty[4] & /*$$scope*/
        8) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_default_slot_414(ctx) {
    let span;
    return {
      c() {
        span = element("span");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_316(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*email*/
          ctx[51]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*email*/
        1048576)
          set_data(
            t,
            /*email*/
            ctx2[51]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_86(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*mataKuliah*/
      ctx[52]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_64(get_each_context_64(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        2097152) {
          each_value_6 = ensure_array_like(
            /*mataKuliah*/
            ctx2[52]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_64(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_64(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_64(ctx) {
    let tr;
    let td;
    let t0_value = (
      /*matkul*/
      ctx[116].label + ""
    );
    let t0;
    let t1;
    return {
      c() {
        tr = element("tr");
        td = element("td");
        t0 = text(t0_value);
        t1 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td);
        append(td, t0);
        append(tr, t1);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        2097152 && t0_value !== (t0_value = /*matkul*/
        ctx2[116].label + ""))
          set_data(t0, t0_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_217(ctx) {
    let table;
    let thead;
    let t1;
    let tbody;
    let if_block = (
      /*mataKuliah*/
      ctx[52] && /*mataKuliah*/
      ctx[52].length > 0 && create_if_block_86(ctx)
    );
    return {
      c() {
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Mata Kuliah</th></tr>`;
        t1 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, table, anchor);
        append(table, thead);
        append(table, t1);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
      },
      p(ctx2, dirty) {
        if (
          /*mataKuliah*/
          ctx2[52] && /*mataKuliah*/
          ctx2[52].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_86(ctx2);
            if_block.c();
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_76(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[4]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_54(get_each_context_54(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        16) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[4]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_54(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_54(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_54(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[113].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[113].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[113].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[113].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[113].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        16 && t0_value !== (t0_value = /*PP*/
        ctx2[113].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPP*/
        16 && t2_value !== (t2_value = /*PP*/
        ctx2[113].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPP*/
        16 && t4_value !== (t4_value = /*PP*/
        ctx2[113].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPP*/
        16 && t6_value !== (t6_value = /*PP*/
        ctx2[113].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPP*/
        16 && t8_value !== (t8_value = /*PP*/
        ctx2[113].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_66(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_44(get_each_context_44(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        32) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_44(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_44(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_44(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[110].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[110].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[110].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[110].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[110].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        32 && t0_value !== (t0_value = /*PM*/
        ctx2[110].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPM*/
        32 && t2_value !== (t2_value = /*PM*/
        ctx2[110].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPM*/
        32 && t4_value !== (t4_value = /*PM*/
        ctx2[110].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPM*/
        32 && t6_value !== (t6_value = /*PM*/
        ctx2[110].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPM*/
        32 && t8_value !== (t8_value = /*PM*/
        ctx2[110].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_57(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[6]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_35(get_each_context_35(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        64) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[6]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_35(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_35(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_35(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[107].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[107].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[107].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[107].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        64 && t0_value !== (t0_value = /*PD*/
        ctx2[107].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPD*/
        64 && t2_value !== (t2_value = /*PD*/
        ctx2[107].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPD*/
        64 && t4_value !== (t4_value = /*PD*/
        ctx2[107].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPD*/
        64 && t6_value !== (t6_value = /*PD*/
        ctx2[107].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_416(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_25(get_each_context_25(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        128) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_25(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_25(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_25(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[104].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[104].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[104].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[104].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[104].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        128 && t0_value !== (t0_value = /*PPub*/
        ctx2[104].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPPub*/
        128 && t2_value !== (t2_value = /*PPub*/
        ctx2[104].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPPub*/
        128 && t4_value !== (t4_value = /*PPub*/
        ctx2[104].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPPub*/
        128 && t6_value !== (t6_value = /*PPub*/
        ctx2[104].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPPub*/
        128 && t8_value !== (t8_value = /*PPub*/
        ctx2[104].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_317(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[8]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_15(get_each_context_15(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        256) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[8]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_15(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_15(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_15(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[101].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[101].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[101].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[101].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[101].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        256 && t0_value !== (t0_value = /*PPB*/
        ctx2[101].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPPB*/
        256 && t2_value !== (t2_value = /*PPB*/
        ctx2[101].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPPB*/
        256 && t4_value !== (t4_value = /*PPB*/
        ctx2[101].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPPB*/
        256 && t6_value !== (t6_value = /*PPB*/
        ctx2[101].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPPB*/
        256 && t8_value !== (t8_value = /*PPB*/
        ctx2[101].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_218(ctx) {
    let each_1_anchor;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[9]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block10(get_each_context10(ctx, each_value, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        512) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[9]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context10(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block10(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block10(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[98].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[98].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[98].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[98].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[98].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        512 && t0_value !== (t0_value = /*PHKI*/
        ctx2[98].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*dataPHKI*/
        512 && t2_value !== (t2_value = /*PHKI*/
        ctx2[98].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*dataPHKI*/
        512 && t4_value !== (t4_value = /*PHKI*/
        ctx2[98].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*dataPHKI*/
        512 && t6_value !== (t6_value = /*PHKI*/
        ctx2[98].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*dataPHKI*/
        512 && t8_value !== (t8_value = /*PHKI*/
        ctx2[98].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot_117(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let t6;
    let if_block1_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[57] === true && create_if_block_126(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[58] === true && create_if_block_121(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Detail Proposal";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas PPM</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Biodata Peneliti</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[57]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[58]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[71]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[72]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*tab1*/
        67108864) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[57]
          );
        }
        if (!current || dirty[1] & /*tab2*/
        134217728) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[58]
          );
        }
        if (
          /*tab1*/
          ctx2[57] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*tab1*/
            67108864) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_126(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[58] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*tab2*/
            134217728) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_121(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t5);
          detach(t6);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot16(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment40(ctx) {
    let t;
    let modalerror;
    let updating_show;
    let current;
    let if_block = (
      /*data*/
      ctx[3] && /*items*/
      ctx[1].length > 0 && create_if_block14(ctx)
    );
    function modalerror_show_binding(value) {
      ctx[87](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot16] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[56] !== void 0
    ) {
      modalerror_props.show = /*showModalError*/
      ctx[56];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t = space();
        create_component(modalerror.$$.fragment);
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, t, anchor);
        mount_component(modalerror, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*data*/
          ctx2[3] && /*items*/
          ctx2[1].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*data, items*/
            10) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block14(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t.parentNode, t);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        const modalerror_changes = {};
        if (dirty[4] & /*$$scope*/
        8) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[1] & /*showModalError*/
        33554432) {
          updating_show = true;
          modalerror_changes.show = /*showModalError*/
          ctx2[56];
          add_flush_callback(() => updating_show = false);
        }
        modalerror.$set(modalerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        if (if_block)
          if_block.d(detaching);
        destroy_component(modalerror, detaching);
      }
    };
  }
  function isObjectEmpty3(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function isEdit2(code) {
    const edit2 = [0, 1, 3, 5, 7, 9];
    return edit2.some((x) => x === code);
  }
  function formatRupiah3(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance32($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    let $rabFile;
    let $ppmFile;
    component_subscribe($$self, route, ($$value) => $$invalidate(92, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(93, $apiURL = $$value));
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(59, $rabFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(60, $ppmFile = $$value));
    let { params } = $$props;
    const own_id = Number(localStorage.getItem("id"));
    let error = {};
    let items = [];
    let view;
    let data2, dataGP, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let itemsRCR;
    let pertiS1, pertiS2, pertiS3, bidangIlmuS1, bidangIlmuS2, bidangIlmuS3, tahunMasukS1, tahunMasukS2, tahunMasukS3, tahunLulusS1, tahunLulusS2, tahunLulusS3, judulTugasAkhirS1, judulTugasAkhirS2, judulTugasAkhirS3;
    let uidProposal, jenisProposal, jenisKegiatan, jenisSkema, kelompokKeahlian, topik, tanggalMulai, tanggalSelesai, biayaPenelitian, anggotaTim = [], judul, abstrak, comment, status;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email3, mataKuliah = [];
    const id = params["1"];
    let file;
    let fileRab;
    let filePpm;
    let isLoading = false;
    let editModeProposal = false;
    let editModeRAB = false;
    let showModalError = false;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      $$invalidate(53, isLoading = false);
      const response = await fetch($apiURL + "/ppm/" + id, { method: "GET", headers });
      const result = await response.json();
      $$invalidate(2, view = !isEdit2(result.status));
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(3, data2 = result);
          ppmId = data2.id;
          $$invalidate(26, uidProposal = data2.uid);
          $$invalidate(27, jenisProposal = data2.jenis_proposal);
          $$invalidate(28, jenisKegiatan = data2.jenis_kegiatan);
          $$invalidate(29, jenisSkema = data2.jenis_skema);
          $$invalidate(30, kelompokKeahlian = data2.kelompok_keahlian);
          $$invalidate(31, topik = data2.topik);
          $$invalidate(32, tanggalMulai = data2.tanggal_mulai);
          $$invalidate(33, tanggalSelesai = data2.tanggal_selesai);
          $$invalidate(34, biayaPenelitian = data2.biaya_penelitian);
          $$invalidate(35, anggotaTim = typeof data2.anggota_tim === "string" ? JSON.parse(data2.anggota_tim) : data2.anggota_tim);
          $$invalidate(36, judul = data2.judul);
          $$invalidate(37, abstrak = data2.abstrak);
          $$invalidate(38, comment = data2.comment);
          $$invalidate(39, status = data2.status);
          kdeptSelected = data2.uid_kdept;
          klppmSelected = data2.uid_klppm;
          kpkSelected = data2.uid_kpk;
          reviewerSelected = data2.uid_reviewer;
          randomRabFileName = data2.random_rab_file_name;
          randomPpmFileName = data2.random_ppm_file_name;
        } else {
          console.log(response);
        }
      }
      const responseRCR = await fetch($apiURL + "/riwayatCatatanRevisi/" + ppmId, { method: "GET", headers });
      const dataRCR = await responseRCR.json();
      if (dataRCR.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRCR.ok) {
          $$invalidate(10, itemsRCR = dataRCR.dbData);
        }
      }
      const responseGP = await fetch($apiURL + "/user/" + uidProposal, { method: "GET", headers });
      const resultGP = await responseGP.json();
      if (resultGP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseGP.ok) {
          dataGP = resultGP;
          idProfile = dataGP.id;
          idUser = dataGP.uid;
          $$invalidate(40, namaLengkap = dataGP.nama_lengkap);
          $$invalidate(41, jabatanFungsional = dataGP.jabatan_fungsional);
          $$invalidate(42, nip = dataGP.nip);
          $$invalidate(43, nidn = dataGP.nidn);
          $$invalidate(44, tempatLahir = dataGP.tempat_lahir);
          $$invalidate(45, tanggalLahir = dataGP.tanggal_lahir);
          $$invalidate(46, alamatRumah = dataGP.alamat_rumah);
          $$invalidate(47, telpFaxRumah = dataGP.telp_fax_rumah);
          $$invalidate(48, nomorHandphone = dataGP.nomor_handphone);
          $$invalidate(49, alamatKantor = dataGP.alamat_kantor);
          $$invalidate(50, telpFaxKantor = dataGP.telp_fax_kantor);
          $$invalidate(51, email3 = dataGP.email);
          $$invalidate(52, mataKuliah = typeof dataGP.mata_kuliah === "string" ? JSON.parse(dataGP.mata_kuliah) : dataGP.mata_kuliah || []);
        }
      }
      const responseRP = await fetch($apiURL + "/riwayatpendidikan/" + uidProposal, { method: "GET", headers });
      const dataRP = await responseRP.json();
      if (dataRP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRP.ok) {
          $$invalidate(11, pertiS1 = dataRP.nama_perti_s1);
          $$invalidate(12, pertiS2 = dataRP.nama_perti_s2);
          $$invalidate(13, pertiS3 = dataRP.nama_perti_s3);
          $$invalidate(14, bidangIlmuS1 = dataRP.bidang_ilmu_s1);
          $$invalidate(15, bidangIlmuS2 = dataRP.bidang_ilmu_s2);
          $$invalidate(16, bidangIlmuS3 = dataRP.bidang_ilmu_s3);
          $$invalidate(17, tahunMasukS1 = dataRP.tahun_masuk_s1);
          $$invalidate(18, tahunMasukS2 = dataRP.tahun_masuk_s2);
          $$invalidate(19, tahunMasukS3 = dataRP.tahun_masuk_s3);
          $$invalidate(20, tahunLulusS1 = dataRP.tahun_lulus_s1);
          $$invalidate(21, tahunLulusS2 = dataRP.tahun_lulus_s2);
          $$invalidate(22, tahunLulusS3 = dataRP.tahun_lulus_s3);
          $$invalidate(23, judulTugasAkhirS1 = dataRP.judul_tugasakhir_s1);
          $$invalidate(24, judulTugasAkhirS2 = dataRP.judul_tugasakhir_s2);
          $$invalidate(25, judulTugasAkhirS3 = dataRP.judul_tugasakhir_s3);
        }
      }
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + uidProposal, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (resultPP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(4, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + uidProposal, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (resultPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(5, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + uidProposal, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (resultPD.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(6, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + uidProposal, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (resultPPub.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(7, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + uidProposal, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (resultPPB.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(8, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + uidProposal, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (resultPHKI.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(9, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
      const responsee = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const results = await responsee.json();
      if (results.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsee.ok) {
          listUser = results;
          for (const [key, value] of Object.entries(listUser)) {
            $$invalidate(1, items = [
              ...items,
              {
                value: value.uid,
                label: value.nama_lengkap
              }
            ]);
          }
        } else {
          console.log(responsee);
        }
      }
    });
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function toggleEditModeProposal() {
      $$invalidate(54, editModeProposal = !editModeProposal);
    }
    function toggleEditModeRAB() {
      $$invalidate(55, editModeRAB = !editModeRAB);
    }
    async function handleDownloadRab(e) {
      let filename = "RAB_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadRab/${randomRabFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPpm(e) {
      let filename = "Proposal_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadPpm/${randomPpmFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function remediasi() {
      $$invalidate(0, error = {});
      $$invalidate(53, isLoading = true);
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      let payload = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        id,
        judul,
        abstrak,
        comment: "",
        status: Number(data2.status) + 1,
        kdeptSelected,
        klppmSelected,
        kpkSelected,
        reviewerSelected,
        randomRabFileName,
        randomPpmFileName
      };
      if (editModeProposal) {
        if (isObjectEmpty3($ppmFile)) {
          $$invalidate(0, error["fileProposal"] = `*`, error);
        }
      }
      if (editModeRAB) {
        if (isObjectEmpty3($rabFile)) {
          $$invalidate(0, error["fileRAB"] = `*`, error);
        }
      }
      for (const [key, value] of Object.entries(payload)) {
        if (!["comment"].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(56, showModalError = true);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            randomPpmFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            randomRabFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileRab)
          readerRab.readAsDataURL(fileRab);
        const response = await fetch($apiURL + "/ppm", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/proposalppm");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(53, isLoading = false);
    }
    async function submitProposal() {
      $$invalidate(0, error = {});
      $$invalidate(53, isLoading = true);
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      let payload = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        id,
        judul,
        abstrak,
        comment: "",
        status: Number(data2.status) + 2,
        kdeptSelected,
        klppmSelected,
        kpkSelected,
        reviewerSelected,
        randomRabFileName,
        randomPpmFileName
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!["comment"].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(56, showModalError = true);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            randomPpmFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            randomRabFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileRab)
          readerRab.readAsDataURL(fileRab);
        const response = await fetch($apiURL + "/ppm", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/proposalppm");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(53, isLoading = false);
    }
    async function simpanProposal() {
      $$invalidate(0, error = {});
      $$invalidate(53, isLoading = true);
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      let payload = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        id,
        judul,
        abstrak,
        comment: "",
        status: Number(data2.status),
        kdeptSelected,
        klppmSelected,
        kpkSelected,
        reviewerSelected,
        randomRabFileName,
        randomPpmFileName
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!["comment", "status"].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(56, showModalError = true);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            randomPpmFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            randomRabFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileRab)
          readerRab.readAsDataURL(fileRab);
        const response = await fetch($apiURL + "/ppm", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/proposalppm");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(53, isLoading = false);
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(57, tab1 = true);
      $$invalidate(58, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(57, tab1 = false);
      $$invalidate(58, tab2 = true);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(35, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(27, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(28, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(29, jenisSkema);
    }
    function input_input_handler() {
      kelompokKeahlian = this.value;
      $$invalidate(30, kelompokKeahlian);
    }
    function input_input_handler_1() {
      topik = this.value;
      $$invalidate(31, topik);
    }
    function input_input_handler_2() {
      tanggalMulai = this.value;
      $$invalidate(32, tanggalMulai);
    }
    function input_input_handler_3() {
      tanggalSelesai = this.value;
      $$invalidate(33, tanggalSelesai);
    }
    function input_input_handler_4() {
      biayaPenelitian = this.value;
      $$invalidate(34, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(34, biayaPenelitian = formatRupiah3(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(35, anggotaTim);
    }
    function input_input_handler_5() {
      judul = this.value;
      $$invalidate(36, judul);
    }
    function textarea_input_handler() {
      abstrak = this.value;
      $$invalidate(37, abstrak);
    }
    function modalerror_show_binding(value) {
      showModalError = value;
      $$invalidate(56, showModalError);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(74, params = $$props2.params);
    };
    return [
      error,
      items,
      view,
      data2,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      itemsRCR,
      pertiS1,
      pertiS2,
      pertiS3,
      bidangIlmuS1,
      bidangIlmuS2,
      bidangIlmuS3,
      tahunMasukS1,
      tahunMasukS2,
      tahunMasukS3,
      tahunLulusS1,
      tahunLulusS2,
      tahunLulusS3,
      judulTugasAkhirS1,
      judulTugasAkhirS2,
      judulTugasAkhirS3,
      uidProposal,
      jenisProposal,
      jenisKegiatan,
      jenisSkema,
      kelompokKeahlian,
      topik,
      tanggalMulai,
      tanggalSelesai,
      biayaPenelitian,
      anggotaTim,
      judul,
      abstrak,
      comment,
      status,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email3,
      mataKuliah,
      isLoading,
      editModeProposal,
      editModeRAB,
      showModalError,
      tab1,
      tab2,
      $rabFile,
      $ppmFile,
      own_id,
      filePpmChange,
      fileRabChange,
      toggleEditModeProposal,
      toggleEditModeRAB,
      handleDownloadRab,
      handleDownloadPpm,
      remediasi,
      submitProposal,
      simpanProposal,
      clicktab1,
      clicktab2,
      deleteMember,
      params,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      keyup_handler,
      select_result_binding,
      input_input_handler_5,
      textarea_input_handler,
      modalerror_show_binding
    ];
  }
  var Detailproposal2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance32, create_fragment40, safe_not_equal, { params: 74 }, null, [-1, -1, -1, -1, -1]);
    }
  };
  var detailproposal_default2 = Detailproposal2;

  // src/pages/dosen/home.svelte
  init_define_process();
  function get_each_context11(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i];
    return child_ctx;
  }
  function create_if_block15(ctx) {
    let table;
    let thead;
    let t5;
    let tbody;
    let each_value = ensure_array_like(
      /*reminder*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block11(get_each_context11(ctx, each_value, i));
    }
    return {
      c() {
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Judul</th> <th style="width: 15%; text-align: center">Deadline</th> <th style="width: 15%; text-align: center">Countdown</th></tr>`;
        t5 = space();
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
      },
      m(target, anchor) {
        insert(target, table, anchor);
        append(table, thead);
        append(table, t5);
        append(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*reminder*/
        4) {
          each_value = ensure_array_like(
            /*reminder*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context11(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block11(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block11(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*reminder*/
      ctx[2].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*reminder*/
      ctx[2].selesai + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*reminder*/
      ctx[2].tersisa + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        attr(td1, "class", "isi svelte-1g6xyrw");
        attr(td2, "class", "isi svelte-1g6xyrw");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty & /*reminder*/
        4 && t0_value !== (t0_value = /*reminder*/
        ctx2[2].judul + ""))
          set_data(t0, t0_value);
        if (dirty & /*reminder*/
        4 && t2_value !== (t2_value = /*reminder*/
        ctx2[2].selesai + ""))
          set_data(t2, t2_value);
        if (dirty & /*reminder*/
        4 && t4_value !== (t4_value = /*reminder*/
        ctx2[2].tersisa + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot17(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div16;
    let div3;
    let div2;
    let div0;
    let icon0;
    let t3;
    let div1;
    let p0;
    let t5;
    let p1;
    let t6;
    let t7;
    let div7;
    let div6;
    let div4;
    let icon1;
    let t8;
    let div5;
    let p2;
    let t10;
    let p3;
    let t11;
    let t12;
    let div11;
    let div10;
    let div8;
    let icon2;
    let t13;
    let div9;
    let t17;
    let div15;
    let div14;
    let div12;
    let icon3;
    let t18;
    let div13;
    let t22;
    let div20;
    let div19;
    let div17;
    let t24;
    let br;
    let t25;
    let div18;
    let current;
    icon0 = new Icon_default({
      props: { id: "logo", src: penelitian, size: "2" }
    });
    icon1 = new Icon_default({
      props: { id: "logo", src: pengmas, size: "2" }
    });
    icon2 = new Icon_default({
      props: { id: "logo", src: jurnal, size: "2" }
    });
    icon3 = new Icon_default({
      props: { id: "logo", src: copyright, size: "2" }
    });
    let if_block = (
      /*reminder*/
      ctx[2] && create_if_block15(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Dashboard";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div16 = element("div");
        div3 = element("div");
        div2 = element("div");
        div0 = element("div");
        create_component(icon0.$$.fragment);
        t3 = space();
        div1 = element("div");
        p0 = element("p");
        p0.textContent = "Penelitian";
        t5 = space();
        p1 = element("p");
        t6 = text(
          /*penelitianCounter*/
          ctx[0]
        );
        t7 = space();
        div7 = element("div");
        div6 = element("div");
        div4 = element("div");
        create_component(icon1.$$.fragment);
        t8 = space();
        div5 = element("div");
        p2 = element("p");
        p2.textContent = "Pengmas";
        t10 = space();
        p3 = element("p");
        t11 = text(
          /*pengmasCounter*/
          ctx[1]
        );
        t12 = space();
        div11 = element("div");
        div10 = element("div");
        div8 = element("div");
        create_component(icon2.$$.fragment);
        t13 = space();
        div9 = element("div");
        div9.innerHTML = `<p class="heading">Jurnal</p> <p class="title">...</p>`;
        t17 = space();
        div15 = element("div");
        div14 = element("div");
        div12 = element("div");
        create_component(icon3.$$.fragment);
        t18 = space();
        div13 = element("div");
        div13.innerHTML = `<p class="heading">HKI</p> <p class="title">...</p>`;
        t22 = space();
        div20 = element("div");
        div19 = element("div");
        div17 = element("div");
        div17.innerHTML = `<h3 class="title is-3">Notification</h3>`;
        t24 = space();
        br = element("br");
        t25 = space();
        div18 = element("div");
        if (if_block)
          if_block.c();
        attr(h2, "class", "title is-2");
        attr(div0, "class", "flex-item-left svelte-1g6xyrw");
        attr(p0, "class", "heading");
        attr(p1, "class", "title");
        attr(div1, "class", "flex-item-right has-text-centered svelte-1g6xyrw");
        attr(div2, "class", "box svelte-1g6xyrw");
        attr(div3, "class", "column");
        attr(div4, "class", "flex-item-left svelte-1g6xyrw");
        attr(p2, "class", "heading");
        attr(p3, "class", "title");
        attr(div5, "class", "flex-item-right has-text-centered svelte-1g6xyrw");
        attr(div6, "class", "box svelte-1g6xyrw");
        attr(div7, "class", "column");
        attr(div8, "class", "flex-item-left svelte-1g6xyrw");
        attr(div9, "class", "flex-item-right has-text-centered svelte-1g6xyrw");
        attr(div10, "class", "box svelte-1g6xyrw");
        attr(div11, "class", "column");
        attr(div12, "class", "flex-item-left svelte-1g6xyrw");
        attr(div13, "class", "flex-item-right has-text-centered svelte-1g6xyrw");
        attr(div14, "class", "box svelte-1g6xyrw");
        attr(div15, "class", "column");
        attr(div16, "class", "columns");
        attr(div18, "class", "child svelte-1g6xyrw");
        attr(div19, "class", "column");
        attr(div20, "class", "box parent svelte-1g6xyrw");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div16, anchor);
        append(div16, div3);
        append(div3, div2);
        append(div2, div0);
        mount_component(icon0, div0, null);
        append(div2, t3);
        append(div2, div1);
        append(div1, p0);
        append(div1, t5);
        append(div1, p1);
        append(p1, t6);
        append(div16, t7);
        append(div16, div7);
        append(div7, div6);
        append(div6, div4);
        mount_component(icon1, div4, null);
        append(div6, t8);
        append(div6, div5);
        append(div5, p2);
        append(div5, t10);
        append(div5, p3);
        append(p3, t11);
        append(div16, t12);
        append(div16, div11);
        append(div11, div10);
        append(div10, div8);
        mount_component(icon2, div8, null);
        append(div10, t13);
        append(div10, div9);
        append(div16, t17);
        append(div16, div15);
        append(div15, div14);
        append(div14, div12);
        mount_component(icon3, div12, null);
        append(div14, t18);
        append(div14, div13);
        insert(target, t22, anchor);
        insert(target, div20, anchor);
        append(div20, div19);
        append(div19, div17);
        append(div19, t24);
        append(div19, br);
        append(div19, t25);
        append(div19, div18);
        if (if_block)
          if_block.m(div18, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (!current || dirty & /*penelitianCounter*/
        1)
          set_data(
            t6,
            /*penelitianCounter*/
            ctx2[0]
          );
        if (!current || dirty & /*pengmasCounter*/
        2)
          set_data(
            t11,
            /*pengmasCounter*/
            ctx2[1]
          );
        if (
          /*reminder*/
          ctx2[2]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block15(ctx2);
            if_block.c();
            if_block.m(div18, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div16);
          detach(t22);
          detach(div20);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_fragment41(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot17] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, reminder, pengmasCounter, penelitianCounter*/
        263) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  function daysUntil(targetDate) {
    const today = /* @__PURE__ */ new Date();
    const target = new Date(targetDate);
    const difference = target.getTime() - today.getTime();
    const positiveDifference = Math.abs(difference);
    const days = Math.floor(positiveDifference / (1e3 * 3600 * 24));
    const weeks = Math.floor(days / 7);
    const months = Math.floor(days / 30);
    const remainingWeeks = weeks % 4;
    const remainingDays = days % 30;
    return { months, remainingWeeks, remainingDays };
  }
  function instance33($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(4, $apiURL = $$value));
    let items, penelitianCounter, pengmasCounter;
    let reminder;
    const id = Number(localStorage.getItem("id"));
    onMount(async () => {
      const accessToken = localStorage.getItem("token");
      const headers = {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json"
      };
      const response = await fetch($apiURL + "/ppm/all/" + id, { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          items = result.dbData;
          $$invalidate(2, reminder = []);
          for (const item of items) {
            reminder.push({
              judul: item.judul,
              selesai: item.tanggal_selesai,
              tersisa: `${daysUntil(item.tanggal_selesai).months} bulan, ${daysUntil(item.tanggal_selesai).remainingWeeks} minggu dan ${daysUntil(item.tanggal_selesai).remainingDays} hari`
            });
          }
        } else {
          console.log(response);
        }
      }
      const responseCP = await fetch($apiURL + "/counterPenelitian/" + id, { method: "GET", headers });
      const resultCP = await responseCP.json();
      if (resultCP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCP.ok) {
          $$invalidate(0, penelitianCounter = resultCP.penelitianCounter);
        } else {
          console.log(responseCP);
        }
      }
      const responseCPM = await fetch($apiURL + "/counterPengmas/" + id, { method: "GET", headers });
      const resultCPM = await responseCPM.json();
      if (resultCPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCPM.ok) {
          $$invalidate(1, pengmasCounter = resultCPM.pengmasCounter);
        } else {
          console.log(responseCPM);
        }
      }
      const responseGP = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const resultGP = await responseGP.json();
      if (resultGP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseGP.ok) {
          nama_lengkap = resultGP.nama_lengkap;
          localStorage.setItem("nama_lengkap", nama_lengkap);
        }
      }
    });
    return [penelitianCounter, pengmasCounter, reminder];
  }
  var Home2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance33, create_fragment41, safe_not_equal, {});
    }
  };
  var home_default2 = Home2;

  // src/pages/dosen/ongoingppm.svelte
  init_define_process();
  function create_default_slot18(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div1;
    let div0;
    let input;
    let t3;
    let span0;
    let icon0;
    let t4;
    let div3;
    let div2;
    let table;
    let thead;
    let t14;
    let tbody;
    let tr1;
    let td0;
    let t15;
    let td1;
    let t16;
    let td2;
    let t17;
    let td3;
    let t18;
    let td4;
    let button;
    let span1;
    let icon1;
    let current;
    icon0 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    icon1 = new Icon_default({ props: { id: "info", src: infoOutline } });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Ongoing Penelitian / Pengabdian Masyarakat";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div1 = element("div");
        div0 = element("div");
        input = element("input");
        t3 = space();
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t14 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        t15 = space();
        td1 = element("td");
        t16 = space();
        td2 = element("td");
        t17 = space();
        td3 = element("td");
        td3.innerHTML = ``;
        t18 = space();
        td4 = element("td");
        button = element("button");
        span1 = element("span");
        create_component(icon1.$$.fragment);
        attr(h2, "class", "title is-2");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span0, "class", "icon is-left");
        attr(div0, "class", "control has-icons-left");
        attr(div1, "class", "field");
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(span1, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(td4, "class", "review svelte-1mtjhz7");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div2, "class", "child svelte-1mtjhz7");
        attr(div3, "class", "box parent svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, input);
        append(div0, t3);
        append(div0, span0);
        mount_component(icon0, span0, null);
        insert(target, t4, anchor);
        insert(target, div3, anchor);
        append(div3, div2);
        append(div2, table);
        append(table, thead);
        append(table, t14);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t15);
        append(tr1, td1);
        append(tr1, t16);
        append(tr1, td2);
        append(tr1, t17);
        append(tr1, td3);
        append(tr1, t18);
        append(tr1, td4);
        append(td4, button);
        append(button, span1);
        mount_component(icon1, span1, null);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div1);
          detach(t4);
          detach(div3);
        }
        destroy_component(icon0);
        destroy_component(icon1);
      }
    };
  }
  function create_fragment42(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot18] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        1) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  var Ongoingppm = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment42, safe_not_equal, {});
    }
  };
  var ongoingppm_default = Ongoingppm;

  // src/pages/dosen/pendaftaranproposal.svelte
  init_define_process();
  function get_each_context12(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[225] = list[i];
    return child_ctx;
  }
  function get_each_context_16(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[228] = list[i];
    return child_ctx;
  }
  function get_each_context_26(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[231] = list[i];
    return child_ctx;
  }
  function get_each_context_36(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[234] = list[i];
    return child_ctx;
  }
  function get_each_context_45(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[237] = list[i];
    return child_ctx;
  }
  function get_each_context_55(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[240] = list[i];
    return child_ctx;
  }
  function get_each_context_65(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[243] = list[i];
    return child_ctx;
  }
  function get_each_context_74(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[246] = list[i];
    child_ctx[248] = i;
    return child_ctx;
  }
  function create_if_block_552(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let t8;
    let br;
    let t9;
    let table;
    let thead;
    let t14;
    let tbody;
    let t15;
    let hr;
    let t16;
    let field8;
    let t17;
    let field9;
    let t18;
    let field10;
    let t19;
    let t20;
    let if_block3_anchor;
    let current;
    field0 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_632] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_622] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_61] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_60] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_59] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_58] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_57] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_56] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*items*/
      ctx[5].length && create_if_block_662(ctx)
    );
    let if_block1 = (
      /*anggotaTim*/
      ctx[15].length > 0 && create_if_block_642(ctx)
    );
    field8 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_542] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_532] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_522] },
        $$scope: { ctx }
      }
    });
    let if_block2 = (
      /*jenisSkema*/
      (ctx[8] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[8] === "Riset Terapan" || /*jenisSkema*/
      ctx[8] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[8] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[8] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_572(ctx)
    );
    let if_block3 = warningFormText === true && create_if_block_562(ctx);
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        if (if_block0)
          if_block0.c();
        t8 = space();
        br = element("br");
        t9 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t14 = space();
        tbody = element("tbody");
        if (if_block1)
          if_block1.c();
        t15 = space();
        hr = element("hr");
        t16 = space();
        create_component(field8.$$.fragment);
        t17 = space();
        create_component(field9.$$.fragment);
        t18 = space();
        create_component(field10.$$.fragment);
        t19 = space();
        if (if_block2)
          if_block2.c();
        t20 = space();
        if (if_block3)
          if_block3.c();
        if_block3_anchor = empty();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        mount_component(field5, target, anchor);
        insert(target, t5, anchor);
        mount_component(field6, target, anchor);
        insert(target, t6, anchor);
        mount_component(field7, target, anchor);
        insert(target, t7, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t8, anchor);
        insert(target, br, anchor);
        insert(target, t9, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t14);
        append(table, tbody);
        if (if_block1)
          if_block1.m(tbody, null);
        insert(target, t15, anchor);
        insert(target, hr, anchor);
        insert(target, t16, anchor);
        mount_component(field8, target, anchor);
        insert(target, t17, anchor);
        mount_component(field9, target, anchor);
        insert(target, t18, anchor);
        mount_component(field10, target, anchor);
        insert(target, t19, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t20, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, if_block3_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        129 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        65 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        321 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        513 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, topik*/
        8193 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        2049 | dirty[8] & /*$$scope*/
        2) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        4097 | dirty[8] & /*$$scope*/
        2) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        16385 | dirty[8] & /*$$scope*/
        2) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        if (
          /*items*/
          ctx2[5].length
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*items*/
            32) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_662(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t8.parentNode, t8);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*anggotaTim*/
          ctx2[15].length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            32768) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_642(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        const field8_changes = {};
        if (dirty[0] & /*error, judul*/
        1025 | dirty[8] & /*$$scope*/
        2) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error, myAbstract*/
        9 | dirty[8] & /*$$scope*/
        2) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[3] & /*$ppmFile*/
        1 | dirty[8] & /*$$scope*/
        2) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        if (
          /*jenisSkema*/
          ctx2[8] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[8] === "Riset Terapan" || /*jenisSkema*/
          ctx2[8] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[8] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[8] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            256) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_572(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(t20.parentNode, t20);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(br);
          detach(t9);
          detach(table);
          detach(t15);
          detach(hr);
          detach(t16);
          detach(t17);
          detach(t18);
          detach(t19);
          detach(t20);
          detach(if_block3_anchor);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d();
        destroy_component(field8, detaching);
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
      }
    };
  }
  function create_if_block_762(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_632(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisProposal && create_if_block_762(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisProposal");
        if (
          /*jenisProposal*/
          ctx[7] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[124].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[7],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[124]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        128) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_762(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_752(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_622(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisKegiatan && create_if_block_752(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisKegiatan");
        if (
          /*jenisKegiatan*/
          ctx[6] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[125].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[6],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[125]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        64) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_752(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_23(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat Mandiri";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option3, option3.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
        }
      }
    };
  }
  function create_if_block_742(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option3 = element("option");
        option3.textContent = "Riset Mandiri";
        option4 = element("option");
        option4.textContent = "Riset Eksternal";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
        option3.__value = "Riset Mandiri";
        set_input_value(option3, option3.__value);
        option4.__value = "Riset Eksternal";
        set_input_value(option4, option4.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
        insert(target, option4, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
          detach(option4);
        }
      }
    };
  }
  function create_if_block_732(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_61(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[6] === "Penelitian"
      )
        return create_if_block_742;
      return create_else_block_23;
    }
    let current_block_type = select_block_type(ctx, [-1, -1, -1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[0].jenisSkema && create_if_block_732(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\r\n                  ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        attr(select, "id", "jenisSkema");
        if (
          /*jenisSkema*/
          ctx[8] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[126].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[8],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[126]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        256) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_732(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_722(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_60(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].kelompokKeahlian && create_if_block_722(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "kelompokKeahlian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan kelompok keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[9]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[127]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        512 && input.value !== /*kelompokKeahlian*/
        ctx2[9]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[0].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_722(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_71(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_59(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].topik && create_if_block_71(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "topik");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[128]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        8192 && input.value !== /*topik*/
        ctx2[13]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[0].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_71(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_70(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_58(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tanggalMulai && create_if_block_70(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalMulai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[129]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        2048) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_70(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_69(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_57(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tanggalSelesai && create_if_block_69(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalSelesai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[130]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        4096) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_69(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_68(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_56(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].biayaPenelitian && create_if_block_68(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "biayaPenelitian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan biaya penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[14]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_4*/
              ctx[131]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[132]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        16384 && input.value !== /*biayaPenelitian*/
        ctx2[14]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[0].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_68(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_662(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_552] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, items, anggotaTim*/
        32801 | dirty[8] & /*$$scope*/
        2) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_67(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_552(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[133](value);
    }
    let select_props = {
      id: "anggotaTim",
      start: "2",
      items: (
        /*items*/
        ctx[5]
      )
    };
    if (
      /*anggotaTim*/
      ctx[15] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[15];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[0].anggotaTim && create_if_block_67(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        32)
          select_changes.items = /*items*/
          ctx2[5];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        32768) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[15];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[0].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_67(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_642(ctx) {
    let each_1_anchor;
    let current;
    let each_value_7 = ensure_array_like(
      /*anggotaTim*/
      ctx[15]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_74(get_each_context_74(ctx, each_value_7, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        32768 | dirty[3] & /*deleteMember*/
        2048) {
          each_value_7 = ensure_array_like(
            /*anggotaTim*/
            ctx2[15]
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_74(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_74(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_7.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_7.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_652(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[246].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[104]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        32768 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[246].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_74(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[246].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[246].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[248] > 0 && create_if_block_652(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[248] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        32768) && t1_value !== (t1_value = /*member*/
        ctx2[246].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        32768) && t3_value !== (t3_value = /*member*/
        ctx2[246].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_632(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_542(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judul && create_if_block_632(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "judul");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[134]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        1024 && input.value !== /*judul*/
        ctx2[10]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[0].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_632(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_622(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].myAbstract + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].myAbstract + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_532(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].myAbstract && create_if_block_622(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "id", "myAbstract");
        attr(textarea, "class", "textarea");
        attr(textarea, "placeholder", "Masukkan abstrak");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*myAbstract*/
          ctx[3]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[135]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*myAbstract*/
        8) {
          set_input_value(
            textarea,
            /*myAbstract*/
            ctx2[3]
          );
        }
        if (
          /*error*/
          ctx2[0].myAbstract
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_622(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_13(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_61(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[93].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[3] & /*$ppmFile*/
        1 && t_value !== (t_value = /*$ppmFile*/
        ctx2[93].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_60(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_522(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label_1;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_1(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[93]?.name
      )
        return create_if_block_61;
      return create_else_block_13;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[0].fileProposal && create_if_block_60(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label_1 = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-zdesaq");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-zdesaq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label_1, "class", "file-label");
        attr(label_1, "for", "filePpm");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "inputf__wrapper svelte-zdesaq");
        attr(p, "class", "help svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label_1);
        append(label_1, input1);
        append(label_1, t1);
        append(label_1, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label_1, t4);
        if_block0.m(label_1, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePpmChange*/
            ctx[122]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label_1, null);
          }
        }
        if (
          /*error*/
          ctx2[0].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_60(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_572(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_51] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*$rabFile*/
        1073741824 | dirty[8] & /*$$scope*/
        2) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block9(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_59(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[92]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*$rabFile*/
        1073741824 && t_value !== (t_value = /*$rabFile*/
        ctx2[92]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_58(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_51(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label_1;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_2(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[92]?.name
      )
        return create_if_block_59;
      return create_else_block9;
    }
    let current_block_type = select_block_type_2(ctx, [-1, -1, -1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[0].fileRAB && create_if_block_58(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label_1 = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-zdesaq");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-zdesaq");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label_1, "class", "file-label");
        attr(label_1, "for", "fileRab");
        attr(div, "class", "file has-name is-success");
        attr(span3, "class", "inputf__wrapper svelte-zdesaq");
        attr(p, "class", "help svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label_1);
        append(label_1, input1);
        append(label_1, t1);
        append(label_1, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label_1, t4);
        if_block0.m(label_1, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*fileRabChange*/
            ctx[123]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label_1, null);
          }
        }
        if (
          /*error*/
          ctx2[0].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_58(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_562(ctx) {
    let div;
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p class="has-text-danger">Lengkapi semua form untuk ke step selanjutnya.</p>`;
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_if_block_318(ctx) {
    let div;
    let ul;
    let li0;
    let t1;
    let li1;
    let t3;
    let li2;
    let t5;
    let t6;
    let t7;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1Step2*/
      ctx[89] === true && create_if_block_404(ctx)
    );
    let if_block1 = (
      /*tab2Step2*/
      ctx[90] === true && create_if_block_394(ctx)
    );
    let if_block2 = (
      /*tab3Step2*/
      ctx[91] === true && create_if_block_325(ctx)
    );
    return {
      c() {
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas</span></a>`;
        t1 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Riwayat Pendidikan</span></a>`;
        t3 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Pengalaman</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        toggle_class(
          li0,
          "is-active",
          /*tab1Step2*/
          ctx[89]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2Step2*/
          ctx[90]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3Step2*/
          ctx[91]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t1);
        append(ul, li1);
        append(ul, t3);
        append(ul, li2);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t7, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1Step2*/
              ctx[107]
            ),
            listen(
              li1,
              "click",
              /*clicktab2Step2*/
              ctx[108]
            ),
            listen(
              li2,
              "click",
              /*clicktab3Step2*/
              ctx[109]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1Step2*/
        134217728) {
          toggle_class(
            li0,
            "is-active",
            /*tab1Step2*/
            ctx2[89]
          );
        }
        if (!current || dirty[2] & /*tab2Step2*/
        268435456) {
          toggle_class(
            li1,
            "is-active",
            /*tab2Step2*/
            ctx2[90]
          );
        }
        if (!current || dirty[2] & /*tab3Step2*/
        536870912) {
          toggle_class(
            li2,
            "is-active",
            /*tab3Step2*/
            ctx2[91]
          );
        }
        if (
          /*tab1Step2*/
          ctx2[89] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1Step2*/
            134217728) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_404(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2Step2*/
          ctx2[90] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_394(ctx2);
            if_block1.c();
            if_block1.m(t7.parentNode, t7);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*tab3Step2*/
          ctx2[91] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[2] & /*tab3Step2*/
            536870912) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_325(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_404(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let br;
    let t12;
    let table;
    let thead;
    let t15;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_50] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_492] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_483] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_473] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat / Tanggal Lahir",
        $$slots: { default: [create_default_slot_463] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_453] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_443] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Nomor Handphone",
        $$slots: { default: [create_default_slot_433] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_424] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_415] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        class: "input",
        name: "Email",
        $$slots: { default: [create_default_slot_404] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_394] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*mataKuliah*/
      ctx[43] && /*mataKuliah*/
      ctx[43].length > 0 && create_if_block_417(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        br = element("br");
        t12 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow"></th> <th>Mata Kuliah</th></tr>`;
        t15 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        mount_component(field5, target, anchor);
        insert(target, t5, anchor);
        mount_component(field6, target, anchor);
        insert(target, t6, anchor);
        mount_component(field7, target, anchor);
        insert(target, t7, anchor);
        mount_component(field8, target, anchor);
        insert(target, t8, anchor);
        mount_component(field9, target, anchor);
        insert(target, t9, anchor);
        mount_component(field10, target, anchor);
        insert(target, t10, anchor);
        mount_component(field11, target, anchor);
        insert(target, t11, anchor);
        insert(target, br, anchor);
        insert(target, t12, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t15);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*namaLengkap*/
        1 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*jabatanFungsional*/
        2 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*nip*/
        4 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*nidn*/
        8 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*tanggalLahir, tempatLahir*/
        48 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*alamatRumah*/
        64 | dirty[8] & /*$$scope*/
        2) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*telpFaxRumah*/
        128 | dirty[8] & /*$$scope*/
        2) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*nomorHandphone*/
        256 | dirty[8] & /*$$scope*/
        2) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*alamatKantor*/
        512 | dirty[8] & /*$$scope*/
        2) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*telpFaxKantor*/
        1024 | dirty[8] & /*$$scope*/
        2) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*email*/
        2048 | dirty[8] & /*$$scope*/
        2) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*vmataKuliah, error*/
        17 | dirty[8] & /*$$scope*/
        2) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*mataKuliah*/
          ctx2[43] && /*mataKuliah*/
          ctx2[43].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[1] & /*mataKuliah*/
            4096) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_417(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(t10);
          detach(t11);
          detach(br);
          detach(t12);
          detach(table);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_542(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaLengkap + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaLengkap + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_50(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaLengkap && create_if_block_542(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "namaLengkap");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan nama lengkap dengan gelar");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaLengkap*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_6*/
            ctx[136]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        1 && input.value !== /*namaLengkap*/
        ctx2[31]) {
          set_input_value(
            input,
            /*namaLengkap*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[0].namaLengkap
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_542(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_532(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].jabatanFungsional + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jabatanFungsional + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_492(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let t5;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jabatanFungsional && create_if_block_532(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jabatan Fungsional";
        option1 = element("option");
        option1.textContent = "Asisten Ahli";
        option2 = element("option");
        option2.textContent = "Lektor";
        option3 = element("option");
        option3.textContent = "Lektor Kepala";
        option4 = element("option");
        option4.textContent = "Profesor";
        t5 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Asisten Ahli";
        set_input_value(option1, option1.__value);
        option2.__value = "Lektor";
        set_input_value(option2, option2.__value);
        option3.__value = "Lektor Kepala";
        set_input_value(option3, option3.__value);
        option4.__value = "Profesor";
        set_input_value(option4, option4.__value);
        if (
          /*jabatanFungsional*/
          ctx[32] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_3*/
            ctx[137].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        select_option(
          select,
          /*jabatanFungsional*/
          ctx[32],
          true
        );
        insert(target, t5, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_3*/
            ctx[137]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        2) {
          select_option(
            select,
            /*jabatanFungsional*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[0].jabatanFungsional
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_532(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t5);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_522(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].nip + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].nip + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_483(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].nip && create_if_block_522(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "nip");
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nip*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_7*/
            ctx[138]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        4 && to_number(input.value) !== /*nip*/
        ctx2[33]) {
          set_input_value(
            input,
            /*nip*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[0].nip
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_522(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_512(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].nidn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].nidn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_473(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].nidn && create_if_block_512(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "nidn");
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nidn*/
          ctx[34]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_8*/
            ctx[139]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        8 && to_number(input.value) !== /*nidn*/
        ctx2[34]) {
          set_input_value(
            input,
            /*nidn*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[0].nidn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_512(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_503(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tempatLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tempatLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_493(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tanggalLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tanggalLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_463(ctx) {
    let div2;
    let div0;
    let input0;
    let t0;
    let t1;
    let div1;
    let input1;
    let t2;
    let mounted;
    let dispose;
    let if_block0 = (
      /*error*/
      ctx[0].tempatLahir && create_if_block_503(ctx)
    );
    let if_block1 = (
      /*error*/
      ctx[0].tanggalLahir && create_if_block_493(ctx)
    );
    return {
      c() {
        div2 = element("div");
        div0 = element("div");
        input0 = element("input");
        t0 = space();
        if (if_block0)
          if_block0.c();
        t1 = space();
        div1 = element("div");
        input1 = element("input");
        t2 = space();
        if (if_block1)
          if_block1.c();
        attr(input0, "id", "tempatLahir");
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(div0, "class", "field");
        attr(input1, "id", "tanggalLahir");
        attr(input1, "class", "input");
        attr(input1, "type", "date");
        attr(div1, "class", "field");
        attr(div2, "class", "field-body");
      },
      m(target, anchor) {
        insert(target, div2, anchor);
        append(div2, div0);
        append(div0, input0);
        set_input_value(
          input0,
          /*tempatLahir*/
          ctx[35]
        );
        append(div0, t0);
        if (if_block0)
          if_block0.m(div0, null);
        append(div2, t1);
        append(div2, div1);
        append(div1, input1);
        set_input_value(
          input1,
          /*tanggalLahir*/
          ctx[36]
        );
        append(div1, t2);
        if (if_block1)
          if_block1.m(div1, null);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[140]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[141]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        16 && input0.value !== /*tempatLahir*/
        ctx2[35]) {
          set_input_value(
            input0,
            /*tempatLahir*/
            ctx2[35]
          );
        }
        if (
          /*error*/
          ctx2[0].tempatLahir
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_503(ctx2);
            if_block0.c();
            if_block0.m(div0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (dirty[1] & /*tanggalLahir*/
        32) {
          set_input_value(
            input1,
            /*tanggalLahir*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[0].tanggalLahir
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_493(ctx2);
            if_block1.c();
            if_block1.m(div1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div2);
        }
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_483(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].alamatRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].alamatRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_453(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].alamatRumah && create_if_block_483(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "alamatRumah");
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatRumah*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_9*/
            ctx[142]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        64 && input.value !== /*alamatRumah*/
        ctx2[37]) {
          set_input_value(
            input,
            /*alamatRumah*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[0].alamatRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_483(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_473(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].telpFaxRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].telpFaxRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_443(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].telpFaxRumah && create_if_block_473(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "telpFaxRumah");
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxRumah*/
          ctx[38]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_10*/
            ctx[143]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxRumah*/
        128 && to_number(input.value) !== /*telpFaxRumah*/
        ctx2[38]) {
          set_input_value(
            input,
            /*telpFaxRumah*/
            ctx2[38]
          );
        }
        if (
          /*error*/
          ctx2[0].telpFaxRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_473(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_463(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].nomorHandphone + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].nomorHandphone + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_433(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].nomorHandphone && create_if_block_463(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "nomorHandphone");
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nomorHandphone*/
          ctx[39]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_11*/
            ctx[144]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nomorHandphone*/
        256 && to_number(input.value) !== /*nomorHandphone*/
        ctx2[39]) {
          set_input_value(
            input,
            /*nomorHandphone*/
            ctx2[39]
          );
        }
        if (
          /*error*/
          ctx2[0].nomorHandphone
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_463(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_453(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].alamatKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].alamatKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_424(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].alamatKantor && create_if_block_453(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "alamatKantor");
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatKantor*/
          ctx[40]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_12*/
            ctx[145]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatKantor*/
        512 && input.value !== /*alamatKantor*/
        ctx2[40]) {
          set_input_value(
            input,
            /*alamatKantor*/
            ctx2[40]
          );
        }
        if (
          /*error*/
          ctx2[0].alamatKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_453(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_443(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].telpFaxKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].telpFaxKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_415(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].telpFaxKantor && create_if_block_443(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "telpFaxKantor");
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxKantor*/
          ctx[41]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_13*/
            ctx[146]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxKantor*/
        1024 && to_number(input.value) !== /*telpFaxKantor*/
        ctx2[41]) {
          set_input_value(
            input,
            /*telpFaxKantor*/
            ctx2[41]
          );
        }
        if (
          /*error*/
          ctx2[0].telpFaxKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_443(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_433(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].email + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].email + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_404(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].email && create_if_block_433(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "email");
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*email*/
          ctx[42]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_14*/
            ctx[147]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*email*/
        2048 && input.value !== /*email*/
        ctx2[42]) {
          set_input_value(
            input,
            /*email*/
            ctx2[42]
          );
        }
        if (
          /*error*/
          ctx2[0].email
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_433(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_424(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].mataKuliah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].mataKuliah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_394(ctx) {
    let div;
    let p0;
    let input;
    let t0;
    let t1;
    let p1;
    let button;
    let span0;
    let icon;
    let t2;
    let span1;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].mataKuliah && create_if_block_424(ctx)
    );
    icon = new Icon_default({ props: { id: "orang", src: add } });
    return {
      c() {
        div = element("div");
        p0 = element("p");
        input = element("input");
        t0 = space();
        if (if_block)
          if_block.c();
        t1 = space();
        p1 = element("p");
        button = element("button");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Tambahkan mata kuliah yang diampu");
        attr(p0, "class", "control is-expanded");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        button.disabled = button_disabled_value = /*vmataKuliah*/
        ctx[4] ? false : true;
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, input);
        set_input_value(
          input,
          /*vmataKuliah*/
          ctx[4]
        );
        append(p0, t0);
        if (if_block)
          if_block.m(p0, null);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        append(button, span0);
        mount_component(icon, span0, null);
        append(button, t2);
        append(button, span1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_15*/
              ctx[148]
            ),
            listen(
              button,
              "click",
              /*addMatkul*/
              ctx[100]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*vmataKuliah*/
        16 && input.value !== /*vmataKuliah*/
        ctx2[4]) {
          set_input_value(
            input,
            /*vmataKuliah*/
            ctx2[4]
          );
        }
        if (
          /*error*/
          ctx2[0].mataKuliah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_424(ctx2);
            if_block.c();
            if_block.m(p0, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (!current || dirty[0] & /*vmataKuliah*/
        16 && button_disabled_value !== (button_disabled_value = /*vmataKuliah*/
        ctx2[4] ? false : true)) {
          button.disabled = button_disabled_value;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_417(ctx) {
    let each_1_anchor;
    let current;
    let each_value_6 = ensure_array_like(
      /*mataKuliah*/
      ctx[43]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_65(get_each_context_65(ctx, each_value_6, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        4096 | dirty[3] & /*deleteMatkul*/
        256) {
          each_value_6 = ensure_array_like(
            /*mataKuliah*/
            ctx2[43]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_65(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_65(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_6.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_6.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_65(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let t0;
    let td1;
    let t1_value = (
      /*matkul*/
      ctx[243].label + ""
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*matkul*/
        ctx[243].label);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMatkul*/
            ctx[101]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*mataKuliah*/
        4096 && button_data_value_value !== (button_data_value_value = /*matkul*/
        ctx2[243].label)) {
          attr(button, "data-value", button_data_value_value);
        }
        if ((!current || dirty[1] & /*mataKuliah*/
        4096) && t1_value !== (t1_value = /*matkul*/
        ctx2[243].label + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_394(ctx) {
    let table;
    let thead;
    let t7;
    let tbody;
    let tr1;
    let th4;
    let t9;
    let td0;
    let input0;
    let t10;
    let td1;
    let input1;
    let t11;
    let td2;
    let input2;
    let t12;
    let tr2;
    let th5;
    let t14;
    let td3;
    let input3;
    let t15;
    let td4;
    let input4;
    let t16;
    let td5;
    let input5;
    let t17;
    let tr3;
    let th6;
    let t19;
    let td6;
    let input6;
    let t20;
    let td7;
    let input7;
    let t21;
    let td8;
    let input8;
    let t22;
    let tr4;
    let th7;
    let t24;
    let td9;
    let input9;
    let t25;
    let td10;
    let input10;
    let t26;
    let td11;
    let input11;
    let t27;
    let tr5;
    let th8;
    let t29;
    let td12;
    let textarea0;
    let t30;
    let td13;
    let textarea1;
    let t31;
    let td14;
    let textarea2;
    let mounted;
    let dispose;
    return {
      c() {
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Program</th> <th>S1</th> <th>S2</th> <th>S3</th></tr>`;
        t7 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        th4 = element("th");
        th4.textContent = "Nama Perguruan Tinggi";
        t9 = space();
        td0 = element("td");
        input0 = element("input");
        t10 = space();
        td1 = element("td");
        input1 = element("input");
        t11 = space();
        td2 = element("td");
        input2 = element("input");
        t12 = space();
        tr2 = element("tr");
        th5 = element("th");
        th5.textContent = "Bidang Ilmu";
        t14 = space();
        td3 = element("td");
        input3 = element("input");
        t15 = space();
        td4 = element("td");
        input4 = element("input");
        t16 = space();
        td5 = element("td");
        input5 = element("input");
        t17 = space();
        tr3 = element("tr");
        th6 = element("th");
        th6.textContent = "Tahun Masuk";
        t19 = space();
        td6 = element("td");
        input6 = element("input");
        t20 = space();
        td7 = element("td");
        input7 = element("input");
        t21 = space();
        td8 = element("td");
        input8 = element("input");
        t22 = space();
        tr4 = element("tr");
        th7 = element("th");
        th7.textContent = "Tahun Lulus";
        t24 = space();
        td9 = element("td");
        input9 = element("input");
        t25 = space();
        td10 = element("td");
        input10 = element("input");
        t26 = space();
        td11 = element("td");
        input11 = element("input");
        t27 = space();
        tr5 = element("tr");
        th8 = element("th");
        th8.textContent = "Judul Skripsi/Tesis/Disertasi";
        t29 = space();
        td12 = element("td");
        textarea0 = element("textarea");
        t30 = space();
        td13 = element("td");
        textarea1 = element("textarea");
        t31 = space();
        td14 = element("td");
        textarea2 = element("textarea");
        attr(input0, "id", "pertiS1");
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(input1, "id", "pertiS2");
        attr(input1, "class", "input");
        attr(input1, "type", "text");
        attr(input2, "id", "pertiS3");
        attr(input2, "class", "input");
        attr(input2, "type", "text");
        attr(input3, "id", "bidangIlmuS1");
        attr(input3, "class", "input");
        attr(input3, "type", "text");
        attr(input4, "id", "bidangIlmuS2");
        attr(input4, "class", "input");
        attr(input4, "type", "text");
        attr(input5, "id", "bidangIlmuS3");
        attr(input5, "class", "input");
        attr(input5, "type", "text");
        attr(input6, "id", "tahunMasukS1");
        attr(input6, "class", "input");
        attr(input6, "type", "number");
        attr(input7, "id", "tahunMasukS2");
        attr(input7, "class", "input");
        attr(input7, "type", "number");
        attr(input8, "id", "tahunMasukS3");
        attr(input8, "class", "input");
        attr(input8, "type", "number");
        attr(input9, "id", "tahunLulusS1");
        attr(input9, "class", "input");
        attr(input9, "type", "number");
        attr(input10, "id", "tahunLulusS2");
        attr(input10, "class", "input");
        attr(input10, "type", "number");
        attr(input11, "id", "tahunLulusS3");
        attr(input11, "class", "input");
        attr(input11, "type", "number");
        attr(textarea0, "id", "judulTugasAkhirS1");
        attr(textarea0, "class", "textarea");
        attr(textarea1, "id", "judulTugasAkhirS2");
        attr(textarea1, "class", "textarea");
        attr(textarea2, "id", "judulTugasAkhirS3");
        attr(textarea2, "class", "textarea");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, table, anchor);
        append(table, thead);
        append(table, t7);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, th4);
        append(tr1, t9);
        append(tr1, td0);
        append(td0, input0);
        set_input_value(
          input0,
          /*pertiS1*/
          ctx[16]
        );
        append(tr1, t10);
        append(tr1, td1);
        append(td1, input1);
        set_input_value(
          input1,
          /*pertiS2*/
          ctx[17]
        );
        append(tr1, t11);
        append(tr1, td2);
        append(td2, input2);
        set_input_value(
          input2,
          /*pertiS3*/
          ctx[18]
        );
        append(tbody, t12);
        append(tbody, tr2);
        append(tr2, th5);
        append(tr2, t14);
        append(tr2, td3);
        append(td3, input3);
        set_input_value(
          input3,
          /*bidangIlmuS1*/
          ctx[19]
        );
        append(tr2, t15);
        append(tr2, td4);
        append(td4, input4);
        set_input_value(
          input4,
          /*bidangIlmuS2*/
          ctx[20]
        );
        append(tr2, t16);
        append(tr2, td5);
        append(td5, input5);
        set_input_value(
          input5,
          /*bidangIlmuS3*/
          ctx[21]
        );
        append(tbody, t17);
        append(tbody, tr3);
        append(tr3, th6);
        append(tr3, t19);
        append(tr3, td6);
        append(td6, input6);
        set_input_value(
          input6,
          /*tahunMasukS1*/
          ctx[22]
        );
        append(tr3, t20);
        append(tr3, td7);
        append(td7, input7);
        set_input_value(
          input7,
          /*tahunMasukS2*/
          ctx[23]
        );
        append(tr3, t21);
        append(tr3, td8);
        append(td8, input8);
        set_input_value(
          input8,
          /*tahunMasukS3*/
          ctx[24]
        );
        append(tbody, t22);
        append(tbody, tr4);
        append(tr4, th7);
        append(tr4, t24);
        append(tr4, td9);
        append(td9, input9);
        set_input_value(
          input9,
          /*tahunLulusS1*/
          ctx[25]
        );
        append(tr4, t25);
        append(tr4, td10);
        append(td10, input10);
        set_input_value(
          input10,
          /*tahunLulusS2*/
          ctx[26]
        );
        append(tr4, t26);
        append(tr4, td11);
        append(td11, input11);
        set_input_value(
          input11,
          /*tahunLulusS3*/
          ctx[27]
        );
        append(tbody, t27);
        append(tbody, tr5);
        append(tr5, th8);
        append(tr5, t29);
        append(tr5, td12);
        append(td12, textarea0);
        set_input_value(
          textarea0,
          /*judulTugasAkhirS1*/
          ctx[28]
        );
        append(tr5, t30);
        append(tr5, td13);
        append(td13, textarea1);
        set_input_value(
          textarea1,
          /*judulTugasAkhirS2*/
          ctx[29]
        );
        append(tr5, t31);
        append(tr5, td14);
        append(td14, textarea2);
        set_input_value(
          textarea2,
          /*judulTugasAkhirS3*/
          ctx[30]
        );
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler_1*/
              ctx[149]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler_1*/
              ctx[150]
            ),
            listen(
              input2,
              "input",
              /*input2_input_handler*/
              ctx[151]
            ),
            listen(
              input3,
              "input",
              /*input3_input_handler*/
              ctx[152]
            ),
            listen(
              input4,
              "input",
              /*input4_input_handler*/
              ctx[153]
            ),
            listen(
              input5,
              "input",
              /*input5_input_handler*/
              ctx[154]
            ),
            listen(
              input6,
              "input",
              /*input6_input_handler*/
              ctx[155]
            ),
            listen(
              input7,
              "input",
              /*input7_input_handler*/
              ctx[156]
            ),
            listen(
              input8,
              "input",
              /*input8_input_handler*/
              ctx[157]
            ),
            listen(
              input9,
              "input",
              /*input9_input_handler*/
              ctx[158]
            ),
            listen(
              input10,
              "input",
              /*input10_input_handler*/
              ctx[159]
            ),
            listen(
              input11,
              "input",
              /*input11_input_handler*/
              ctx[160]
            ),
            listen(
              textarea0,
              "input",
              /*textarea0_input_handler*/
              ctx[161]
            ),
            listen(
              textarea1,
              "input",
              /*textarea1_input_handler*/
              ctx[162]
            ),
            listen(
              textarea2,
              "input",
              /*textarea2_input_handler*/
              ctx[163]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*pertiS1*/
        65536 && input0.value !== /*pertiS1*/
        ctx2[16]) {
          set_input_value(
            input0,
            /*pertiS1*/
            ctx2[16]
          );
        }
        if (dirty[0] & /*pertiS2*/
        131072 && input1.value !== /*pertiS2*/
        ctx2[17]) {
          set_input_value(
            input1,
            /*pertiS2*/
            ctx2[17]
          );
        }
        if (dirty[0] & /*pertiS3*/
        262144 && input2.value !== /*pertiS3*/
        ctx2[18]) {
          set_input_value(
            input2,
            /*pertiS3*/
            ctx2[18]
          );
        }
        if (dirty[0] & /*bidangIlmuS1*/
        524288 && input3.value !== /*bidangIlmuS1*/
        ctx2[19]) {
          set_input_value(
            input3,
            /*bidangIlmuS1*/
            ctx2[19]
          );
        }
        if (dirty[0] & /*bidangIlmuS2*/
        1048576 && input4.value !== /*bidangIlmuS2*/
        ctx2[20]) {
          set_input_value(
            input4,
            /*bidangIlmuS2*/
            ctx2[20]
          );
        }
        if (dirty[0] & /*bidangIlmuS3*/
        2097152 && input5.value !== /*bidangIlmuS3*/
        ctx2[21]) {
          set_input_value(
            input5,
            /*bidangIlmuS3*/
            ctx2[21]
          );
        }
        if (dirty[0] & /*tahunMasukS1*/
        4194304 && to_number(input6.value) !== /*tahunMasukS1*/
        ctx2[22]) {
          set_input_value(
            input6,
            /*tahunMasukS1*/
            ctx2[22]
          );
        }
        if (dirty[0] & /*tahunMasukS2*/
        8388608 && to_number(input7.value) !== /*tahunMasukS2*/
        ctx2[23]) {
          set_input_value(
            input7,
            /*tahunMasukS2*/
            ctx2[23]
          );
        }
        if (dirty[0] & /*tahunMasukS3*/
        16777216 && to_number(input8.value) !== /*tahunMasukS3*/
        ctx2[24]) {
          set_input_value(
            input8,
            /*tahunMasukS3*/
            ctx2[24]
          );
        }
        if (dirty[0] & /*tahunLulusS1*/
        33554432 && to_number(input9.value) !== /*tahunLulusS1*/
        ctx2[25]) {
          set_input_value(
            input9,
            /*tahunLulusS1*/
            ctx2[25]
          );
        }
        if (dirty[0] & /*tahunLulusS2*/
        67108864 && to_number(input10.value) !== /*tahunLulusS2*/
        ctx2[26]) {
          set_input_value(
            input10,
            /*tahunLulusS2*/
            ctx2[26]
          );
        }
        if (dirty[0] & /*tahunLulusS3*/
        134217728 && to_number(input11.value) !== /*tahunLulusS3*/
        ctx2[27]) {
          set_input_value(
            input11,
            /*tahunLulusS3*/
            ctx2[27]
          );
        }
        if (dirty[0] & /*judulTugasAkhirS1*/
        268435456) {
          set_input_value(
            textarea0,
            /*judulTugasAkhirS1*/
            ctx2[28]
          );
        }
        if (dirty[0] & /*judulTugasAkhirS2*/
        536870912) {
          set_input_value(
            textarea1,
            /*judulTugasAkhirS2*/
            ctx2[29]
          );
        }
        if (dirty[0] & /*judulTugasAkhirS3*/
        1073741824) {
          set_input_value(
            textarea2,
            /*judulTugasAkhirS3*/
            ctx2[30]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_325(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let br0;
    let t17;
    let div9;
    let nav1;
    let div6;
    let t19;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t20;
    let span3;
    let t22;
    let table1;
    let thead1;
    let t33;
    let tbody1;
    let t34;
    let br1;
    let t35;
    let div14;
    let nav2;
    let div11;
    let t37;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t38;
    let span5;
    let t40;
    let table2;
    let thead2;
    let t49;
    let tbody2;
    let t50;
    let br2;
    let t51;
    let div19;
    let nav3;
    let div16;
    let t53;
    let div18;
    let div17;
    let button3;
    let span6;
    let icon3;
    let t54;
    let span7;
    let t56;
    let table3;
    let thead3;
    let t65;
    let tbody3;
    let t66;
    let br3;
    let t67;
    let div24;
    let nav4;
    let div21;
    let t69;
    let div23;
    let div22;
    let button4;
    let span8;
    let icon4;
    let t70;
    let span9;
    let t72;
    let table4;
    let thead4;
    let t83;
    let tbody4;
    let t84;
    let br4;
    let t85;
    let div29;
    let nav5;
    let div26;
    let t87;
    let div28;
    let div27;
    let button5;
    let span10;
    let icon5;
    let t88;
    let span11;
    let t90;
    let table5;
    let thead5;
    let t101;
    let tbody5;
    let t102;
    let br5;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block0 = (
      /*dataPP*/
      ctx[44] && create_if_block_384(ctx)
    );
    icon1 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block1 = (
      /*dataPM*/
      ctx[45] && create_if_block_374(ctx)
    );
    icon2 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block2 = (
      /*dataPD*/
      ctx[46] && create_if_block_364(ctx)
    );
    icon3 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block3 = (
      /*dataPPub*/
      ctx[47] && create_if_block_354(ctx)
    );
    icon4 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block4 = (
      /*dataPPB*/
      ctx[48] && create_if_block_344(ctx)
    );
    icon5 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block5 = (
      /*dataPHKI*/
      ctx[49] && create_if_block_334(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penelitian</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        br0 = element("br");
        t17 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Pengabdian Masyarakat</h6></div>`;
        t19 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t20 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t22 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t33 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t34 = space();
        br1 = element("br");
        t35 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Diseminasi Ilmiah dalam Pertemuan /
                           Pameran</h6></div>`;
        t37 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t38 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t40 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t49 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t50 = space();
        br2 = element("br");
        t51 = space();
        div19 = element("div");
        nav3 = element("nav");
        div16 = element("div");
        div16.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Publikasi Ilmiah dalam Jurnal (bukan
                           Proceeding)</h6></div>`;
        t53 = space();
        div18 = element("div");
        div17 = element("div");
        button3 = element("button");
        span6 = element("span");
        create_component(icon3.$$.fragment);
        t54 = space();
        span7 = element("span");
        span7.innerHTML = `<a>Tambah</a>`;
        t56 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t65 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t66 = space();
        br3 = element("br");
        t67 = space();
        div24 = element("div");
        nav4 = element("nav");
        div21 = element("div");
        div21.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penulisan Buku</h6></div>`;
        t69 = space();
        div23 = element("div");
        div22 = element("div");
        button4 = element("button");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t70 = space();
        span9 = element("span");
        span9.innerHTML = `<a>Tambah</a>`;
        t72 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t83 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t84 = space();
        br4 = element("br");
        t85 = space();
        div29 = element("div");
        nav5 = element("nav");
        div26 = element("div");
        div26.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Hak Kekayaan Intelektual</h6></div>`;
        t87 = space();
        div28 = element("div");
        div27 = element("div");
        button5 = element("button");
        span10 = element("span");
        create_component(icon5.$$.fragment);
        t88 = space();
        span11 = element("span");
        span11.innerHTML = `<a>Tambah</a>`;
        t90 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t101 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t102 = space();
        br5 = element("br");
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div14, "class", "box");
        attr(div16, "class", "level-left");
        attr(span6, "class", "icon");
        attr(button3, "class", "button is-info");
        attr(div17, "class", "level-item");
        attr(div18, "class", "level-right");
        attr(nav3, "class", "level");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div19, "class", "box");
        attr(div21, "class", "level-left");
        attr(span8, "class", "icon");
        attr(button4, "class", "button is-info");
        attr(div22, "class", "level-item");
        attr(div23, "class", "level-right");
        attr(nav4, "class", "level");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div24, "class", "box");
        attr(div26, "class", "level-left");
        attr(span10, "class", "icon");
        attr(button5, "class", "button is-info");
        attr(div27, "class", "level-item");
        attr(div28, "class", "level-right");
        attr(nav5, "class", "level");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div29, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, br0, anchor);
        insert(target, t17, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t19);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t20);
        append(button1, span3);
        append(div9, t22);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t33);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t34, anchor);
        insert(target, br1, anchor);
        insert(target, t35, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t37);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t38);
        append(button2, span5);
        append(div14, t40);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t49);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t50, anchor);
        insert(target, br2, anchor);
        insert(target, t51, anchor);
        insert(target, div19, anchor);
        append(div19, nav3);
        append(nav3, div16);
        append(nav3, t53);
        append(nav3, div18);
        append(div18, div17);
        append(div17, button3);
        append(button3, span6);
        mount_component(icon3, span6, null);
        append(button3, t54);
        append(button3, span7);
        append(div19, t56);
        append(div19, table3);
        append(table3, thead3);
        append(table3, t65);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t66, anchor);
        insert(target, br3, anchor);
        insert(target, t67, anchor);
        insert(target, div24, anchor);
        append(div24, nav4);
        append(nav4, div21);
        append(nav4, t69);
        append(nav4, div23);
        append(div23, div22);
        append(div22, button4);
        append(button4, span8);
        mount_component(icon4, span8, null);
        append(button4, t70);
        append(button4, span9);
        append(div24, t72);
        append(div24, table4);
        append(table4, thead4);
        append(table4, t83);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t84, anchor);
        insert(target, br4, anchor);
        insert(target, t85, anchor);
        insert(target, div29, anchor);
        append(div29, nav5);
        append(nav5, div26);
        append(nav5, t87);
        append(nav5, div28);
        append(div28, div27);
        append(div27, button5);
        append(button5, span10);
        mount_component(icon5, span10, null);
        append(button5, t88);
        append(button5, span11);
        append(div29, t90);
        append(div29, table5);
        append(table5, thead5);
        append(table5, t101);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t102, anchor);
        insert(target, br5, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clickModalPenelitian*/
              ctx[94]
            ),
            listen(
              button1,
              "click",
              /*clickModalPengmas*/
              ctx[95]
            ),
            listen(
              button2,
              "click",
              /*clickModalDiseminasi*/
              ctx[96]
            ),
            listen(
              button3,
              "click",
              /*clickModalPublikasi*/
              ctx[97]
            ),
            listen(
              button4,
              "click",
              /*clickModalPenulisanBuku*/
              ctx[98]
            ),
            listen(
              button5,
              "click",
              /*clickModalHKI*/
              ctx[99]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataPP*/
          ctx2[44]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*dataPP*/
            8192) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_384(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataPM*/
          ctx2[45]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*dataPM*/
            16384) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_374(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataPD*/
          ctx2[46]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[1] & /*dataPD*/
            32768) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_364(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*dataPPub*/
          ctx2[47]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[1] & /*dataPPub*/
            65536) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_354(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*dataPPB*/
          ctx2[48]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[1] & /*dataPPB*/
            131072) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_344(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
        if (
          /*dataPHKI*/
          ctx2[49]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
            if (dirty[1] & /*dataPHKI*/
            262144) {
              transition_in(if_block5, 1);
            }
          } else {
            if_block5 = create_if_block_334(ctx2);
            if_block5.c();
            transition_in(if_block5, 1);
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          group_outros();
          transition_out(if_block5, 1, 1, () => {
            if_block5 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        transition_in(icon3.$$.fragment, local);
        transition_in(if_block3);
        transition_in(icon4.$$.fragment, local);
        transition_in(if_block4);
        transition_in(icon5.$$.fragment, local);
        transition_in(if_block5);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        transition_out(icon3.$$.fragment, local);
        transition_out(if_block3);
        transition_out(icon4.$$.fragment, local);
        transition_out(if_block4);
        transition_out(icon5.$$.fragment, local);
        transition_out(if_block5);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(br0);
          detach(t17);
          detach(div9);
          detach(t34);
          detach(br1);
          detach(t35);
          detach(div14);
          detach(t50);
          detach(br2);
          detach(t51);
          detach(div19);
          detach(t66);
          detach(br3);
          detach(t67);
          detach(div24);
          detach(t84);
          detach(br4);
          detach(t85);
          detach(div29);
          detach(t102);
          detach(br5);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        destroy_component(icon3);
        if (if_block3)
          if_block3.d();
        destroy_component(icon4);
        if (if_block4)
          if_block4.d();
        destroy_component(icon5);
        if (if_block5)
          if_block5.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_384(ctx) {
    let each_1_anchor;
    let current;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[44]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_55(get_each_context_55(ctx, each_value_5, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*dataPP*/
        8192 | dirty[3] & /*delrowPP*/
        8388608) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[44]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_55(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_55(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_5.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_5.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_55(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PP*/
      ctx[240].tahun_penelitian + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PP*/
      ctx[240].judul_penelitian + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PP*/
      ctx[240].role_penelitian + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PP*/
      ctx[240].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PP*/
      ctx[240].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PP*/
        ctx[240].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPP*/
            ctx[116]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*dataPP*/
        8192 && button_pid_value !== (button_pid_value = /*PP*/
        ctx2[240].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[1] & /*dataPP*/
        8192) && t1_value !== (t1_value = /*PP*/
        ctx2[240].tahun_penelitian + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*dataPP*/
        8192) && t3_value !== (t3_value = /*PP*/
        ctx2[240].judul_penelitian + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[1] & /*dataPP*/
        8192) && t5_value !== (t5_value = /*PP*/
        ctx2[240].role_penelitian + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[1] & /*dataPP*/
        8192) && t7_value !== (t7_value = /*PP*/
        ctx2[240].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[1] & /*dataPP*/
        8192) && t9_value !== (t9_value = /*PP*/
        ctx2[240].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_374(ctx) {
    let each_1_anchor;
    let current;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[45]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_45(get_each_context_45(ctx, each_value_4, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*dataPM*/
        16384 | dirty[3] & /*delrowPM*/
        16777216) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[45]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_45(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_45(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_4.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_4.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_45(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PM*/
      ctx[237].tahun_pengmas + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PM*/
      ctx[237].judul_pengmas + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PM*/
      ctx[237].role_pengmas + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PM*/
      ctx[237].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PM*/
      ctx[237].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PM*/
        ctx[237].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPM*/
            ctx[117]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*dataPM*/
        16384 && button_pid_value !== (button_pid_value = /*PM*/
        ctx2[237].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[1] & /*dataPM*/
        16384) && t1_value !== (t1_value = /*PM*/
        ctx2[237].tahun_pengmas + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*dataPM*/
        16384) && t3_value !== (t3_value = /*PM*/
        ctx2[237].judul_pengmas + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[1] & /*dataPM*/
        16384) && t5_value !== (t5_value = /*PM*/
        ctx2[237].role_pengmas + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[1] & /*dataPM*/
        16384) && t7_value !== (t7_value = /*PM*/
        ctx2[237].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[1] & /*dataPM*/
        16384) && t9_value !== (t9_value = /*PM*/
        ctx2[237].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_364(ctx) {
    let each_1_anchor;
    let current;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[46]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_36(get_each_context_36(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*dataPD*/
        32768 | dirty[3] & /*delrowPD*/
        33554432) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[46]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_36(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_36(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_36(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PD*/
      ctx[234].tahun_diseminasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PD*/
      ctx[234].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PD*/
      ctx[234].nama_pemakalah + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PD*/
      ctx[234].nama_pertemuan + ""
    );
    let t7;
    let t8;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PD*/
        ctx[234].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPD*/
            ctx[118]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*dataPD*/
        32768 && button_pid_value !== (button_pid_value = /*PD*/
        ctx2[234].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[1] & /*dataPD*/
        32768) && t1_value !== (t1_value = /*PD*/
        ctx2[234].tahun_diseminasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*dataPD*/
        32768) && t3_value !== (t3_value = /*PD*/
        ctx2[234].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[1] & /*dataPD*/
        32768) && t5_value !== (t5_value = /*PD*/
        ctx2[234].nama_pemakalah + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[1] & /*dataPD*/
        32768) && t7_value !== (t7_value = /*PD*/
        ctx2[234].nama_pertemuan + ""))
          set_data(t7, t7_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_354(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[47]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_26(get_each_context_26(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*dataPPub*/
        65536 | dirty[3] & /*delrowPPub*/
        67108864) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[47]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_26(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_26(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_26(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPub*/
      ctx[231].tahun_publikasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPub*/
      ctx[231].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPub*/
      ctx[231].nama_jurnal + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPub*/
      ctx[231].impact + ""
    );
    let t7;
    let t8;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPub*/
        ctx[231].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPub*/
            ctx[119]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*dataPPub*/
        65536 && button_pid_value !== (button_pid_value = /*PPub*/
        ctx2[231].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[1] & /*dataPPub*/
        65536) && t1_value !== (t1_value = /*PPub*/
        ctx2[231].tahun_publikasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*dataPPub*/
        65536) && t3_value !== (t3_value = /*PPub*/
        ctx2[231].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[1] & /*dataPPub*/
        65536) && t5_value !== (t5_value = /*PPub*/
        ctx2[231].nama_jurnal + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[1] & /*dataPPub*/
        65536) && t7_value !== (t7_value = /*PPub*/
        ctx2[231].impact + ""))
          set_data(t7, t7_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_344(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[48]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_16(get_each_context_16(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*dataPPB*/
        131072 | dirty[3] & /*delrowPPB*/
        134217728) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[48]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_16(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_16(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_16(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPB*/
      ctx[228].tahun_buku + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPB*/
      ctx[228].judul_buku + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPB*/
      ctx[228].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPB*/
      ctx[228].penerbit + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPB*/
      ctx[228].isbn + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPB*/
        ctx[228].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPB*/
            ctx[120]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*dataPPB*/
        131072 && button_pid_value !== (button_pid_value = /*PPB*/
        ctx2[228].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[1] & /*dataPPB*/
        131072) && t1_value !== (t1_value = /*PPB*/
        ctx2[228].tahun_buku + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*dataPPB*/
        131072) && t3_value !== (t3_value = /*PPB*/
        ctx2[228].judul_buku + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[1] & /*dataPPB*/
        131072) && t5_value !== (t5_value = /*PPB*/
        ctx2[228].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[1] & /*dataPPB*/
        131072) && t7_value !== (t7_value = /*PPB*/
        ctx2[228].penerbit + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[1] & /*dataPPB*/
        131072) && t9_value !== (t9_value = /*PPB*/
        ctx2[228].isbn + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_334(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[49]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block12(get_each_context12(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*dataPHKI*/
        262144 | dirty[3] & /*delrowPHKI*/
        268435456) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[49]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context12(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block12(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block12(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PHKI*/
      ctx[225].tahun_hki + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PHKI*/
      ctx[225].judul_hki + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PHKI*/
      ctx[225].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PHKI*/
      ctx[225].jenis_hki + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PHKI*/
      ctx[225].no_hki + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PHKI*/
        ctx[225].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPHKI*/
            ctx[121]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*dataPHKI*/
        262144 && button_pid_value !== (button_pid_value = /*PHKI*/
        ctx2[225].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[1] & /*dataPHKI*/
        262144) && t1_value !== (t1_value = /*PHKI*/
        ctx2[225].tahun_hki + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[1] & /*dataPHKI*/
        262144) && t3_value !== (t3_value = /*PHKI*/
        ctx2[225].judul_hki + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[1] & /*dataPHKI*/
        262144) && t5_value !== (t5_value = /*PHKI*/
        ctx2[225].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[1] & /*dataPHKI*/
        262144) && t7_value !== (t7_value = /*PHKI*/
        ctx2[225].jenis_hki + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[1] & /*dataPHKI*/
        262144) && t9_value !== (t9_value = /*PHKI*/
        ctx2[225].no_hki + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_304(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Next";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*clicktab2*/
            ctx[106]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_294(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Back";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Simpan";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Submit";
        attr(button0, "class", "button");
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info is-light");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[86]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[86]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clicktab1*/
              ctx[105]
            ),
            listen(
              button1,
              "click",
              /*simpanProposal*/
              ctx[102]
            ),
            listen(
              button2,
              "click",
              /*submitProposal*/
              ctx[103]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*isLoading*/
        16777216) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[86]
          );
        }
        if (dirty[2] & /*isLoading*/
        16777216) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[86]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_384(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div2;
    let ul;
    let li0;
    let span1;
    let span0;
    let icon0;
    let t3;
    let div0;
    let t7;
    let li1;
    let span3;
    let span2;
    let icon1;
    let t8;
    let div1;
    let t12;
    let br;
    let t13;
    let t14;
    let t15;
    let t16;
    let if_block3_anchor;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: penelitian } });
    icon1 = new Icon_default({
      props: { id: "accountEdit", src: accountEdit }
    });
    let if_block0 = (
      /*tab1*/
      ctx[87] === true && create_if_block_552(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[88] === true && create_if_block_318(ctx)
    );
    let if_block2 = (
      /*tab1*/
      ctx[87] === true && create_if_block_304(ctx)
    );
    let if_block3 = (
      /*tab2*/
      ctx[88] === true && create_if_block_294(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pendaftaran Proposal";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div2 = element("div");
        ul = element("ul");
        li0 = element("li");
        span1 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        div0 = element("div");
        div0.innerHTML = `<p class="is-size-5"><b>Step 1</b></p> <p class="is-size-6">Proposal</p>`;
        t7 = space();
        li1 = element("li");
        span3 = element("span");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t8 = space();
        div1 = element("div");
        div1.innerHTML = `<p class="is-size-5"><b>Step 2</b></p> <p class="is-size-6">Biodata Peneliti</p>`;
        t12 = space();
        br = element("br");
        t13 = space();
        if (if_block0)
          if_block0.c();
        t14 = space();
        if (if_block1)
          if_block1.c();
        t15 = space();
        if (if_block2)
          if_block2.c();
        t16 = space();
        if (if_block3)
          if_block3.c();
        if_block3_anchor = empty();
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(span1, "class", "steps-marker");
        attr(div0, "class", "steps-content");
        attr(li0, "data-step", "1");
        attr(li0, "class", "steps-segment");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[87]
        );
        attr(span2, "class", "icon");
        attr(span3, "class", "steps-marker");
        attr(div1, "class", "steps-content");
        attr(li1, "data-step", "2");
        attr(li1, "class", "steps-segment");
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[88]
        );
        attr(ul, "class", "steps is-medium has-content-centered");
        attr(div2, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div2, anchor);
        append(div2, ul);
        append(ul, li0);
        append(li0, span1);
        append(span1, span0);
        mount_component(icon0, span0, null);
        append(li0, t3);
        append(li0, div0);
        append(ul, t7);
        append(ul, li1);
        append(li1, span3);
        append(span3, span2);
        mount_component(icon1, span2, null);
        append(li1, t8);
        append(li1, div1);
        append(div2, t12);
        append(div2, br);
        append(div2, t13);
        if (if_block0)
          if_block0.m(div2, null);
        append(div2, t14);
        if (if_block1)
          if_block1.m(div2, null);
        insert(target, t15, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t16, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, if_block3_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[105]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[106]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1*/
        33554432) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[87]
          );
        }
        if (!current || dirty[2] & /*tab2*/
        67108864) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[88]
          );
        }
        if (
          /*tab1*/
          ctx2[87] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1*/
            33554432) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_552(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(div2, t14);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[88] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[2] & /*tab2*/
            67108864) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_318(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div2, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab1*/
          ctx2[87] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_304(ctx2);
            if_block2.c();
            if_block2.m(t16.parentNode, t16);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*tab2*/
          ctx2[88] === true
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_294(ctx2);
            if_block3.c();
            if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div2);
          detach(t15);
          detach(t16);
          detach(if_block3_anchor);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_284(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tahunPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tahunPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_374(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tahunPenelitian && create_if_block_284(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPenelitian*/
          ctx[51]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_16*/
            ctx[164]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunPenelitian*/
        1048576 && to_number(input.value) !== /*tahunPenelitian*/
        ctx2[51]) {
          set_input_value(
            input,
            /*tahunPenelitian*/
            ctx2[51]
          );
        }
        if (
          /*error*/
          ctx2[0].tahunPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_284(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_275(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judulPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judulPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_364(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judulPenelitian && create_if_block_275(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPenelitian*/
          ctx[52]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_17*/
            ctx[165]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulPenelitian*/
        2097152 && input.value !== /*judulPenelitian*/
        ctx2[52]) {
          set_input_value(
            input,
            /*judulPenelitian*/
            ctx2[52]
          );
        }
        if (
          /*error*/
          ctx2[0].judulPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_275(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_265(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].rolePenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].rolePenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_354(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].rolePenelitian && create_if_block_265(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePenelitian*/
          ctx[53] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_4*/
            ctx[166].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePenelitian*/
          ctx[53],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_4*/
            ctx[166]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*rolePenelitian*/
        4194304) {
          select_option(
            select,
            /*rolePenelitian*/
            ctx2[53]
          );
        }
        if (
          /*error*/
          ctx2[0].rolePenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_265(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_255(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].sumberDanaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].sumberDanaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_344(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].sumberDanaPenelitian && create_if_block_255(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPenelitian*/
          ctx[54]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_18*/
            ctx[167]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*sumberDanaPenelitian*/
        8388608 && input.value !== /*sumberDanaPenelitian*/
        ctx2[54]) {
          set_input_value(
            input,
            /*sumberDanaPenelitian*/
            ctx2[54]
          );
        }
        if (
          /*error*/
          ctx2[0].sumberDanaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_255(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_245(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].biayaPP + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].biayaPP + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_334(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].biayaPP && create_if_block_245(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPP*/
          ctx[50]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_19*/
              ctx[168]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler_1*/
              ctx[169]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPP*/
        524288 && input.value !== /*biayaPP*/
        ctx2[50]) {
          set_input_value(
            input,
            /*biayaPP*/
            ctx2[50]
          );
        }
        if (
          /*error*/
          ctx2[0].biayaPP
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_245(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_324(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_374] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Penelitian",
        $$slots: { default: [create_default_slot_364] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_354] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_344] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_334] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPP*/
            ctx[110]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*tahunPenelitian*/
        1048576 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*judulPenelitian*/
        2097152 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*rolePenelitian*/
        4194304 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*sumberDanaPenelitian*/
        8388608 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*biayaPP*/
        524288 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_52(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penelitian";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_236(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tahunPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tahunPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_317(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tahunPengmas && create_if_block_236(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPengmas*/
          ctx[56]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_20*/
            ctx[171]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunPengmas*/
        33554432 && to_number(input.value) !== /*tahunPengmas*/
        ctx2[56]) {
          set_input_value(
            input,
            /*tahunPengmas*/
            ctx2[56]
          );
        }
        if (
          /*error*/
          ctx2[0].tahunPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_236(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_226(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judulPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judulPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_305(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judulPengmas && create_if_block_226(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengmas*/
          ctx[57]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_21*/
            ctx[172]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulPengmas*/
        67108864 && input.value !== /*judulPengmas*/
        ctx2[57]) {
          set_input_value(
            input,
            /*judulPengmas*/
            ctx2[57]
          );
        }
        if (
          /*error*/
          ctx2[0].judulPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_226(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_219(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].rolePengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].rolePengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_295(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].rolePengmas && create_if_block_219(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePengmas*/
          ctx[58] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_5*/
            ctx[173].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePengmas*/
          ctx[58],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_5*/
            ctx[173]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*rolePengmas*/
        134217728) {
          select_option(
            select,
            /*rolePengmas*/
            ctx2[58]
          );
        }
        if (
          /*error*/
          ctx2[0].rolePengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_219(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_205(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].sumberDanaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].sumberDanaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_285(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].sumberDanaPengmas && create_if_block_205(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPengmas*/
          ctx[59]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_22*/
            ctx[174]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*sumberDanaPengmas*/
        268435456 && input.value !== /*sumberDanaPengmas*/
        ctx2[59]) {
          set_input_value(
            input,
            /*sumberDanaPengmas*/
            ctx2[59]
          );
        }
        if (
          /*error*/
          ctx2[0].sumberDanaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_205(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_195(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].biayaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].biayaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_275(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].biayaPengmas && create_if_block_195(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Pengmas");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPengmas*/
          ctx[55]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_23*/
              ctx[175]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler_2*/
              ctx[176]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPengmas*/
        16777216 && input.value !== /*biayaPengmas*/
        ctx2[55]) {
          set_input_value(
            input,
            /*biayaPengmas*/
            ctx2[55]
          );
        }
        if (
          /*error*/
          ctx2[0].biayaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_195(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_265(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_317] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Pengmas",
        $$slots: { default: [create_default_slot_305] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_295] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_285] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_275] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPM*/
            ctx[111]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*tahunPengmas*/
        33554432 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*judulPengmas*/
        67108864 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*rolePengmas*/
        134217728 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*sumberDanaPengmas*/
        268435456 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*biayaPengmas*/
        16777216 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_42(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Pengabdian Masyarakat";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_185(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tahunDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tahunDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_255(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tahunDiseminasi && create_if_block_185(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunDiseminasi*/
          ctx[60]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_24*/
            ctx[178]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunDiseminasi*/
        536870912 && to_number(input.value) !== /*tahunDiseminasi*/
        ctx2[60]) {
          set_input_value(
            input,
            /*tahunDiseminasi*/
            ctx2[60]
          );
        }
        if (
          /*error*/
          ctx2[0].tahunDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_185(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_175(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judulDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judulDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_245(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judulDiseminasi && create_if_block_175(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDiseminasi*/
          ctx[61]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_25*/
            ctx[179]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulDiseminasi*/
        1073741824 && input.value !== /*judulDiseminasi*/
        ctx2[61]) {
          set_input_value(
            input,
            /*judulDiseminasi*/
            ctx2[61]
          );
        }
        if (
          /*error*/
          ctx2[0].judulDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_175(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_165(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaPemakalahDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaPemakalahDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_235(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaPemakalahDiseminasi && create_if_block_165(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPemakalahDiseminasi*/
          ctx[62]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_26*/
            ctx[180]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*namaPemakalahDiseminasi*/
        1 && input.value !== /*namaPemakalahDiseminasi*/
        ctx2[62]) {
          set_input_value(
            input,
            /*namaPemakalahDiseminasi*/
            ctx2[62]
          );
        }
        if (
          /*error*/
          ctx2[0].namaPemakalahDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_165(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_155(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaPertemuanDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaPertemuanDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_226(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaPertemuanDiseminasi && create_if_block_155(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPertemuanDiseminasi*/
          ctx[63]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_27*/
            ctx[181]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*namaPertemuanDiseminasi*/
        2 && input.value !== /*namaPertemuanDiseminasi*/
        ctx2[63]) {
          set_input_value(
            input,
            /*namaPertemuanDiseminasi*/
            ctx2[63]
          );
        }
        if (
          /*error*/
          ctx2[0].namaPertemuanDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_155(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_218(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let hr;
    let t4;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_255] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_245] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Pemakalah",
        $$slots: { default: [create_default_slot_235] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Pertemuan Ilmiah/Pameran",
        $$slots: { default: [create_default_slot_226] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        hr = element("hr");
        t4 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        insert(target, hr, anchor);
        insert(target, t4, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPD*/
            ctx[112]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*tahunDiseminasi*/
        536870912 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*judulDiseminasi*/
        1073741824 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*namaPemakalahDiseminasi*/
        1 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*namaPertemuanDiseminasi*/
        2 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(hr);
          detach(t4);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_32(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Diseminasi Ilmiah dalam<br/>Pertemuan / Pameran`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_145(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tahunPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tahunPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_205(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tahunPublikasi && create_if_block_145(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPublikasi*/
          ctx[64]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_28*/
            ctx[183]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*tahunPublikasi*/
        4 && to_number(input.value) !== /*tahunPublikasi*/
        ctx2[64]) {
          set_input_value(
            input,
            /*tahunPublikasi*/
            ctx2[64]
          );
        }
        if (
          /*error*/
          ctx2[0].tahunPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_145(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_136(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].judulPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].judulPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_195(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].judulPublikasi && create_if_block_136(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPublikasi*/
          ctx[65]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_29*/
            ctx[184]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*judulPublikasi*/
        8 && input.value !== /*judulPublikasi*/
        ctx2[65]) {
          set_input_value(
            input,
            /*judulPublikasi*/
            ctx2[65]
          );
        }
        if (
          /*error*/
          ctx2[0].judulPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_136(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_127(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaPenulis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaPenulis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_185(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaPenulis && create_if_block_127(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulis*/
          ctx[66]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_30*/
            ctx[185]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*namaPenulis*/
        16 && input.value !== /*namaPenulis*/
        ctx2[66]) {
          set_input_value(
            input,
            /*namaPenulis*/
            ctx2[66]
          );
        }
        if (
          /*error*/
          ctx2[0].namaPenulis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_127(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_1111(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaJurnal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaJurnal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_175(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaJurnal && create_if_block_1111(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaJurnal*/
          ctx[67]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_31*/
            ctx[186]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*namaJurnal*/
        32 && input.value !== /*namaJurnal*/
        ctx2[67]) {
          set_input_value(
            input,
            /*namaJurnal*/
            ctx2[67]
          );
        }
        if (
          /*error*/
          ctx2[0].namaJurnal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_1111(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_106(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].impactFactor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].impactFactor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_165(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].impactFactor && create_if_block_106(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*impactFactor*/
          ctx[68]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_32*/
            ctx[187]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*impactFactor*/
        64 && input.value !== /*impactFactor*/
        ctx2[68]) {
          set_input_value(
            input,
            /*impactFactor*/
            ctx2[68]
          );
        }
        if (
          /*error*/
          ctx2[0].impactFactor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_106(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_155(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_205] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_195] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_185] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Jurnal, Vol., No Issue/No Artikel, Halaman",
        $$slots: { default: [create_default_slot_175] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Nama Pertemuan Ilmiah/Pameran",
        $$slots: { default: [create_default_slot_165] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPublikasi*/
            ctx[113]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*tahunPublikasi*/
        4 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*judulPublikasi*/
        8 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*namaPenulis*/
        16 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*namaJurnal*/
        32 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*impactFactor*/
        64 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_22(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Publikasi Ilmiah <br/> dalam Jurnal (bukan Proceeding)`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_96(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tahunBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tahunBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_145(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tahunBuku && create_if_block_96(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunBuku*/
          ctx[69]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_33*/
            ctx[189]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*tahunBuku*/
        128 && to_number(input.value) !== /*tahunBuku*/
        ctx2[69]) {
          set_input_value(
            input,
            /*tahunBuku*/
            ctx2[69]
          );
        }
        if (
          /*error*/
          ctx2[0].tahunBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_96(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_87(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].JudulBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].JudulBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_135(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].JudulBuku && create_if_block_87(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulBuku*/
          ctx[70]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_34*/
            ctx[190]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*JudulBuku*/
        256 && input.value !== /*JudulBuku*/
        ctx2[70]) {
          set_input_value(
            input,
            /*JudulBuku*/
            ctx2[70]
          );
        }
        if (
          /*error*/
          ctx2[0].JudulBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_87(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_77(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaPenulisBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaPenulisBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_126(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaPenulisBuku && create_if_block_77(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisBuku*/
          ctx[71]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_35*/
            ctx[191]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*namaPenulisBuku*/
        512 && input.value !== /*namaPenulisBuku*/
        ctx2[71]) {
          set_input_value(
            input,
            /*namaPenulisBuku*/
            ctx2[71]
          );
        }
        if (
          /*error*/
          ctx2[0].namaPenulisBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_77(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_610(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].PenerbitBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].PenerbitBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_118(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].PenerbitBuku && create_if_block_610(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*PenerbitBuku*/
          ctx[72]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_36*/
            ctx[192]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*PenerbitBuku*/
        1024 && input.value !== /*PenerbitBuku*/
        ctx2[72]) {
          set_input_value(
            input,
            /*PenerbitBuku*/
            ctx2[72]
          );
        }
        if (
          /*error*/
          ctx2[0].PenerbitBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_610(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_510(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].Isbn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].Isbn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_105(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].Isbn && create_if_block_510(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*Isbn*/
          ctx[73]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_37*/
            ctx[193]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*Isbn*/
        2048 && input.value !== /*Isbn*/
        ctx2[73]) {
          set_input_value(
            input,
            /*Isbn*/
            ctx2[73]
          );
        }
        if (
          /*error*/
          ctx2[0].Isbn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_510(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_95(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_145] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Buku",
        $$slots: { default: [create_default_slot_135] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_126] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_118] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_105] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPB*/
            ctx[114]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*tahunBuku*/
        128 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*JudulBuku*/
        256 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*namaPenulisBuku*/
        512 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*PenerbitBuku*/
        1024 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*Isbn*/
        2048 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_12(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penulisan Buku";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_418(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].tahunHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].tahunHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_85(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].tahunHKI && create_if_block_418(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunHKI*/
          ctx[74]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_38*/
            ctx[195]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*tahunHKI*/
        4096 && to_number(input.value) !== /*tahunHKI*/
        ctx2[74]) {
          set_input_value(
            input,
            /*tahunHKI*/
            ctx2[74]
          );
        }
        if (
          /*error*/
          ctx2[0].tahunHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_418(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_319(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].JudulHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].JudulHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_76(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].JudulHKI && create_if_block_319(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulHKI*/
          ctx[75]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_39*/
            ctx[196]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*JudulHKI*/
        8192 && input.value !== /*JudulHKI*/
        ctx2[75]) {
          set_input_value(
            input,
            /*JudulHKI*/
            ctx2[75]
          );
        }
        if (
          /*error*/
          ctx2[0].JudulHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_319(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_220(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].namaPenulisHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].namaPenulisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_66(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].namaPenulisHKI && create_if_block_220(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisHKI*/
          ctx[76]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_40*/
            ctx[197]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*namaPenulisHKI*/
        16384 && input.value !== /*namaPenulisHKI*/
        ctx2[76]) {
          set_input_value(
            input,
            /*namaPenulisHKI*/
            ctx2[76]
          );
        }
        if (
          /*error*/
          ctx2[0].namaPenulisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_220(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_128(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[0].jenisHKI + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].jenisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_510(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].jenisHKI && create_if_block_128(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*jenisHKI*/
          ctx[77]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_41*/
            ctx[198]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*jenisHKI*/
        32768 && input.value !== /*jenisHKI*/
        ctx2[77]) {
          set_input_value(
            input,
            /*jenisHKI*/
            ctx2[77]
          );
        }
        if (
          /*error*/
          ctx2[0].jenisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_128(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block16(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[0].noHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-zdesaq");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].noHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_416(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[0].noHKI && create_if_block16(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*noHKI*/
          ctx[78]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_42*/
            ctx[199]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*noHKI*/
        65536 && input.value !== /*noHKI*/
        ctx2[78]) {
          set_input_value(
            input,
            /*noHKI*/
            ctx2[78]
          );
        }
        if (
          /*error*/
          ctx2[0].noHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block16(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_318(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_85] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul HKI",
        $$slots: { default: [create_default_slot_76] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_66] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis HKI",
        $$slots: { default: [create_default_slot_510] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "No HKI",
        $$slots: { default: [create_default_slot_416] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPHKI*/
            ctx[115]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*tahunHKI*/
        4096 | dirty[8] & /*$$scope*/
        2) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*JudulHKI*/
        8192 | dirty[8] & /*$$scope*/
        2) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*namaPenulisHKI*/
        16384 | dirty[8] & /*$$scope*/
        2) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*jenisHKI*/
        32768 | dirty[8] & /*$$scope*/
        2) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*noHKI*/
        65536 | dirty[8] & /*$$scope*/
        2) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot3(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Hak Kekayaan Intelektual";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_default_slot_219(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form sebelum disimpan";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_119(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form proposal untuk ke step selanjutnya!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot19(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form biodata untuk submit proposal!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment43(ctx) {
    let article;
    let t0;
    let modal0;
    let updating_show;
    let t1;
    let modal1;
    let updating_show_1;
    let t2;
    let modal2;
    let updating_show_2;
    let t3;
    let modal3;
    let updating_show_3;
    let t4;
    let modal4;
    let updating_show_4;
    let t5;
    let modal5;
    let updating_show_5;
    let t6;
    let modalerror0;
    let updating_show_6;
    let t7;
    let modalerror1;
    let updating_show_7;
    let t8;
    let modalerror2;
    let updating_show_8;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_384] },
        $$scope: { ctx }
      }
    });
    function modal0_show_binding(value) {
      ctx[170](value);
    }
    let modal0_props = {
      $$slots: {
        header: [create_header_slot_52],
        default: [create_default_slot_324]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenelitian*/
      ctx[79] !== void 0
    ) {
      modal0_props.show = /*showModalPenelitian*/
      ctx[79];
    }
    modal0 = new Modal_default({ props: modal0_props });
    binding_callbacks.push(() => bind(modal0, "show", modal0_show_binding));
    function modal1_show_binding(value) {
      ctx[177](value);
    }
    let modal1_props = {
      $$slots: {
        header: [create_header_slot_42],
        default: [create_default_slot_265]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPengmas*/
      ctx[80] !== void 0
    ) {
      modal1_props.show = /*showModalPengmas*/
      ctx[80];
    }
    modal1 = new Modal_default({ props: modal1_props });
    binding_callbacks.push(() => bind(modal1, "show", modal1_show_binding));
    function modal2_show_binding(value) {
      ctx[182](value);
    }
    let modal2_props = {
      $$slots: {
        header: [create_header_slot_32],
        default: [create_default_slot_218]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalDiseminasi*/
      ctx[81] !== void 0
    ) {
      modal2_props.show = /*showModalDiseminasi*/
      ctx[81];
    }
    modal2 = new Modal_default({ props: modal2_props });
    binding_callbacks.push(() => bind(modal2, "show", modal2_show_binding));
    function modal3_show_binding(value) {
      ctx[188](value);
    }
    let modal3_props = {
      $$slots: {
        header: [create_header_slot_22],
        default: [create_default_slot_155]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPublikasi*/
      ctx[82] !== void 0
    ) {
      modal3_props.show = /*showModalPublikasi*/
      ctx[82];
    }
    modal3 = new Modal_default({ props: modal3_props });
    binding_callbacks.push(() => bind(modal3, "show", modal3_show_binding));
    function modal4_show_binding(value) {
      ctx[194](value);
    }
    let modal4_props = {
      $$slots: {
        header: [create_header_slot_12],
        default: [create_default_slot_95]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenulisanBuku*/
      ctx[83] !== void 0
    ) {
      modal4_props.show = /*showModalPenulisanBuku*/
      ctx[83];
    }
    modal4 = new Modal_default({ props: modal4_props });
    binding_callbacks.push(() => bind(modal4, "show", modal4_show_binding));
    function modal5_show_binding(value) {
      ctx[200](value);
    }
    let modal5_props = {
      $$slots: {
        header: [create_header_slot3],
        default: [create_default_slot_318]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalHKI*/
      ctx[84] !== void 0
    ) {
      modal5_props.show = /*showModalHKI*/
      ctx[84];
    }
    modal5 = new Modal_default({ props: modal5_props });
    binding_callbacks.push(() => bind(modal5, "show", modal5_show_binding));
    function modalerror0_show_binding(value) {
      ctx[201](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_219] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorForm*/
      ctx[85] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorForm*/
      ctx[85];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[202](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_119] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorProposal*/
      ctx[1] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorProposal*/
      ctx[1];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    function modalerror2_show_binding(value) {
      ctx[203](value);
    }
    let modalerror2_props = {
      $$slots: { default: [create_default_slot19] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorBiodata*/
      ctx[2] !== void 0
    ) {
      modalerror2_props.show = /*showModalErrorBiodata*/
      ctx[2];
    }
    modalerror2 = new Modalerror_default({ props: modalerror2_props });
    binding_callbacks.push(() => bind(modalerror2, "show", modalerror2_show_binding));
    return {
      c() {
        create_component(article.$$.fragment);
        t0 = space();
        create_component(modal0.$$.fragment);
        t1 = space();
        create_component(modal1.$$.fragment);
        t2 = space();
        create_component(modal2.$$.fragment);
        t3 = space();
        create_component(modal3.$$.fragment);
        t4 = space();
        create_component(modal4.$$.fragment);
        t5 = space();
        create_component(modal5.$$.fragment);
        t6 = space();
        create_component(modalerror0.$$.fragment);
        t7 = space();
        create_component(modalerror1.$$.fragment);
        t8 = space();
        create_component(modalerror2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        insert(target, t0, anchor);
        mount_component(modal0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modal1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modal2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modal3, target, anchor);
        insert(target, t4, anchor);
        mount_component(modal4, target, anchor);
        insert(target, t5, anchor);
        mount_component(modal5, target, anchor);
        insert(target, t6, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t7, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t8, anchor);
        mount_component(modalerror2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*judulTugasAkhirS3, judulTugasAkhirS2, judulTugasAkhirS1, tahunLulusS3, tahunLulusS2, tahunLulusS1, tahunMasukS3, tahunMasukS2, tahunMasukS1, bidangIlmuS3, bidangIlmuS2, bidangIlmuS1, pertiS3, pertiS2, pertiS1, vmataKuliah, error, jenisSkema, myAbstract, judul, anggotaTim, items, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal*/
        2147483641 | dirty[1] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap*/
        524287 | dirty[2] & /*isLoading, tab2, tab1, tab3Step2, tab2Step2, tab1Step2, $rabFile*/
        2130706432 | dirty[3] & /*$ppmFile*/
        1 | dirty[8] & /*$$scope*/
        2) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
        const modal0_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*biayaPP, sumberDanaPenelitian, rolePenelitian, judulPenelitian, tahunPenelitian*/
        16252928 | dirty[8] & /*$$scope*/
        2) {
          modal0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[2] & /*showModalPenelitian*/
        131072) {
          updating_show = true;
          modal0_changes.show = /*showModalPenelitian*/
          ctx2[79];
          add_flush_callback(() => updating_show = false);
        }
        modal0.$set(modal0_changes);
        const modal1_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*biayaPengmas, sumberDanaPengmas, rolePengmas, judulPengmas, tahunPengmas*/
        520093696 | dirty[8] & /*$$scope*/
        2) {
          modal1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[2] & /*showModalPengmas*/
        262144) {
          updating_show_1 = true;
          modal1_changes.show = /*showModalPengmas*/
          ctx2[80];
          add_flush_callback(() => updating_show_1 = false);
        }
        modal1.$set(modal1_changes);
        const modal2_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[1] & /*judulDiseminasi, tahunDiseminasi*/
        1610612736 | dirty[2] & /*namaPertemuanDiseminasi, namaPemakalahDiseminasi*/
        3 | dirty[8] & /*$$scope*/
        2) {
          modal2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[2] & /*showModalDiseminasi*/
        524288) {
          updating_show_2 = true;
          modal2_changes.show = /*showModalDiseminasi*/
          ctx2[81];
          add_flush_callback(() => updating_show_2 = false);
        }
        modal2.$set(modal2_changes);
        const modal3_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*impactFactor, namaJurnal, namaPenulis, judulPublikasi, tahunPublikasi*/
        124 | dirty[8] & /*$$scope*/
        2) {
          modal3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[2] & /*showModalPublikasi*/
        1048576) {
          updating_show_3 = true;
          modal3_changes.show = /*showModalPublikasi*/
          ctx2[82];
          add_flush_callback(() => updating_show_3 = false);
        }
        modal3.$set(modal3_changes);
        const modal4_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*Isbn, PenerbitBuku, namaPenulisBuku, JudulBuku, tahunBuku*/
        3968 | dirty[8] & /*$$scope*/
        2) {
          modal4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_4 && dirty[2] & /*showModalPenulisanBuku*/
        2097152) {
          updating_show_4 = true;
          modal4_changes.show = /*showModalPenulisanBuku*/
          ctx2[83];
          add_flush_callback(() => updating_show_4 = false);
        }
        modal4.$set(modal4_changes);
        const modal5_changes = {};
        if (dirty[0] & /*error*/
        1 | dirty[2] & /*noHKI, jenisHKI, namaPenulisHKI, JudulHKI, tahunHKI*/
        126976 | dirty[8] & /*$$scope*/
        2) {
          modal5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_5 && dirty[2] & /*showModalHKI*/
        4194304) {
          updating_show_5 = true;
          modal5_changes.show = /*showModalHKI*/
          ctx2[84];
          add_flush_callback(() => updating_show_5 = false);
        }
        modal5.$set(modal5_changes);
        const modalerror0_changes = {};
        if (dirty[8] & /*$$scope*/
        2) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_6 && dirty[2] & /*showModalErrorForm*/
        8388608) {
          updating_show_6 = true;
          modalerror0_changes.show = /*showModalErrorForm*/
          ctx2[85];
          add_flush_callback(() => updating_show_6 = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[8] & /*$$scope*/
        2) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_7 && dirty[0] & /*showModalErrorProposal*/
        2) {
          updating_show_7 = true;
          modalerror1_changes.show = /*showModalErrorProposal*/
          ctx2[1];
          add_flush_callback(() => updating_show_7 = false);
        }
        modalerror1.$set(modalerror1_changes);
        const modalerror2_changes = {};
        if (dirty[8] & /*$$scope*/
        2) {
          modalerror2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_8 && dirty[0] & /*showModalErrorBiodata*/
        4) {
          updating_show_8 = true;
          modalerror2_changes.show = /*showModalErrorBiodata*/
          ctx2[2];
          add_flush_callback(() => updating_show_8 = false);
        }
        modalerror2.$set(modalerror2_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        transition_in(modal0.$$.fragment, local);
        transition_in(modal1.$$.fragment, local);
        transition_in(modal2.$$.fragment, local);
        transition_in(modal3.$$.fragment, local);
        transition_in(modal4.$$.fragment, local);
        transition_in(modal5.$$.fragment, local);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(modalerror2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        transition_out(modal0.$$.fragment, local);
        transition_out(modal1.$$.fragment, local);
        transition_out(modal2.$$.fragment, local);
        transition_out(modal3.$$.fragment, local);
        transition_out(modal4.$$.fragment, local);
        transition_out(modal5.$$.fragment, local);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(modalerror2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
        }
        destroy_component(article, detaching);
        destroy_component(modal0, detaching);
        destroy_component(modal1, detaching);
        destroy_component(modal2, detaching);
        destroy_component(modal3, detaching);
        destroy_component(modal4, detaching);
        destroy_component(modal5, detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        destroy_component(modalerror2, detaching);
      }
    };
  }
  var warningFormText = false;
  function formatRupiah4(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function isObjectEmpty4(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function instance34($$self, $$props, $$invalidate) {
    let $rabFile;
    let $ppmFile;
    let $apiURL;
    let $route;
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(92, $rabFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(93, $ppmFile = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(210, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(211, $route = $$value));
    const id = Number(localStorage.getItem("id"));
    const localStorage_id = localStorage.getItem("id");
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    let error = {};
    let showModalErrorProposal = false;
    let showModalErrorBiodata = false;
    let value;
    let label;
    let myAbstract;
    let vmataKuliah;
    let items = [];
    let fileRab;
    let filePpm;
    let jenisKegiatan = "";
    let jenisProposal = "";
    let jenisSkema = "";
    let kelompokKeahlian = "";
    let judul = "";
    let tanggalMulai = "";
    let tanggalSelesai = "";
    let topik = "";
    let biayaPenelitian = "";
    let anggotaTim = [
      {
        value: localStorage_id,
        label: localStorage_namaLengkap,
        role: "Ketua"
      }
    ];
    let randomRabFileName2 = "";
    let randomPpmFileName2 = "";
    let pertiS1, pertiS2, pertiS3, bidangIlmuS1, bidangIlmuS2, bidangIlmuS3, tahunMasukS1, tahunMasukS2, tahunMasukS3, tahunLulusS1, tahunLulusS2, tahunLulusS3, judulTugasAkhirS1, judulTugasAkhirS2, judulTugasAkhirS3;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email3, mataKuliah = [];
    let data2, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let biayaPP, tahunPenelitian, judulPenelitian, rolePenelitian, sumberDanaPenelitian;
    let biayaPengmas, tahunPengmas, judulPengmas, rolePengmas, sumberDanaPengmas;
    let tahunDiseminasi, judulDiseminasi, namaPemakalahDiseminasi, namaPertemuanDiseminasi;
    let tahunPublikasi, judulPublikasi, namaPenulis, namaJurnal, impactFactor;
    let tahunBuku, JudulBuku, namaPenulisBuku, PenerbitBuku, Isbn;
    let tahunHKI, JudulHKI, namaPenulisHKI, jenisHKI, noHKI;
    let showModalPenelitian = false;
    let showModalPengmas = false;
    let showModalDiseminasi = false;
    let showModalPublikasi = false;
    let showModalPenulisanBuku = false;
    let showModalHKI = false;
    let showModalErrorForm = false;
    let isLoading = false;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    async function clickModalPenelitian() {
      $$invalidate(79, showModalPenelitian = true);
    }
    async function clickModalPengmas() {
      $$invalidate(80, showModalPengmas = true);
    }
    async function clickModalDiseminasi() {
      $$invalidate(81, showModalDiseminasi = true);
    }
    async function clickModalPublikasi() {
      $$invalidate(82, showModalPublikasi = true);
    }
    async function clickModalPenulisanBuku() {
      $$invalidate(83, showModalPenulisanBuku = true);
    }
    async function clickModalHKI() {
      $$invalidate(84, showModalHKI = true);
    }
    onMount(async () => {
      $$invalidate(86, isLoading = false);
      const response = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          listUser = result;
          $$invalidate(5, items = []);
          for (const [key, value2] of Object.entries(listUser)) {
            items.push({
              value: value2.uid,
              label: value2.nama_lengkap
            });
          }
        } else {
          console.log(response);
        }
      }
      const responseGP = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const resultGP = await responseGP.json();
      if (resultGP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseGP.ok) {
          data2 = resultGP;
          idProfile = data2.id;
          idUser = data2.uid;
          $$invalidate(31, namaLengkap = data2.nama_lengkap);
          $$invalidate(32, jabatanFungsional = data2.jabatan_fungsional);
          $$invalidate(33, nip = data2.nip);
          $$invalidate(34, nidn = data2.nidn);
          $$invalidate(35, tempatLahir = data2.tempat_lahir);
          $$invalidate(36, tanggalLahir = data2.tanggal_lahir);
          $$invalidate(37, alamatRumah = data2.alamat_rumah);
          $$invalidate(38, telpFaxRumah = data2.telp_fax_rumah);
          $$invalidate(39, nomorHandphone = data2.nomor_handphone);
          $$invalidate(40, alamatKantor = data2.alamat_kantor);
          $$invalidate(41, telpFaxKantor = data2.telp_fax_kantor);
          $$invalidate(42, email3 = data2.email);
          $$invalidate(43, mataKuliah = typeof data2.mata_kuliah === "string" ? JSON.parse(data2.mata_kuliah) : data2.mata_kuliah || []);
        }
      }
      const responseRP = await fetch($apiURL + "/riwayatpendidikan/" + id, { method: "GET", headers });
      const dataRP = await responseRP.json();
      if (dataRP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRP.ok) {
          $$invalidate(16, pertiS1 = dataRP.nama_perti_s1);
          $$invalidate(17, pertiS2 = dataRP.nama_perti_s2);
          $$invalidate(18, pertiS3 = dataRP.nama_perti_s3);
          $$invalidate(19, bidangIlmuS1 = dataRP.bidang_ilmu_s1);
          $$invalidate(20, bidangIlmuS2 = dataRP.bidang_ilmu_s2);
          $$invalidate(21, bidangIlmuS3 = dataRP.bidang_ilmu_s3);
          $$invalidate(22, tahunMasukS1 = dataRP.tahun_masuk_s1);
          $$invalidate(23, tahunMasukS2 = dataRP.tahun_masuk_s2);
          $$invalidate(24, tahunMasukS3 = dataRP.tahun_masuk_s3);
          $$invalidate(25, tahunLulusS1 = dataRP.tahun_lulus_s1);
          $$invalidate(26, tahunLulusS2 = dataRP.tahun_lulus_s2);
          $$invalidate(27, tahunLulusS3 = dataRP.tahun_lulus_s3);
          $$invalidate(28, judulTugasAkhirS1 = dataRP.judul_tugasakhir_s1);
          $$invalidate(29, judulTugasAkhirS2 = dataRP.judul_tugasakhir_s2);
          $$invalidate(30, judulTugasAkhirS3 = dataRP.judul_tugasakhir_s3);
        }
      }
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      let resultRabChar = "";
      for (let i = 0; i < 30; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultRabChar += characters.charAt(randomIndex);
      }
      randomRabFileName2 = resultRabChar;
      let resultPpmChar = "";
      for (let i = 0; i < 30; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultPpmChar += characters.charAt(randomIndex);
      }
      randomPpmFileName2 = resultPpmChar;
      getPengalamanPenelitian();
      getPengalamanPengmas();
      getPengalamanDiseminasi();
      getPengalamanPublikasi();
      getPengalamanPenulisanBuku();
      getPengalamanHKI();
    });
    async function getPengalamanPenelitian() {
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + id, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (resultPP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(44, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
    }
    async function getPengalamanPengmas() {
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + id, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (resultPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(45, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
    }
    async function getPengalamanDiseminasi() {
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + id, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (resultPD.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(46, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
    }
    async function getPengalamanPublikasi() {
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + id, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (resultPPub.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(47, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
    }
    async function getPengalamanPenulisanBuku() {
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + id, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (resultPPB.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(48, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
    }
    async function getPengalamanHKI() {
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + id, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (resultPHKI.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(49, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
    }
    function addMatkul() {
      let addVmatkul = { label: vmataKuliah };
      $$invalidate(43, mataKuliah = [...mataKuliah, addVmatkul]);
      $$invalidate(4, vmataKuliah = "");
    }
    function deleteMatkul(e) {
      let delMatkul = e.target.getAttribute("data-value");
      $$invalidate(43, mataKuliah = mataKuliah.filter((matkul) => {
        return matkul.label !== delMatkul;
      }));
    }
    async function simpanProposal() {
      $$invalidate(0, error = {});
      $$invalidate(86, isLoading = true);
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      let payloadIdentitas = {
        idProfile,
        namaLengkap,
        jabatanFungsional,
        nip,
        nidn,
        tempatLahir,
        tanggalLahir,
        alamatRumah,
        telpFaxRumah,
        nomorHandphone,
        alamatKantor,
        telpFaxKantor,
        email: email3,
        mataKuliah
      };
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        judul,
        myAbstract,
        status: 0,
        randomRabFileName: randomRabFileName2,
        randomPpmFileName: randomPpmFileName2
      };
      for (const [key, value2] of Object.entries(payloadIdentitas)) {
        if (!payloadIdentitas[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(2, showModalErrorBiodata = true);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            randomPpmFileName: randomPpmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        readerPpm.readAsDataURL(filePpm);
        if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
          readerRab.onloadend = async () => {
            const base64Data = readerRab.result.split(",")[1];
            const payloadRabFile = {
              fileRab: {
                name: fileRab.name,
                type: fileRab.type,
                data: base64Data
              },
              randomRabFileName: randomRabFileName2
            };
            try {
              const response = await fetch($apiURL + "/uploadRab", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadRabFile)
              });
              const result = await response.json();
            } catch (error2) {
              console.error("Error uploading file:", error2);
            }
          };
          readerRab.readAsDataURL(fileRab);
        }
        const responseIdentitas = await fetch($apiURL + "/userprofile", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payloadIdentitas)
        });
        const resultIdentitas = await responseIdentitas.json();
        if (resultIdentitas.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (!responseIdentitas.ok) {
            console.log(responseIdentitas.msg, error);
          }
        }
        const responseProposal = await fetch($apiURL + "/ppm", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (resultProposal.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (responseProposal.ok) {
            $route("/dosen/proposalppm");
          } else {
            console.log(responseProposal.msg, error);
          }
        }
      }
      $$invalidate(86, isLoading = false);
    }
    async function submitProposal() {
      $$invalidate(0, error = {});
      $$invalidate(86, isLoading = true);
      const readerRab = new FileReader();
      const readerPpm = new FileReader();
      let payloadIdentitas = {
        idProfile,
        namaLengkap,
        jabatanFungsional,
        nip,
        nidn,
        tempatLahir,
        tanggalLahir,
        alamatRumah,
        telpFaxRumah,
        nomorHandphone,
        alamatKantor,
        telpFaxKantor,
        email: email3,
        mataKuliah
      };
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        judul,
        myAbstract,
        status: 2,
        randomRabFileName: randomRabFileName2,
        randomPpmFileName: randomPpmFileName2
      };
      for (const [key, value2] of Object.entries(payloadIdentitas)) {
        if (!payloadIdentitas[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(2, showModalErrorBiodata = true);
      } else {
        console.log(">>>Test<<<");
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            randomPpmFileName: randomPpmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        readerPpm.readAsDataURL(filePpm);
        if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
          readerRab.onloadend = async () => {
            const base64Data = readerRab.result.split(",")[1];
            const payloadRabFile = {
              fileRab: {
                name: fileRab.name,
                type: fileRab.type,
                data: base64Data
              },
              randomRabFileName: randomRabFileName2
            };
            try {
              const response = await fetch($apiURL + "/uploadRab", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadRabFile)
              });
              const result = await response.json();
            } catch (error2) {
              console.error("Error uploading file:", error2);
            }
          };
          readerRab.readAsDataURL(fileRab);
        }
        const responseIdentitas = await fetch($apiURL + "/userprofile", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payloadIdentitas)
        });
        const resultIdentitas = await responseIdentitas.json();
        if (resultIdentitas.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (!responseIdentitas.ok) {
            console.log(responseIdentitas.msg, error);
          }
        }
        const responseProposal = await fetch($apiURL + "/ppm", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (resultProposal.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (responseProposal.ok) {
            $route("/dosen/proposalppm");
          } else {
            console.log(responseProposal.msg, error);
          }
        }
      }
      $$invalidate(86, isLoading = false);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(15, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(87, tab1 = true);
      $$invalidate(88, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(0, error = {});
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        judul,
        myAbstract,
        randomRabFileName: randomRabFileName2,
        randomPpmFileName: randomPpmFileName2
      };
      for (const [key, value2] of Object.entries(payloadProposal)) {
        if (!value2 || key === "anggotaTim" && Array.isArray(value2) && value2.length <= 1) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (isObjectEmpty4($ppmFile)) {
        $$invalidate(0, error["fileProposal"] = `*`, error);
      }
      if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
        if (isObjectEmpty4($rabFile)) {
          $$invalidate(0, error["fileRAB"] = `*`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(1, showModalErrorProposal = true);
      } else {
        $$invalidate(87, tab1 = false);
        $$invalidate(88, tab2 = true);
      }
    }
    let tab1Step2 = true;
    let tab2Step2;
    let tab3Step2;
    function clicktab1Step2() {
      $$invalidate(89, tab1Step2 = true);
      $$invalidate(90, tab2Step2 = false);
      $$invalidate(91, tab3Step2 = false);
    }
    function clicktab2Step2() {
      $$invalidate(89, tab1Step2 = false);
      $$invalidate(90, tab2Step2 = true);
      $$invalidate(91, tab3Step2 = false);
    }
    function clicktab3Step2() {
      $$invalidate(89, tab1Step2 = false);
      $$invalidate(90, tab2Step2 = false);
      $$invalidate(91, tab3Step2 = true);
    }
    async function simpanPP() {
      $$invalidate(0, error = {});
      let payload = {
        tahunPenelitian,
        judulPenelitian,
        rolePenelitian,
        sumberDanaPenelitian,
        biayaPP,
        id
      };
      for (const [key, value2] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(85, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenelitian", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(79, showModalPenelitian = false);
            $$invalidate(51, tahunPenelitian = "");
            $$invalidate(52, judulPenelitian = "");
            $$invalidate(53, rolePenelitian = "");
            $$invalidate(54, sumberDanaPenelitian = "");
            $$invalidate(50, biayaPP = "");
            getPengalamanPenelitian();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPM() {
      $$invalidate(0, error = {});
      let payload = {
        tahunPengmas,
        judulPengmas,
        rolePengmas,
        sumberDanaPengmas,
        biayaPengmas,
        id
      };
      for (const [key, value2] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(85, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPengmas", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(80, showModalPengmas = false);
            $$invalidate(56, tahunPengmas = "");
            $$invalidate(57, judulPengmas = "");
            $$invalidate(58, rolePengmas = "");
            $$invalidate(59, sumberDanaPengmas = "");
            $$invalidate(55, biayaPengmas = "");
            getPengalamanPengmas();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPD() {
      $$invalidate(0, error = {});
      let payload = {
        tahunDiseminasi,
        judulDiseminasi,
        namaPemakalahDiseminasi,
        namaPertemuanDiseminasi,
        id
      };
      for (const [key, value2] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(85, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanDiseminasi", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(81, showModalDiseminasi = false);
            $$invalidate(60, tahunDiseminasi = "");
            $$invalidate(61, judulDiseminasi = "");
            $$invalidate(62, namaPemakalahDiseminasi = "");
            $$invalidate(63, namaPertemuanDiseminasi = "");
            getPengalamanDiseminasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPublikasi() {
      $$invalidate(0, error = {});
      let payload = {
        tahunPublikasi,
        judulPublikasi,
        namaPenulis,
        namaJurnal,
        impactFactor,
        id
      };
      for (const [key, value2] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(85, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPublikasi", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(82, showModalPublikasi = false);
            $$invalidate(64, tahunPublikasi = "");
            $$invalidate(65, judulPublikasi = "");
            $$invalidate(66, namaPenulis = "");
            $$invalidate(67, namaJurnal = "");
            $$invalidate(68, impactFactor = "");
            getPengalamanPublikasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPB() {
      $$invalidate(0, error = {});
      let payload = {
        tahunBuku,
        JudulBuku,
        namaPenulisBuku,
        PenerbitBuku,
        Isbn,
        id
      };
      for (const [key, value2] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(85, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenulisanBuku", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(83, showModalPenulisanBuku = false);
            $$invalidate(69, tahunBuku = "");
            $$invalidate(70, JudulBuku = "");
            $$invalidate(71, namaPenulisBuku = "");
            $$invalidate(72, PenerbitBuku = "");
            $$invalidate(73, Isbn = "");
            getPengalamanPenulisanBuku();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPHKI() {
      $$invalidate(0, error = {});
      let payload = {
        tahunHKI,
        JudulHKI,
        namaPenulisHKI,
        jenisHKI,
        noHKI,
        id
      };
      for (const [key, value2] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(0, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(85, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanHKI", {
          method: "POST",
          headers,
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(84, showModalHKI = false);
            $$invalidate(74, tahunHKI = "");
            $$invalidate(75, JudulHKI = "");
            $$invalidate(76, namaPenulisHKI = "");
            $$invalidate(77, jenisHKI = "");
            $$invalidate(78, noHKI = "");
            getPengalamanHKI();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function delrowPP(ev) {
      let idPP = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenelitian/" + idPP, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenelitian();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPM(ev) {
      let idPM = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPengmas/" + idPM, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPengmas();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPD(ev) {
      let idPD = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanDiseminasi/" + idPD, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanDiseminasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPub(ev) {
      let idPPub = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPublikasi/" + idPPub, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPublikasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPB(ev) {
      let idPPB = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idPPB, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenulisanBuku();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPHKI(ev) {
      let idPHKI = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanHKI/" + idPHKI, { method: "DELETE", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanHKI();
        } else {
          console.log(response);
        }
      }
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(7, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(6, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(8, jenisSkema);
    }
    function input_input_handler() {
      kelompokKeahlian = this.value;
      $$invalidate(9, kelompokKeahlian);
    }
    function input_input_handler_1() {
      topik = this.value;
      $$invalidate(13, topik);
    }
    function input_input_handler_2() {
      tanggalMulai = this.value;
      $$invalidate(11, tanggalMulai);
    }
    function input_input_handler_3() {
      tanggalSelesai = this.value;
      $$invalidate(12, tanggalSelesai);
    }
    function input_input_handler_4() {
      biayaPenelitian = this.value;
      $$invalidate(14, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(14, biayaPenelitian = formatRupiah4(biayaPenelitian, "Rp. "));
    function select_result_binding(value2) {
      anggotaTim = value2;
      $$invalidate(15, anggotaTim);
    }
    function input_input_handler_5() {
      judul = this.value;
      $$invalidate(10, judul);
    }
    function textarea_input_handler() {
      myAbstract = this.value;
      $$invalidate(3, myAbstract);
    }
    function input_input_handler_6() {
      namaLengkap = this.value;
      $$invalidate(31, namaLengkap);
    }
    function select_change_handler_3() {
      jabatanFungsional = select_value(this);
      $$invalidate(32, jabatanFungsional);
    }
    function input_input_handler_7() {
      nip = to_number(this.value);
      $$invalidate(33, nip);
    }
    function input_input_handler_8() {
      nidn = to_number(this.value);
      $$invalidate(34, nidn);
    }
    function input0_input_handler() {
      tempatLahir = this.value;
      $$invalidate(35, tempatLahir);
    }
    function input1_input_handler() {
      tanggalLahir = this.value;
      $$invalidate(36, tanggalLahir);
    }
    function input_input_handler_9() {
      alamatRumah = this.value;
      $$invalidate(37, alamatRumah);
    }
    function input_input_handler_10() {
      telpFaxRumah = to_number(this.value);
      $$invalidate(38, telpFaxRumah);
    }
    function input_input_handler_11() {
      nomorHandphone = to_number(this.value);
      $$invalidate(39, nomorHandphone);
    }
    function input_input_handler_12() {
      alamatKantor = this.value;
      $$invalidate(40, alamatKantor);
    }
    function input_input_handler_13() {
      telpFaxKantor = to_number(this.value);
      $$invalidate(41, telpFaxKantor);
    }
    function input_input_handler_14() {
      email3 = this.value;
      $$invalidate(42, email3);
    }
    function input_input_handler_15() {
      vmataKuliah = this.value;
      $$invalidate(4, vmataKuliah);
    }
    function input0_input_handler_1() {
      pertiS1 = this.value;
      $$invalidate(16, pertiS1);
    }
    function input1_input_handler_1() {
      pertiS2 = this.value;
      $$invalidate(17, pertiS2);
    }
    function input2_input_handler() {
      pertiS3 = this.value;
      $$invalidate(18, pertiS3);
    }
    function input3_input_handler() {
      bidangIlmuS1 = this.value;
      $$invalidate(19, bidangIlmuS1);
    }
    function input4_input_handler() {
      bidangIlmuS2 = this.value;
      $$invalidate(20, bidangIlmuS2);
    }
    function input5_input_handler() {
      bidangIlmuS3 = this.value;
      $$invalidate(21, bidangIlmuS3);
    }
    function input6_input_handler() {
      tahunMasukS1 = to_number(this.value);
      $$invalidate(22, tahunMasukS1);
    }
    function input7_input_handler() {
      tahunMasukS2 = to_number(this.value);
      $$invalidate(23, tahunMasukS2);
    }
    function input8_input_handler() {
      tahunMasukS3 = to_number(this.value);
      $$invalidate(24, tahunMasukS3);
    }
    function input9_input_handler() {
      tahunLulusS1 = to_number(this.value);
      $$invalidate(25, tahunLulusS1);
    }
    function input10_input_handler() {
      tahunLulusS2 = to_number(this.value);
      $$invalidate(26, tahunLulusS2);
    }
    function input11_input_handler() {
      tahunLulusS3 = to_number(this.value);
      $$invalidate(27, tahunLulusS3);
    }
    function textarea0_input_handler() {
      judulTugasAkhirS1 = this.value;
      $$invalidate(28, judulTugasAkhirS1);
    }
    function textarea1_input_handler() {
      judulTugasAkhirS2 = this.value;
      $$invalidate(29, judulTugasAkhirS2);
    }
    function textarea2_input_handler() {
      judulTugasAkhirS3 = this.value;
      $$invalidate(30, judulTugasAkhirS3);
    }
    function input_input_handler_16() {
      tahunPenelitian = to_number(this.value);
      $$invalidate(51, tahunPenelitian);
    }
    function input_input_handler_17() {
      judulPenelitian = this.value;
      $$invalidate(52, judulPenelitian);
    }
    function select_change_handler_4() {
      rolePenelitian = select_value(this);
      $$invalidate(53, rolePenelitian);
    }
    function input_input_handler_18() {
      sumberDanaPenelitian = this.value;
      $$invalidate(54, sumberDanaPenelitian);
    }
    function input_input_handler_19() {
      biayaPP = this.value;
      $$invalidate(50, biayaPP);
    }
    const keyup_handler_1 = () => $$invalidate(50, biayaPP = formatRupiah4(biayaPP, "Rp. "));
    function modal0_show_binding(value2) {
      showModalPenelitian = value2;
      $$invalidate(79, showModalPenelitian);
    }
    function input_input_handler_20() {
      tahunPengmas = to_number(this.value);
      $$invalidate(56, tahunPengmas);
    }
    function input_input_handler_21() {
      judulPengmas = this.value;
      $$invalidate(57, judulPengmas);
    }
    function select_change_handler_5() {
      rolePengmas = select_value(this);
      $$invalidate(58, rolePengmas);
    }
    function input_input_handler_22() {
      sumberDanaPengmas = this.value;
      $$invalidate(59, sumberDanaPengmas);
    }
    function input_input_handler_23() {
      biayaPengmas = this.value;
      $$invalidate(55, biayaPengmas);
    }
    const keyup_handler_2 = () => $$invalidate(55, biayaPengmas = formatRupiah4(biayaPengmas, "Rp. "));
    function modal1_show_binding(value2) {
      showModalPengmas = value2;
      $$invalidate(80, showModalPengmas);
    }
    function input_input_handler_24() {
      tahunDiseminasi = to_number(this.value);
      $$invalidate(60, tahunDiseminasi);
    }
    function input_input_handler_25() {
      judulDiseminasi = this.value;
      $$invalidate(61, judulDiseminasi);
    }
    function input_input_handler_26() {
      namaPemakalahDiseminasi = this.value;
      $$invalidate(62, namaPemakalahDiseminasi);
    }
    function input_input_handler_27() {
      namaPertemuanDiseminasi = this.value;
      $$invalidate(63, namaPertemuanDiseminasi);
    }
    function modal2_show_binding(value2) {
      showModalDiseminasi = value2;
      $$invalidate(81, showModalDiseminasi);
    }
    function input_input_handler_28() {
      tahunPublikasi = to_number(this.value);
      $$invalidate(64, tahunPublikasi);
    }
    function input_input_handler_29() {
      judulPublikasi = this.value;
      $$invalidate(65, judulPublikasi);
    }
    function input_input_handler_30() {
      namaPenulis = this.value;
      $$invalidate(66, namaPenulis);
    }
    function input_input_handler_31() {
      namaJurnal = this.value;
      $$invalidate(67, namaJurnal);
    }
    function input_input_handler_32() {
      impactFactor = this.value;
      $$invalidate(68, impactFactor);
    }
    function modal3_show_binding(value2) {
      showModalPublikasi = value2;
      $$invalidate(82, showModalPublikasi);
    }
    function input_input_handler_33() {
      tahunBuku = to_number(this.value);
      $$invalidate(69, tahunBuku);
    }
    function input_input_handler_34() {
      JudulBuku = this.value;
      $$invalidate(70, JudulBuku);
    }
    function input_input_handler_35() {
      namaPenulisBuku = this.value;
      $$invalidate(71, namaPenulisBuku);
    }
    function input_input_handler_36() {
      PenerbitBuku = this.value;
      $$invalidate(72, PenerbitBuku);
    }
    function input_input_handler_37() {
      Isbn = this.value;
      $$invalidate(73, Isbn);
    }
    function modal4_show_binding(value2) {
      showModalPenulisanBuku = value2;
      $$invalidate(83, showModalPenulisanBuku);
    }
    function input_input_handler_38() {
      tahunHKI = to_number(this.value);
      $$invalidate(74, tahunHKI);
    }
    function input_input_handler_39() {
      JudulHKI = this.value;
      $$invalidate(75, JudulHKI);
    }
    function input_input_handler_40() {
      namaPenulisHKI = this.value;
      $$invalidate(76, namaPenulisHKI);
    }
    function input_input_handler_41() {
      jenisHKI = this.value;
      $$invalidate(77, jenisHKI);
    }
    function input_input_handler_42() {
      noHKI = this.value;
      $$invalidate(78, noHKI);
    }
    function modal5_show_binding(value2) {
      showModalHKI = value2;
      $$invalidate(84, showModalHKI);
    }
    function modalerror0_show_binding(value2) {
      showModalErrorForm = value2;
      $$invalidate(85, showModalErrorForm);
    }
    function modalerror1_show_binding(value2) {
      showModalErrorProposal = value2;
      $$invalidate(1, showModalErrorProposal);
    }
    function modalerror2_show_binding(value2) {
      showModalErrorBiodata = value2;
      $$invalidate(2, showModalErrorBiodata);
    }
    return [
      error,
      showModalErrorProposal,
      showModalErrorBiodata,
      myAbstract,
      vmataKuliah,
      items,
      jenisKegiatan,
      jenisProposal,
      jenisSkema,
      kelompokKeahlian,
      judul,
      tanggalMulai,
      tanggalSelesai,
      topik,
      biayaPenelitian,
      anggotaTim,
      pertiS1,
      pertiS2,
      pertiS3,
      bidangIlmuS1,
      bidangIlmuS2,
      bidangIlmuS3,
      tahunMasukS1,
      tahunMasukS2,
      tahunMasukS3,
      tahunLulusS1,
      tahunLulusS2,
      tahunLulusS3,
      judulTugasAkhirS1,
      judulTugasAkhirS2,
      judulTugasAkhirS3,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email3,
      mataKuliah,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      biayaPP,
      tahunPenelitian,
      judulPenelitian,
      rolePenelitian,
      sumberDanaPenelitian,
      biayaPengmas,
      tahunPengmas,
      judulPengmas,
      rolePengmas,
      sumberDanaPengmas,
      tahunDiseminasi,
      judulDiseminasi,
      namaPemakalahDiseminasi,
      namaPertemuanDiseminasi,
      tahunPublikasi,
      judulPublikasi,
      namaPenulis,
      namaJurnal,
      impactFactor,
      tahunBuku,
      JudulBuku,
      namaPenulisBuku,
      PenerbitBuku,
      Isbn,
      tahunHKI,
      JudulHKI,
      namaPenulisHKI,
      jenisHKI,
      noHKI,
      showModalPenelitian,
      showModalPengmas,
      showModalDiseminasi,
      showModalPublikasi,
      showModalPenulisanBuku,
      showModalHKI,
      showModalErrorForm,
      isLoading,
      tab1,
      tab2,
      tab1Step2,
      tab2Step2,
      tab3Step2,
      $rabFile,
      $ppmFile,
      clickModalPenelitian,
      clickModalPengmas,
      clickModalDiseminasi,
      clickModalPublikasi,
      clickModalPenulisanBuku,
      clickModalHKI,
      addMatkul,
      deleteMatkul,
      simpanProposal,
      submitProposal,
      deleteMember,
      clicktab1,
      clicktab2,
      clicktab1Step2,
      clicktab2Step2,
      clicktab3Step2,
      simpanPP,
      simpanPM,
      simpanPD,
      simpanPPublikasi,
      simpanPPB,
      simpanPHKI,
      delrowPP,
      delrowPM,
      delrowPD,
      delrowPPub,
      delrowPPB,
      delrowPHKI,
      filePpmChange,
      fileRabChange,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      keyup_handler,
      select_result_binding,
      input_input_handler_5,
      textarea_input_handler,
      input_input_handler_6,
      select_change_handler_3,
      input_input_handler_7,
      input_input_handler_8,
      input0_input_handler,
      input1_input_handler,
      input_input_handler_9,
      input_input_handler_10,
      input_input_handler_11,
      input_input_handler_12,
      input_input_handler_13,
      input_input_handler_14,
      input_input_handler_15,
      input0_input_handler_1,
      input1_input_handler_1,
      input2_input_handler,
      input3_input_handler,
      input4_input_handler,
      input5_input_handler,
      input6_input_handler,
      input7_input_handler,
      input8_input_handler,
      input9_input_handler,
      input10_input_handler,
      input11_input_handler,
      textarea0_input_handler,
      textarea1_input_handler,
      textarea2_input_handler,
      input_input_handler_16,
      input_input_handler_17,
      select_change_handler_4,
      input_input_handler_18,
      input_input_handler_19,
      keyup_handler_1,
      modal0_show_binding,
      input_input_handler_20,
      input_input_handler_21,
      select_change_handler_5,
      input_input_handler_22,
      input_input_handler_23,
      keyup_handler_2,
      modal1_show_binding,
      input_input_handler_24,
      input_input_handler_25,
      input_input_handler_26,
      input_input_handler_27,
      modal2_show_binding,
      input_input_handler_28,
      input_input_handler_29,
      input_input_handler_30,
      input_input_handler_31,
      input_input_handler_32,
      modal3_show_binding,
      input_input_handler_33,
      input_input_handler_34,
      input_input_handler_35,
      input_input_handler_36,
      input_input_handler_37,
      modal4_show_binding,
      input_input_handler_38,
      input_input_handler_39,
      input_input_handler_40,
      input_input_handler_41,
      input_input_handler_42,
      modal5_show_binding,
      modalerror0_show_binding,
      modalerror1_show_binding,
      modalerror2_show_binding
    ];
  }
  var Pendaftaranproposal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance34, create_fragment43, safe_not_equal, {}, null, [-1, -1, -1, -1, -1, -1, -1, -1, -1]);
    }
  };
  var pendaftaranproposal_default = Pendaftaranproposal;

  // src/pages/dosen/profile.svelte
  init_define_process();
  function get_each_context13(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[179] = list[i];
    return child_ctx;
  }
  function get_each_context_17(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[182] = list[i];
    return child_ctx;
  }
  function get_each_context_27(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[185] = list[i];
    return child_ctx;
  }
  function get_each_context_37(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[188] = list[i];
    return child_ctx;
  }
  function get_each_context_46(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[191] = list[i];
    return child_ctx;
  }
  function get_each_context_56(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[194] = list[i];
    return child_ctx;
  }
  function get_each_context_66(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[197] = list[i];
    return child_ctx;
  }
  function create_if_block_375(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let field12;
    let t12;
    let br;
    let t13;
    let table;
    let thead;
    let t16;
    let tbody;
    let t17;
    let div1;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_493] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_484] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_474] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_464] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat Lahir",
        $$slots: { default: [create_default_slot_454] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Lahir",
        $$slots: { default: [create_default_slot_444] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_434] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_425] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Nomor Handphone",
        $$slots: { default: [create_default_slot_417] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_405] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_395] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        class: "input",
        name: "Email",
        $$slots: { default: [create_default_slot_385] },
        $$scope: { ctx }
      }
    });
    field12 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_375] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*mataKuliah*/
      ctx[49] && /*mataKuliah*/
      ctx[49].length > 0 && create_if_block_385(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        create_component(field12.$$.fragment);
        t12 = space();
        br = element("br");
        t13 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow"></th> <th>Mata Kuliah</th></tr>`;
        t16 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        t17 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        mount_component(field9, div0, null);
        append(div0, t9);
        mount_component(field10, div0, null);
        append(div0, t10);
        mount_component(field11, div0, null);
        append(div0, t11);
        mount_component(field12, div0, null);
        append(div0, t12);
        append(div0, br);
        append(div0, t13);
        append(div0, table);
        append(table, thead);
        append(table, t16);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
        insert(target, t17, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanIdentitas*/
            ctx[81]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaLengkap*/
        64 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jabatanFungsional*/
        128 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nip*/
        256 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nidn*/
        512 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tempatLahir*/
        1024 | dirty[6] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tanggalLahir*/
        2048 | dirty[6] & /*$$scope*/
        16384) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*alamatRumah*/
        4096 | dirty[6] & /*$$scope*/
        16384) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*telpFaxRumah*/
        8192 | dirty[6] & /*$$scope*/
        16384) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nomorHandphone*/
        16384 | dirty[6] & /*$$scope*/
        16384) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*alamatKantor*/
        32768 | dirty[6] & /*$$scope*/
        16384) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*telpFaxKantor*/
        65536 | dirty[6] & /*$$scope*/
        16384) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*email*/
        131072 | dirty[6] & /*$$scope*/
        16384) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        const field12_changes = {};
        if (dirty[0] & /*vmataKuliah, error*/
        3 | dirty[6] & /*$$scope*/
        16384) {
          field12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field12.$set(field12_changes);
        if (
          /*mataKuliah*/
          ctx2[49] && /*mataKuliah*/
          ctx2[49].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[1] & /*mataKuliah*/
            262144) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_385(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(field12.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(field12.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t17);
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        destroy_component(field12);
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_513(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaLengkap + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaLengkap + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_493(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaLengkap && create_if_block_513(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan nama lengkap dengan gelar");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaLengkap*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[100]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        64 && input.value !== /*namaLengkap*/
        ctx2[37]) {
          set_input_value(
            input,
            /*namaLengkap*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[1].namaLengkap
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_513(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_504(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].jabatanFungsional + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jabatanFungsional + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_484(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let t5;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jabatanFungsional && create_if_block_504(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jabatan Fungsional";
        option1 = element("option");
        option1.textContent = "Asisten Ahli";
        option2 = element("option");
        option2.textContent = "Lektor";
        option3 = element("option");
        option3.textContent = "Lektor Kepala";
        option4 = element("option");
        option4.textContent = "Profesor";
        t5 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Asisten Ahli";
        set_input_value(option1, option1.__value);
        option2.__value = "Lektor";
        set_input_value(option2, option2.__value);
        option3.__value = "Lektor Kepala";
        set_input_value(option3, option3.__value);
        option4.__value = "Profesor";
        set_input_value(option4, option4.__value);
        if (
          /*jabatanFungsional*/
          ctx[38] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[101].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        select_option(
          select,
          /*jabatanFungsional*/
          ctx[38],
          true
        );
        insert(target, t5, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[101]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        128) {
          select_option(
            select,
            /*jabatanFungsional*/
            ctx2[38]
          );
        }
        if (
          /*error*/
          ctx2[1].jabatanFungsional
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_504(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t5);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_494(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nip + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nip + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_474(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nip && create_if_block_494(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nip*/
          ctx[39]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[102]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        256 && to_number(input.value) !== /*nip*/
        ctx2[39]) {
          set_input_value(
            input,
            /*nip*/
            ctx2[39]
          );
        }
        if (
          /*error*/
          ctx2[1].nip
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_494(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_484(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nidn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nidn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_464(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nidn && create_if_block_484(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nidn*/
          ctx[40]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[103]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        512 && to_number(input.value) !== /*nidn*/
        ctx2[40]) {
          set_input_value(
            input,
            /*nidn*/
            ctx2[40]
          );
        }
        if (
          /*error*/
          ctx2[1].nidn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_484(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_474(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tempatLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tempatLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_454(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tempatLahir && create_if_block_474(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tempatLahir*/
          ctx[41]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[104]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        1024 && input.value !== /*tempatLahir*/
        ctx2[41]) {
          set_input_value(
            input,
            /*tempatLahir*/
            ctx2[41]
          );
        }
        if (
          /*error*/
          ctx2[1].tempatLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_474(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_464(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tanggalLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tanggalLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_444(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tanggalLahir && create_if_block_464(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalLahir*/
          ctx[42]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[105]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalLahir*/
        2048) {
          set_input_value(
            input,
            /*tanggalLahir*/
            ctx2[42]
          );
        }
        if (
          /*error*/
          ctx2[1].tanggalLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_464(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_454(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_434(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatRumah && create_if_block_454(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatRumah*/
          ctx[43]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[106]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        4096 && input.value !== /*alamatRumah*/
        ctx2[43]) {
          set_input_value(
            input,
            /*alamatRumah*/
            ctx2[43]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_454(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_444(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_425(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxRumah && create_if_block_444(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxRumah*/
          ctx[44]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_6*/
            ctx[107]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxRumah*/
        8192 && to_number(input.value) !== /*telpFaxRumah*/
        ctx2[44]) {
          set_input_value(
            input,
            /*telpFaxRumah*/
            ctx2[44]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_444(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_434(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nomorHandphone + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nomorHandphone + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_417(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nomorHandphone && create_if_block_434(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nomorHandphone*/
          ctx[45]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_7*/
            ctx[108]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nomorHandphone*/
        16384 && to_number(input.value) !== /*nomorHandphone*/
        ctx2[45]) {
          set_input_value(
            input,
            /*nomorHandphone*/
            ctx2[45]
          );
        }
        if (
          /*error*/
          ctx2[1].nomorHandphone
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_434(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_425(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_405(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatKantor && create_if_block_425(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatKantor*/
          ctx[46]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_8*/
            ctx[109]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatKantor*/
        32768 && input.value !== /*alamatKantor*/
        ctx2[46]) {
          set_input_value(
            input,
            /*alamatKantor*/
            ctx2[46]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_425(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_419(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_395(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxKantor && create_if_block_419(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxKantor*/
          ctx[47]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_9*/
            ctx[110]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*telpFaxKantor*/
        65536 && to_number(input.value) !== /*telpFaxKantor*/
        ctx2[47]) {
          set_input_value(
            input,
            /*telpFaxKantor*/
            ctx2[47]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_419(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_405(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].email + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].email + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_385(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].email && create_if_block_405(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*email*/
          ctx[48]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_10*/
            ctx[111]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*email*/
        131072 && input.value !== /*email*/
        ctx2[48]) {
          set_input_value(
            input,
            /*email*/
            ctx2[48]
          );
        }
        if (
          /*error*/
          ctx2[1].email
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_405(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_395(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].mataKuliah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].mataKuliah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_375(ctx) {
    let div;
    let p0;
    let input;
    let t0;
    let t1;
    let p1;
    let button;
    let span0;
    let icon;
    let t2;
    let span1;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].mataKuliah && create_if_block_395(ctx)
    );
    icon = new Icon_default({ props: { id: "orang", src: add } });
    return {
      c() {
        div = element("div");
        p0 = element("p");
        input = element("input");
        t0 = space();
        if (if_block)
          if_block.c();
        t1 = space();
        p1 = element("p");
        button = element("button");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Tambahkan mata kuliah yang diampu");
        attr(p0, "class", "control is-expanded");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        button.disabled = button_disabled_value = /*vmataKuliah*/
        ctx[0] ? false : true;
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, input);
        set_input_value(
          input,
          /*vmataKuliah*/
          ctx[0]
        );
        append(p0, t0);
        if (if_block)
          if_block.m(p0, null);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        append(button, span0);
        mount_component(icon, span0, null);
        append(button, t2);
        append(button, span1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_11*/
              ctx[112]
            ),
            listen(
              button,
              "click",
              /*addMatkul*/
              ctx[92]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*vmataKuliah*/
        1 && input.value !== /*vmataKuliah*/
        ctx2[0]) {
          set_input_value(
            input,
            /*vmataKuliah*/
            ctx2[0]
          );
        }
        if (
          /*error*/
          ctx2[1].mataKuliah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_395(ctx2);
            if_block.c();
            if_block.m(p0, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (!current || dirty[0] & /*vmataKuliah*/
        1 && button_disabled_value !== (button_disabled_value = /*vmataKuliah*/
        ctx2[0] ? false : true)) {
          button.disabled = button_disabled_value;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_385(ctx) {
    let each_1_anchor;
    let current;
    let each_value_6 = ensure_array_like(
      /*mataKuliah*/
      ctx[49]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_66(get_each_context_66(ctx, each_value_6, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*mataKuliah*/
        262144 | dirty[3] & /*deleteMatkul*/
        64) {
          each_value_6 = ensure_array_like(
            /*mataKuliah*/
            ctx2[49]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_66(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_66(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_6.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_6.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_66(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let t0;
    let td1;
    let t1_value = (
      /*matkul*/
      ctx[197].label + ""
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*matkul*/
        ctx[197].label);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMatkul*/
            ctx[99]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*mataKuliah*/
        262144 && button_data_value_value !== (button_data_value_value = /*matkul*/
        ctx2[197].label)) {
          attr(button, "data-value", button_data_value_value);
        }
        if ((!current || dirty[1] & /*mataKuliah*/
        262144) && t1_value !== (t1_value = /*matkul*/
        ctx2[197].label + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_365(ctx) {
    let div0;
    let table;
    let thead;
    let t7;
    let tbody;
    let tr1;
    let th4;
    let t9;
    let td0;
    let input0;
    let t10;
    let td1;
    let input1;
    let t11;
    let td2;
    let input2;
    let t12;
    let tr2;
    let th5;
    let t14;
    let td3;
    let input3;
    let t15;
    let td4;
    let input4;
    let t16;
    let td5;
    let input5;
    let t17;
    let tr3;
    let th6;
    let t19;
    let td6;
    let input6;
    let t20;
    let td7;
    let input7;
    let t21;
    let td8;
    let input8;
    let t22;
    let tr4;
    let th7;
    let t24;
    let td9;
    let input9;
    let t25;
    let td10;
    let input10;
    let t26;
    let td11;
    let input11;
    let t27;
    let tr5;
    let th8;
    let t29;
    let td12;
    let textarea0;
    let t30;
    let td13;
    let textarea1;
    let t31;
    let td14;
    let textarea2;
    let t32;
    let div1;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div0 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Program</th> <th>S1</th> <th>S2</th> <th>S3</th></tr>`;
        t7 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        th4 = element("th");
        th4.textContent = "Nama Perguruan Tinggi";
        t9 = space();
        td0 = element("td");
        input0 = element("input");
        t10 = space();
        td1 = element("td");
        input1 = element("input");
        t11 = space();
        td2 = element("td");
        input2 = element("input");
        t12 = space();
        tr2 = element("tr");
        th5 = element("th");
        th5.textContent = "Bidang Ilmu";
        t14 = space();
        td3 = element("td");
        input3 = element("input");
        t15 = space();
        td4 = element("td");
        input4 = element("input");
        t16 = space();
        td5 = element("td");
        input5 = element("input");
        t17 = space();
        tr3 = element("tr");
        th6 = element("th");
        th6.textContent = "Tahun Masuk";
        t19 = space();
        td6 = element("td");
        input6 = element("input");
        t20 = space();
        td7 = element("td");
        input7 = element("input");
        t21 = space();
        td8 = element("td");
        input8 = element("input");
        t22 = space();
        tr4 = element("tr");
        th7 = element("th");
        th7.textContent = "Tahun Lulus";
        t24 = space();
        td9 = element("td");
        input9 = element("input");
        t25 = space();
        td10 = element("td");
        input10 = element("input");
        t26 = space();
        td11 = element("td");
        input11 = element("input");
        t27 = space();
        tr5 = element("tr");
        th8 = element("th");
        th8.textContent = "Judul Skripsi/Tesis/Disertasi";
        t29 = space();
        td12 = element("td");
        textarea0 = element("textarea");
        t30 = space();
        td13 = element("td");
        textarea1 = element("textarea");
        t31 = space();
        td14 = element("td");
        textarea2 = element("textarea");
        t32 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(input1, "class", "input");
        attr(input1, "type", "text");
        attr(input2, "class", "input");
        attr(input2, "type", "text");
        attr(input3, "class", "input");
        attr(input3, "type", "text");
        attr(input4, "class", "input");
        attr(input4, "type", "text");
        attr(input5, "class", "input");
        attr(input5, "type", "text");
        attr(input6, "class", "input");
        attr(input6, "type", "number");
        attr(input7, "class", "input");
        attr(input7, "type", "number");
        attr(input8, "class", "input");
        attr(input8, "type", "number");
        attr(input9, "class", "input");
        attr(input9, "type", "number");
        attr(input10, "class", "input");
        attr(input10, "type", "number");
        attr(input11, "class", "input");
        attr(input11, "type", "number");
        attr(textarea0, "class", "textarea");
        attr(textarea1, "class", "textarea");
        attr(textarea2, "class", "textarea");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        append(div0, table);
        append(table, thead);
        append(table, t7);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, th4);
        append(tr1, t9);
        append(tr1, td0);
        append(td0, input0);
        set_input_value(
          input0,
          /*pertiS1*/
          ctx[50]
        );
        append(tr1, t10);
        append(tr1, td1);
        append(td1, input1);
        set_input_value(
          input1,
          /*pertiS2*/
          ctx[51]
        );
        append(tr1, t11);
        append(tr1, td2);
        append(td2, input2);
        set_input_value(
          input2,
          /*pertiS3*/
          ctx[52]
        );
        append(tbody, t12);
        append(tbody, tr2);
        append(tr2, th5);
        append(tr2, t14);
        append(tr2, td3);
        append(td3, input3);
        set_input_value(
          input3,
          /*bidangIlmuS1*/
          ctx[53]
        );
        append(tr2, t15);
        append(tr2, td4);
        append(td4, input4);
        set_input_value(
          input4,
          /*bidangIlmuS2*/
          ctx[54]
        );
        append(tr2, t16);
        append(tr2, td5);
        append(td5, input5);
        set_input_value(
          input5,
          /*bidangIlmuS3*/
          ctx[55]
        );
        append(tbody, t17);
        append(tbody, tr3);
        append(tr3, th6);
        append(tr3, t19);
        append(tr3, td6);
        append(td6, input6);
        set_input_value(
          input6,
          /*tahunMasukS1*/
          ctx[56]
        );
        append(tr3, t20);
        append(tr3, td7);
        append(td7, input7);
        set_input_value(
          input7,
          /*tahunMasukS2*/
          ctx[57]
        );
        append(tr3, t21);
        append(tr3, td8);
        append(td8, input8);
        set_input_value(
          input8,
          /*tahunMasukS3*/
          ctx[58]
        );
        append(tbody, t22);
        append(tbody, tr4);
        append(tr4, th7);
        append(tr4, t24);
        append(tr4, td9);
        append(td9, input9);
        set_input_value(
          input9,
          /*tahunLulusS1*/
          ctx[59]
        );
        append(tr4, t25);
        append(tr4, td10);
        append(td10, input10);
        set_input_value(
          input10,
          /*tahunLulusS2*/
          ctx[60]
        );
        append(tr4, t26);
        append(tr4, td11);
        append(td11, input11);
        set_input_value(
          input11,
          /*tahunLulusS3*/
          ctx[61]
        );
        append(tbody, t27);
        append(tbody, tr5);
        append(tr5, th8);
        append(tr5, t29);
        append(tr5, td12);
        append(td12, textarea0);
        set_input_value(
          textarea0,
          /*judulTugasAkhirS1*/
          ctx[62]
        );
        append(tr5, t30);
        append(tr5, td13);
        append(td13, textarea1);
        set_input_value(
          textarea1,
          /*judulTugasAkhirS2*/
          ctx[63]
        );
        append(tr5, t31);
        append(tr5, td14);
        append(td14, textarea2);
        set_input_value(
          textarea2,
          /*judulTugasAkhirS3*/
          ctx[64]
        );
        insert(target, t32, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[113]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[114]
            ),
            listen(
              input2,
              "input",
              /*input2_input_handler*/
              ctx[115]
            ),
            listen(
              input3,
              "input",
              /*input3_input_handler*/
              ctx[116]
            ),
            listen(
              input4,
              "input",
              /*input4_input_handler*/
              ctx[117]
            ),
            listen(
              input5,
              "input",
              /*input5_input_handler*/
              ctx[118]
            ),
            listen(
              input6,
              "input",
              /*input6_input_handler*/
              ctx[119]
            ),
            listen(
              input7,
              "input",
              /*input7_input_handler*/
              ctx[120]
            ),
            listen(
              input8,
              "input",
              /*input8_input_handler*/
              ctx[121]
            ),
            listen(
              input9,
              "input",
              /*input9_input_handler*/
              ctx[122]
            ),
            listen(
              input10,
              "input",
              /*input10_input_handler*/
              ctx[123]
            ),
            listen(
              input11,
              "input",
              /*input11_input_handler*/
              ctx[124]
            ),
            listen(
              textarea0,
              "input",
              /*textarea0_input_handler*/
              ctx[125]
            ),
            listen(
              textarea1,
              "input",
              /*textarea1_input_handler*/
              ctx[126]
            ),
            listen(
              textarea2,
              "input",
              /*textarea2_input_handler*/
              ctx[127]
            ),
            listen(
              button,
              "click",
              /*simpanRiwayatPendidikan*/
              ctx[88]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*pertiS1*/
        524288 && input0.value !== /*pertiS1*/
        ctx2[50]) {
          set_input_value(
            input0,
            /*pertiS1*/
            ctx2[50]
          );
        }
        if (dirty[1] & /*pertiS2*/
        1048576 && input1.value !== /*pertiS2*/
        ctx2[51]) {
          set_input_value(
            input1,
            /*pertiS2*/
            ctx2[51]
          );
        }
        if (dirty[1] & /*pertiS3*/
        2097152 && input2.value !== /*pertiS3*/
        ctx2[52]) {
          set_input_value(
            input2,
            /*pertiS3*/
            ctx2[52]
          );
        }
        if (dirty[1] & /*bidangIlmuS1*/
        4194304 && input3.value !== /*bidangIlmuS1*/
        ctx2[53]) {
          set_input_value(
            input3,
            /*bidangIlmuS1*/
            ctx2[53]
          );
        }
        if (dirty[1] & /*bidangIlmuS2*/
        8388608 && input4.value !== /*bidangIlmuS2*/
        ctx2[54]) {
          set_input_value(
            input4,
            /*bidangIlmuS2*/
            ctx2[54]
          );
        }
        if (dirty[1] & /*bidangIlmuS3*/
        16777216 && input5.value !== /*bidangIlmuS3*/
        ctx2[55]) {
          set_input_value(
            input5,
            /*bidangIlmuS3*/
            ctx2[55]
          );
        }
        if (dirty[1] & /*tahunMasukS1*/
        33554432 && to_number(input6.value) !== /*tahunMasukS1*/
        ctx2[56]) {
          set_input_value(
            input6,
            /*tahunMasukS1*/
            ctx2[56]
          );
        }
        if (dirty[1] & /*tahunMasukS2*/
        67108864 && to_number(input7.value) !== /*tahunMasukS2*/
        ctx2[57]) {
          set_input_value(
            input7,
            /*tahunMasukS2*/
            ctx2[57]
          );
        }
        if (dirty[1] & /*tahunMasukS3*/
        134217728 && to_number(input8.value) !== /*tahunMasukS3*/
        ctx2[58]) {
          set_input_value(
            input8,
            /*tahunMasukS3*/
            ctx2[58]
          );
        }
        if (dirty[1] & /*tahunLulusS1*/
        268435456 && to_number(input9.value) !== /*tahunLulusS1*/
        ctx2[59]) {
          set_input_value(
            input9,
            /*tahunLulusS1*/
            ctx2[59]
          );
        }
        if (dirty[1] & /*tahunLulusS2*/
        536870912 && to_number(input10.value) !== /*tahunLulusS2*/
        ctx2[60]) {
          set_input_value(
            input10,
            /*tahunLulusS2*/
            ctx2[60]
          );
        }
        if (dirty[1] & /*tahunLulusS3*/
        1073741824 && to_number(input11.value) !== /*tahunLulusS3*/
        ctx2[61]) {
          set_input_value(
            input11,
            /*tahunLulusS3*/
            ctx2[61]
          );
        }
        if (dirty[2] & /*judulTugasAkhirS1*/
        1) {
          set_input_value(
            textarea0,
            /*judulTugasAkhirS1*/
            ctx2[62]
          );
        }
        if (dirty[2] & /*judulTugasAkhirS2*/
        2) {
          set_input_value(
            textarea1,
            /*judulTugasAkhirS2*/
            ctx2[63]
          );
        }
        if (dirty[2] & /*judulTugasAkhirS3*/
        4) {
          set_input_value(
            textarea2,
            /*judulTugasAkhirS3*/
            ctx2[64]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t32);
          detach(div1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_295(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let br0;
    let t17;
    let div9;
    let nav1;
    let div6;
    let t19;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t20;
    let span3;
    let t22;
    let table1;
    let thead1;
    let t33;
    let tbody1;
    let t34;
    let br1;
    let t35;
    let div14;
    let nav2;
    let div11;
    let t37;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t38;
    let span5;
    let t40;
    let table2;
    let thead2;
    let t49;
    let tbody2;
    let t50;
    let br2;
    let t51;
    let div19;
    let nav3;
    let div16;
    let t53;
    let div18;
    let div17;
    let button3;
    let span6;
    let icon3;
    let t54;
    let span7;
    let t56;
    let table3;
    let thead3;
    let t67;
    let tbody3;
    let t68;
    let br3;
    let t69;
    let div24;
    let nav4;
    let div21;
    let t71;
    let div23;
    let div22;
    let button4;
    let span8;
    let icon4;
    let t72;
    let span9;
    let t74;
    let table4;
    let thead4;
    let t85;
    let tbody4;
    let t86;
    let br4;
    let t87;
    let div29;
    let nav5;
    let div26;
    let t89;
    let div28;
    let div27;
    let button5;
    let span10;
    let icon5;
    let t90;
    let span11;
    let t92;
    let table5;
    let thead5;
    let t103;
    let tbody5;
    let t104;
    let br5;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block0 = (
      /*dataPP*/
      ctx[2] && create_if_block_355(ctx)
    );
    icon1 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block1 = (
      /*dataPM*/
      ctx[3] && create_if_block_345(ctx)
    );
    icon2 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block2 = (
      /*dataPD*/
      ctx[4] && create_if_block_335(ctx)
    );
    icon3 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block3 = (
      /*dataPPub*/
      ctx[5] && create_if_block_326(ctx)
    );
    icon4 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block4 = (
      /*dataPPB*/
      ctx[6] && create_if_block_3110(ctx)
    );
    icon5 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block5 = (
      /*dataPHKI*/
      ctx[7] && create_if_block_305(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penelitian</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        br0 = element("br");
        t17 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Pengabdian Masyarakat</h6></div>`;
        t19 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t20 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t22 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t33 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t34 = space();
        br1 = element("br");
        t35 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran</h6></div>`;
        t37 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t38 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t40 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t49 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t50 = space();
        br2 = element("br");
        t51 = space();
        div19 = element("div");
        nav3 = element("nav");
        div16 = element("div");
        div16.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)</h6></div>`;
        t53 = space();
        div18 = element("div");
        div17 = element("div");
        button3 = element("button");
        span6 = element("span");
        create_component(icon3.$$.fragment);
        t54 = space();
        span7 = element("span");
        span7.innerHTML = `<a>Tambah</a>`;
        t56 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t67 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t68 = space();
        br3 = element("br");
        t69 = space();
        div24 = element("div");
        nav4 = element("nav");
        div21 = element("div");
        div21.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penulisan Buku</h6></div>`;
        t71 = space();
        div23 = element("div");
        div22 = element("div");
        button4 = element("button");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t72 = space();
        span9 = element("span");
        span9.innerHTML = `<a>Tambah</a>`;
        t74 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t85 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t86 = space();
        br4 = element("br");
        t87 = space();
        div29 = element("div");
        nav5 = element("nav");
        div26 = element("div");
        div26.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Hak Kekayaan Intelektual</h6></div>`;
        t89 = space();
        div28 = element("div");
        div27 = element("div");
        button5 = element("button");
        span10 = element("span");
        create_component(icon5.$$.fragment);
        t90 = space();
        span11 = element("span");
        span11.innerHTML = `<a>Tambah</a>`;
        t92 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t103 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t104 = space();
        br5 = element("br");
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div14, "class", "box");
        attr(div16, "class", "level-left");
        attr(span6, "class", "icon");
        attr(button3, "class", "button is-info");
        attr(div17, "class", "level-item");
        attr(div18, "class", "level-right");
        attr(nav3, "class", "level");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div19, "class", "box");
        attr(div21, "class", "level-left");
        attr(span8, "class", "icon");
        attr(button4, "class", "button is-info");
        attr(div22, "class", "level-item");
        attr(div23, "class", "level-right");
        attr(nav4, "class", "level");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div24, "class", "box");
        attr(div26, "class", "level-left");
        attr(span10, "class", "icon");
        attr(button5, "class", "button is-info");
        attr(div27, "class", "level-item");
        attr(div28, "class", "level-right");
        attr(nav5, "class", "level");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div29, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, br0, anchor);
        insert(target, t17, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t19);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t20);
        append(button1, span3);
        append(div9, t22);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t33);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t34, anchor);
        insert(target, br1, anchor);
        insert(target, t35, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t37);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t38);
        append(button2, span5);
        append(div14, t40);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t49);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t50, anchor);
        insert(target, br2, anchor);
        insert(target, t51, anchor);
        insert(target, div19, anchor);
        append(div19, nav3);
        append(nav3, div16);
        append(nav3, t53);
        append(nav3, div18);
        append(div18, div17);
        append(div17, button3);
        append(button3, span6);
        mount_component(icon3, span6, null);
        append(button3, t54);
        append(button3, span7);
        append(div19, t56);
        append(div19, table3);
        append(table3, thead3);
        append(table3, t67);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t68, anchor);
        insert(target, br3, anchor);
        insert(target, t69, anchor);
        insert(target, div24, anchor);
        append(div24, nav4);
        append(nav4, div21);
        append(nav4, t71);
        append(nav4, div23);
        append(div23, div22);
        append(div22, button4);
        append(button4, span8);
        mount_component(icon4, span8, null);
        append(button4, t72);
        append(button4, span9);
        append(div24, t74);
        append(div24, table4);
        append(table4, thead4);
        append(table4, t85);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t86, anchor);
        insert(target, br4, anchor);
        insert(target, t87, anchor);
        insert(target, div29, anchor);
        append(div29, nav5);
        append(nav5, div26);
        append(nav5, t89);
        append(nav5, div28);
        append(div28, div27);
        append(div27, button5);
        append(button5, span10);
        mount_component(icon5, span10, null);
        append(button5, t90);
        append(button5, span11);
        append(div29, t92);
        append(div29, table5);
        append(table5, thead5);
        append(table5, t103);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t104, anchor);
        insert(target, br5, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clickModalPenelitian*/
              ctx[75]
            ),
            listen(
              button1,
              "click",
              /*clickModalPengmas*/
              ctx[76]
            ),
            listen(
              button2,
              "click",
              /*clickModalDiseminasi*/
              ctx[77]
            ),
            listen(
              button3,
              "click",
              /*clickModalPublikasi*/
              ctx[78]
            ),
            listen(
              button4,
              "click",
              /*clickModalPenulisanBuku*/
              ctx[79]
            ),
            listen(
              button5,
              "click",
              /*clickModalHKI*/
              ctx[80]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataPP*/
          ctx2[2]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*dataPP*/
            4) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_355(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataPM*/
          ctx2[3]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*dataPM*/
            8) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_345(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataPD*/
          ctx2[4]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*dataPD*/
            16) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_335(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*dataPPub*/
          ctx2[5]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[0] & /*dataPPub*/
            32) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_326(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*dataPPB*/
          ctx2[6]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[0] & /*dataPPB*/
            64) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_3110(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
        if (
          /*dataPHKI*/
          ctx2[7]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
            if (dirty[0] & /*dataPHKI*/
            128) {
              transition_in(if_block5, 1);
            }
          } else {
            if_block5 = create_if_block_305(ctx2);
            if_block5.c();
            transition_in(if_block5, 1);
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          group_outros();
          transition_out(if_block5, 1, 1, () => {
            if_block5 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        transition_in(icon3.$$.fragment, local);
        transition_in(if_block3);
        transition_in(icon4.$$.fragment, local);
        transition_in(if_block4);
        transition_in(icon5.$$.fragment, local);
        transition_in(if_block5);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        transition_out(icon3.$$.fragment, local);
        transition_out(if_block3);
        transition_out(icon4.$$.fragment, local);
        transition_out(if_block4);
        transition_out(icon5.$$.fragment, local);
        transition_out(if_block5);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(br0);
          detach(t17);
          detach(div9);
          detach(t34);
          detach(br1);
          detach(t35);
          detach(div14);
          detach(t50);
          detach(br2);
          detach(t51);
          detach(div19);
          detach(t68);
          detach(br3);
          detach(t69);
          detach(div24);
          detach(t86);
          detach(br4);
          detach(t87);
          detach(div29);
          detach(t104);
          detach(br5);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        destroy_component(icon3);
        if (if_block3)
          if_block3.d();
        destroy_component(icon4);
        if (if_block4)
          if_block4.d();
        destroy_component(icon5);
        if (if_block5)
          if_block5.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_355(ctx) {
    let each_1_anchor;
    let current;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_56(get_each_context_56(ctx, each_value_5, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        4 | dirty[3] & /*delrowPP*/
        1) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_56(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_56(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_5.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_5.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_56(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PP*/
      ctx[194].tahun_penelitian + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PP*/
      ctx[194].judul_penelitian + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PP*/
      ctx[194].role_penelitian + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PP*/
      ctx[194].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PP*/
      ctx[194].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PP*/
        ctx[194].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPP*/
            ctx[93]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPP*/
        4 && button_pid_value !== (button_pid_value = /*PP*/
        ctx2[194].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPP*/
        4) && t1_value !== (t1_value = /*PP*/
        ctx2[194].tahun_penelitian + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t3_value !== (t3_value = /*PP*/
        ctx2[194].judul_penelitian + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t5_value !== (t5_value = /*PP*/
        ctx2[194].role_penelitian + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t7_value !== (t7_value = /*PP*/
        ctx2[194].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPP*/
        4) && t9_value !== (t9_value = /*PP*/
        ctx2[194].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_345(ctx) {
    let each_1_anchor;
    let current;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_46(get_each_context_46(ctx, each_value_4, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        8 | dirty[3] & /*delrowPM*/
        2) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_46(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_46(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_4.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_4.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_46(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PM*/
      ctx[191].tahun_pengmas + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PM*/
      ctx[191].judul_pengmas + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PM*/
      ctx[191].role_pengmas + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PM*/
      ctx[191].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PM*/
      ctx[191].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PM*/
        ctx[191].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPM*/
            ctx[94]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPM*/
        8 && button_pid_value !== (button_pid_value = /*PM*/
        ctx2[191].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPM*/
        8) && t1_value !== (t1_value = /*PM*/
        ctx2[191].tahun_pengmas + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t3_value !== (t3_value = /*PM*/
        ctx2[191].judul_pengmas + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t5_value !== (t5_value = /*PM*/
        ctx2[191].role_pengmas + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t7_value !== (t7_value = /*PM*/
        ctx2[191].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPM*/
        8) && t9_value !== (t9_value = /*PM*/
        ctx2[191].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_335(ctx) {
    let each_1_anchor;
    let current;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[4]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_37(get_each_context_37(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        16 | dirty[3] & /*delrowPD*/
        4) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[4]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_37(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_37(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_37(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PD*/
      ctx[188].tahun_diseminasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PD*/
      ctx[188].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PD*/
      ctx[188].nama_pemakalah + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PD*/
      ctx[188].nama_pertemuan + ""
    );
    let t7;
    let t8;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PD*/
        ctx[188].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPD*/
            ctx[95]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPD*/
        16 && button_pid_value !== (button_pid_value = /*PD*/
        ctx2[188].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPD*/
        16) && t1_value !== (t1_value = /*PD*/
        ctx2[188].tahun_diseminasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPD*/
        16) && t3_value !== (t3_value = /*PD*/
        ctx2[188].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPD*/
        16) && t5_value !== (t5_value = /*PD*/
        ctx2[188].nama_pemakalah + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPD*/
        16) && t7_value !== (t7_value = /*PD*/
        ctx2[188].nama_pertemuan + ""))
          set_data(t7, t7_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_326(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_27(get_each_context_27(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        32 | dirty[3] & /*delrowPPub*/
        8) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_27(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_27(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_27(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPub*/
      ctx[185].tahun_publikasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPub*/
      ctx[185].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPub*/
      ctx[185].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPub*/
      ctx[185].nama_jurnal + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPub*/
      ctx[185].impact + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPub*/
        ctx[185].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPub*/
            ctx[96]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPub*/
        32 && button_pid_value !== (button_pid_value = /*PPub*/
        ctx2[185].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t1_value !== (t1_value = /*PPub*/
        ctx2[185].tahun_publikasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t3_value !== (t3_value = /*PPub*/
        ctx2[185].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t5_value !== (t5_value = /*PPub*/
        ctx2[185].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t7_value !== (t7_value = /*PPub*/
        ctx2[185].nama_jurnal + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPub*/
        32) && t9_value !== (t9_value = /*PPub*/
        ctx2[185].impact + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3110(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[6]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_17(get_each_context_17(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        64 | dirty[3] & /*delrowPPB*/
        16) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[6]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_17(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_17(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_17(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPB*/
      ctx[182].tahun_buku + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPB*/
      ctx[182].judul_buku + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPB*/
      ctx[182].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPB*/
      ctx[182].penerbit + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPB*/
      ctx[182].isbn + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPB*/
        ctx[182].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPB*/
            ctx[97]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPB*/
        64 && button_pid_value !== (button_pid_value = /*PPB*/
        ctx2[182].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t1_value !== (t1_value = /*PPB*/
        ctx2[182].tahun_buku + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t3_value !== (t3_value = /*PPB*/
        ctx2[182].judul_buku + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t5_value !== (t5_value = /*PPB*/
        ctx2[182].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t7_value !== (t7_value = /*PPB*/
        ctx2[182].penerbit + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPB*/
        64) && t9_value !== (t9_value = /*PPB*/
        ctx2[182].isbn + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_305(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block13(get_each_context13(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        128 | dirty[3] & /*delrowPHKI*/
        32) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context13(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block13(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block13(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PHKI*/
      ctx[179].tahun_hki + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PHKI*/
      ctx[179].judul_hki + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PHKI*/
      ctx[179].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PHKI*/
      ctx[179].jenis_hki + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PHKI*/
      ctx[179].no_hki + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PHKI*/
        ctx[179].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPHKI*/
            ctx[98]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPHKI*/
        128 && button_pid_value !== (button_pid_value = /*PHKI*/
        ctx2[179].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t1_value !== (t1_value = /*PHKI*/
        ctx2[179].tahun_hki + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t3_value !== (t3_value = /*PHKI*/
        ctx2[179].judul_hki + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t5_value !== (t5_value = /*PHKI*/
        ctx2[179].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t7_value !== (t7_value = /*PHKI*/
        ctx2[179].jenis_hki + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        128) && t9_value !== (t9_value = /*PHKI*/
        ctx2[179].no_hki + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_365(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let li2;
    let t7;
    let t8;
    let t9;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[72] === true && create_if_block_375(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[73] === true && create_if_block_365(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[74] === true && create_if_block_295(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Profile";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Riwayat Pendidikan</span></a>`;
        t5 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Pengalaman</span></a>`;
        t7 = space();
        if (if_block0)
          if_block0.c();
        t8 = space();
        if (if_block1)
          if_block1.c();
        t9 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[72]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[73]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[74]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        append(ul, t5);
        append(ul, li2);
        insert(target, t7, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t8, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t9, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[89]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[90]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[91]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1*/
        1024) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[72]
          );
        }
        if (!current || dirty[2] & /*tab2*/
        2048) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[73]
          );
        }
        if (!current || dirty[2] & /*tab3*/
        4096) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[74]
          );
        }
        if (
          /*tab1*/
          ctx2[72] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1*/
            1024) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_375(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t8.parentNode, t8);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[73] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_365(ctx2);
            if_block1.c();
            if_block1.m(t9.parentNode, t9);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*tab3*/
          ctx2[74] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[2] & /*tab3*/
            4096) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_295(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_285(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_355(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPenelitian && create_if_block_285(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPenelitian*/
          ctx[9]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_12*/
            ctx[128]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPenelitian*/
        512 && to_number(input.value) !== /*tahunPenelitian*/
        ctx2[9]) {
          set_input_value(
            input,
            /*tahunPenelitian*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_285(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_276(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_345(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPenelitian && create_if_block_276(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPenelitian*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_13*/
            ctx[129]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPenelitian*/
        1024 && input.value !== /*judulPenelitian*/
        ctx2[10]) {
          set_input_value(
            input,
            /*judulPenelitian*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_276(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_266(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_335(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePenelitian && create_if_block_266(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePenelitian*/
          ctx[11] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[130].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePenelitian*/
          ctx[11],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[130]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*rolePenelitian*/
        2048) {
          select_option(
            select,
            /*rolePenelitian*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_266(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_256(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_325(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPenelitian && create_if_block_256(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPenelitian*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_14*/
            ctx[131]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*sumberDanaPenelitian*/
        4096 && input.value !== /*sumberDanaPenelitian*/
        ctx2[12]) {
          set_input_value(
            input,
            /*sumberDanaPenelitian*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_256(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_246(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPP + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPP + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_319(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPP && create_if_block_246(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPP*/
          ctx[8]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_15*/
              ctx[132]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[133]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPP*/
        256 && input.value !== /*biayaPP*/
        ctx2[8]) {
          set_input_value(
            input,
            /*biayaPP*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPP
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_246(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_306(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_355] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Penelitian",
        $$slots: { default: [create_default_slot_345] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_335] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_325] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_319] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPP*/
            ctx[82]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPenelitian*/
        514 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPenelitian*/
        1026 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, rolePenelitian*/
        2050 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, sumberDanaPenelitian*/
        4098 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, biayaPP*/
        258 | dirty[6] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_53(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penelitian";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_237(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_296(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPengmas && create_if_block_237(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPengmas*/
          ctx[14]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_16*/
            ctx[135]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPengmas*/
        16384 && to_number(input.value) !== /*tahunPengmas*/
        ctx2[14]) {
          set_input_value(
            input,
            /*tahunPengmas*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_237(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_227(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_286(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPengmas && create_if_block_227(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengmas*/
          ctx[15]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_17*/
            ctx[136]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPengmas*/
        32768 && input.value !== /*judulPengmas*/
        ctx2[15]) {
          set_input_value(
            input,
            /*judulPengmas*/
            ctx2[15]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_227(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2110(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_276(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePengmas && create_if_block_2110(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePengmas*/
          ctx[16] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[137].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePengmas*/
          ctx[16],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[137]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*rolePengmas*/
        65536) {
          select_option(
            select,
            /*rolePengmas*/
            ctx2[16]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2110(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_206(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_266(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPengmas && create_if_block_206(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPengmas*/
          ctx[17]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_18*/
            ctx[138]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*sumberDanaPengmas*/
        131072 && input.value !== /*sumberDanaPengmas*/
        ctx2[17]) {
          set_input_value(
            input,
            /*sumberDanaPengmas*/
            ctx2[17]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_206(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_196(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_256(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPengmas && create_if_block_196(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Pengmas");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPengmas*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_19*/
              ctx[139]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler_1*/
              ctx[140]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPengmas*/
        8192 && input.value !== /*biayaPengmas*/
        ctx2[13]) {
          set_input_value(
            input,
            /*biayaPengmas*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_196(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_246(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_296] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Pengmas",
        $$slots: { default: [create_default_slot_286] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_276] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_266] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_256] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPM*/
            ctx[83]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPengmas*/
        16386 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPengmas*/
        32770 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, rolePengmas*/
        65538 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, sumberDanaPengmas*/
        131074 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, biayaPengmas*/
        8194 | dirty[6] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_43(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Pengabdian Masyarakat";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_186(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_236(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunDiseminasi && create_if_block_186(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunDiseminasi*/
          ctx[18]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_20*/
            ctx[142]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunDiseminasi*/
        262144 && to_number(input.value) !== /*tahunDiseminasi*/
        ctx2[18]) {
          set_input_value(
            input,
            /*tahunDiseminasi*/
            ctx2[18]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_186(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_176(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_227(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulDiseminasi && create_if_block_176(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDiseminasi*/
          ctx[19]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_21*/
            ctx[143]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulDiseminasi*/
        524288 && input.value !== /*judulDiseminasi*/
        ctx2[19]) {
          set_input_value(
            input,
            /*judulDiseminasi*/
            ctx2[19]
          );
        }
        if (
          /*error*/
          ctx2[1].judulDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_176(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_166(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPemakalahDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_2110(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi && create_if_block_166(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPemakalahDiseminasi*/
          ctx[20]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_22*/
            ctx[144]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPemakalahDiseminasi*/
        1048576 && input.value !== /*namaPemakalahDiseminasi*/
        ctx2[20]) {
          set_input_value(
            input,
            /*namaPemakalahDiseminasi*/
            ctx2[20]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPemakalahDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_166(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_156(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPertemuanDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_206(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi && create_if_block_156(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPertemuanDiseminasi*/
          ctx[21]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_23*/
            ctx[145]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPertemuanDiseminasi*/
        2097152 && input.value !== /*namaPertemuanDiseminasi*/
        ctx2[21]) {
          set_input_value(
            input,
            /*namaPertemuanDiseminasi*/
            ctx2[21]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPertemuanDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_156(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_196(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let hr;
    let t4;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_236] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_227] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Pemakalah",
        $$slots: { default: [create_default_slot_2110] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Pertemuan Ilmiah/Pameran",
        $$slots: { default: [create_default_slot_206] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        hr = element("hr");
        t4 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        insert(target, hr, anchor);
        insert(target, t4, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPD*/
            ctx[84]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunDiseminasi*/
        262146 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulDiseminasi*/
        524290 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, namaPemakalahDiseminasi*/
        1048578 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, namaPertemuanDiseminasi*/
        2097154 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(hr);
          detach(t4);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_33(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Diseminasi Ilmiah dalam<br/>Pertemuan / Pameran`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_146(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_186(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPublikasi && create_if_block_146(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPublikasi*/
          ctx[22]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_24*/
            ctx[147]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPublikasi*/
        4194304 && to_number(input.value) !== /*tahunPublikasi*/
        ctx2[22]) {
          set_input_value(
            input,
            /*tahunPublikasi*/
            ctx2[22]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_146(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_137(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_176(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPublikasi && create_if_block_137(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPublikasi*/
          ctx[23]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_25*/
            ctx[148]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPublikasi*/
        8388608 && input.value !== /*judulPublikasi*/
        ctx2[23]) {
          set_input_value(
            input,
            /*judulPublikasi*/
            ctx2[23]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_137(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_129(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_166(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulis && create_if_block_129(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulis*/
          ctx[24]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_26*/
            ctx[149]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPenulis*/
        16777216 && input.value !== /*namaPenulis*/
        ctx2[24]) {
          set_input_value(
            input,
            /*namaPenulis*/
            ctx2[24]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_129(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_1112(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaJurnal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaJurnal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_156(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaJurnal && create_if_block_1112(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaJurnal*/
          ctx[25]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_27*/
            ctx[150]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaJurnal*/
        33554432 && input.value !== /*namaJurnal*/
        ctx2[25]) {
          set_input_value(
            input,
            /*namaJurnal*/
            ctx2[25]
          );
        }
        if (
          /*error*/
          ctx2[1].namaJurnal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_1112(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_107(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].impactFactor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].impactFactor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_146(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].impactFactor && create_if_block_107(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*impactFactor*/
          ctx[26]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_28*/
            ctx[151]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*impactFactor*/
        67108864 && input.value !== /*impactFactor*/
        ctx2[26]) {
          set_input_value(
            input,
            /*impactFactor*/
            ctx2[26]
          );
        }
        if (
          /*error*/
          ctx2[1].impactFactor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_107(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_136(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_186] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_176] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_166] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Jurnal, Vol., No Issue/No Artikel, Halaman",
        $$slots: { default: [create_default_slot_156] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Impact Factor/Scopus Quarter/Akreditasi",
        $$slots: { default: [create_default_slot_146] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPublikasi*/
            ctx[85]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPublikasi*/
        4194306 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPublikasi*/
        8388610 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, namaPenulis*/
        16777218 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, namaJurnal*/
        33554434 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, impactFactor*/
        67108866 | dirty[6] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_23(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Publikasi Ilmiah <br/> dalam Jurnal (bukan Proceeding)`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_97(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_127(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunBuku && create_if_block_97(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunBuku*/
          ctx[27]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_29*/
            ctx[153]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunBuku*/
        134217728 && to_number(input.value) !== /*tahunBuku*/
        ctx2[27]) {
          set_input_value(
            input,
            /*tahunBuku*/
            ctx2[27]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_97(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_88(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_1110(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulBuku && create_if_block_88(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulBuku*/
          ctx[28]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_30*/
            ctx[154]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*JudulBuku*/
        268435456 && input.value !== /*JudulBuku*/
        ctx2[28]) {
          set_input_value(
            input,
            /*JudulBuku*/
            ctx2[28]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_88(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_78(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_106(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisBuku && create_if_block_78(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisBuku*/
          ctx[29]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_31*/
            ctx[155]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*namaPenulisBuku*/
        536870912 && input.value !== /*namaPenulisBuku*/
        ctx2[29]) {
          set_input_value(
            input,
            /*namaPenulisBuku*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_78(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_611(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].PenerbitBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].PenerbitBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_96(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].PenerbitBuku && create_if_block_611(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*PenerbitBuku*/
          ctx[30]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_32*/
            ctx[156]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*PenerbitBuku*/
        1073741824 && input.value !== /*PenerbitBuku*/
        ctx2[30]) {
          set_input_value(
            input,
            /*PenerbitBuku*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[1].PenerbitBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_611(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_511(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].Isbn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].Isbn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_86(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].Isbn && create_if_block_511(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*Isbn*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_33*/
            ctx[157]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*Isbn*/
        1 && input.value !== /*Isbn*/
        ctx2[31]) {
          set_input_value(
            input,
            /*Isbn*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[1].Isbn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_511(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_77(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_127] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Buku",
        $$slots: { default: [create_default_slot_1110] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_106] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_96] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_86] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPB*/
            ctx[86]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunBuku*/
        134217730 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, JudulBuku*/
        268435458 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, namaPenulisBuku*/
        536870914 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, PenerbitBuku*/
        1073741826 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*Isbn*/
        1 | dirty[6] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_13(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penulisan Buku";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_420(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_67(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunHKI && create_if_block_420(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunHKI*/
          ctx[32]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_34*/
            ctx[159]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunHKI*/
        2 && to_number(input.value) !== /*tahunHKI*/
        ctx2[32]) {
          set_input_value(
            input,
            /*tahunHKI*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_420(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_320(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_511(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulHKI && create_if_block_320(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulHKI*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_35*/
            ctx[160]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*JudulHKI*/
        4 && input.value !== /*JudulHKI*/
        ctx2[33]) {
          set_input_value(
            input,
            /*JudulHKI*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_320(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_221(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_418(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisHKI && create_if_block_221(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisHKI*/
          ctx[34]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_36*/
            ctx[161]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulisHKI*/
        8 && input.value !== /*namaPenulisHKI*/
        ctx2[34]) {
          set_input_value(
            input,
            /*namaPenulisHKI*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_221(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_130(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[1].jenisHKI + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jenisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_320(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jenisHKI && create_if_block_130(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*jenisHKI*/
          ctx[35]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_37*/
            ctx[162]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisHKI*/
        16 && input.value !== /*jenisHKI*/
        ctx2[35]) {
          set_input_value(
            input,
            /*jenisHKI*/
            ctx2[35]
          );
        }
        if (
          /*error*/
          ctx2[1].jenisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_130(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block17(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].noHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].noHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_220(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].noHKI && create_if_block17(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*noHKI*/
          ctx[36]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_38*/
            ctx[163]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*noHKI*/
        32 && input.value !== /*noHKI*/
        ctx2[36]) {
          set_input_value(
            input,
            /*noHKI*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[1].noHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block17(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_120(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_67] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul HKI",
        $$slots: { default: [create_default_slot_511] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_418] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis HKI",
        $$slots: { default: [create_default_slot_320] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "No HKI",
        $$slots: { default: [create_default_slot_220] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPHKI*/
            ctx[87]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunHKI*/
        2 | dirty[6] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*JudulHKI*/
        4 | dirty[6] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulisHKI*/
        8 | dirty[6] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jenisHKI*/
        16 | dirty[6] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI*/
        32 | dirty[6] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot4(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Hak Kekayaan Intelektual";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_default_slot20(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form sebelum disimpan";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment44(ctx) {
    let article;
    let t0;
    let modal0;
    let updating_show;
    let t1;
    let modal1;
    let updating_show_1;
    let t2;
    let modal2;
    let updating_show_2;
    let t3;
    let modal3;
    let updating_show_3;
    let t4;
    let modal4;
    let updating_show_4;
    let t5;
    let modal5;
    let updating_show_5;
    let t6;
    let modalerror;
    let updating_show_6;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_365] },
        $$scope: { ctx }
      }
    });
    function modal0_show_binding(value) {
      ctx[134](value);
    }
    let modal0_props = {
      $$slots: {
        header: [create_header_slot_53],
        default: [create_default_slot_306]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenelitian*/
      ctx[65] !== void 0
    ) {
      modal0_props.show = /*showModalPenelitian*/
      ctx[65];
    }
    modal0 = new Modal_default({ props: modal0_props });
    binding_callbacks.push(() => bind(modal0, "show", modal0_show_binding));
    function modal1_show_binding(value) {
      ctx[141](value);
    }
    let modal1_props = {
      $$slots: {
        header: [create_header_slot_43],
        default: [create_default_slot_246]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPengmas*/
      ctx[66] !== void 0
    ) {
      modal1_props.show = /*showModalPengmas*/
      ctx[66];
    }
    modal1 = new Modal_default({ props: modal1_props });
    binding_callbacks.push(() => bind(modal1, "show", modal1_show_binding));
    function modal2_show_binding(value) {
      ctx[146](value);
    }
    let modal2_props = {
      $$slots: {
        header: [create_header_slot_33],
        default: [create_default_slot_196]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalDiseminasi*/
      ctx[67] !== void 0
    ) {
      modal2_props.show = /*showModalDiseminasi*/
      ctx[67];
    }
    modal2 = new Modal_default({ props: modal2_props });
    binding_callbacks.push(() => bind(modal2, "show", modal2_show_binding));
    function modal3_show_binding(value) {
      ctx[152](value);
    }
    let modal3_props = {
      $$slots: {
        header: [create_header_slot_23],
        default: [create_default_slot_136]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPublikasi*/
      ctx[68] !== void 0
    ) {
      modal3_props.show = /*showModalPublikasi*/
      ctx[68];
    }
    modal3 = new Modal_default({ props: modal3_props });
    binding_callbacks.push(() => bind(modal3, "show", modal3_show_binding));
    function modal4_show_binding(value) {
      ctx[158](value);
    }
    let modal4_props = {
      $$slots: {
        header: [create_header_slot_13],
        default: [create_default_slot_77]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenulisanBuku*/
      ctx[69] !== void 0
    ) {
      modal4_props.show = /*showModalPenulisanBuku*/
      ctx[69];
    }
    modal4 = new Modal_default({ props: modal4_props });
    binding_callbacks.push(() => bind(modal4, "show", modal4_show_binding));
    function modal5_show_binding(value) {
      ctx[164](value);
    }
    let modal5_props = {
      $$slots: {
        header: [create_header_slot4],
        default: [create_default_slot_120]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalHKI*/
      ctx[70] !== void 0
    ) {
      modal5_props.show = /*showModalHKI*/
      ctx[70];
    }
    modal5 = new Modal_default({ props: modal5_props });
    binding_callbacks.push(() => bind(modal5, "show", modal5_show_binding));
    function modalerror_show_binding(value) {
      ctx[165](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot20] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorForm*/
      ctx[71] !== void 0
    ) {
      modalerror_props.show = /*showModalErrorForm*/
      ctx[71];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    return {
      c() {
        create_component(article.$$.fragment);
        t0 = space();
        create_component(modal0.$$.fragment);
        t1 = space();
        create_component(modal1.$$.fragment);
        t2 = space();
        create_component(modal2.$$.fragment);
        t3 = space();
        create_component(modal3.$$.fragment);
        t4 = space();
        create_component(modal4.$$.fragment);
        t5 = space();
        create_component(modal5.$$.fragment);
        t6 = space();
        create_component(modalerror.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        insert(target, t0, anchor);
        mount_component(modal0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modal1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modal2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modal3, target, anchor);
        insert(target, t4, anchor);
        mount_component(modal4, target, anchor);
        insert(target, t5, anchor);
        mount_component(modal5, target, anchor);
        insert(target, t6, anchor);
        mount_component(modalerror, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, vmataKuliah, error*/
        255 | dirty[1] & /*tahunLulusS3, tahunLulusS2, tahunLulusS1, tahunMasukS3, tahunMasukS2, tahunMasukS1, bidangIlmuS3, bidangIlmuS2, bidangIlmuS1, pertiS3, pertiS2, pertiS1, mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap*/
        2147483584 | dirty[2] & /*tab3, judulTugasAkhirS3, judulTugasAkhirS2, judulTugasAkhirS1, tab2, tab1*/
        7175 | dirty[6] & /*$$scope*/
        16384) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
        const modal0_changes = {};
        if (dirty[0] & /*error, biayaPP, sumberDanaPenelitian, rolePenelitian, judulPenelitian, tahunPenelitian*/
        7938 | dirty[6] & /*$$scope*/
        16384) {
          modal0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[2] & /*showModalPenelitian*/
        8) {
          updating_show = true;
          modal0_changes.show = /*showModalPenelitian*/
          ctx2[65];
          add_flush_callback(() => updating_show = false);
        }
        modal0.$set(modal0_changes);
        const modal1_changes = {};
        if (dirty[0] & /*error, biayaPengmas, sumberDanaPengmas, rolePengmas, judulPengmas, tahunPengmas*/
        253954 | dirty[6] & /*$$scope*/
        16384) {
          modal1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[2] & /*showModalPengmas*/
        16) {
          updating_show_1 = true;
          modal1_changes.show = /*showModalPengmas*/
          ctx2[66];
          add_flush_callback(() => updating_show_1 = false);
        }
        modal1.$set(modal1_changes);
        const modal2_changes = {};
        if (dirty[0] & /*error, namaPertemuanDiseminasi, namaPemakalahDiseminasi, judulDiseminasi, tahunDiseminasi*/
        3932162 | dirty[6] & /*$$scope*/
        16384) {
          modal2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[2] & /*showModalDiseminasi*/
        32) {
          updating_show_2 = true;
          modal2_changes.show = /*showModalDiseminasi*/
          ctx2[67];
          add_flush_callback(() => updating_show_2 = false);
        }
        modal2.$set(modal2_changes);
        const modal3_changes = {};
        if (dirty[0] & /*error, impactFactor, namaJurnal, namaPenulis, judulPublikasi, tahunPublikasi*/
        130023426 | dirty[6] & /*$$scope*/
        16384) {
          modal3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[2] & /*showModalPublikasi*/
        64) {
          updating_show_3 = true;
          modal3_changes.show = /*showModalPublikasi*/
          ctx2[68];
          add_flush_callback(() => updating_show_3 = false);
        }
        modal3.$set(modal3_changes);
        const modal4_changes = {};
        if (dirty[0] & /*error, PenerbitBuku, namaPenulisBuku, JudulBuku, tahunBuku*/
        2013265922 | dirty[1] & /*Isbn*/
        1 | dirty[6] & /*$$scope*/
        16384) {
          modal4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_4 && dirty[2] & /*showModalPenulisanBuku*/
        128) {
          updating_show_4 = true;
          modal4_changes.show = /*showModalPenulisanBuku*/
          ctx2[69];
          add_flush_callback(() => updating_show_4 = false);
        }
        modal4.$set(modal4_changes);
        const modal5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI, jenisHKI, namaPenulisHKI, JudulHKI, tahunHKI*/
        62 | dirty[6] & /*$$scope*/
        16384) {
          modal5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_5 && dirty[2] & /*showModalHKI*/
        256) {
          updating_show_5 = true;
          modal5_changes.show = /*showModalHKI*/
          ctx2[70];
          add_flush_callback(() => updating_show_5 = false);
        }
        modal5.$set(modal5_changes);
        const modalerror_changes = {};
        if (dirty[6] & /*$$scope*/
        16384) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_6 && dirty[2] & /*showModalErrorForm*/
        512) {
          updating_show_6 = true;
          modalerror_changes.show = /*showModalErrorForm*/
          ctx2[71];
          add_flush_callback(() => updating_show_6 = false);
        }
        modalerror.$set(modalerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        transition_in(modal0.$$.fragment, local);
        transition_in(modal1.$$.fragment, local);
        transition_in(modal2.$$.fragment, local);
        transition_in(modal3.$$.fragment, local);
        transition_in(modal4.$$.fragment, local);
        transition_in(modal5.$$.fragment, local);
        transition_in(modalerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        transition_out(modal0.$$.fragment, local);
        transition_out(modal1.$$.fragment, local);
        transition_out(modal2.$$.fragment, local);
        transition_out(modal3.$$.fragment, local);
        transition_out(modal4.$$.fragment, local);
        transition_out(modal5.$$.fragment, local);
        transition_out(modalerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
        }
        destroy_component(article, detaching);
        destroy_component(modal0, detaching);
        destroy_component(modal1, detaching);
        destroy_component(modal2, detaching);
        destroy_component(modal3, detaching);
        destroy_component(modal4, detaching);
        destroy_component(modal5, detaching);
        destroy_component(modalerror, detaching);
      }
    };
  }
  function formatRupiah5(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance35($$self, $$props, $$invalidate) {
    let $apiURL;
    let $route;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(168, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(169, $route = $$value));
    const id = localStorage.getItem("id");
    let vmataKuliah;
    let error = {};
    let data2, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let biayaPP, tahunPenelitian, judulPenelitian, rolePenelitian, sumberDanaPenelitian;
    let biayaPengmas, tahunPengmas, judulPengmas, rolePengmas, sumberDanaPengmas;
    let tahunDiseminasi, judulDiseminasi, namaPemakalahDiseminasi, namaPertemuanDiseminasi;
    let tahunPublikasi, judulPublikasi, namaPenulis, namaJurnal, impactFactor;
    let tahunBuku, JudulBuku, namaPenulisBuku, PenerbitBuku, Isbn;
    let tahunHKI, JudulHKI, namaPenulisHKI, jenisHKI, noHKI;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email3, mataKuliah = [];
    let pertiS1, pertiS2, pertiS3, bidangIlmuS1, bidangIlmuS2, bidangIlmuS3, tahunMasukS1, tahunMasukS2, tahunMasukS3, tahunLulusS1, tahunLulusS2, tahunLulusS3, judulTugasAkhirS1, judulTugasAkhirS2, judulTugasAkhirS3;
    let showModalPenelitian = false;
    let showModalPengmas = false;
    let showModalDiseminasi = false;
    let showModalPublikasi = false;
    let showModalPenulisanBuku = false;
    let showModalHKI = false;
    let showModalErrorForm = false;
    async function clickModalPenelitian() {
      $$invalidate(65, showModalPenelitian = true);
    }
    async function clickModalPengmas() {
      $$invalidate(66, showModalPengmas = true);
    }
    async function clickModalDiseminasi() {
      $$invalidate(67, showModalDiseminasi = true);
    }
    async function clickModalPublikasi() {
      $$invalidate(68, showModalPublikasi = true);
    }
    async function clickModalPenulisanBuku() {
      $$invalidate(69, showModalPenulisanBuku = true);
    }
    async function clickModalHKI() {
      $$invalidate(70, showModalHKI = true);
    }
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          data2 = result;
          idProfile = data2.id;
          idUser = data2.uid;
          $$invalidate(37, namaLengkap = data2.nama_lengkap);
          $$invalidate(38, jabatanFungsional = data2.jabatan_fungsional);
          $$invalidate(39, nip = data2.nip);
          $$invalidate(40, nidn = data2.nidn);
          $$invalidate(41, tempatLahir = data2.tempat_lahir);
          $$invalidate(42, tanggalLahir = data2.tanggal_lahir);
          $$invalidate(43, alamatRumah = data2.alamat_rumah);
          $$invalidate(44, telpFaxRumah = data2.telp_fax_rumah);
          $$invalidate(45, nomorHandphone = data2.nomor_handphone);
          $$invalidate(46, alamatKantor = data2.alamat_kantor);
          $$invalidate(47, telpFaxKantor = data2.telp_fax_kantor);
          $$invalidate(48, email3 = data2.email);
          $$invalidate(49, mataKuliah = typeof data2.mata_kuliah === "string" ? JSON.parse(data2.mata_kuliah) : data2.mata_kuliah || []);
        }
      }
      const responseRP = await fetch($apiURL + "/riwayatpendidikan/" + id, { method: "GET", headers });
      const dataRP = await responseRP.json();
      if (dataRP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRP.ok) {
          $$invalidate(50, pertiS1 = dataRP.nama_perti_s1);
          $$invalidate(51, pertiS2 = dataRP.nama_perti_s2);
          $$invalidate(52, pertiS3 = dataRP.nama_perti_s3);
          $$invalidate(53, bidangIlmuS1 = dataRP.bidang_ilmu_s1);
          $$invalidate(54, bidangIlmuS2 = dataRP.bidang_ilmu_s2);
          $$invalidate(55, bidangIlmuS3 = dataRP.bidang_ilmu_s3);
          $$invalidate(56, tahunMasukS1 = dataRP.tahun_masuk_s1);
          $$invalidate(57, tahunMasukS2 = dataRP.tahun_masuk_s2);
          $$invalidate(58, tahunMasukS3 = dataRP.tahun_masuk_s3);
          $$invalidate(59, tahunLulusS1 = dataRP.tahun_lulus_s1);
          $$invalidate(60, tahunLulusS2 = dataRP.tahun_lulus_s2);
          $$invalidate(61, tahunLulusS3 = dataRP.tahun_lulus_s3);
          $$invalidate(62, judulTugasAkhirS1 = dataRP.judul_tugasakhir_s1);
          $$invalidate(63, judulTugasAkhirS2 = dataRP.judul_tugasakhir_s2);
          $$invalidate(64, judulTugasAkhirS3 = dataRP.judul_tugasakhir_s3);
        }
      }
      getPengalamanPenelitian();
      getPengalamanPengmas();
      getPengalamanDiseminasi();
      getPengalamanPublikasi();
      getPengalamanPenulisanBuku();
      getPengalamanHKI();
    });
    async function getPengalamanPenelitian() {
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + id, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (resultPP.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(2, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
    }
    async function getPengalamanPengmas() {
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + id, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (resultPM.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(3, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
    }
    async function getPengalamanDiseminasi() {
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + id, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (resultPD.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(4, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
    }
    async function getPengalamanPublikasi() {
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + id, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (resultPPub.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(5, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
    }
    async function getPengalamanPenulisanBuku() {
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + id, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (resultPPB.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(6, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
    }
    async function getPengalamanHKI() {
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + id, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (resultPHKI.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(7, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
    }
    async function simpanIdentitas() {
      $$invalidate(1, error = {});
      let payload = {
        idProfile,
        namaLengkap,
        jabatanFungsional,
        nip,
        nidn,
        tempatLahir,
        tanggalLahir,
        alamatRumah,
        telpFaxRumah,
        nomorHandphone,
        alamatKantor,
        telpFaxKantor,
        email: email3,
        mataKuliah
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/userprofile", {
          method: "PATCH",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen");
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPP() {
      $$invalidate(1, error = {});
      let payload = {
        tahunPenelitian,
        judulPenelitian,
        rolePenelitian,
        sumberDanaPenelitian,
        biayaPP,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenelitian", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(65, showModalPenelitian = false);
            payload.tahunPenelitian = "";
            payload.judulPenelitian = "";
            payload.rolePenelitian = "";
            payload.sumberDanaPenelitian = "";
            payload.biayaPP = "";
            getPengalamanPenelitian();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPM() {
      $$invalidate(1, error = {});
      let payload = {
        tahunPengmas,
        judulPengmas,
        rolePengmas,
        sumberDanaPengmas,
        biayaPengmas,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPengmas", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(66, showModalPengmas = false);
            payload.tahunPengmas = "";
            payload.judulPengmas = "";
            payload.rolePengmas = "";
            payload.sumberDanaPengmas = "";
            payload.biayaPengmas = "";
            getPengalamanPengmas();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPD() {
      $$invalidate(1, error = {});
      let payload = {
        tahunDiseminasi,
        judulDiseminasi,
        namaPemakalahDiseminasi,
        namaPertemuanDiseminasi,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanDiseminasi", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(67, showModalDiseminasi = false);
            payload.tahunDiseminasi = "";
            payload.judulDiseminasi = "";
            payload.namaPemakalahDiseminasi = "";
            payload.namaPertemuanDiseminasi = "";
            getPengalamanDiseminasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPublikasi() {
      $$invalidate(1, error = {});
      let payload = {
        tahunPublikasi,
        judulPublikasi,
        namaPenulis,
        namaJurnal,
        impactFactor,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPublikasi", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(68, showModalPublikasi = false);
            payload.tahunPublikasi = "";
            payload.judulPublikasi = "";
            payload.namaPenulis = "";
            payload.namaJurnal = "";
            payload.impactFactor = "";
            getPengalamanPublikasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPB() {
      $$invalidate(1, error = {});
      let payload = {
        tahunBuku,
        JudulBuku,
        namaPenulisBuku,
        PenerbitBuku,
        Isbn,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenulisanBuku", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(69, showModalPenulisanBuku = false);
            payload.tahunBuku = "";
            payload.JudulBuku = "";
            payload.namaPenulisBuku = "";
            payload.PenerbitBuku = "";
            payload.Isbn = "";
            getPengalamanPenulisanBuku();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPHKI() {
      $$invalidate(1, error = {});
      let payload = {
        tahunHKI,
        JudulHKI,
        namaPenulisHKI,
        jenisHKI,
        noHKI,
        id
      };
      for (const [key, value] of Object.entries(payload)) {
        if (!payload[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(71, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanHKI", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });
        const result = await response.json();
        if (result.statusCode != 200) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(70, showModalHKI = false);
            payload.tahunHKI = "";
            payload.JudulHKI = "";
            payload.namaPenulisHKI = "";
            payload.jenisHKI = "";
            payload.noHKI = "";
            getPengalamanHKI();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRiwayatPendidikan() {
      const payload = {
        pertiS1,
        pertiS2,
        pertiS3,
        bidangIlmuS1,
        bidangIlmuS2,
        bidangIlmuS3,
        tahunMasukS1,
        tahunMasukS2,
        tahunMasukS3,
        tahunLulusS1,
        tahunLulusS2,
        tahunLulusS3,
        judulTugasAkhirS1,
        judulTugasAkhirS2,
        judulTugasAkhirS3,
        id
      };
      const response = await fetch($apiURL + "/riwayatpendidikan", {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/dosen");
        } else {
          console.log(response);
        }
      }
    }
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(72, tab1 = true);
      $$invalidate(73, tab2 = false);
      $$invalidate(74, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(72, tab1 = false);
      $$invalidate(73, tab2 = true);
      $$invalidate(74, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(72, tab1 = false);
      $$invalidate(73, tab2 = false);
      $$invalidate(74, tab3 = true);
    }
    function addMatkul() {
      let addVmatkul = { label: vmataKuliah };
      $$invalidate(49, mataKuliah = [...mataKuliah, addVmatkul]);
      $$invalidate(0, vmataKuliah = "");
    }
    async function delrowPP(ev) {
      let idPP = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenelitian/" + idPP, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenelitian();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPM(ev) {
      let idPM = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPengmas/" + idPM, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPengmas();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPD(ev) {
      let idPD = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanDiseminasi/" + idPD, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanDiseminasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPub(ev) {
      let idPPub = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPublikasi/" + idPPub, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPublikasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPB(ev) {
      let idPPB = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idPPB, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenulisanBuku();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPHKI(ev) {
      let idPHKI = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanHKI/" + idPHKI, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanHKI();
        } else {
          console.log(response);
        }
      }
    }
    function deleteMatkul(e) {
      let delMatkul = e.target.getAttribute("data-value");
      $$invalidate(49, mataKuliah = mataKuliah.filter((matkul) => {
        return matkul.label !== delMatkul;
      }));
    }
    function input_input_handler() {
      namaLengkap = this.value;
      $$invalidate(37, namaLengkap);
    }
    function select_change_handler() {
      jabatanFungsional = select_value(this);
      $$invalidate(38, jabatanFungsional);
    }
    function input_input_handler_1() {
      nip = to_number(this.value);
      $$invalidate(39, nip);
    }
    function input_input_handler_2() {
      nidn = to_number(this.value);
      $$invalidate(40, nidn);
    }
    function input_input_handler_3() {
      tempatLahir = this.value;
      $$invalidate(41, tempatLahir);
    }
    function input_input_handler_4() {
      tanggalLahir = this.value;
      $$invalidate(42, tanggalLahir);
    }
    function input_input_handler_5() {
      alamatRumah = this.value;
      $$invalidate(43, alamatRumah);
    }
    function input_input_handler_6() {
      telpFaxRumah = to_number(this.value);
      $$invalidate(44, telpFaxRumah);
    }
    function input_input_handler_7() {
      nomorHandphone = to_number(this.value);
      $$invalidate(45, nomorHandphone);
    }
    function input_input_handler_8() {
      alamatKantor = this.value;
      $$invalidate(46, alamatKantor);
    }
    function input_input_handler_9() {
      telpFaxKantor = to_number(this.value);
      $$invalidate(47, telpFaxKantor);
    }
    function input_input_handler_10() {
      email3 = this.value;
      $$invalidate(48, email3);
    }
    function input_input_handler_11() {
      vmataKuliah = this.value;
      $$invalidate(0, vmataKuliah);
    }
    function input0_input_handler() {
      pertiS1 = this.value;
      $$invalidate(50, pertiS1);
    }
    function input1_input_handler() {
      pertiS2 = this.value;
      $$invalidate(51, pertiS2);
    }
    function input2_input_handler() {
      pertiS3 = this.value;
      $$invalidate(52, pertiS3);
    }
    function input3_input_handler() {
      bidangIlmuS1 = this.value;
      $$invalidate(53, bidangIlmuS1);
    }
    function input4_input_handler() {
      bidangIlmuS2 = this.value;
      $$invalidate(54, bidangIlmuS2);
    }
    function input5_input_handler() {
      bidangIlmuS3 = this.value;
      $$invalidate(55, bidangIlmuS3);
    }
    function input6_input_handler() {
      tahunMasukS1 = to_number(this.value);
      $$invalidate(56, tahunMasukS1);
    }
    function input7_input_handler() {
      tahunMasukS2 = to_number(this.value);
      $$invalidate(57, tahunMasukS2);
    }
    function input8_input_handler() {
      tahunMasukS3 = to_number(this.value);
      $$invalidate(58, tahunMasukS3);
    }
    function input9_input_handler() {
      tahunLulusS1 = to_number(this.value);
      $$invalidate(59, tahunLulusS1);
    }
    function input10_input_handler() {
      tahunLulusS2 = to_number(this.value);
      $$invalidate(60, tahunLulusS2);
    }
    function input11_input_handler() {
      tahunLulusS3 = to_number(this.value);
      $$invalidate(61, tahunLulusS3);
    }
    function textarea0_input_handler() {
      judulTugasAkhirS1 = this.value;
      $$invalidate(62, judulTugasAkhirS1);
    }
    function textarea1_input_handler() {
      judulTugasAkhirS2 = this.value;
      $$invalidate(63, judulTugasAkhirS2);
    }
    function textarea2_input_handler() {
      judulTugasAkhirS3 = this.value;
      $$invalidate(64, judulTugasAkhirS3);
    }
    function input_input_handler_12() {
      tahunPenelitian = to_number(this.value);
      $$invalidate(9, tahunPenelitian);
    }
    function input_input_handler_13() {
      judulPenelitian = this.value;
      $$invalidate(10, judulPenelitian);
    }
    function select_change_handler_1() {
      rolePenelitian = select_value(this);
      $$invalidate(11, rolePenelitian);
    }
    function input_input_handler_14() {
      sumberDanaPenelitian = this.value;
      $$invalidate(12, sumberDanaPenelitian);
    }
    function input_input_handler_15() {
      biayaPP = this.value;
      $$invalidate(8, biayaPP);
    }
    const keyup_handler = () => $$invalidate(8, biayaPP = formatRupiah5(biayaPP, "Rp. "));
    function modal0_show_binding(value) {
      showModalPenelitian = value;
      $$invalidate(65, showModalPenelitian);
    }
    function input_input_handler_16() {
      tahunPengmas = to_number(this.value);
      $$invalidate(14, tahunPengmas);
    }
    function input_input_handler_17() {
      judulPengmas = this.value;
      $$invalidate(15, judulPengmas);
    }
    function select_change_handler_2() {
      rolePengmas = select_value(this);
      $$invalidate(16, rolePengmas);
    }
    function input_input_handler_18() {
      sumberDanaPengmas = this.value;
      $$invalidate(17, sumberDanaPengmas);
    }
    function input_input_handler_19() {
      biayaPengmas = this.value;
      $$invalidate(13, biayaPengmas);
    }
    const keyup_handler_1 = () => $$invalidate(13, biayaPengmas = formatRupiah5(biayaPengmas, "Rp. "));
    function modal1_show_binding(value) {
      showModalPengmas = value;
      $$invalidate(66, showModalPengmas);
    }
    function input_input_handler_20() {
      tahunDiseminasi = to_number(this.value);
      $$invalidate(18, tahunDiseminasi);
    }
    function input_input_handler_21() {
      judulDiseminasi = this.value;
      $$invalidate(19, judulDiseminasi);
    }
    function input_input_handler_22() {
      namaPemakalahDiseminasi = this.value;
      $$invalidate(20, namaPemakalahDiseminasi);
    }
    function input_input_handler_23() {
      namaPertemuanDiseminasi = this.value;
      $$invalidate(21, namaPertemuanDiseminasi);
    }
    function modal2_show_binding(value) {
      showModalDiseminasi = value;
      $$invalidate(67, showModalDiseminasi);
    }
    function input_input_handler_24() {
      tahunPublikasi = to_number(this.value);
      $$invalidate(22, tahunPublikasi);
    }
    function input_input_handler_25() {
      judulPublikasi = this.value;
      $$invalidate(23, judulPublikasi);
    }
    function input_input_handler_26() {
      namaPenulis = this.value;
      $$invalidate(24, namaPenulis);
    }
    function input_input_handler_27() {
      namaJurnal = this.value;
      $$invalidate(25, namaJurnal);
    }
    function input_input_handler_28() {
      impactFactor = this.value;
      $$invalidate(26, impactFactor);
    }
    function modal3_show_binding(value) {
      showModalPublikasi = value;
      $$invalidate(68, showModalPublikasi);
    }
    function input_input_handler_29() {
      tahunBuku = to_number(this.value);
      $$invalidate(27, tahunBuku);
    }
    function input_input_handler_30() {
      JudulBuku = this.value;
      $$invalidate(28, JudulBuku);
    }
    function input_input_handler_31() {
      namaPenulisBuku = this.value;
      $$invalidate(29, namaPenulisBuku);
    }
    function input_input_handler_32() {
      PenerbitBuku = this.value;
      $$invalidate(30, PenerbitBuku);
    }
    function input_input_handler_33() {
      Isbn = this.value;
      $$invalidate(31, Isbn);
    }
    function modal4_show_binding(value) {
      showModalPenulisanBuku = value;
      $$invalidate(69, showModalPenulisanBuku);
    }
    function input_input_handler_34() {
      tahunHKI = to_number(this.value);
      $$invalidate(32, tahunHKI);
    }
    function input_input_handler_35() {
      JudulHKI = this.value;
      $$invalidate(33, JudulHKI);
    }
    function input_input_handler_36() {
      namaPenulisHKI = this.value;
      $$invalidate(34, namaPenulisHKI);
    }
    function input_input_handler_37() {
      jenisHKI = this.value;
      $$invalidate(35, jenisHKI);
    }
    function input_input_handler_38() {
      noHKI = this.value;
      $$invalidate(36, noHKI);
    }
    function modal5_show_binding(value) {
      showModalHKI = value;
      $$invalidate(70, showModalHKI);
    }
    function modalerror_show_binding(value) {
      showModalErrorForm = value;
      $$invalidate(71, showModalErrorForm);
    }
    return [
      vmataKuliah,
      error,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      biayaPP,
      tahunPenelitian,
      judulPenelitian,
      rolePenelitian,
      sumberDanaPenelitian,
      biayaPengmas,
      tahunPengmas,
      judulPengmas,
      rolePengmas,
      sumberDanaPengmas,
      tahunDiseminasi,
      judulDiseminasi,
      namaPemakalahDiseminasi,
      namaPertemuanDiseminasi,
      tahunPublikasi,
      judulPublikasi,
      namaPenulis,
      namaJurnal,
      impactFactor,
      tahunBuku,
      JudulBuku,
      namaPenulisBuku,
      PenerbitBuku,
      Isbn,
      tahunHKI,
      JudulHKI,
      namaPenulisHKI,
      jenisHKI,
      noHKI,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email3,
      mataKuliah,
      pertiS1,
      pertiS2,
      pertiS3,
      bidangIlmuS1,
      bidangIlmuS2,
      bidangIlmuS3,
      tahunMasukS1,
      tahunMasukS2,
      tahunMasukS3,
      tahunLulusS1,
      tahunLulusS2,
      tahunLulusS3,
      judulTugasAkhirS1,
      judulTugasAkhirS2,
      judulTugasAkhirS3,
      showModalPenelitian,
      showModalPengmas,
      showModalDiseminasi,
      showModalPublikasi,
      showModalPenulisanBuku,
      showModalHKI,
      showModalErrorForm,
      tab1,
      tab2,
      tab3,
      clickModalPenelitian,
      clickModalPengmas,
      clickModalDiseminasi,
      clickModalPublikasi,
      clickModalPenulisanBuku,
      clickModalHKI,
      simpanIdentitas,
      simpanPP,
      simpanPM,
      simpanPD,
      simpanPPublikasi,
      simpanPPB,
      simpanPHKI,
      simpanRiwayatPendidikan,
      clicktab1,
      clicktab2,
      clicktab3,
      addMatkul,
      delrowPP,
      delrowPM,
      delrowPD,
      delrowPPub,
      delrowPPB,
      delrowPHKI,
      deleteMatkul,
      input_input_handler,
      select_change_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      input_input_handler_6,
      input_input_handler_7,
      input_input_handler_8,
      input_input_handler_9,
      input_input_handler_10,
      input_input_handler_11,
      input0_input_handler,
      input1_input_handler,
      input2_input_handler,
      input3_input_handler,
      input4_input_handler,
      input5_input_handler,
      input6_input_handler,
      input7_input_handler,
      input8_input_handler,
      input9_input_handler,
      input10_input_handler,
      input11_input_handler,
      textarea0_input_handler,
      textarea1_input_handler,
      textarea2_input_handler,
      input_input_handler_12,
      input_input_handler_13,
      select_change_handler_1,
      input_input_handler_14,
      input_input_handler_15,
      keyup_handler,
      modal0_show_binding,
      input_input_handler_16,
      input_input_handler_17,
      select_change_handler_2,
      input_input_handler_18,
      input_input_handler_19,
      keyup_handler_1,
      modal1_show_binding,
      input_input_handler_20,
      input_input_handler_21,
      input_input_handler_22,
      input_input_handler_23,
      modal2_show_binding,
      input_input_handler_24,
      input_input_handler_25,
      input_input_handler_26,
      input_input_handler_27,
      input_input_handler_28,
      modal3_show_binding,
      input_input_handler_29,
      input_input_handler_30,
      input_input_handler_31,
      input_input_handler_32,
      input_input_handler_33,
      modal4_show_binding,
      input_input_handler_34,
      input_input_handler_35,
      input_input_handler_36,
      input_input_handler_37,
      input_input_handler_38,
      modal5_show_binding,
      modalerror_show_binding
    ];
  }
  var Profile2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance35, create_fragment44, safe_not_equal, {}, null, [-1, -1, -1, -1, -1, -1, -1]);
    }
  };
  var profile_default2 = Profile2;

  // src/pages/dosen/proposalppm.svelte
  init_define_process();

  // src/libs/Modalroute.svelte
  init_define_process();
  function create_fragment45(ctx) {
    let b;
    let div1;
    let div0;
    let p;
    let t0;
    let button;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = (
      /*#slots*/
      ctx[4].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    return {
      c() {
        b = element("b");
        div1 = element("div");
        div0 = element("div");
        p = element("p");
        if (default_slot)
          default_slot.c();
        t0 = space();
        button = element("button");
        button.textContent = "OK";
        attr(p, "class", "svelte-5cn8hs");
        attr(button, "class", "button is-info svelte-5cn8hs");
        attr(div0, "class", "cookiesContent svelte-5cn8hs");
        attr(b, "class", "svelte-5cn8hs");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div1);
        append(div1, div0);
        append(div0, p);
        if (default_slot) {
          default_slot.m(p, null);
        }
        append(div0, t0);
        append(div0, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*clickX*/
              ctx[2]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[1]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance36($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(3, $$scope = $$props2.$$scope);
    };
    return [show, handleClick, clickX, $$scope, slots];
  }
  var Modalroute = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance36, create_fragment45, safe_not_equal, { show: 0 });
    }
  };
  var Modalroute_default = Modalroute;

  // src/pages/dosen/proposalppm.svelte
  function get_each_context14(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[7] = list[i];
    return child_ctx;
  }
  function create_if_block18(ctx) {
    let tbody;
    let current;
    let each_value = ensure_array_like(
      /*items*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block14(get_each_context14(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, detail*/
        2) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context14(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block14(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tbody, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block14(ctx) {
    let tr;
    let td0;
    let p0;
    let t0_value = (
      /*item*/
      ctx[7].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p1;
    let t2_value = (
      /*item*/
      ctx[7].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p2;
    let t4_value = (
      /*item*/
      ctx[7].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({ props: { code: (
      /*item*/
      ctx[7].status
    ) } });
    icon = new Icon_default({ props: { id: "info", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        p0 = element("p");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p1 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p2 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1mtjhz7");
        attr(td1, "class", "kegiatan svelte-1mtjhz7");
        attr(td2, "class", "skema svelte-1mtjhz7");
        attr(td3, "class", "status svelte-1mtjhz7");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[7].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[7].id);
        attr(td4, "class", "review svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, p0);
        append(p0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p1);
        append(p1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p2);
        append(p2, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", detail);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items*/
        2) && t0_value !== (t0_value = /*item*/
        ctx2[7].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items*/
        2) && t2_value !== (t2_value = /*item*/
        ctx2[7].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items*/
        2) && t4_value !== (t4_value = /*item*/
        ctx2[7].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items*/
        2)
          status_changes.code = /*item*/
          ctx2[7].status;
        status.$set(status_changes);
        if (!current || dirty & /*items*/
        2 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[7].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items*/
        2 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[7].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_121(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div4;
    let div0;
    let button;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let input;
    let t6;
    let span2;
    let icon1;
    let t7;
    let div6;
    let div5;
    let table;
    let thead;
    let t17;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "addProposal", src: addProposal }
    });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let if_block = (
      /*items*/
      ctx[1] && create_if_block18(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Proposal Penelitian / Pengabdian Masyarakat";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div4 = element("div");
        div0 = element("div");
        button = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Buat Proposal</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        input = element("input");
        t6 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t7 = space();
        div6 = element("div");
        div5 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t17 = space();
        if (if_block)
          if_block.c();
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        attr(div0, "class", "column");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span2, "class", "icon is-left");
        attr(div1, "class", "control has-icons-left");
        attr(div2, "class", "field");
        attr(div3, "class", "column");
        attr(div4, "class", "columns");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div5, "class", "child svelte-1mtjhz7");
        attr(div6, "class", "box parent svelte-1mtjhz7");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        append(div4, div0);
        append(div0, button);
        append(button, span0);
        mount_component(icon0, span0, null);
        append(button, t3);
        append(button, span1);
        append(div4, t5);
        append(div4, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, input);
        append(div1, t6);
        append(div1, span2);
        mount_component(icon1, span2, null);
        insert(target, t7, anchor);
        insert(target, div6, anchor);
        append(div6, div5);
        append(div5, table);
        append(table, thead);
        append(table, t17);
        if (if_block)
          if_block.m(table, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*HandleAddProposal*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*items*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            2) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block18(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(table, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div4);
          detach(t7);
          detach(div6);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot21(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi profile anda terlebih dahulu";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment46(ctx) {
    let article;
    let t;
    let modalroute;
    let updating_show;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_121] },
        $$scope: { ctx }
      }
    });
    function modalroute_show_binding(value) {
      ctx[3](value);
    }
    let modalroute_props = {
      $$slots: { default: [create_default_slot21] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[0] !== void 0
    ) {
      modalroute_props.show = /*showModalError*/
      ctx[0];
    }
    modalroute = new Modalroute_default({ props: modalroute_props });
    binding_callbacks.push(() => bind(modalroute, "show", modalroute_show_binding));
    return {
      c() {
        create_component(article.$$.fragment);
        t = space();
        create_component(modalroute.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        insert(target, t, anchor);
        mount_component(modalroute, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items*/
        1026) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
        const modalroute_changes = {};
        if (dirty & /*$$scope*/
        1024) {
          modalroute_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalError*/
        1) {
          updating_show = true;
          modalroute_changes.show = /*showModalError*/
          ctx2[0];
          add_flush_callback(() => updating_show = false);
        }
        modalroute.$set(modalroute_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        transition_in(modalroute.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        transition_out(modalroute.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(article, detaching);
        destroy_component(modalroute, detaching);
      }
    };
  }
  function daysUntil2(targetDate) {
    const today = /* @__PURE__ */ new Date();
    const target = new Date(targetDate);
    const difference = target.getTime() - today.getTime();
    const positiveDifference = Math.abs(difference);
    const days = Math.floor(positiveDifference / (1e3 * 3600 * 24));
    const weeks = Math.floor(days / 7);
    const months = Math.floor(days / 30);
    const remainingWeeks = weeks % 4;
    const remainingDays = days % 30;
    return { months, remainingWeeks, remainingDays };
  }
  function detail(ev) {
    let propId = ev.target.getAttribute("pid");
    location.href = "/dosen/detailproposal/" + propId;
  }
  function instance37($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(4, $apiURL = $$value));
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    const id = localStorage.id;
    let showModalError = false;
    let items;
    onMount(async () => {
      const accessToken = localStorage.getItem("token");
      const headers = {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json"
      };
      const response = await fetch($apiURL + "/ppm/all/" + id, { method: "GET", headers });
      const result = await response.json();
      const reminder = [];
      if (result.statusCode != 200) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(1, items = result.dbData);
          for (const item of items) {
            reminder.push({
              judul: item.judul,
              selesai: item.tanggal_selesai,
              tersisa: `${daysUntil2(item.tanggal_selesai).months} bulan, ${daysUntil2(item.tanggal_selesai).remainingWeeks} minggu dan ${daysUntil2(item.tanggal_selesai).remainingDays} hari.`
            });
          }
        } else {
          console.log(response);
        }
      }
    });
    function HandleAddProposal() {
      if (localStorage_namaLengkap === null || localStorage_namaLengkap === "") {
        $$invalidate(0, showModalError = true);
      } else {
        location.href = "/dosen/pendaftaranproposal";
      }
    }
    function modalroute_show_binding(value) {
      showModalError = value;
      $$invalidate(0, showModalError);
    }
    return [showModalError, items, HandleAddProposal, modalroute_show_binding];
  }
  var Proposalppm = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance37, create_fragment46, safe_not_equal, {});
    }
  };
  var proposalppm_default = Proposalppm;

  // src/pages/dosen/select.svelte
  init_define_process();
  function create_if_block_131(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[0].email + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error has-text-danger");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        1 && t_value !== (t_value = /*error*/
        ctx2[0].email + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_else_block10(ctx) {
    let label;
    let t1;
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        label = element("label");
        label.textContent = "Username";
        t1 = space();
        input = element("input");
        attr(label, "for", "username");
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, label, anchor);
        insert(target, t1, anchor);
        insert(target, input, anchor);
        set_input_value(
          input,
          /*form*/
          ctx[2].username
        );
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[6]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*form*/
        4 && input.value !== /*form*/
        ctx2[2].username) {
          set_input_value(
            input,
            /*form*/
            ctx2[2].username
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(label);
          detach(t1);
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block19(ctx) {
    let label;
    let t2;
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        label = element("label");
        label.innerHTML = `Username<span class="red-asterisk svelte-ihhmph">*</span>`;
        t2 = space();
        input = element("input");
        attr(label, "for", "username");
        attr(input, "class", "input is-danger");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, label, anchor);
        insert(target, t2, anchor);
        insert(target, input, anchor);
        set_input_value(
          input,
          /*form*/
          ctx[2].username
        );
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[5]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*form*/
        4 && input.value !== /*form*/
        ctx2[2].username) {
          set_input_value(
            input,
            /*form*/
            ctx2[2].username
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(label);
          detach(t2);
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot22(ctx) {
    let div2;
    let div0;
    let label;
    let t1;
    let input;
    let t2;
    let t3;
    let div1;
    let t4;
    let br;
    let t5;
    let button;
    let mounted;
    let dispose;
    let if_block0 = (
      /*error*/
      ctx[0].email && create_if_block_131(ctx)
    );
    function select_block_type(ctx2, dirty) {
      if (
        /*error*/
        ctx2[0].username
      )
        return create_if_block19;
      return create_else_block10;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block1 = current_block_type(ctx);
    return {
      c() {
        div2 = element("div");
        div0 = element("div");
        label = element("label");
        label.textContent = "Email";
        t1 = space();
        input = element("input");
        t2 = space();
        if (if_block0)
          if_block0.c();
        t3 = space();
        div1 = element("div");
        if_block1.c();
        t4 = space();
        br = element("br");
        t5 = space();
        button = element("button");
        button.textContent = "Submit";
        attr(label, "for", "email");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(div0, "class", "field svelte-ihhmph");
        attr(div1, "class", "field svelte-ihhmph");
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[1]
        );
        attr(div2, "class", "box");
      },
      m(target, anchor) {
        insert(target, div2, anchor);
        append(div2, div0);
        append(div0, label);
        append(div0, t1);
        append(div0, input);
        set_input_value(
          input,
          /*form*/
          ctx[2].email
        );
        append(div0, t2);
        if (if_block0)
          if_block0.m(div0, null);
        append(div2, t3);
        append(div2, div1);
        if_block1.m(div1, null);
        append(div2, t4);
        append(div2, br);
        append(div2, t5);
        append(div2, button);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[4]
            ),
            listen(
              button,
              "click",
              /*handleSubmit*/
              ctx[3]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*form*/
        4 && input.value !== /*form*/
        ctx2[2].email) {
          set_input_value(
            input,
            /*form*/
            ctx2[2].email
          );
        }
        if (
          /*error*/
          ctx2[0].email
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_131(ctx2);
            if_block0.c();
            if_block0.m(div0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1.d(1);
          if_block1 = current_block_type(ctx2);
          if (if_block1) {
            if_block1.c();
            if_block1.m(div1, null);
          }
        }
        if (dirty & /*isLoading*/
        2) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[1]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div2);
        }
        if (if_block0)
          if_block0.d();
        if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment47(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot22] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, isLoading, form, error*/
        1031) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  var username = "";
  var email = "";
  function instance38($$self, $$props, $$invalidate) {
    let error = {};
    let isLoading = false;
    let editMode = false;
    let form = { email, username };
    function toggleEditMode() {
      editMode = !editMode;
    }
    function handleSubmit() {
      $$invalidate(0, error = {});
      $$invalidate(1, isLoading = true);
      for (const [key, value] of Object.entries(form)) {
        if (!form[key]) {
          $$invalidate(0, error[key] = "This field is required", error);
        } else {
          console.log("Sukses Cek Form Error");
        }
      }
      if (Object.keys(error).length > 0) {
        console.log("Error, Lengkapi semua form");
        $$invalidate(1, isLoading = false);
      } else {
        console.log("Tombol akan kembali dalam 3 detik...");
        setTimeout($$invalidate(1, isLoading = false), 3e3);
        console.log("Sukses");
        return;
      }
    }
    function stopLoading() {
      $$invalidate(1, isLoading = false);
    }
    function input_input_handler() {
      form.email = this.value;
      $$invalidate(2, form);
    }
    function input_input_handler_1() {
      form.username = this.value;
      $$invalidate(2, form);
    }
    function input_input_handler_2() {
      form.username = this.value;
      $$invalidate(2, form);
    }
    return [
      error,
      isLoading,
      form,
      handleSubmit,
      input_input_handler,
      input_input_handler_1,
      input_input_handler_2
    ];
  }
  var Select2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance38, create_fragment47, safe_not_equal, {});
    }
  };
  var select_default = Select2;

  // src/pages/dosen/testform.svelte
  init_define_process();
  function create_else_block11(ctx) {
    let div2;
    let div0;
    let t1;
    let div1;
    let button;
    let span0;
    let icon;
    let t2;
    let div5;
    let div4;
    let div3;
    let ul;
    let li0;
    let t4;
    let li1;
    let t6;
    let li2;
    let t8;
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "upArrow", src: upArrow } });
    let if_block0 = (
      /*tab1*/
      ctx[1] === true && create_if_block_321(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[2] === true && create_if_block_228(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[3] === true && create_if_block_138(ctx)
    );
    return {
      c() {
        div2 = element("div");
        div0 = element("div");
        div0.innerHTML = `<h6 class="subtitle is-6">Taris Rafiqi Izatri</h6>`;
        t1 = space();
        div1 = element("div");
        button = element("button");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        div5 = element("div");
        div4 = element("div");
        div3 = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas</span></a>`;
        t4 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Riwayat Pendidikan</span></a>`;
        t6 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Pengalaman</span></a>`;
        t8 = space();
        if (if_block0)
          if_block0.c();
        t9 = space();
        if (if_block1)
          if_block1.c();
        t10 = space();
        if (if_block2)
          if_block2.c();
        attr(div0, "class", "column");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(div1, "class", "column is-1");
        attr(div2, "class", "columns");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[1]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[2]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[3]
        );
        attr(div3, "class", "tabs is-boxed");
        attr(div4, "class", "child svelte-hnk4gk");
        attr(div5, "class", "parent svelte-hnk4gk");
      },
      m(target, anchor) {
        insert(target, div2, anchor);
        append(div2, div0);
        append(div2, t1);
        append(div2, div1);
        append(div1, button);
        append(button, span0);
        mount_component(icon, span0, null);
        insert(target, t2, anchor);
        insert(target, div5, anchor);
        append(div5, div4);
        append(div4, div3);
        append(div3, ul);
        append(ul, li0);
        append(ul, t4);
        append(ul, li1);
        append(ul, t6);
        append(ul, li2);
        append(div4, t8);
        if (if_block0)
          if_block0.m(div4, null);
        append(div4, t9);
        if (if_block1)
          if_block1.m(div4, null);
        append(div4, t10);
        if (if_block2)
          if_block2.m(div4, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*ProfileBoxOff*/
              ctx[8]
            ),
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[4]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[5]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[6]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty & /*tab1*/
        2) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[1]
          );
        }
        if (!current || dirty & /*tab2*/
        4) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[2]
          );
        }
        if (!current || dirty & /*tab3*/
        8) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[3]
          );
        }
        if (
          /*tab1*/
          ctx2[1] === true
        ) {
          if (if_block0) {
            if (dirty & /*tab1*/
            2) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_321(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(div4, t9);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[2] === true
        ) {
          if (if_block1) {
            if (dirty & /*tab2*/
            4) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_228(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div4, t10);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab3*/
          ctx2[3] === true
        ) {
          if (if_block2) {
            if (dirty & /*tab3*/
            8) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_138(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(div4, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div2);
          detach(t2);
          detach(div5);
        }
        destroy_component(icon);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block20(ctx) {
    let div2;
    let div0;
    let t1;
    let div1;
    let button;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "downArrow", src: downArrow }
    });
    return {
      c() {
        div2 = element("div");
        div0 = element("div");
        div0.innerHTML = `<h6 class="subtitle is-6">Taris Rafiqi Izatri</h6>`;
        t1 = space();
        div1 = element("div");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(div0, "class", "column");
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(div1, "class", "column is-1");
        attr(div2, "class", "columns");
      },
      m(target, anchor) {
        insert(target, div2, anchor);
        append(div2, div0);
        append(div2, t1);
        append(div2, div1);
        append(div1, button);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*ProfileBoxOn*/
            ctx[7]
          );
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div2);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_321(ctx) {
    let div1;
    let t2;
    let div4;
    let t8;
    let div9;
    let div6;
    let label3;
    let t10;
    let div5;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let t15;
    let div7;
    let t18;
    let div8;
    let t21;
    let div12;
    let t27;
    let div15;
    let t33;
    let div18;
    let t39;
    let div21;
    let div20;
    let div19;
    let p0;
    let t40;
    let p1;
    let button0;
    let span0;
    let icon0;
    let t41;
    let span1;
    let t43;
    let div23;
    let div22;
    let table;
    let thead;
    let t46;
    let tbody;
    let tr1;
    let td0;
    let button1;
    let span2;
    let icon1;
    let t47;
    let td1;
    let current;
    icon0 = new Icon_default({ props: { id: "orang", src: add } });
    icon1 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        div1 = element("div");
        div1.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Nama lengkap</h6></label> <input class="input" placeholder="Masukkan nama lengkap dengan gelar"/></div>`;
        t2 = space();
        div4 = element("div");
        div4.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Nomor Handphone</h6></label> <input class="input"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Email</h6></label> <input class="input"/></div>`;
        t8 = space();
        div9 = element("div");
        div6 = element("div");
        label3 = element("label");
        label3.innerHTML = `<h6 class="title is-6">Jabatan Fungsional</h6>`;
        t10 = space();
        div5 = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Asisten Ahli";
        option1 = element("option");
        option1.textContent = "Lektor";
        option2 = element("option");
        option2.textContent = "Lektor Kepala";
        option3 = element("option");
        option3.textContent = "Guru Besar / Profesor";
        t15 = space();
        div7 = element("div");
        div7.innerHTML = `<label class="label" for="label"><h6 class="title is-6">NIP</h6></label> <input class="input"/>`;
        t18 = space();
        div8 = element("div");
        div8.innerHTML = `<label class="label" for="label"><h6 class="title is-6">NIDN</h6></label> <input class="input"/>`;
        t21 = space();
        div12 = element("div");
        div12.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Tempat Lahir</h6></label> <input class="input"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Tanggal Lahir</h6></label> <input class="input" type="date"/></div>`;
        t27 = space();
        div15 = element("div");
        div15.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Alamat Rumah</h6></label> <input class="input"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Telp/Fax Rumah</h6></label> <input class="input"/></div>`;
        t33 = space();
        div18 = element("div");
        div18.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Alamat Kantor</h6></label> <input class="input"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Telp/Fax Kantor</h6></label> <input class="input"/></div>`;
        t39 = space();
        div21 = element("div");
        div20 = element("div");
        div19 = element("div");
        p0 = element("p");
        p0.innerHTML = `<input class="input" placeholder="Tambahkan mata kuliah yang diampu"/>`;
        t40 = space();
        p1 = element("p");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t41 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t43 = space();
        div23 = element("div");
        div22 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow"></th> <th>Mata Kuliah</th></tr>`;
        t46 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t47 = space();
        td1 = element("td");
        td1.textContent = "Informatika";
        attr(div1, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(label3, "class", "label");
        attr(label3, "for", "label");
        option0.__value = "Asisten Ahli";
        set_input_value(option0, option0.__value);
        option1.__value = "Lektor";
        set_input_value(option1, option1.__value);
        option2.__value = "Lektor Kepala";
        set_input_value(option2, option2.__value);
        option3.__value = "Guru Besar / Profesor";
        set_input_value(option3, option3.__value);
        attr(div5, "class", "select is-fullwidth is-danger");
        attr(div6, "class", "column");
        attr(div7, "class", "column");
        attr(div8, "class", "column");
        attr(div9, "class", "columns is-desktop");
        attr(div12, "class", "columns is-desktop");
        attr(div15, "class", "columns is-desktop");
        attr(div18, "class", "columns is-desktop");
        attr(p0, "class", "control is-expanded");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(p1, "class", "control");
        attr(div19, "class", "field is-grouped");
        attr(div20, "class", "column");
        attr(div21, "class", "columns is-desktop");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-danger is-small");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div22, "class", "column");
        attr(div23, "class", "columns is-desktop");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        insert(target, t8, anchor);
        insert(target, div9, anchor);
        append(div9, div6);
        append(div6, label3);
        append(div6, t10);
        append(div6, div5);
        append(div5, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(div9, t15);
        append(div9, div7);
        append(div9, t18);
        append(div9, div8);
        insert(target, t21, anchor);
        insert(target, div12, anchor);
        insert(target, t27, anchor);
        insert(target, div15, anchor);
        insert(target, t33, anchor);
        insert(target, div18, anchor);
        insert(target, t39, anchor);
        insert(target, div21, anchor);
        append(div21, div20);
        append(div20, div19);
        append(div19, p0);
        append(div19, t40);
        append(div19, p1);
        append(p1, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t41);
        append(button0, span1);
        insert(target, t43, anchor);
        insert(target, div23, anchor);
        append(div23, div22);
        append(div22, table);
        append(table, thead);
        append(table, t46);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(td0, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(tr1, t47);
        append(tr1, td1);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
          detach(t2);
          detach(div4);
          detach(t8);
          detach(div9);
          detach(t21);
          detach(div12);
          detach(t27);
          detach(div15);
          detach(t33);
          detach(div18);
          detach(t39);
          detach(div21);
          detach(t43);
          detach(div23);
        }
        destroy_component(icon0);
        destroy_component(icon1);
      }
    };
  }
  function create_if_block_228(ctx) {
    let label0;
    let t1;
    let table0;
    let thead0;
    let t12;
    let tbody0;
    let tr1;
    let td0;
    let button0;
    let span0;
    let icon0;
    let t13;
    let td1;
    let t15;
    let td2;
    let t17;
    let td3;
    let t19;
    let td4;
    let t21;
    let td5;
    let t23;
    let tr2;
    let t25;
    let label1;
    let t27;
    let table1;
    let thead1;
    let t38;
    let tbody1;
    let tr4;
    let td7;
    let button2;
    let span1;
    let icon1;
    let t39;
    let td8;
    let t40;
    let td9;
    let t41;
    let td10;
    let t42;
    let td11;
    let t43;
    let td12;
    let t44;
    let tr5;
    let t46;
    let label2;
    let t48;
    let table2;
    let thead2;
    let t59;
    let tbody2;
    let tr7;
    let td14;
    let button4;
    let span2;
    let icon2;
    let t60;
    let td15;
    let t61;
    let td16;
    let t62;
    let td17;
    let t63;
    let td18;
    let t64;
    let td19;
    let t65;
    let tr8;
    let current;
    icon0 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon1 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        label0 = element("label");
        label0.innerHTML = `<h6 class="title is-6">Program S1</h6>`;
        t1 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th></th> <th>Nama Perguruan Tinggi</th> <th>Bidang Ilmu</th> <th>Tahun Masuk</th> <th>Tahun Lulus</th> <th>Judul Skripsi/Tesis/Disertasi</th></tr>`;
        t12 = space();
        tbody0 = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t13 = space();
        td1 = element("td");
        td1.textContent = "Universitas Internasional Semen\n                                       Indonesia";
        t15 = space();
        td2 = element("td");
        td2.textContent = "Informatika";
        t17 = space();
        td3 = element("td");
        td3.textContent = "2018";
        t19 = space();
        td4 = element("td");
        td4.textContent = "2024";
        t21 = space();
        td5 = element("td");
        td5.textContent = "Perancangan Sistem Informasi LPPM UISI\n                                       Menggunakan Metode Incremental";
        t23 = space();
        tr2 = element("tr");
        tr2.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t25 = space();
        label1 = element("label");
        label1.innerHTML = `<h6 class="title is-6">Program S2</h6>`;
        t27 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th></th> <th>Nama Perguruan Tinggi</th> <th>Bidang Ilmu</th> <th>Tahun Masuk</th> <th>Tahun Lulus</th> <th>Judul Skripsi/Tesis/Disertasi</th></tr>`;
        t38 = space();
        tbody1 = element("tbody");
        tr4 = element("tr");
        td7 = element("td");
        button2 = element("button");
        span1 = element("span");
        create_component(icon1.$$.fragment);
        t39 = space();
        td8 = element("td");
        t40 = space();
        td9 = element("td");
        t41 = space();
        td10 = element("td");
        t42 = space();
        td11 = element("td");
        t43 = space();
        td12 = element("td");
        t44 = space();
        tr5 = element("tr");
        tr5.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t46 = space();
        label2 = element("label");
        label2.innerHTML = `<h6 class="title is-6">Program S3</h6>`;
        t48 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th></th> <th>Nama Perguruan Tinggi</th> <th>Bidang Ilmu</th> <th>Tahun Masuk</th> <th>Tahun Lulus</th> <th>Judul Skripsi/Tesis/Disertasi</th></tr>`;
        t59 = space();
        tbody2 = element("tbody");
        tr7 = element("tr");
        td14 = element("td");
        button4 = element("button");
        span2 = element("span");
        create_component(icon2.$$.fragment);
        t60 = space();
        td15 = element("td");
        t61 = space();
        td16 = element("td");
        t62 = space();
        td17 = element("td");
        t63 = space();
        td18 = element("td");
        t64 = space();
        td19 = element("td");
        t65 = space();
        tr8 = element("tr");
        tr8.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        attr(label0, "class", "label");
        attr(label0, "for", "label");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-danger is-small");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label1, "class", "label");
        attr(label1, "for", "label");
        attr(span1, "class", "icon");
        attr(button2, "class", "button is-danger is-small");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label2, "class", "label");
        attr(label2, "for", "label");
        attr(span2, "class", "icon");
        attr(button4, "class", "button is-danger is-small");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, label0, anchor);
        insert(target, t1, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t12);
        append(table0, tbody0);
        append(tbody0, tr1);
        append(tr1, td0);
        append(td0, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(tr1, t13);
        append(tr1, td1);
        append(tr1, t15);
        append(tr1, td2);
        append(tr1, t17);
        append(tr1, td3);
        append(tr1, t19);
        append(tr1, td4);
        append(tr1, t21);
        append(tr1, td5);
        append(tbody0, t23);
        append(tbody0, tr2);
        insert(target, t25, anchor);
        insert(target, label1, anchor);
        insert(target, t27, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t38);
        append(table1, tbody1);
        append(tbody1, tr4);
        append(tr4, td7);
        append(td7, button2);
        append(button2, span1);
        mount_component(icon1, span1, null);
        append(tr4, t39);
        append(tr4, td8);
        append(tr4, t40);
        append(tr4, td9);
        append(tr4, t41);
        append(tr4, td10);
        append(tr4, t42);
        append(tr4, td11);
        append(tr4, t43);
        append(tr4, td12);
        append(tbody1, t44);
        append(tbody1, tr5);
        insert(target, t46, anchor);
        insert(target, label2, anchor);
        insert(target, t48, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t59);
        append(table2, tbody2);
        append(tbody2, tr7);
        append(tr7, td14);
        append(td14, button4);
        append(button4, span2);
        mount_component(icon2, span2, null);
        append(tr7, t60);
        append(tr7, td15);
        append(tr7, t61);
        append(tr7, td16);
        append(tr7, t62);
        append(tr7, td17);
        append(tr7, t63);
        append(tr7, td18);
        append(tr7, t64);
        append(tr7, td19);
        append(tbody2, t65);
        append(tbody2, tr8);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(label0);
          detach(t1);
          detach(table0);
          detach(t25);
          detach(label1);
          detach(t27);
          detach(table1);
          detach(t46);
          detach(label2);
          detach(t48);
          detach(table2);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
      }
    };
  }
  function create_if_block_138(ctx) {
    let label0;
    let t1;
    let table0;
    let thead0;
    let t12;
    let tbody0;
    let tr1;
    let td0;
    let button0;
    let span0;
    let icon0;
    let t13;
    let td1;
    let t15;
    let td2;
    let t17;
    let td3;
    let t19;
    let td4;
    let t21;
    let td5;
    let t23;
    let tr2;
    let t25;
    let label1;
    let t27;
    let table1;
    let thead1;
    let t38;
    let tbody1;
    let tr4;
    let td7;
    let button2;
    let span1;
    let icon1;
    let t39;
    let td8;
    let t40;
    let td9;
    let t41;
    let td10;
    let t42;
    let td11;
    let t43;
    let td12;
    let t44;
    let tr5;
    let t46;
    let label2;
    let t48;
    let table2;
    let thead2;
    let t57;
    let tbody2;
    let tr7;
    let td14;
    let button4;
    let span2;
    let icon2;
    let t58;
    let td15;
    let t59;
    let td16;
    let t60;
    let td17;
    let t61;
    let td18;
    let t62;
    let tr8;
    let t64;
    let label3;
    let t66;
    let table3;
    let thead3;
    let t77;
    let tbody3;
    let tr10;
    let td20;
    let button6;
    let span3;
    let icon3;
    let t78;
    let td21;
    let t79;
    let td22;
    let t80;
    let td23;
    let t81;
    let td24;
    let t82;
    let td25;
    let t83;
    let tr11;
    let t85;
    let label4;
    let t87;
    let table4;
    let thead4;
    let t98;
    let tbody4;
    let tr13;
    let td27;
    let button8;
    let span4;
    let icon4;
    let t99;
    let td28;
    let t100;
    let td29;
    let t101;
    let td30;
    let t102;
    let td31;
    let t103;
    let td32;
    let t104;
    let tr14;
    let t106;
    let label5;
    let t108;
    let table5;
    let thead5;
    let t119;
    let tbody5;
    let tr16;
    let td34;
    let button10;
    let span5;
    let icon5;
    let t120;
    let td35;
    let t121;
    let td36;
    let t122;
    let td37;
    let t123;
    let td38;
    let t124;
    let td39;
    let t125;
    let tr17;
    let current;
    icon0 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon1 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon4 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon5 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        label0 = element("label");
        label0.innerHTML = `<h6 class="title is-6">Pengalaman Penelitian</h6>`;
        t1 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th></th> <th>Tahun</th> <th>Judul Penelitian</th> <th>Role</th> <th>Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t12 = space();
        tbody0 = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t13 = space();
        td1 = element("td");
        td1.textContent = "2018";
        t15 = space();
        td2 = element("td");
        td2.textContent = "Perancangan Sistem Informasi LPPM UISI\n                                       Menggunakan Metode Incremental";
        t17 = space();
        td3 = element("td");
        td3.textContent = "Ketua";
        t19 = space();
        td4 = element("td");
        td4.textContent = "Internal UISI";
        t21 = space();
        td5 = element("td");
        td5.textContent = "Rp. 10.000.000";
        t23 = space();
        tr2 = element("tr");
        tr2.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t25 = space();
        label1 = element("label");
        label1.innerHTML = `<h6 class="title is-6">Pengalaman Penelitian</h6>`;
        t27 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th></th> <th>Tahun</th> <th>Judul Penelitian</th> <th>Role</th> <th>Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t38 = space();
        tbody1 = element("tbody");
        tr4 = element("tr");
        td7 = element("td");
        button2 = element("button");
        span1 = element("span");
        create_component(icon1.$$.fragment);
        t39 = space();
        td8 = element("td");
        t40 = space();
        td9 = element("td");
        t41 = space();
        td10 = element("td");
        t42 = space();
        td11 = element("td");
        td11.innerHTML = ``;
        t43 = space();
        td12 = element("td");
        t44 = space();
        tr5 = element("tr");
        tr5.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t46 = space();
        label2 = element("label");
        label2.innerHTML = `<h6 class="title is-6">Pengalaman Diseminasi Ilmiah dalam Pertemuan /
                                 Pameran</h6>`;
        t48 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th></th> <th>Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th>Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t57 = space();
        tbody2 = element("tbody");
        tr7 = element("tr");
        td14 = element("td");
        button4 = element("button");
        span2 = element("span");
        create_component(icon2.$$.fragment);
        t58 = space();
        td15 = element("td");
        t59 = space();
        td16 = element("td");
        t60 = space();
        td17 = element("td");
        t61 = space();
        td18 = element("td");
        td18.innerHTML = ``;
        t62 = space();
        tr8 = element("tr");
        tr8.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t64 = space();
        label3 = element("label");
        label3.innerHTML = `<h6 class="title is-6">Pengalaman Publikasi Ilmiah dalam Jurnal (bukan
                                 Proceeding)</h6>`;
        t66 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th></th> <th>Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                       Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t77 = space();
        tbody3 = element("tbody");
        tr10 = element("tr");
        td20 = element("td");
        button6 = element("button");
        span3 = element("span");
        create_component(icon3.$$.fragment);
        t78 = space();
        td21 = element("td");
        t79 = space();
        td22 = element("td");
        t80 = space();
        td23 = element("td");
        t81 = space();
        td24 = element("td");
        t82 = space();
        td25 = element("td");
        t83 = space();
        tr11 = element("tr");
        tr11.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t85 = space();
        label4 = element("label");
        label4.innerHTML = `<h6 class="title is-6">Pengalaman Penulisan Buku</h6>`;
        t87 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th></th> <th>Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t98 = space();
        tbody4 = element("tbody");
        tr13 = element("tr");
        td27 = element("td");
        button8 = element("button");
        span4 = element("span");
        create_component(icon4.$$.fragment);
        t99 = space();
        td28 = element("td");
        t100 = space();
        td29 = element("td");
        t101 = space();
        td30 = element("td");
        t102 = space();
        td31 = element("td");
        td31.innerHTML = ``;
        t103 = space();
        td32 = element("td");
        t104 = space();
        tr14 = element("tr");
        tr14.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        t106 = space();
        label5 = element("label");
        label5.innerHTML = `<h6 class="title is-6">Pengalaman Hak Kekayaan Intelektual</h6>`;
        t108 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th></th> <th>Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t119 = space();
        tbody5 = element("tbody");
        tr16 = element("tr");
        td34 = element("td");
        button10 = element("button");
        span5 = element("span");
        create_component(icon5.$$.fragment);
        t120 = space();
        td35 = element("td");
        t121 = space();
        td36 = element("td");
        t122 = space();
        td37 = element("td");
        t123 = space();
        td38 = element("td");
        td38.innerHTML = ``;
        t124 = space();
        td39 = element("td");
        t125 = space();
        tr17 = element("tr");
        tr17.innerHTML = `<td colspan="6"><button class="button is-small is-success is-fullwidth">Tambah</button></td>`;
        attr(label0, "class", "label");
        attr(label0, "for", "label");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-danger is-small");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label1, "class", "label");
        attr(label1, "for", "label");
        attr(span1, "class", "icon");
        attr(button2, "class", "button is-danger is-small");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label2, "class", "label");
        attr(label2, "for", "label");
        attr(span2, "class", "icon");
        attr(button4, "class", "button is-danger is-small");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label3, "class", "label");
        attr(label3, "for", "label");
        attr(span3, "class", "icon");
        attr(button6, "class", "button is-danger is-small");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label4, "class", "label");
        attr(label4, "for", "label");
        attr(span4, "class", "icon");
        attr(button8, "class", "button is-danger is-small");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(label5, "class", "label");
        attr(label5, "for", "label");
        attr(span5, "class", "icon");
        attr(button10, "class", "button is-danger is-small");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, label0, anchor);
        insert(target, t1, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t12);
        append(table0, tbody0);
        append(tbody0, tr1);
        append(tr1, td0);
        append(td0, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(tr1, t13);
        append(tr1, td1);
        append(tr1, t15);
        append(tr1, td2);
        append(tr1, t17);
        append(tr1, td3);
        append(tr1, t19);
        append(tr1, td4);
        append(tr1, t21);
        append(tr1, td5);
        append(tbody0, t23);
        append(tbody0, tr2);
        insert(target, t25, anchor);
        insert(target, label1, anchor);
        insert(target, t27, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t38);
        append(table1, tbody1);
        append(tbody1, tr4);
        append(tr4, td7);
        append(td7, button2);
        append(button2, span1);
        mount_component(icon1, span1, null);
        append(tr4, t39);
        append(tr4, td8);
        append(tr4, t40);
        append(tr4, td9);
        append(tr4, t41);
        append(tr4, td10);
        append(tr4, t42);
        append(tr4, td11);
        append(tr4, t43);
        append(tr4, td12);
        append(tbody1, t44);
        append(tbody1, tr5);
        insert(target, t46, anchor);
        insert(target, label2, anchor);
        insert(target, t48, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t57);
        append(table2, tbody2);
        append(tbody2, tr7);
        append(tr7, td14);
        append(td14, button4);
        append(button4, span2);
        mount_component(icon2, span2, null);
        append(tr7, t58);
        append(tr7, td15);
        append(tr7, t59);
        append(tr7, td16);
        append(tr7, t60);
        append(tr7, td17);
        append(tr7, t61);
        append(tr7, td18);
        append(tbody2, t62);
        append(tbody2, tr8);
        insert(target, t64, anchor);
        insert(target, label3, anchor);
        insert(target, t66, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t77);
        append(table3, tbody3);
        append(tbody3, tr10);
        append(tr10, td20);
        append(td20, button6);
        append(button6, span3);
        mount_component(icon3, span3, null);
        append(tr10, t78);
        append(tr10, td21);
        append(tr10, t79);
        append(tr10, td22);
        append(tr10, t80);
        append(tr10, td23);
        append(tr10, t81);
        append(tr10, td24);
        append(tr10, t82);
        append(tr10, td25);
        append(tbody3, t83);
        append(tbody3, tr11);
        insert(target, t85, anchor);
        insert(target, label4, anchor);
        insert(target, t87, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t98);
        append(table4, tbody4);
        append(tbody4, tr13);
        append(tr13, td27);
        append(td27, button8);
        append(button8, span4);
        mount_component(icon4, span4, null);
        append(tr13, t99);
        append(tr13, td28);
        append(tr13, t100);
        append(tr13, td29);
        append(tr13, t101);
        append(tr13, td30);
        append(tr13, t102);
        append(tr13, td31);
        append(tr13, t103);
        append(tr13, td32);
        append(tbody4, t104);
        append(tbody4, tr14);
        insert(target, t106, anchor);
        insert(target, label5, anchor);
        insert(target, t108, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t119);
        append(table5, tbody5);
        append(tbody5, tr16);
        append(tr16, td34);
        append(td34, button10);
        append(button10, span5);
        mount_component(icon5, span5, null);
        append(tr16, t120);
        append(tr16, td35);
        append(tr16, t121);
        append(tr16, td36);
        append(tr16, t122);
        append(tr16, td37);
        append(tr16, t123);
        append(tr16, td38);
        append(tr16, t124);
        append(tr16, td39);
        append(tbody5, t125);
        append(tbody5, tr17);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        transition_in(icon4.$$.fragment, local);
        transition_in(icon5.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        transition_out(icon4.$$.fragment, local);
        transition_out(icon5.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(label0);
          detach(t1);
          detach(table0);
          detach(t25);
          detach(label1);
          detach(t27);
          detach(table1);
          detach(t46);
          detach(label2);
          detach(t48);
          detach(table2);
          detach(t64);
          detach(label3);
          detach(t66);
          detach(table3);
          detach(t85);
          detach(label4);
          detach(t87);
          detach(table4);
          detach(t106);
          detach(label5);
          detach(t108);
          detach(table5);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        destroy_component(icon4);
        destroy_component(icon5);
      }
    };
  }
  function create_default_slot23(ctx) {
    let h2;
    let t1;
    let hr0;
    let t2;
    let div42;
    let div30;
    let div29;
    let h40;
    let t4;
    let br0;
    let t5;
    let div6;
    let div1;
    let label0;
    let t8;
    let div0;
    let select0;
    let option0;
    let option1;
    let t11;
    let div3;
    let label1;
    let t13;
    let div2;
    let select1;
    let option2;
    let option3;
    let t16;
    let div5;
    let label2;
    let t18;
    let div4;
    let select2;
    let option4;
    let t20;
    let div9;
    let t26;
    let div12;
    let t32;
    let div14;
    let t35;
    let div17;
    let div16;
    let label8;
    let t37;
    let div15;
    let select3;
    let option5;
    let t39;
    let div28;
    let div27;
    let table;
    let thead;
    let t44;
    let tbody;
    let tr1;
    let td0;
    let button0;
    let span1;
    let icon0;
    let t45;
    let td1;
    let t47;
    let td2;
    let t49;
    let tr2;
    let td3;
    let button1;
    let span2;
    let icon1;
    let t50;
    let td4;
    let t52;
    let td5;
    let t54;
    let tr3;
    let td6;
    let button2;
    let span3;
    let icon2;
    let t55;
    let td7;
    let t57;
    let td8;
    let t59;
    let hr1;
    let t60;
    let div19;
    let t63;
    let div21;
    let t66;
    let div26;
    let div23;
    let label11;
    let t68;
    let div22;
    let label12;
    let input7;
    let t69;
    let span6;
    let span4;
    let icon3;
    let t70;
    let span5;
    let t72;
    let span7;
    let t74;
    let div25;
    let label13;
    let t76;
    let div24;
    let label14;
    let input8;
    let t77;
    let span10;
    let span8;
    let icon4;
    let t78;
    let span9;
    let t80;
    let span11;
    let t82;
    let div41;
    let div40;
    let h41;
    let t84;
    let br1;
    let t85;
    let div31;
    let current_block_type_index;
    let if_block;
    let t86;
    let div35;
    let div34;
    let div32;
    let t88;
    let div33;
    let button3;
    let span12;
    let icon5;
    let t89;
    let div39;
    let div38;
    let div36;
    let t91;
    let div37;
    let button4;
    let span13;
    let icon6;
    let t92;
    let div43;
    let current;
    icon0 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon1 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    icon4 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    const if_block_creators = [create_if_block20, create_else_block11];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (!/*profileBox*/
      ctx2[0])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    icon5 = new Icon_default({
      props: { id: "downArrow", src: downArrow }
    });
    icon6 = new Icon_default({
      props: { id: "downArrow", src: downArrow }
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pendaftaran Proposal";
        t1 = space();
        hr0 = element("hr");
        t2 = space();
        div42 = element("div");
        div30 = element("div");
        div29 = element("div");
        h40 = element("h4");
        h40.textContent = "Detail Proposal";
        t4 = space();
        br0 = element("br");
        t5 = space();
        div6 = element("div");
        div1 = element("div");
        label0 = element("label");
        label0.innerHTML = `<h6 class="title is-6">Jenis Proposal<span class="has-text-danger">*</span></h6>`;
        t8 = space();
        div0 = element("div");
        select0 = element("select");
        option0 = element("option");
        option0.textContent = "Proposal Awal";
        option1 = element("option");
        option1.textContent = "Proposal Lanjutan";
        t11 = space();
        div3 = element("div");
        label1 = element("label");
        label1.innerHTML = `<h6 class="title is-6">Jenis Kegiatan</h6>`;
        t13 = space();
        div2 = element("div");
        select1 = element("select");
        option2 = element("option");
        option2.textContent = "Penelitian";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat";
        t16 = space();
        div5 = element("div");
        label2 = element("label");
        label2.innerHTML = `<h6 class="title is-6">Jenis Skema</h6>`;
        t18 = space();
        div4 = element("div");
        select2 = element("select");
        option4 = element("option");
        option4.textContent = "Pilih jenis skema";
        t20 = space();
        div9 = element("div");
        div9.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Kelompok Keahlian</h6></label> <input class="input"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Topik</h6></label> <input class="input"/></div>`;
        t26 = space();
        div12 = element("div");
        div12.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Tanggal Mulai</h6></label> <input class="input" type="date"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Tanggal Selesai</h6></label> <input class="input" type="date"/></div>`;
        t32 = space();
        div14 = element("div");
        div14.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Biaya Penelitian</h6></label> <input class="input"/></div>`;
        t35 = space();
        div17 = element("div");
        div16 = element("div");
        label8 = element("label");
        label8.innerHTML = `<h6 class="title is-6">Anggota Tim</h6>`;
        t37 = space();
        div15 = element("div");
        select3 = element("select");
        option5 = element("option");
        option5.textContent = "Select dropdown";
        t39 = space();
        div28 = element("div");
        div27 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t44 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        button0 = element("button");
        span1 = element("span");
        create_component(icon0.$$.fragment);
        t45 = space();
        td1 = element("td");
        td1.textContent = "Ketua";
        t47 = space();
        td2 = element("td");
        td2.textContent = "Taris Rafiqi izatri";
        t49 = space();
        tr2 = element("tr");
        td3 = element("td");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t50 = space();
        td4 = element("td");
        td4.textContent = "Anggota";
        t52 = space();
        td5 = element("td");
        td5.textContent = "Tristan Byrne";
        t54 = space();
        tr3 = element("tr");
        td6 = element("td");
        button2 = element("button");
        span3 = element("span");
        create_component(icon2.$$.fragment);
        t55 = space();
        td7 = element("td");
        td7.textContent = "Anggota";
        t57 = space();
        td8 = element("td");
        td8.textContent = "Fariz Ghifari";
        t59 = space();
        hr1 = element("hr");
        t60 = space();
        div19 = element("div");
        div19.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Judul</h6></label> <input class="input"/></div>`;
        t63 = space();
        div21 = element("div");
        div21.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Abstrak</h6></label> <input class="input"/></div>`;
        t66 = space();
        div26 = element("div");
        div23 = element("div");
        label11 = element("label");
        label11.innerHTML = `<h6 class="title is-6">Proposal</h6>`;
        t68 = space();
        div22 = element("div");
        label12 = element("label");
        input7 = element("input");
        t69 = space();
        span6 = element("span");
        span4 = element("span");
        create_component(icon3.$$.fragment);
        t70 = space();
        span5 = element("span");
        span5.textContent = "Choose a file";
        t72 = space();
        span7 = element("span");
        span7.textContent = "No file chosen";
        t74 = space();
        div25 = element("div");
        label13 = element("label");
        label13.innerHTML = `<h6 class="title is-6">Rencana Aggaran Biaya</h6>`;
        t76 = space();
        div24 = element("div");
        label14 = element("label");
        input8 = element("input");
        t77 = space();
        span10 = element("span");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t78 = space();
        span9 = element("span");
        span9.textContent = "Choose a file";
        t80 = space();
        span11 = element("span");
        span11.textContent = "No file chosen";
        t82 = space();
        div41 = element("div");
        div40 = element("div");
        h41 = element("h4");
        h41.textContent = "Biodata Peneliti";
        t84 = space();
        br1 = element("br");
        t85 = space();
        div31 = element("div");
        if_block.c();
        t86 = space();
        div35 = element("div");
        div34 = element("div");
        div32 = element("div");
        div32.innerHTML = `<h6 class="subtitle is-6">Tristan Byrne</h6>`;
        t88 = space();
        div33 = element("div");
        button3 = element("button");
        span12 = element("span");
        create_component(icon5.$$.fragment);
        t89 = space();
        div39 = element("div");
        div38 = element("div");
        div36 = element("div");
        div36.innerHTML = `<h6 class="subtitle is-6">Fariz Ghifari</h6>`;
        t91 = space();
        div37 = element("div");
        button4 = element("button");
        span13 = element("span");
        create_component(icon6.$$.fragment);
        t92 = space();
        div43 = element("div");
        div43.innerHTML = `<p class="control"><button class="button is-info is-light">Simpan</button></p> <p class="control"><button class="button is-info">Submit</button></p>`;
        attr(h2, "class", "title is-2");
        attr(h40, "class", "subtitle is-4");
        attr(label0, "class", "label");
        attr(label0, "for", "label");
        option0.__value = "Proposal Awal";
        set_input_value(option0, option0.__value);
        option1.__value = "Proposal Lanjutan";
        set_input_value(option1, option1.__value);
        attr(div0, "class", "select is-fullwidth is-danger");
        attr(div1, "class", "column");
        attr(label1, "class", "label");
        attr(label1, "for", "label");
        option2.__value = "Penelitian";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat";
        set_input_value(option3, option3.__value);
        attr(div2, "class", "select is-fullwidth");
        attr(div3, "class", "column");
        attr(label2, "class", "label");
        attr(label2, "for", "label");
        option4.__value = "Pilih jenis skema";
        set_input_value(option4, option4.__value);
        attr(div4, "class", "select is-fullwidth");
        attr(div5, "class", "column");
        attr(div6, "class", "columns is-desktop");
        attr(div9, "class", "columns is-desktop");
        attr(div12, "class", "columns is-desktop");
        attr(div14, "class", "columns is-desktop");
        attr(label8, "class", "label");
        attr(label8, "for", "label");
        option5.__value = "Select dropdown";
        set_input_value(option5, option5.__value);
        attr(div15, "class", "select is-fullwidth");
        attr(div16, "class", "column");
        attr(div17, "class", "columns is-desktop");
        attr(span1, "class", "icon");
        attr(button0, "class", "button is-danger is-small");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-danger is-small");
        attr(span3, "class", "icon");
        attr(button2, "class", "button is-danger is-small");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div19, "class", "columns is-desktop");
        attr(div21, "class", "columns is-desktop");
        attr(label11, "class", "label");
        attr(label11, "for", "label");
        attr(input7, "class", "file-input");
        attr(input7, "type", "file");
        attr(input7, "name", "resume");
        attr(span4, "class", "file-icon");
        attr(span5, "class", "file-label");
        attr(span6, "class", "file-cta");
        attr(span7, "class", "file-name");
        attr(label12, "class", "file-label");
        attr(label12, "for", "fileRab");
        attr(div22, "class", "file has-name is-success");
        attr(div23, "class", "column");
        attr(label13, "class", "label");
        attr(label13, "for", "label");
        attr(input8, "class", "file-input");
        attr(input8, "type", "file");
        attr(input8, "name", "resume");
        attr(span8, "class", "file-icon");
        attr(span9, "class", "file-label");
        attr(span10, "class", "file-cta");
        attr(span11, "class", "file-name");
        attr(label14, "class", "file-label");
        attr(label14, "for", "fileRab");
        attr(div24, "class", "file has-name is-success");
        attr(div25, "class", "column");
        attr(div26, "class", "columns is-desktop");
        attr(div27, "class", "column");
        attr(div28, "class", "columns is-desktop");
        attr(div29, "class", "box");
        attr(div30, "class", "column");
        attr(h41, "class", "subtitle is-4");
        attr(div31, "class", "box profileBox");
        attr(div32, "class", "column");
        attr(span12, "class", "icon");
        attr(button3, "class", "button is-info is-small");
        attr(div33, "class", "column is-1");
        attr(div34, "class", "columns");
        attr(div35, "class", "box profileBox");
        attr(div36, "class", "column");
        attr(span13, "class", "icon");
        attr(button4, "class", "button is-info is-small");
        attr(div37, "class", "column is-1");
        attr(div38, "class", "columns");
        attr(div39, "class", "box profileBox");
        attr(div40, "class", "box boxBiodataPeneliti svelte-hnk4gk");
        attr(div41, "class", "column");
        attr(div42, "class", "columns is-desktop");
        attr(div43, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr0, anchor);
        insert(target, t2, anchor);
        insert(target, div42, anchor);
        append(div42, div30);
        append(div30, div29);
        append(div29, h40);
        append(div29, t4);
        append(div29, br0);
        append(div29, t5);
        append(div29, div6);
        append(div6, div1);
        append(div1, label0);
        append(div1, t8);
        append(div1, div0);
        append(div0, select0);
        append(select0, option0);
        append(select0, option1);
        append(div6, t11);
        append(div6, div3);
        append(div3, label1);
        append(div3, t13);
        append(div3, div2);
        append(div2, select1);
        append(select1, option2);
        append(select1, option3);
        append(div6, t16);
        append(div6, div5);
        append(div5, label2);
        append(div5, t18);
        append(div5, div4);
        append(div4, select2);
        append(select2, option4);
        append(div29, t20);
        append(div29, div9);
        append(div29, t26);
        append(div29, div12);
        append(div29, t32);
        append(div29, div14);
        append(div29, t35);
        append(div29, div17);
        append(div17, div16);
        append(div16, label8);
        append(div16, t37);
        append(div16, div15);
        append(div15, select3);
        append(select3, option5);
        append(div29, t39);
        append(div29, div28);
        append(div28, div27);
        append(div27, table);
        append(table, thead);
        append(table, t44);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(td0, button0);
        append(button0, span1);
        mount_component(icon0, span1, null);
        append(tr1, t45);
        append(tr1, td1);
        append(tr1, t47);
        append(tr1, td2);
        append(tbody, t49);
        append(tbody, tr2);
        append(tr2, td3);
        append(td3, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(tr2, t50);
        append(tr2, td4);
        append(tr2, t52);
        append(tr2, td5);
        append(tbody, t54);
        append(tbody, tr3);
        append(tr3, td6);
        append(td6, button2);
        append(button2, span3);
        mount_component(icon2, span3, null);
        append(tr3, t55);
        append(tr3, td7);
        append(tr3, t57);
        append(tr3, td8);
        append(div27, t59);
        append(div27, hr1);
        append(div27, t60);
        append(div27, div19);
        append(div27, t63);
        append(div27, div21);
        append(div27, t66);
        append(div27, div26);
        append(div26, div23);
        append(div23, label11);
        append(div23, t68);
        append(div23, div22);
        append(div22, label12);
        append(label12, input7);
        append(label12, t69);
        append(label12, span6);
        append(span6, span4);
        mount_component(icon3, span4, null);
        append(span6, t70);
        append(span6, span5);
        append(label12, t72);
        append(label12, span7);
        append(div26, t74);
        append(div26, div25);
        append(div25, label13);
        append(div25, t76);
        append(div25, div24);
        append(div24, label14);
        append(label14, input8);
        append(label14, t77);
        append(label14, span10);
        append(span10, span8);
        mount_component(icon4, span8, null);
        append(span10, t78);
        append(span10, span9);
        append(label14, t80);
        append(label14, span11);
        append(div42, t82);
        append(div42, div41);
        append(div41, div40);
        append(div40, h41);
        append(div40, t84);
        append(div40, br1);
        append(div40, t85);
        append(div40, div31);
        if_blocks[current_block_type_index].m(div31, null);
        append(div40, t86);
        append(div40, div35);
        append(div35, div34);
        append(div34, div32);
        append(div34, t88);
        append(div34, div33);
        append(div33, button3);
        append(button3, span12);
        mount_component(icon5, span12, null);
        append(div40, t89);
        append(div40, div39);
        append(div39, div38);
        append(div38, div36);
        append(div38, t91);
        append(div38, div37);
        append(div37, button4);
        append(button4, span13);
        mount_component(icon6, span13, null);
        insert(target, t92, anchor);
        insert(target, div43, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div31, null);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        transition_in(icon4.$$.fragment, local);
        transition_in(if_block);
        transition_in(icon5.$$.fragment, local);
        transition_in(icon6.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        transition_out(icon4.$$.fragment, local);
        transition_out(if_block);
        transition_out(icon5.$$.fragment, local);
        transition_out(icon6.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr0);
          detach(t2);
          detach(div42);
          detach(t92);
          detach(div43);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        destroy_component(icon4);
        if_blocks[current_block_type_index].d();
        destroy_component(icon5);
        destroy_component(icon6);
      }
    };
  }
  function create_fragment48(ctx) {
    let article;
    let current;
    article = new Article_default({
      props: {
        $$slots: { default: [create_default_slot23] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, profileBox, tab3, tab2, tab1*/
        4111) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article, detaching);
      }
    };
  }
  var username2 = "";
  var email2 = "";
  function instance39($$self, $$props, $$invalidate) {
    let error = {};
    const form = { username: username2, email: email2 };
    function handleSubmit() {
      for (const [key, value] of Object.entries(form)) {
        if (!form[key]) {
          error[key] = "This field is required";
        } else {
          console.log("Sukses...");
        }
      }
    }
    let profileBox = false;
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(1, tab1 = true);
      $$invalidate(2, tab2 = false);
      $$invalidate(3, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(1, tab1 = false);
      $$invalidate(2, tab2 = true);
      $$invalidate(3, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(1, tab1 = false);
      $$invalidate(2, tab2 = false);
      $$invalidate(3, tab3 = true);
    }
    async function ProfileBoxOn() {
      $$invalidate(0, profileBox = true);
    }
    async function ProfileBoxOff() {
      $$invalidate(0, profileBox = false);
    }
    return [
      profileBox,
      tab1,
      tab2,
      tab3,
      clicktab1,
      clicktab2,
      clicktab3,
      ProfileBoxOn,
      ProfileBoxOff
    ];
  }
  var Testform = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance39, create_fragment48, safe_not_equal, {});
    }
  };
  var testform_default = Testform;

  // src/pages/dosen/Index.svelte
  function create_else_block12(ctx) {
    let e404;
    let current;
    e404 = new E404_default({});
    return {
      c() {
        create_component(e404.$$.fragment);
      },
      m(target, anchor) {
        mount_component(e404, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(e404.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(e404.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(e404, detaching);
      }
    };
  }
  function create_if_block_139(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        2 && switch_value !== (switch_value = /*cmp*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block21(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = home_default2;
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = home_default2)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_fragment49(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block21, create_if_block_139, create_else_block12];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (dirty & /*params*/
      1)
        show_if = null;
      if (show_if == null)
        show_if = !!(Object.keys(
          /*params*/
          ctx2[0]
        ).length === 0);
      if (show_if)
        return 0;
      if (
        /*cmp*/
        ctx2[1]
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance40($$self, $$props, $$invalidate) {
    let { params = {} } = $$props;
    let cmp;
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      1) {
        $:
          params, $$invalidate(1, cmp = dosen_exports[params["0"]] || null);
      }
    };
    return [params, cmp];
  }
  var Index4 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance40, create_fragment49, safe_not_equal, { params: 0 });
    }
  };
  var Index_default4 = Index4;

  // src/routes.js
  var routes_default = [
    { path: "/abdimas", page: Abdimas_default },
    { path: "/about", page: About_default },
    { path: "/authgoogle", page: AuthGoogle_default },
    { path: "/", page: Index_default },
    { path: "/login", page: Login_default },
    { path: "/logout", page: Logout_default },
    { path: "/penelitian", page: Penelitian_default },
    { path: "/register", page: Register_default },
    { path: "/testdashboard", page: Testdashboard_default },
    { path: "/testlogin", page: Testlogin_default },
    { path: "/tokenexpired", page: Tokenexpired_default },
    { path: "/verify", page: Verify_default },
    { path: "/admin/:0", page: Index_default2 },
    { path: "/auth/:0", page: Index_default3 },
    { path: "/dosen/:0", page: Index_default4 }
  ];

  // src/modules/Navbar.svelte
  init_define_process();

  // src/modules/Sidebar.svelte
  init_define_process();

  // src/store/menu.js
  init_define_process();
  var admin = [
    {
      title: "Dashboard",
      href: "/admin"
    },
    {
      title: "User Management",
      href: "/admin/usersmanagement"
    },
    {
      title: "Proposal Management",
      href: "/admin/proposalmanagement"
    }
  ];
  var dosen = [
    {
      title: "Dashboard",
      href: "/dosen"
    },
    {
      title: "Profile",
      href: "/dosen/profile"
    },
    {
      title: "Proposal PPM",
      href: "/dosen/proposalppm"
    },
    {
      title: "Ongoing PPM",
      href: "/dosen/ongoingppm"
    },
    {
      title: "Completed PPM",
      href: "/dosen/completedppm"
    }
  ];
  var menu_default = {
    admin,
    dosen
  };

  // src/modules/Sidebar.svelte
  function get_each_context15(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i];
    return child_ctx;
  }
  function create_each_block15(ctx) {
    let ul;
    let li;
    let a;
    let t_value = (
      /*item*/
      ctx[2].title + ""
    );
    let t;
    let a_id_value;
    let a_href_value;
    return {
      c() {
        ul = element("ul");
        li = element("li");
        a = element("a");
        t = text(t_value);
        attr(a, "id", a_id_value = /*item*/
        ctx[2].title === "Dashboard" ? "dashboard" : null);
        attr(a, "href", a_href_value = /*item*/
        ctx[2].href);
        attr(a, "class", "svelte-l83cqz");
        attr(ul, "class", "menu-list svelte-l83cqz");
      },
      m(target, anchor) {
        insert(target, ul, anchor);
        append(ul, li);
        append(li, a);
        append(a, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*items*/
        1 && t_value !== (t_value = /*item*/
        ctx2[2].title + ""))
          set_data(t, t_value);
        if (dirty & /*items*/
        1 && a_id_value !== (a_id_value = /*item*/
        ctx2[2].title === "Dashboard" ? "dashboard" : null)) {
          attr(a, "id", a_id_value);
        }
        if (dirty & /*items*/
        1 && a_href_value !== (a_href_value = /*item*/
        ctx2[2].href)) {
          attr(a, "href", a_href_value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(ul);
        }
      }
    };
  }
  function create_if_block_140(ctx) {
    let br;
    let t0;
    let p;
    let t2;
    let ul;
    return {
      c() {
        br = element("br");
        t0 = space();
        p = element("p");
        p.textContent = "Evaluator";
        t2 = space();
        ul = element("ul");
        ul.innerHTML = `<li><a href="/dosen/approvalmanagement" class="svelte-l83cqz">Approval Management</a></li>`;
        attr(p, "class", "menu-label svelte-l83cqz");
        attr(ul, "class", "menu-list svelte-l83cqz");
      },
      m(target, anchor) {
        insert(target, br, anchor);
        insert(target, t0, anchor);
        insert(target, p, anchor);
        insert(target, t2, anchor);
        insert(target, ul, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(br);
          detach(t0);
          detach(p);
          detach(t2);
          detach(ul);
        }
      }
    };
  }
  function create_if_block22(ctx) {
    let p;
    let t1;
    let ul;
    return {
      c() {
        p = element("p");
        p.textContent = "Website Settings";
        t1 = space();
        ul = element("ul");
        ul.innerHTML = `<li><a href="/admin/pengumuman" class="svelte-l83cqz">Pengumuman</a></li> <li><a href="/admin/aboutuisi" class="svelte-l83cqz">About UISI</a></li> <li><a href="/admin/template" class="svelte-l83cqz">Template</a></li>`;
        attr(p, "class", "menu-label svelte-l83cqz");
        attr(ul, "class", "menu-list svelte-l83cqz");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        insert(target, t1, anchor);
        insert(target, ul, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
          detach(t1);
          detach(ul);
        }
      }
    };
  }
  function create_fragment50(ctx) {
    let aside;
    let p;
    let t1;
    let t2;
    let t3;
    let t4;
    let br;
    let t5;
    let ul;
    let each_value = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block15(get_each_context15(ctx, each_value, i));
    }
    let if_block0 = (
      /*role*/
      (ctx[1] === "Ka.Departemen" || /*role*/
      ctx[1] === "Ka.LPPM" || /*role*/
      ctx[1] === "Ka.PusatKajian" || /*role*/
      ctx[1] === "reviewer") && create_if_block_140(ctx)
    );
    let if_block1 = (
      /*role*/
      ctx[1] === "admin" && create_if_block22(ctx)
    );
    return {
      c() {
        aside = element("aside");
        p = element("p");
        p.textContent = "General";
        t1 = space();
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t2 = space();
        if (if_block0)
          if_block0.c();
        t3 = space();
        if (if_block1)
          if_block1.c();
        t4 = space();
        br = element("br");
        t5 = space();
        ul = element("ul");
        ul.innerHTML = `<button class="button is-light is-fullwidth" href="/logout">Logout</button>`;
        attr(p, "class", "menu-label svelte-l83cqz");
        attr(ul, "class", "menu-list");
        attr(aside, "class", "menu svelte-l83cqz");
      },
      m(target, anchor) {
        insert(target, aside, anchor);
        append(aside, p);
        append(aside, t1);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(aside, null);
          }
        }
        append(aside, t2);
        if (if_block0)
          if_block0.m(aside, null);
        append(aside, t3);
        if (if_block1)
          if_block1.m(aside, null);
        append(aside, t4);
        append(aside, br);
        append(aside, t5);
        append(aside, ul);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*items*/
        1) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context15(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block15(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(aside, t2);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(aside);
        }
        destroy_each(each_blocks, detaching);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function instance41($$self, $$props, $$invalidate) {
    const role = localStorage.getItem("role");
    let items;
    if (role === "admin")
      items = menu_default["admin"];
    else
      items = menu_default["dosen"];
    return [items, role];
  }
  var Sidebar = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance41, create_fragment50, safe_not_equal, {});
    }
  };
  var Sidebar_default = Sidebar;

  // src/modules/Navbarmenu.svelte
  init_define_process();
  function create_else_block13(ctx) {
    let div1;
    return {
      c() {
        div1 = element("div");
        div1.innerHTML = `<div class="buttons"><a class="button is-info is-fullwidth" href="/login">Login</a></div>`;
        attr(div1, "class", "navbar-item");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
      }
    };
  }
  function create_if_block23(ctx) {
    let div1;
    let a0;
    let icon;
    let t0;
    let t1_value = (
      /*username*/
      (ctx[4] || /*$isUsername*/
      ctx[2]) + ""
    );
    let t1;
    let t2;
    let div0;
    let a1;
    let t4;
    let hr;
    let t5;
    let a2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { src: accountRounded } });
    return {
      c() {
        div1 = element("div");
        a0 = element("a");
        create_component(icon.$$.fragment);
        t0 = text("\r\n                     \xA0\r\n                     ");
        t1 = text(t1_value);
        t2 = space();
        div0 = element("div");
        a1 = element("a");
        a1.textContent = "Dashboard";
        t4 = space();
        hr = element("hr");
        t5 = space();
        a2 = element("a");
        a2.textContent = "Logout";
        attr(a0, "class", "navbar-link");
        attr(a1, "class", "navbar-item");
        attr(hr, "class", "navbar-divider");
        attr(a2, "class", "navbar-item has-text-danger");
        attr(a2, "href", "/logout");
        attr(div0, "class", "navbar-dropdown");
        attr(div1, "class", "navbar-item has-dropdown is-hoverable");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, a0);
        mount_component(icon, a0, null);
        append(a0, t0);
        append(a0, t1);
        append(div1, t2);
        append(div1, div0);
        append(div0, a1);
        append(div0, t4);
        append(div0, hr);
        append(div0, t5);
        append(div0, a2);
        current = true;
        if (!mounted) {
          dispose = listen(
            a1,
            "click",
            /*gotoDashboard*/
            ctx[6]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*$isUsername*/
        4) && t1_value !== (t1_value = /*username*/
        (ctx2[4] || /*$isUsername*/
        ctx2[2]) + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment51(ctx) {
    let header;
    let nav;
    let div0;
    let a0;
    let t0;
    let a1;
    let t3;
    let div6;
    let div5;
    let a2;
    let t5;
    let a3;
    let t7;
    let div2;
    let t15;
    let div4;
    let t23;
    let current_block_type_index;
    let if_block;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block23, create_else_block13];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*$isLogin*/
        ctx2[1] || /*token*/
        ctx2[3]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        header = element("header");
        nav = element("nav");
        div0 = element("div");
        a0 = element("a");
        a0.innerHTML = `<img src="/img/logo-uisi-negatif.png" width="112" height="28" alt="Logo UISI"/>`;
        t0 = space();
        a1 = element("a");
        a1.innerHTML = `<span></span> <span></span> <span></span>`;
        t3 = space();
        div6 = element("div");
        div5 = element("div");
        a2 = element("a");
        a2.textContent = "Beranda";
        t5 = space();
        a3 = element("a");
        a3.textContent = "About UISI";
        t7 = space();
        div2 = element("div");
        div2.innerHTML = `<a class="navbar-link">Penelitian</a> <div class="navbar-dropdown"><a class="navbar-item" href="/penelitian">Penelitian Internal</a> <a class="navbar-item" href="/penelitian">Penelitian Eksternal</a> <a class="navbar-item" href="/penelitian">Penelitian Mandiri</a></div>`;
        t15 = space();
        div4 = element("div");
        div4.innerHTML = `<a class="navbar-link">Pengabdian Masyarakat</a> <div class="navbar-dropdown"><a class="navbar-item" href="/abdimas">Pengabdian Masyarakat Internal</a> <a class="navbar-item" href="/abdimas">Pengabdian Masyarakat Eksternal</a> <a class="navbar-item" href="/abdimas">Pengabdian Masyarakat Mandiri</a></div>`;
        t23 = space();
        if_block.c();
        attr(a0, "class", "navbar-item");
        attr(a0, "href", "/");
        attr(a1, "class", "navbar-burger");
        attr(a1, "id", "burger");
        attr(div0, "class", "navbar-brand");
        attr(a2, "class", "navbar-item");
        attr(a2, "href", "/");
        attr(a3, "class", "navbar-item");
        attr(a3, "href", "/about");
        attr(div2, "class", "navbar-item has-dropdown is-hoverable");
        attr(div4, "class", "navbar-item has-dropdown is-hoverable");
        attr(div5, "class", "navbar-end");
        attr(div6, "class", "navbar-menu");
        attr(div6, "id", "nav-links");
        attr(nav, "class", "navbar is-dark svelte-gab4e");
        attr(header, "class", "svelte-gab4e");
      },
      m(target, anchor) {
        insert(target, header, anchor);
        append(header, nav);
        append(nav, div0);
        append(div0, a0);
        append(div0, t0);
        append(div0, a1);
        append(nav, t3);
        append(nav, div6);
        append(div6, div5);
        append(div5, a2);
        append(div5, t5);
        append(div5, a3);
        append(div5, t7);
        append(div5, div2);
        append(div5, t15);
        append(div5, div4);
        append(div5, t23);
        if_blocks[current_block_type_index].m(div5, null);
        ctx[7](div6);
        current = true;
        if (!mounted) {
          dispose = listen(
            a1,
            "click",
            /*test*/
            ctx[5]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div5, null);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(header);
        }
        if_blocks[current_block_type_index].d();
        ctx[7](null);
        mounted = false;
        dispose();
      }
    };
  }
  function instance42($$self, $$props, $$invalidate) {
    let $route;
    let $isLogin;
    let $isUsername;
    component_subscribe($$self, route, ($$value) => $$invalidate(8, $route = $$value));
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(1, $isLogin = $$value));
    component_subscribe($$self, isUsername, ($$value) => $$invalidate(2, $isUsername = $$value));
    let token = localStorage.getItem("token");
    let username3 = localStorage.getItem("username");
    let navbarMenu;
    function test() {
      navbarMenu.classList.toggle("is-active");
    }
    function gotoDashboard() {
      const role = localStorage.getItem("role");
      if (role === "admin")
        $route("/admin");
      else
        $route("/dosen");
    }
    function div6_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        navbarMenu = $$value;
        $$invalidate(0, navbarMenu);
      });
    }
    return [
      navbarMenu,
      $isLogin,
      $isUsername,
      token,
      username3,
      test,
      gotoDashboard,
      div6_binding
    ];
  }
  var Navbarmenu = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance42, create_fragment51, safe_not_equal, {});
    }
  };
  var Navbarmenu_default = Navbarmenu;

  // src/App.svelte
  function create_if_block_141(ctx) {
    let sidebar;
    let current;
    sidebar = new Sidebar_default({});
    return {
      c() {
        create_component(sidebar.$$.fragment);
      },
      m(target, anchor) {
        mount_component(sidebar, target, anchor);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(sidebar.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(sidebar.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(sidebar, detaching);
      }
    };
  }
  function create_if_block24(ctx) {
    let main;
    let switch_instance;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[0]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[1]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        main = element("main");
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
      },
      m(target, anchor) {
        insert(target, main, anchor);
        if (switch_instance)
          mount_component(switch_instance, main, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        1 && switch_value !== (switch_value = /*cmp*/
        ctx2[0])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, main, null);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          2)
            switch_instance_changes.params = /*params*/
            ctx2[1];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(main);
        }
        if (switch_instance)
          destroy_component(switch_instance);
      }
    };
  }
  function create_fragment52(ctx) {
    let navbarmenu;
    let t0;
    let t1;
    let if_block1_anchor;
    let current;
    navbarmenu = new Navbarmenu_default({});
    let if_block0 = (
      /*token*/
      ctx[2] && !/*inBeranda*/
      ctx[3] && create_if_block_141(ctx)
    );
    let if_block1 = (
      /*cmp*/
      ctx[0] && create_if_block24(ctx)
    );
    return {
      c() {
        create_component(navbarmenu.$$.fragment);
        t0 = space();
        if (if_block0)
          if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
      },
      m(target, anchor) {
        mount_component(navbarmenu, target, anchor);
        insert(target, t0, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*token*/
          ctx2[2] && !/*inBeranda*/
          ctx2[3]
        ) {
          if (if_block0) {
            if (dirty & /*token, inBeranda*/
            12) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_141(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t1.parentNode, t1);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*cmp*/
          ctx2[0]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty & /*cmp*/
            1) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block24(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(navbarmenu.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(navbarmenu.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(if_block1_anchor);
        }
        destroy_component(navbarmenu, detaching);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function instance43($$self, $$props, $$invalidate) {
    let $route;
    component_subscribe($$self, route, ($$value) => $$invalidate(5, $route = $$value));
    let cmp, params;
    let token, inBeranda, role;
    const router2 = router_default(routes_default, E404_default, (route2) => {
      $$invalidate(0, cmp = route2.page);
      $$invalidate(1, params = route2.params);
      auth = localStorage.getItem("auth");
      $$invalidate(2, token = localStorage.getItem("token"));
      role = localStorage.getItem("role");
      const paths = ["/", "/about", "/penelitian", "/abdimas"];
      $$invalidate(3, inBeranda = paths.some((path) => path === location.pathname));
    });
    set_store_value(route, $route = router2.route, $route);
    $route(location.pathname + location.search);
    router2.listen();
    onDestroy(router2.unlisten);
    if (location.pathname === "/") {
      if (!token) {
        $route("/");
      } else {
        if (role === "admin")
          $route("/admin");
        else
          $route("/dosen");
      }
    }
    return [cmp, params, token, inBeranda];
  }
  var App = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance43, create_fragment52, safe_not_equal, {});
    }
  };
  var App_default = App;

  // src/main.js
  var app = new App_default({
    target: document.body
  });
  var main_default = app;
})();
