(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // <define:process>
  var define_process_default;
  var init_define_process = __esm({
    "<define:process>"() {
      define_process_default = { ENV: { production: false, sw: false } };
    }
  });

  // src/pages/auth/index.js
  var require_auth = __commonJS({
    "src/pages/auth/index.js"() {
      init_define_process();
    }
  });

  // src/main.js
  init_define_process();

  // src/App.svelte
  init_define_process();

  // node_modules/svelte/src/runtime/internal/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/animations.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/utils.js
  init_define_process();
  function noop() {
  }
  var identity = (x) => x;
  function assign(tar, src) {
    for (const k in src)
      tar[k] = src[k];
    return (
      /** @type {T & S} */
      tar
    );
  }
  function run(fn) {
    return fn();
  }
  function blank_object() {
    return /* @__PURE__ */ Object.create(null);
  }
  function run_all(fns) {
    fns.forEach(run);
  }
  function is_function(thing) {
    return typeof thing === "function";
  }
  function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
  }
  var src_url_equal_anchor;
  function src_url_equal(element_src, url) {
    if (element_src === url)
      return true;
    if (!src_url_equal_anchor) {
      src_url_equal_anchor = document.createElement("a");
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
  }
  function is_empty(obj) {
    return Object.keys(obj).length === 0;
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      for (const callback of callbacks) {
        callback(void 0);
      }
      return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
  }
  function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
  }
  function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
      const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
      return definition[0](slot_ctx);
    }
  }
  function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
  }
  function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
      const lets = definition[2](fn(dirty));
      if ($$scope.dirty === void 0) {
        return lets;
      }
      if (typeof lets === "object") {
        const merged = [];
        const len = Math.max($$scope.dirty.length, lets.length);
        for (let i = 0; i < len; i += 1) {
          merged[i] = $$scope.dirty[i] | lets[i];
        }
        return merged;
      }
      return $$scope.dirty | lets;
    }
    return $$scope.dirty;
  }
  function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
      const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
      slot.p(slot_context, slot_changes);
    }
  }
  function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
      const dirty = [];
      const length = $$scope.ctx.length / 32;
      for (let i = 0; i < length; i++) {
        dirty[i] = -1;
      }
      return dirty;
    }
    return -1;
  }
  function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
      if (k[0] !== "$")
        result[k] = props[k];
    return result;
  }
  function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
  }
  function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
  }

  // node_modules/svelte/src/runtime/internal/environment.js
  init_define_process();
  var is_client = typeof window !== "undefined";
  var now = is_client ? () => window.performance.now() : () => Date.now();
  var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;

  // node_modules/svelte/src/runtime/internal/loop.js
  init_define_process();
  var tasks = /* @__PURE__ */ new Set();
  function run_tasks(now2) {
    tasks.forEach((task) => {
      if (!task.c(now2)) {
        tasks.delete(task);
        task.f();
      }
    });
    if (tasks.size !== 0)
      raf(run_tasks);
  }
  function loop(callback) {
    let task;
    if (tasks.size === 0)
      raf(run_tasks);
    return {
      promise: new Promise((fulfill) => {
        tasks.add(task = { c: callback, f: fulfill });
      }),
      abort() {
        tasks.delete(task);
      }
    };
  }

  // node_modules/svelte/src/runtime/internal/style_manager.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/dom.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/globals.js
  init_define_process();
  var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
    // @ts-ignore Node typings have this
    global
  );

  // node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
  var ResizeObserverSingleton = class _ResizeObserverSingleton {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    _listeners = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;
    /**
     * @private
     * @type {ResizeObserver}
     */
    _observer = void 0;
    /** @type {ResizeObserverOptions} */
    options;
    /** @param {ResizeObserverOptions} options */
    constructor(options) {
      this.options = options;
    }
    /**
     * @param {Element} element
     * @param {import('./private.js').Listener} listener
     * @returns {() => void}
     */
    observe(element2, listener) {
      this._listeners.set(element2, listener);
      this._getObserver().observe(element2, this.options);
      return () => {
        this._listeners.delete(element2);
        this._observer.unobserve(element2);
      };
    }
    /**
     * @private
     */
    _getObserver() {
      return this._observer ?? (this._observer = new ResizeObserver((entries) => {
        for (const entry of entries) {
          _ResizeObserverSingleton.entries.set(entry.target, entry);
          this._listeners.get(entry.target)?.(entry);
        }
      }));
    }
  };
  ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

  // node_modules/svelte/src/runtime/internal/dom.js
  var is_hydrating = false;
  function start_hydrating() {
    is_hydrating = true;
  }
  function end_hydrating() {
    is_hydrating = false;
  }
  function append(target, node) {
    target.appendChild(node);
  }
  function get_root_for_style(node) {
    if (!node)
      return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && /** @type {ShadowRoot} */
    root.host) {
      return (
        /** @type {ShadowRoot} */
        root
      );
    }
    return node.ownerDocument;
  }
  function append_empty_stylesheet(node) {
    const style_element = element("style");
    style_element.textContent = "/* empty */";
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
  }
  function append_stylesheet(node, style) {
    append(
      /** @type {Document} */
      node.head || node,
      style
    );
    return style.sheet;
  }
  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }
  function detach(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    }
  }
  function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
      if (iterations[i])
        iterations[i].d(detaching);
    }
  }
  function element(name) {
    return document.createElement(name);
  }
  function svg_element(name) {
    return document.createElementNS("http://www.w3.org/2000/svg", name);
  }
  function text(data2) {
    return document.createTextNode(data2);
  }
  function space() {
    return text(" ");
  }
  function empty() {
    return text("");
  }
  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
  }
  function attr(node, attribute, value) {
    if (value == null)
      node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
      node.setAttribute(attribute, value);
  }
  function init_binding_group(group) {
    let _inputs;
    return {
      /* push */
      p(...inputs) {
        _inputs = inputs;
        _inputs.forEach((input) => group.push(input));
      },
      /* remove */
      r() {
        _inputs.forEach((input) => group.splice(group.indexOf(input), 1));
      }
    };
  }
  function to_number(value) {
    return value === "" ? null : +value;
  }
  function children(element2) {
    return Array.from(element2.childNodes);
  }
  function set_data(text2, data2) {
    data2 = "" + data2;
    if (text2.data === data2)
      return;
    text2.data = /** @type {string} */
    data2;
  }
  function set_input_value(input, value) {
    input.value = value == null ? "" : value;
  }
  function set_style(node, key, value, important) {
    if (value == null) {
      node.style.removeProperty(key);
    } else {
      node.style.setProperty(key, value, important ? "important" : "");
    }
  }
  function select_option(select, value, mounting) {
    for (let i = 0; i < select.options.length; i += 1) {
      const option = select.options[i];
      if (option.__value === value) {
        option.selected = true;
        return;
      }
    }
    if (!mounting || value !== void 0) {
      select.selectedIndex = -1;
    }
  }
  function select_value(select) {
    const selected_option = select.querySelector(":checked");
    return selected_option && selected_option.__value;
  }
  function toggle_class(element2, name, toggle) {
    element2.classList.toggle(name, !!toggle);
  }
  function custom_event(type, detail2, { bubbles = false, cancelable = false } = {}) {
    return new CustomEvent(type, { detail: detail2, bubbles, cancelable });
  }
  function get_custom_elements_slots(element2) {
    const result = {};
    element2.childNodes.forEach(
      /** @param {Element} node */
      (node) => {
        result[node.slot || "default"] = true;
      }
    );
    return result;
  }
  function construct_svelte_component(component, props) {
    return new component(props);
  }

  // node_modules/svelte/src/runtime/internal/style_manager.js
  var managed_styles = /* @__PURE__ */ new Map();
  var active = 0;
  function hash(str) {
    let hash2 = 5381;
    let i = str.length;
    while (i--)
      hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
    return hash2 >>> 0;
  }
  function create_style_information(doc, node) {
    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
    managed_styles.set(doc, info);
    return info;
  }
  function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = "{\n";
    for (let p = 0; p <= 1; p += step) {
      const t = a + (b - a) * ease(p);
      keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
    if (!rules[name]) {
      rules[name] = true;
      stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || "";
    node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
  }
  function delete_rule(node, name) {
    const previous = (node.style.animation || "").split(", ");
    const next = previous.filter(
      name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
      // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
      node.style.animation = next.join(", ");
      active -= deleted;
      if (!active)
        clear_rules();
    }
  }
  function clear_rules() {
    raf(() => {
      if (active)
        return;
      managed_styles.forEach((info) => {
        const { ownerNode } = info.stylesheet;
        if (ownerNode)
          detach(ownerNode);
      });
      managed_styles.clear();
    });
  }

  // node_modules/svelte/src/runtime/internal/await_block.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/transitions.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/scheduler.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/lifecycle.js
  init_define_process();
  var current_component;
  function set_current_component(component) {
    current_component = component;
  }
  function get_current_component() {
    if (!current_component)
      throw new Error("Function called outside component initialization");
    return current_component;
  }
  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
  }
  function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
  }

  // node_modules/svelte/src/runtime/internal/scheduler.js
  var dirty_components = [];
  var binding_callbacks = [];
  var render_callbacks = [];
  var flush_callbacks = [];
  var resolved_promise = /* @__PURE__ */ Promise.resolve();
  var update_scheduled = false;
  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush);
    }
  }
  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }
  function add_flush_callback(fn) {
    flush_callbacks.push(fn);
  }
  var seen_callbacks = /* @__PURE__ */ new Set();
  var flushidx = 0;
  function flush() {
    if (flushidx !== 0) {
      return;
    }
    const saved_component = current_component;
    do {
      try {
        while (flushidx < dirty_components.length) {
          const component = dirty_components[flushidx];
          flushidx++;
          set_current_component(component);
          update(component.$$);
        }
      } catch (e) {
        dirty_components.length = 0;
        flushidx = 0;
        throw e;
      }
      set_current_component(null);
      dirty_components.length = 0;
      flushidx = 0;
      while (binding_callbacks.length)
        binding_callbacks.pop()();
      for (let i = 0; i < render_callbacks.length; i += 1) {
        const callback = render_callbacks[i];
        if (!seen_callbacks.has(callback)) {
          seen_callbacks.add(callback);
          callback();
        }
      }
      render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
  }
  function update($$) {
    if ($$.fragment !== null) {
      $$.update();
      run_all($$.before_update);
      const dirty = $$.dirty;
      $$.dirty = [-1];
      $$.fragment && $$.fragment.p($$.ctx, dirty);
      $$.after_update.forEach(add_render_callback);
    }
  }
  function flush_render_callbacks(fns) {
    const filtered = [];
    const targets = [];
    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
    targets.forEach((c) => c());
    render_callbacks = filtered;
  }

  // node_modules/svelte/src/runtime/internal/transitions.js
  var promise;
  function wait() {
    if (!promise) {
      promise = Promise.resolve();
      promise.then(() => {
        promise = null;
      });
    }
    return promise;
  }
  function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
  }
  var outroing = /* @__PURE__ */ new Set();
  var outros;
  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros
      // parent group
    };
  }
  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }
    outros = outros.p;
  }
  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block);
      block.i(local);
    }
  }
  function transition_out(block, local, detach2, callback) {
    if (block && block.o) {
      if (outroing.has(block))
        return;
      outroing.add(block);
      outros.c.push(() => {
        outroing.delete(block);
        if (callback) {
          if (detach2)
            block.d(1);
          callback();
        }
      });
      block.o(local);
    } else if (callback) {
      callback();
    }
  }
  var null_transition = { duration: 0 };
  function create_in_transition(node, fn, params) {
    const options = { direction: "in" };
    let config = fn(node, params, options);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
      if (animation_name)
        delete_rule(node, animation_name);
    }
    function go() {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick: tick2 = noop,
        css
      } = config || null_transition;
      if (css)
        animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
      tick2(0, 1);
      const start_time = now() + delay;
      const end_time = start_time + duration;
      if (task)
        task.abort();
      running = true;
      add_render_callback(() => dispatch(node, true, "start"));
      task = loop((now2) => {
        if (running) {
          if (now2 >= end_time) {
            tick2(1, 0);
            dispatch(node, true, "end");
            cleanup();
            return running = false;
          }
          if (now2 >= start_time) {
            const t = easing((now2 - start_time) / duration);
            tick2(t, 1 - t);
          }
        }
        return running;
      });
    }
    let started = false;
    return {
      start() {
        if (started)
          return;
        started = true;
        delete_rule(node);
        if (is_function(config)) {
          config = config(options);
          wait().then(go);
        } else {
          go();
        }
      },
      invalidate() {
        started = false;
      },
      end() {
        if (running) {
          cleanup();
          running = false;
        }
      }
    };
  }
  function create_out_transition(node, fn, params) {
    const options = { direction: "out" };
    let config = fn(node, params, options);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    let original_inert_value;
    function go() {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick: tick2 = noop,
        css
      } = config || null_transition;
      if (css)
        animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
      const start_time = now() + delay;
      const end_time = start_time + duration;
      add_render_callback(() => dispatch(node, false, "start"));
      if ("inert" in node) {
        original_inert_value = /** @type {HTMLElement} */
        node.inert;
        node.inert = true;
      }
      loop((now2) => {
        if (running) {
          if (now2 >= end_time) {
            tick2(0, 1);
            dispatch(node, false, "end");
            if (!--group.r) {
              run_all(group.c);
            }
            return false;
          }
          if (now2 >= start_time) {
            const t = easing((now2 - start_time) / duration);
            tick2(1 - t, t);
          }
        }
        return running;
      });
    }
    if (is_function(config)) {
      wait().then(() => {
        config = config(options);
        go();
      });
    } else {
      go();
    }
    return {
      end(reset) {
        if (reset && "inert" in node) {
          node.inert = original_inert_value;
        }
        if (reset && config.tick) {
          config.tick(1, 0);
        }
        if (running) {
          if (animation_name)
            delete_rule(node, animation_name);
          running = false;
        }
      }
    };
  }

  // node_modules/svelte/src/runtime/internal/each.js
  init_define_process();
  function ensure_array_like(array_like_or_iterator) {
    return array_like_or_iterator?.length !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
  }

  // node_modules/svelte/src/runtime/internal/spread.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/ssr.js
  init_define_process();

  // node_modules/svelte/src/shared/boolean_attributes.js
  init_define_process();
  var _boolean_attributes = (
    /** @type {const} */
    [
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ]
  );
  var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

  // node_modules/svelte/src/shared/utils/names.js
  init_define_process();

  // node_modules/svelte/src/runtime/internal/Component.js
  init_define_process();
  function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== void 0) {
      component.$$.bound[index] = callback;
      callback(component.$$.ctx[index]);
    }
  }
  function create_component(block) {
    block && block.c();
  }
  function mount_component(component, target, anchor) {
    const { fragment, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
      flush_render_callbacks($$.after_update);
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching);
      $$.on_destroy = $$.fragment = null;
      $$.ctx = [];
    }
  }
  function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty.fill(0);
    }
    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
  }
  function init(component, options, instance46, create_fragment53, not_equal, props, append_styles = null, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
      fragment: null,
      ctx: [],
      // state
      props,
      update: noop,
      not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
      // everything else
      callbacks: blank_object(),
      dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance46 ? instance46(component, options.props || {}, (i, ret, ...rest) => {
      const value = rest.length ? rest[0] : ret;
      if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
        if (!$$.skip_bound && $$.bound[i])
          $$.bound[i](value);
        if (ready)
          make_dirty(component, i);
      }
      return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment53 ? create_fragment53($$.ctx) : false;
    if (options.target) {
      if (options.hydrate) {
        start_hydrating();
        const nodes = children(options.target);
        $$.fragment && $$.fragment.l(nodes);
        nodes.forEach(detach);
      } else {
        $$.fragment && $$.fragment.c();
      }
      if (options.intro)
        transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor);
      end_hydrating();
      flush();
    }
    set_current_component(parent_component);
  }
  var SvelteElement;
  if (typeof HTMLElement === "function") {
    SvelteElement = class extends HTMLElement {
      /** The Svelte component constructor */
      $$ctor;
      /** Slots */
      $$s;
      /** The Svelte component instance */
      $$c;
      /** Whether or not the custom element is connected */
      $$cn = false;
      /** Component props data */
      $$d = {};
      /** `true` if currently in the process of reflecting component props back to attributes */
      $$r = false;
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      $$p_d = {};
      /** @type {Record<string, Function[]>} Event listeners */
      $$l = {};
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      $$l_u = /* @__PURE__ */ new Map();
      constructor($$componentCtor, $$slots, use_shadow_dom) {
        super();
        this.$$ctor = $$componentCtor;
        this.$$s = $$slots;
        if (use_shadow_dom) {
          this.attachShadow({ mode: "open" });
        }
      }
      addEventListener(type, listener, options) {
        this.$$l[type] = this.$$l[type] || [];
        this.$$l[type].push(listener);
        if (this.$$c) {
          const unsub = this.$$c.$on(type, listener);
          this.$$l_u.set(listener, unsub);
        }
        super.addEventListener(type, listener, options);
      }
      removeEventListener(type, listener, options) {
        super.removeEventListener(type, listener, options);
        if (this.$$c) {
          const unsub = this.$$l_u.get(listener);
          if (unsub) {
            unsub();
            this.$$l_u.delete(listener);
          }
        }
      }
      async connectedCallback() {
        this.$$cn = true;
        if (!this.$$c) {
          let create_slot2 = function(name) {
            return () => {
              let node;
              const obj = {
                c: function create() {
                  node = element("slot");
                  if (name !== "default") {
                    attr(node, "name", name);
                  }
                },
                /**
                 * @param {HTMLElement} target
                 * @param {HTMLElement} [anchor]
                 */
                m: function mount(target, anchor) {
                  insert(target, node, anchor);
                },
                d: function destroy(detaching) {
                  if (detaching) {
                    detach(node);
                  }
                }
              };
              return obj;
            };
          };
          await Promise.resolve();
          if (!this.$$cn) {
            return;
          }
          const $$slots = {};
          const existing_slots = get_custom_elements_slots(this);
          for (const name of this.$$s) {
            if (name in existing_slots) {
              $$slots[name] = [create_slot2(name)];
            }
          }
          for (const attribute of this.attributes) {
            const name = this.$$g_p(attribute.name);
            if (!(name in this.$$d)) {
              this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
            }
          }
          for (const key in this.$$p_d) {
            if (!(key in this.$$d) && this[key] !== void 0) {
              this.$$d[key] = this[key];
              delete this[key];
            }
          }
          this.$$c = new this.$$ctor({
            target: this.shadowRoot || this,
            props: {
              ...this.$$d,
              $$slots,
              $$scope: {
                ctx: []
              }
            }
          });
          const reflect_attributes = () => {
            this.$$r = true;
            for (const key in this.$$p_d) {
              this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
              if (this.$$p_d[key].reflect) {
                const attribute_value = get_custom_element_value(
                  key,
                  this.$$d[key],
                  this.$$p_d,
                  "toAttribute"
                );
                if (attribute_value == null) {
                  this.removeAttribute(this.$$p_d[key].attribute || key);
                } else {
                  this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
                }
              }
            }
            this.$$r = false;
          };
          this.$$c.$$.after_update.push(reflect_attributes);
          reflect_attributes();
          for (const type in this.$$l) {
            for (const listener of this.$$l[type]) {
              const unsub = this.$$c.$on(type, listener);
              this.$$l_u.set(listener, unsub);
            }
          }
          this.$$l = {};
        }
      }
      // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
      // and setting attributes through setAttribute etc, this is helpful
      attributeChangedCallback(attr2, _oldValue, newValue) {
        if (this.$$r)
          return;
        attr2 = this.$$g_p(attr2);
        this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
        this.$$c?.$set({ [attr2]: this.$$d[attr2] });
      }
      disconnectedCallback() {
        this.$$cn = false;
        Promise.resolve().then(() => {
          if (!this.$$cn) {
            this.$$c.$destroy();
            this.$$c = void 0;
          }
        });
      }
      $$g_p(attribute_name) {
        return Object.keys(this.$$p_d).find(
          (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
        ) || attribute_name;
      }
    };
  }
  function get_custom_element_value(prop, value, props_definition, transform) {
    const type = props_definition[prop]?.type;
    value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
    if (!transform || !props_definition[prop]) {
      return value;
    } else if (transform === "toAttribute") {
      switch (type) {
        case "Object":
        case "Array":
          return value == null ? null : JSON.stringify(value);
        case "Boolean":
          return value ? "" : null;
        case "Number":
          return value == null ? null : value;
        default:
          return value;
      }
    } else {
      switch (type) {
        case "Object":
        case "Array":
          return value && JSON.parse(value);
        case "Boolean":
          return value;
        case "Number":
          return value != null ? +value : value;
        default:
          return value;
      }
    }
  }
  var SvelteComponent = class {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    $$ = void 0;
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    $$set = void 0;
    /** @returns {void} */
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    /**
     * @template {Extract<keyof Events, string>} K
     * @param {K} type
     * @param {((e: Events[K]) => void) | null | undefined} callback
     * @returns {() => void}
     */
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop;
      }
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    /**
     * @param {Partial<Props>} props
     * @returns {void}
     */
    $set(props) {
      if (this.$$set && !is_empty(props)) {
        this.$$.skip_bound = true;
        this.$$set(props);
        this.$$.skip_bound = false;
      }
    }
  };

  // node_modules/svelte/src/runtime/internal/dev.js
  init_define_process();

  // node_modules/svelte/src/shared/version.js
  init_define_process();
  var PUBLIC_VERSION = "4";

  // node_modules/svelte/src/runtime/internal/disclose-version/index.js
  init_define_process();
  if (typeof window !== "undefined")
    (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

  // node_modules/svelte/src/runtime/index.js
  init_define_process();

  // router.js
  init_define_process();
  function router() {
    let len = arguments.length - 1;
    let callback = arguments[len];
    let routes = arguments[0];
    let e404 = `404 - PAGE NOT FOUND`;
    if (len === 2)
      e404 = arguments[1];
    let curr;
    addEventListener("popstate", route2);
    addEventListener("pushstate", route2);
    document.body.addEventListener("click", (ev) => {
      let href = ev.target.getAttribute("href");
      if (!href)
        return;
      ev.preventDefault();
      route2(href);
    });
    route2();
    function route2(x, replace) {
      if (curr === x)
        return;
      if (typeof x !== "string")
        x = location.pathname;
      history.pushState(x, null, x);
      let params = {};
      let query = x.includes("?");
      if (query) {
        query = x.replace(/.*\?/, "").replace(/\=\=/g, "=").replace(/\&\&/g, "&").split("&");
        query.map((q) => {
          params[q.split("=")[0]] = q.split("=")[1];
        });
      }
      let match = routes.filter((route3) => {
        let path = route3.path;
        let keys = path.match(/\/:\w+/g);
        let re = new RegExp(path.replace(keys?.join(""), "(.*)"));
        let matched = location.pathname.match(re);
        let isMatch = matched && matched[0] === matched.input;
        if (isMatch) {
          let values = matched[1]?.split("/").slice(1);
          if (values && keys) {
            keys = keys?.join("").split("/:").slice(1);
            for (let i = 0; i < values.length; i++) {
              if (i < keys.length)
                params[keys[i]] = values[i];
              else
                params[i] = values[i];
            }
          }
        }
        return isMatch;
      });
      match = match[match.length - 1];
      if (match) {
        callback({ page: match.page, params });
      } else {
        if (typeof e404 === "string")
          console.log(e404);
        else
          callback({ page: e404, params });
      }
      window.scrollTo(0, 0);
      curr = location.pathname;
    }
    return {
      route: route2,
      listen() {
        route2(location.pathname + location.search);
      },
      unlisten() {
        removeEventListener("popstate", route2);
        removeEventListener("pushstate", route2);
        routes = [];
      }
    };
  }
  var router_default = router;

  // src/routes.js
  init_define_process();

  // src/pages/Abdimas.svelte
  init_define_process();
  function create_fragment(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<h1>Pengabdian Masyarakat</h1> <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quos repellendus
      nulla soluta odio. Dolor sed viverra ipsum nunc aliquet bibendum. Suscipit
      adipiscing bibendum est ultricies integer. In mollis nunc sed id.
      Suspendisse faucibus interdum posuere lorem ipsum dolor sit amet
      consectetur.</p>`;
        attr(article2, "class", "container svelte-1hdo9mq");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  var Abdimas = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment, safe_not_equal, {});
    }
  };
  var Abdimas_default = Abdimas;

  // src/pages/About.svelte
  init_define_process();
  function create_fragment2(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<h1>Profil</h1> <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quos repellendus
      nulla soluta odio. Vitae elementum curabitur vitae nunc. Sem nulla
      pharetra diam sit amet nisl suscipit. Odio ut enim blandit volutpat
      maecenas volutpat. Nec ultrices dui sapien eget mi proin sed libero enim.
      Ultrices gravida dictum fusce ut placerat orci nulla. Eget duis at tellus
      at urna. Est velit egestas dui id ornare arcu. Suscipit adipiscing
      bibendum est ultricies.</p>`;
        attr(article2, "class", "container svelte-9f6d4p");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  var About = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment2, safe_not_equal, {});
    }
  };
  var About_default = About;

  // src/pages/Index.svelte
  init_define_process();

  // src/libs/Hero.svelte
  init_define_process();
  function create_fragment3(ctx) {
    let section;
    return {
      c() {
        section = element("section");
        section.innerHTML = `<div class="hero-body svelte-m03nsc"><div class="columns"><div class="column is-6"><p class="subtitle custom-subtitle svelte-m03nsc">Universitas Internasional Semen Indonesia</p> <p class="title custom-title svelte-m03nsc">Lembaga Penelitian Dan Pengabdian Kepada Masyarakat</p> <button class="button is-dark is-rounded">Panduan PPM UISI</button> <button class="button is-danger is-outlined is-rounded">Pengumuman</button></div> <div class="column"><div class="box boxHero-Kanan svelte-m03nsc"><p class="subtitle is-6 svelte-m03nsc">Lorem ipsum dolor sit amet consectetur, adipisicing elit.
                  Sequi et, suscipit veniam voluptatibus exercitationem
                  reprehenderit atque accusantium dignissimos minus dicta beatae
                  debitis asperiores libero optio facilis quod dolorum? Facilis,
                  in?</p></div></div></div></div>`;
        attr(section, "class", "hero is-fullheight svelte-m03nsc");
      },
      m(target, anchor) {
        insert(target, section, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(section);
        }
      }
    };
  }
  function instance($$self) {
    let dev = !define_process_default.ENV.production;
    let urlImage = dev ? "url(http://localhost:3000/img/vector-gradient.jpg" : "url(https://lppmuisi.dififa.com/img/vector-gradient.jpg";
    return [];
  }
  var Hero = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance, create_fragment3, safe_not_equal, {});
    }
  };
  var Hero_default = Hero;

  // src/modules/Pengumuman.svelte
  init_define_process();
  function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i];
    return child_ctx;
  }
  function create_each_block(ctx) {
    let li;
    let label;
    let t0_value = (
      /*p*/
      ctx[2].title + ""
    );
    let t0;
    let label_for_value;
    let t1;
    let input;
    let input_id_value;
    let t2;
    let div;
    let p_1;
    let t4;
    return {
      c() {
        li = element("li");
        label = element("label");
        t0 = text(t0_value);
        t1 = space();
        input = element("input");
        t2 = space();
        div = element("div");
        p_1 = element("p");
        p_1.textContent = `${/*p*/
        ctx[2].content}`;
        t4 = space();
        attr(label, "for", label_for_value = /*p*/
        ctx[2].label);
        attr(label, "class", "svelte-qn2kg6");
        input.hidden = true;
        attr(input, "type", "checkbox");
        attr(
          input,
          "name",
          /*accordionName*/
          ctx[0]
        );
        attr(input, "id", input_id_value = /*p*/
        ctx[2].idPengumuman);
        attr(input, "class", "svelte-qn2kg6");
        attr(div, "class", "content svelte-qn2kg6");
        attr(li, "class", "svelte-qn2kg6");
      },
      m(target, anchor) {
        insert(target, li, anchor);
        append(li, label);
        append(label, t0);
        append(li, t1);
        append(li, input);
        append(li, t2);
        append(li, div);
        append(div, p_1);
        append(li, t4);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(li);
        }
      }
    };
  }
  function create_fragment4(ctx) {
    let section;
    let article2;
    let div0;
    let t3;
    let br;
    let t4;
    let div1;
    let ul;
    let each_value = ensure_array_like(
      /*pengumuman*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    }
    return {
      c() {
        section = element("section");
        article2 = element("article");
        div0 = element("div");
        div0.innerHTML = `<p class="title is-3">PENGUMUMAN</p> <p class="subtitle is-5">Daftar Pengumuman terkait kegiatan Penelitian &amp; Pengabdian
            Masyarakat LPPM UISI</p>`;
        t3 = space();
        br = element("br");
        t4 = space();
        div1 = element("div");
        ul = element("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(div0, "class", "content svelte-qn2kg6");
        attr(ul, "id", "accordion");
        attr(ul, "class", "svelte-qn2kg6");
        attr(div1, "class", "list pengumuman");
        attr(article2, "class", "container");
        attr(section, "class", "svelte-qn2kg6");
      },
      m(target, anchor) {
        insert(target, section, anchor);
        append(section, article2);
        append(article2, div0);
        append(article2, t3);
        append(article2, br);
        append(article2, t4);
        append(article2, div1);
        append(div1, ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*pengumuman, accordionName*/
        3) {
          each_value = ensure_array_like(
            /*pengumuman*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(ul, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(section);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function instance2($$self) {
    let accordionName;
    let pengumuman2 = [
      {
        label: "1",
        idPengumuman: "1",
        title: "Perpanjangan Batas Akhir Upload Proposal",
        content: " Pengumuman 1 : Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam delectus ex dolorem, consequatur tenetur at cupiditate ab corporis quos sed. Deserunt qui nostrum ullam praesentium sed unde placeat, dolorum aliquid? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore asperiores blanditiis repellendus velit id? Doloribus dolor neque aut expedita, nam nostrum."
      },
      {
        label: "2",
        idPengumuman: "2",
        title: "Daftar proposal lolos pendanaan",
        content: " Pengumuman 2 : Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam delectus ex dolorem, consequatur tenetur at cupiditate ab corporis quos sed. Deserunt qui nostrum ullam praesentium sed unde placeat, dolorum aliquid? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore asperiores blanditiis repellendus velit id? Doloribus dolor neque aut expedita, nam nostrum."
      },
      {
        label: "3",
        idPengumuman: "3",
        title: "Pembukaan Pendaftaran Proposal Penelitian & Pengabdian",
        content: " Pengumuman 3 : Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam delectus ex dolorem, consequatur tenetur at cupiditate ab corporis quos sed. Deserunt qui nostrum ullam praesentium sed unde placeat, dolorum aliquid? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore asperiores blanditiis repellendus velit id? Doloribus dolor neque aut expedita, nam nostrum."
      }
    ];
    return [accordionName, pengumuman2];
  }
  var Pengumuman = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance2, create_fragment4, safe_not_equal, {});
    }
  };
  var Pengumuman_default = Pengumuman;

  // src/modules/Footer.svelte
  init_define_process();
  function create_fragment5(ctx) {
    let footer;
    return {
      c() {
        footer = element("footer");
        footer.innerHTML = `<div class="content has-text-centered"><p>Copyright \xA9 2023
         <strong class="svelte-1h60z37">LPPM UISI</strong>. All Rights Reserved</p></div>`;
        attr(footer, "class", "footer svelte-1h60z37");
      },
      m(target, anchor) {
        insert(target, footer, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(footer);
        }
      }
    };
  }
  var Footer = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment5, safe_not_equal, {});
    }
  };
  var Footer_default = Footer;

  // src/pages/Index.svelte
  function create_fragment6(ctx) {
    let hero;
    let t0;
    let pengumuman2;
    let t1;
    let footer;
    let current;
    hero = new Hero_default({});
    pengumuman2 = new Pengumuman_default({});
    footer = new Footer_default({});
    return {
      c() {
        create_component(hero.$$.fragment);
        t0 = space();
        create_component(pengumuman2.$$.fragment);
        t1 = space();
        create_component(footer.$$.fragment);
      },
      m(target, anchor) {
        mount_component(hero, target, anchor);
        insert(target, t0, anchor);
        mount_component(pengumuman2, target, anchor);
        insert(target, t1, anchor);
        mount_component(footer, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(hero.$$.fragment, local);
        transition_in(pengumuman2.$$.fragment, local);
        transition_in(footer.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(hero.$$.fragment, local);
        transition_out(pengumuman2.$$.fragment, local);
        transition_out(footer.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        destroy_component(hero, detaching);
        destroy_component(pengumuman2, detaching);
        destroy_component(footer, detaching);
      }
    };
  }
  var Index = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment6, safe_not_equal, {});
    }
  };
  var Index_default = Index;

  // src/pages/Login.svelte
  init_define_process();

  // src/store/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/store/index.js
  init_define_process();
  var subscriber_queue = [];
  function writable(value, start = noop) {
    let stop;
    const subscribers = /* @__PURE__ */ new Set();
    function set(new_value) {
      if (safe_not_equal(value, new_value)) {
        value = new_value;
        if (stop) {
          const run_queue = !subscriber_queue.length;
          for (const subscriber of subscribers) {
            subscriber[1]();
            subscriber_queue.push(subscriber, value);
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue.length; i += 2) {
              subscriber_queue[i][0](subscriber_queue[i + 1]);
            }
            subscriber_queue.length = 0;
          }
        }
      }
    }
    function update2(fn) {
      set(fn(value));
    }
    function subscribe2(run2, invalidate = noop) {
      const subscriber = [run2, invalidate];
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        stop = start(set, update2) || noop;
      }
      run2(value);
      return () => {
        subscribers.delete(subscriber);
        if (subscribers.size === 0 && stop) {
          stop();
          stop = null;
        }
      };
    }
    return { set, update: update2, subscribe: subscribe2 };
  }

  // src/store/index.js
  var route = writable(0);
  var isLogin = writable(false);
  var isUsername = writable(null);
  var ppmFile = writable({});
  var rabFile = writable({});
  var kontrakFile = writable({});
  var penilaianFile = writable({});
  var skPendanaanFile = writable({});
  var suratKontrakFile = writable({});
  var suratTugasFile = writable({});
  var skPPMFile = writable({});
  var hasilPPMFile = writable({});
  var laporanKeuanganFile = writable({});
  var apiURL = writable(
    define_process_default.ENV.production ? "https://lppmuisiapi.dififa.com" : "http://localhost:10443"
  );

  // src/pages/Login.svelte
  function create_fragment7(ctx) {
    let article2;
    let div6;
    let h3;
    let t1;
    let div1;
    let div0;
    let t3;
    let input0;
    let t4;
    let div3;
    let div2;
    let t6;
    let input1;
    let t7;
    let br;
    let t8;
    let div4;
    let button0;
    let t10;
    let div5;
    let button1;
    let t13;
    let p;
    let mounted;
    let dispose;
    return {
      c() {
        article2 = element("article");
        div6 = element("div");
        h3 = element("h3");
        h3.textContent = "Login";
        t1 = space();
        div1 = element("div");
        div0 = element("div");
        div0.textContent = "Username";
        t3 = space();
        input0 = element("input");
        t4 = space();
        div3 = element("div");
        div2 = element("div");
        div2.textContent = "Password";
        t6 = space();
        input1 = element("input");
        t7 = space();
        br = element("br");
        t8 = space();
        div4 = element("div");
        button0 = element("button");
        button0.textContent = "Submit";
        t10 = space();
        div5 = element("div");
        button1 = element("button");
        button1.innerHTML = `<span class="icon"><span class="icon"><img src="/img/iconGoogle.svg" alt="" width="20"/></span></span> <span><h6 class="subtitle is-6">Sign in with Google</h6></span>`;
        t13 = space();
        p = element("p");
        p.textContent = "Maaf, username atau password anda salah. Silahkan cek kembali.";
        attr(h3, "class", "title is-3");
        attr(div0, "class", "svelte-62xoz");
        attr(input0, "class", "input");
        attr(input0, "type", "text");
        attr(div1, "class", "svelte-62xoz");
        attr(div2, "class", "svelte-62xoz");
        attr(input1, "class", "input");
        attr(input1, "type", "password");
        attr(div3, "class", "svelte-62xoz");
        attr(button0, "class", "button is-info svelte-62xoz");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(div4, "class", "svelte-62xoz");
        attr(button1, "class", "button svelte-62xoz");
        attr(div5, "class", "svelte-62xoz");
        attr(p, "id", "errorLoginHandler");
        attr(p, "class", "has-text-danger svelte-62xoz");
        attr(div6, "class", "box svelte-62xoz");
        attr(article2, "class", "container svelte-62xoz");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
        append(article2, div6);
        append(div6, h3);
        append(div6, t1);
        append(div6, div1);
        append(div1, div0);
        append(div1, t3);
        append(div1, input0);
        set_input_value(
          input0,
          /*username*/
          ctx[0]
        );
        append(div6, t4);
        append(div6, div3);
        append(div3, div2);
        append(div3, t6);
        append(div3, input1);
        set_input_value(
          input1,
          /*password*/
          ctx[1]
        );
        append(div6, t7);
        append(div6, br);
        append(div6, t8);
        append(div6, div4);
        append(div4, button0);
        append(div6, t10);
        append(div6, div5);
        append(div5, button1);
        append(div6, t13);
        append(div6, p);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[5]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[6]
            ),
            listen(
              button0,
              "click",
              /*handleSubmit*/
              ctx[3]
            ),
            listen(
              button1,
              "click",
              /*signGoogle*/
              ctx[4]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*username*/
        1 && input0.value !== /*username*/
        ctx2[0]) {
          set_input_value(
            input0,
            /*username*/
            ctx2[0]
          );
        }
        if (dirty & /*password*/
        2 && input1.value !== /*password*/
        ctx2[1]) {
          set_input_value(
            input1,
            /*password*/
            ctx2[1]
          );
        }
        if (dirty & /*isLoading*/
        4) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance3($$self, $$props, $$invalidate) {
    let $apiURL;
    let $route;
    let $isUsername;
    let $isLogin;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(7, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(8, $route = $$value));
    component_subscribe($$self, isUsername, ($$value) => $$invalidate(9, $isUsername = $$value));
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(10, $isLogin = $$value));
    let username2 = "";
    let password = "";
    let isLoading = false;
    document.addEventListener("keydown", function(event) {
      if (event.key === "Enter") {
        handleSubmit();
      }
    });
    async function handleSubmit(ev) {
      $$invalidate(2, isLoading = true);
      const paragraph = document.getElementById("errorLoginHandler");
      const payload2 = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username2, password })
      };
      const response = await fetch($apiURL + "/auth", payload2);
      const result = await response.json();
      if (result.sukses) {
        set_store_value(isLogin, $isLogin = true, $isLogin);
        const { id, username: username3, role, token } = result;
        set_store_value(isUsername, $isUsername = username3, $isUsername);
        localStorage.setItem("id", id);
        localStorage.setItem("username", username3);
        localStorage.setItem("role", role);
        localStorage.setItem("token", token);
        if (role === "admin")
          $route("/admin");
        else
          $route("/dosen");
      } else {
        console.log(response);
        paragraph.style.display = "block";
      }
      $$invalidate(2, isLoading = false);
    }
    async function signGoogle() {
      window.open($apiURL + "/auth/google", "_self");
      return;
    }
    function input0_input_handler() {
      username2 = this.value;
      $$invalidate(0, username2);
    }
    function input1_input_handler() {
      password = this.value;
      $$invalidate(1, password);
    }
    return [
      username2,
      password,
      isLoading,
      handleSubmit,
      signGoogle,
      input0_input_handler,
      input1_input_handler
    ];
  }
  var Login = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance3, create_fragment7, safe_not_equal, {});
    }
  };
  var Login_default = Login;

  // src/pages/Logout.svelte
  init_define_process();
  function create_fragment8(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<div class="box svelte-1m5k0v3"><h3 class="title is-3">You are Logged Out</h3> <h6 class="subtitle is-6">Thank you for using our website</h6></div>`;
        attr(article2, "class", "svelte-1m5k0v3");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  function instance4($$self, $$props, $$invalidate) {
    let $isLogin;
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(0, $isLogin = $$value));
    localStorage.clear();
    set_store_value(isLogin, $isLogin = false, $isLogin);
    setTimeout(
      () => {
        location.pathname = "/";
      },
      500
    );
    return [];
  }
  var Logout = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance4, create_fragment8, safe_not_equal, {});
    }
  };
  var Logout_default = Logout;

  // src/pages/Penelitian.svelte
  init_define_process();
  function create_fragment9(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<h1>Penelitian</h1> <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quos repellendus
      nulla soluta odio. Aspernatur deleniti cumque, fugit tempore molestias
      iste eligendi quaerat fugiat esse voluptas! Rerum, sed! Obcaecati, magnam
      eligendi.</p>`;
        attr(article2, "class", "container svelte-1hdo9mq");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  var Penelitian = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment9, safe_not_equal, {});
    }
  };
  var Penelitian_default = Penelitian;

  // src/pages/Tokenexpired.svelte
  init_define_process();

  // src/libs/Article.svelte
  init_define_process();

  // node_modules/svelte/src/runtime/transition/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/easing/index.js
  init_define_process();

  // node_modules/svelte/src/runtime/transition/index.js
  function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
      delay,
      duration,
      easing,
      css: (t) => `opacity: ${t * o}`
    };
  }

  // src/libs/Article.svelte
  function create_fragment10(ctx) {
    let article2;
    let article_intro;
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        article2 = element("article");
        if (default_slot)
          default_slot.c();
        attr(article2, "class", "svelte-h8uanz");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
        if (default_slot) {
          default_slot.m(article2, null);
        }
        current = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        if (local) {
          if (!article_intro) {
            add_render_callback(() => {
              article_intro = create_in_transition(article2, fade, {});
              article_intro.start();
            });
          }
        }
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
        if (default_slot)
          default_slot.d(detaching);
      }
    };
  }
  function instance5($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2)
        $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  var Article = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance5, create_fragment10, safe_not_equal, {});
    }
  };
  var Article_default = Article;

  // src/pages/Tokenexpired.svelte
  function create_fragment11(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<div class="box svelte-1axbk4p"><img src="/img/warning.png" alt="alert-icon" class="svelte-1axbk4p"/> <h4 class="title is-3">Your session has expired</h4> <h6 class="subtitle is-6">You will be redirected to login page</h6></div>`;
        attr(article2, "class", "svelte-1axbk4p");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  function instance6($$self, $$props, $$invalidate) {
    let $isLogin;
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(0, $isLogin = $$value));
    localStorage.clear();
    set_store_value(isLogin, $isLogin = false, $isLogin);
    setTimeout(
      () => {
        location.pathname = "/login";
      },
      500
    );
    return [];
  }
  var Tokenexpired = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance6, create_fragment11, safe_not_equal, {});
    }
  };
  var Tokenexpired_default = Tokenexpired;

  // src/pages/admin/Index.svelte
  init_define_process();

  // src/pages/admin/index.js
  var admin_exports = {};
  __export(admin_exports, {
    aboutuisi: () => aboutuisi_default,
    buatpengumuman: () => buatpengumuman_default,
    createuser: () => createuser_default,
    detailppm: () => detailppm_default,
    home: () => home_default,
    pengumuman: () => pengumuman_default,
    ppmmanagement: () => ppmmanagement_default,
    profile: () => profile_default,
    template: () => template_default,
    usersmanagement: () => usersmanagement_default
  });
  init_define_process();

  // src/pages/admin/aboutuisi.svelte
  init_define_process();

  // src/libs/Field.svelte
  init_define_process();
  function get_each_context2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[21] = list[i];
    return child_ctx;
  }
  function create_else_block(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "type", "text");
        attr(input, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*value*/
          ctx[1]
        );
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_1*/
              ctx[18]
            ),
            listen(input, "click", function() {
              if (is_function(
                /*onclick*/
                ctx[8]
              ))
                ctx[8].apply(this, arguments);
            })
          ];
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*value*/
        2 && input.value !== /*value*/
        ctx[1]) {
          set_input_value(
            input,
            /*value*/
            ctx[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_4(ctx) {
    let a;
    let t;
    return {
      c() {
        a = element("a");
        t = text(
          /*value*/
          ctx[1]
        );
        attr(
          a,
          "href",
          /*href*/
          ctx[7]
        );
        attr(a, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, a, anchor);
        append(a, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*value*/
        2)
          set_data(
            t,
            /*value*/
            ctx2[1]
          );
        if (dirty & /*href*/
        128) {
          attr(
            a,
            "href",
            /*href*/
            ctx2[7]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(a);
        }
      }
    };
  }
  function create_if_block_3(ctx) {
    let p;
    let select_1;
    let option;
    let mounted;
    let dispose;
    let each_value = ensure_array_like(
      /*value*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
    }
    return {
      c() {
        p = element("p");
        select_1 = element("select");
        option = element("option");
        option.textContent = "Masukkan evaluator";
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        attr(option, "class", "svelte-1oy4l94");
        attr(
          select_1,
          "id",
          /*id*/
          ctx[2]
        );
        attr(select_1, "class", "svelte-1oy4l94");
        attr(p, "class", "select svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, select_1);
        append(select_1, option);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(select_1, null);
          }
        }
        if (!mounted) {
          dispose = listen(
            select_1,
            "change",
            /*fillSelect*/
            ctx[10]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*value*/
        2) {
          each_value = ensure_array_like(
            /*value*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context2(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block2(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(select_1, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
        if (dirty & /*id*/
        4) {
          attr(
            select_1,
            "id",
            /*id*/
            ctx2[2]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        destroy_each(each_blocks, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input svelte-1oy4l94");
        attr(input, "type", "month");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*value*/
          ctx[1]
        );
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[17]
            ),
            listen(input, "click", function() {
              if (is_function(
                /*onclick*/
                ctx[8]
              ))
                ctx[8].apply(this, arguments);
            })
          ];
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*value*/
        2) {
          set_input_value(
            input,
            /*value*/
            ctx[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_1(ctx) {
    let textarea_1;
    let mounted;
    let dispose;
    return {
      c() {
        textarea_1 = element("textarea");
        attr(
          textarea_1,
          "id",
          /*id*/
          ctx[2]
        );
        attr(textarea_1, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, textarea_1, anchor);
        set_input_value(
          textarea_1,
          /*value*/
          ctx[1]
        );
        if (!mounted) {
          dispose = [
            listen(
              textarea_1,
              "input",
              /*textarea_1_input_handler*/
              ctx[16]
            ),
            listen(textarea_1, "click", function() {
              if (is_function(
                /*onclick*/
                ctx[8]
              ))
                ctx[8].apply(this, arguments);
            })
          ];
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*id*/
        4) {
          attr(
            textarea_1,
            "id",
            /*id*/
            ctx[2]
          );
        }
        if (dirty & /*value*/
        2) {
          set_input_value(
            textarea_1,
            /*value*/
            ctx[1]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(textarea_1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block(ctx) {
    let a;
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[15].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[14],
      null
    );
    return {
      c() {
        a = element("a");
        if (default_slot)
          default_slot.c();
        attr(a, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, a, anchor);
        if (default_slot) {
          default_slot.m(a, null);
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          16384)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[14],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[14]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[14],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(a);
        }
        if (default_slot)
          default_slot.d(detaching);
      }
    };
  }
  function create_each_block2(ctx) {
    let option;
    let t_value = (
      /*it*/
      ctx[21].username + ""
    );
    let t;
    let option_value_value;
    let goSelect_action;
    let mounted;
    let dispose;
    return {
      c() {
        option = element("option");
        t = text(t_value);
        option.__value = option_value_value = /*it*/
        ctx[21].id;
        set_input_value(option, option.__value);
        attr(option, "class", "svelte-1oy4l94");
      },
      m(target, anchor) {
        insert(target, option, anchor);
        append(option, t);
        if (!mounted) {
          dispose = action_destroyer(goSelect_action = /*goSelect*/
          ctx[11].call(null, option));
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*value*/
        2 && t_value !== (t_value = /*it*/
        ctx2[21].username + ""))
          set_data(t, t_value);
        if (dirty & /*value*/
        2 && option_value_value !== (option_value_value = /*it*/
        ctx2[21].id)) {
          option.__value = option_value_value;
          set_input_value(option, option.__value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(option);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment12(ctx) {
    let div;
    let b;
    let t0;
    let t1;
    let current_block_type_index;
    let if_block;
    let current;
    const if_block_creators = [
      create_if_block,
      create_if_block_1,
      create_if_block_2,
      create_if_block_3,
      create_if_block_4,
      create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*hasSlot*/
        ctx2[9]
      )
        return 0;
      if (
        /*textarea*/
        ctx2[3] && !/*view*/
        ctx2[6]
      )
        return 1;
      if (
        /*datepicker*/
        ctx2[4] && !/*view*/
        ctx2[6]
      )
        return 2;
      if (
        /*select*/
        ctx2[5] && /*view*/
        ctx2[6]
      )
        return 3;
      if (
        /*view*/
        ctx2[6]
      )
        return 4;
      return 5;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        div = element("div");
        b = element("b");
        t0 = text(
          /*name*/
          ctx[0]
        );
        t1 = space();
        if_block.c();
        attr(b, "class", "svelte-1oy4l94");
        attr(div, "class", "svelte-1oy4l94");
        toggle_class(
          div,
          "view",
          /*view*/
          ctx[6]
        );
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, b);
        append(b, t0);
        append(div, t1);
        if_blocks[current_block_type_index].m(div, null);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (!current || dirty & /*name*/
        1)
          set_data(
            t0,
            /*name*/
            ctx2[0]
          );
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
        if (!current || dirty & /*view*/
        64) {
          toggle_class(
            div,
            "view",
            /*view*/
            ctx2[6]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if_blocks[current_block_type_index].d();
      }
    };
  }
  function instance7($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { id } = $$props;
    let { name = "" } = $$props;
    let { value = "" } = $$props;
    let { selected } = $$props;
    let { textarea = false } = $$props;
    let { datepicker = false } = $$props;
    let { select = false } = $$props;
    let { view } = $$props;
    let { href } = $$props;
    let { onclick } = $$props;
    let { userId } = $$props;
    const slot = $$props.$$slots || {};
    const hasSlot = slot.hasOwnProperty("default");
    if (name) {
      name = name[0].toUpperCase() + name.slice(1);
      name = name.replaceAll("__", "/").replaceAll("_", " ");
    }
    function fillSelect(event) {
      let select2 = event.target;
      $$invalidate(12, selected = Number(select2.value));
    }
    function goSelect(el) {
      let valueId = el.value;
      if (Number(valueId) === userId) {
        el.setAttribute("selected", "");
      }
    }
    function textarea_1_input_handler() {
      value = this.value;
      $$invalidate(1, value);
    }
    function input_input_handler() {
      value = this.value;
      $$invalidate(1, value);
    }
    function input_input_handler_1() {
      value = this.value;
      $$invalidate(1, value);
    }
    $$self.$$set = ($$new_props) => {
      $$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("id" in $$new_props)
        $$invalidate(2, id = $$new_props.id);
      if ("name" in $$new_props)
        $$invalidate(0, name = $$new_props.name);
      if ("value" in $$new_props)
        $$invalidate(1, value = $$new_props.value);
      if ("selected" in $$new_props)
        $$invalidate(12, selected = $$new_props.selected);
      if ("textarea" in $$new_props)
        $$invalidate(3, textarea = $$new_props.textarea);
      if ("datepicker" in $$new_props)
        $$invalidate(4, datepicker = $$new_props.datepicker);
      if ("select" in $$new_props)
        $$invalidate(5, select = $$new_props.select);
      if ("view" in $$new_props)
        $$invalidate(6, view = $$new_props.view);
      if ("href" in $$new_props)
        $$invalidate(7, href = $$new_props.href);
      if ("onclick" in $$new_props)
        $$invalidate(8, onclick = $$new_props.onclick);
      if ("userId" in $$new_props)
        $$invalidate(13, userId = $$new_props.userId);
      if ("$$scope" in $$new_props)
        $$invalidate(14, $$scope = $$new_props.$$scope);
    };
    $$props = exclude_internal_props($$props);
    return [
      name,
      value,
      id,
      textarea,
      datepicker,
      select,
      view,
      href,
      onclick,
      hasSlot,
      fillSelect,
      goSelect,
      selected,
      userId,
      $$scope,
      slots,
      textarea_1_input_handler,
      input_input_handler,
      input_input_handler_1
    ];
  }
  var Field = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance7, create_fragment12, safe_not_equal, {
        id: 2,
        name: 0,
        value: 1,
        selected: 12,
        textarea: 3,
        datepicker: 4,
        select: 5,
        view: 6,
        href: 7,
        onclick: 8,
        userId: 13
      });
    }
  };
  var Field_default = Field;

  // src/libs/Wysiwyg.svelte
  init_define_process();
  function create_fragment13(ctx) {
    let div;
    let textarea;
    let textarea_value_value;
    return {
      c() {
        div = element("div");
        textarea = element("textarea");
        attr(
          textarea,
          "name",
          /*name*/
          ctx[2]
        );
        attr(
          textarea,
          "id",
          /*id*/
          ctx[0]
        );
        textarea.value = textarea_value_value = "      " + /*content*/
        ctx[1] + "\r\n   ";
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, textarea);
        ctx[4](textarea);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*name*/
        4) {
          attr(
            textarea,
            "name",
            /*name*/
            ctx2[2]
          );
        }
        if (dirty & /*id*/
        1) {
          attr(
            textarea,
            "id",
            /*id*/
            ctx2[0]
          );
        }
        if (dirty & /*content*/
        2 && textarea_value_value !== (textarea_value_value = "      " + /*content*/
        ctx2[1] + "\r\n   ")) {
          textarea.value = textarea_value_value;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        ctx[4](null);
      }
    };
  }
  function instance8($$self, $$props, $$invalidate) {
    let { id } = $$props;
    let { content = "" } = $$props;
    let { name } = $$props;
    let me;
    let selector = "#" + id;
    onMount(() => {
      try {
        tinymce.remove(selector);
      } catch (error) {
      }
      tinymce.init({
        selector,
        height: 500,
        plugins: "anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount ",
        toolbar: "undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat",
        tinycomments_mode: "embedded",
        tinycomments_author: "Author name",
        mergetags_list: [
          { value: "First.Name", title: "First Name" },
          { value: "Email", title: "Email" }
        ]
      });
    });
    function textarea_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        me = $$value;
        $$invalidate(3, me);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("id" in $$props2)
        $$invalidate(0, id = $$props2.id);
      if ("content" in $$props2)
        $$invalidate(1, content = $$props2.content);
      if ("name" in $$props2)
        $$invalidate(2, name = $$props2.name);
    };
    return [id, content, name, me, textarea_binding];
  }
  var Wysiwyg = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance8, create_fragment13, safe_not_equal, { id: 0, content: 1, name: 2 });
    }
  };
  var Wysiwyg_default = Wysiwyg;

  // src/pages/admin/aboutuisi.svelte
  function create_if_block_22(ctx) {
    let wysiwyg;
    let t0;
    let hr;
    let t1;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    wysiwyg = new Wysiwyg_default({
      props: { id: "isi", content: (
        /*lppmUisi*/
        ctx[3]
      ) }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
        t0 = space();
        hr = element("hr");
        t1 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        insert(target, t0, anchor);
        insert(target, hr, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanLppmUISI);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(hr);
          detach(t1);
          detach(div);
        }
        destroy_component(wysiwyg, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_12(ctx) {
    let wysiwyg;
    let t0;
    let hr;
    let t1;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    wysiwyg = new Wysiwyg_default({
      props: {
        id: "isi",
        content: (
          /*fungsiTujuan*/
          ctx[4]
        )
      }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
        t0 = space();
        hr = element("hr");
        t1 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        insert(target, t0, anchor);
        insert(target, hr, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanFungsiTujuan);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(hr);
          detach(t1);
          detach(div);
        }
        destroy_component(wysiwyg, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block2(ctx) {
    let wysiwyg;
    let t0;
    let hr;
    let t1;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    wysiwyg = new Wysiwyg_default({
      props: { id: "isi", content: (
        /*visiMisi*/
        ctx[5]
      ) }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
        t0 = space();
        hr = element("hr");
        t1 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        insert(target, t0, anchor);
        insert(target, hr, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanVisiMisi);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(hr);
          detach(t1);
          detach(div);
        }
        destroy_component(wysiwyg, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div;
    let ul;
    let li0;
    let t4;
    let li1;
    let t6;
    let li2;
    let t8;
    let t9;
    let t10;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[0] === true && create_if_block_22(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[1] === true && create_if_block_12(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[2] === true && create_if_block2(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "About UISI";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>LPPM UISI</span></a>`;
        t4 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Fungsi &amp; Tujuan</span></a>`;
        t6 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Visi &amp; Misi</span></a>`;
        t8 = space();
        if (if_block0)
          if_block0.c();
        t9 = space();
        if (if_block1)
          if_block1.c();
        t10 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[0]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[1]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[2]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t4);
        append(ul, li1);
        append(ul, t6);
        append(ul, li2);
        insert(target, t8, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t9, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t10, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[6]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[7]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[8]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty & /*tab1*/
        1) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[0]
          );
        }
        if (!current || dirty & /*tab2*/
        2) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[1]
          );
        }
        if (!current || dirty & /*tab3*/
        4) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[2]
          );
        }
        if (
          /*tab1*/
          ctx2[0] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty & /*tab1*/
            1) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_22(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t9.parentNode, t9);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[1] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty & /*tab2*/
            2) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_12(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t10.parentNode, t10);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab3*/
          ctx2[2] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty & /*tab3*/
            4) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block2(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div);
          detach(t8);
          detach(t9);
          detach(t10);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment14(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, tab3, tab2, tab1*/
        519) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function simpanLppmUISI() {
  }
  function simpanFungsiTujuan() {
  }
  function simpanVisiMisi() {
  }
  function instance9($$self, $$props, $$invalidate) {
    let lppmUisi, fungsiTujuan, visiMisi;
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(0, tab1 = true);
      $$invalidate(1, tab2 = false);
      $$invalidate(2, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(0, tab1 = false);
      $$invalidate(1, tab2 = true);
      $$invalidate(2, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(0, tab1 = false);
      $$invalidate(1, tab2 = false);
      $$invalidate(2, tab3 = true);
    }
    return [
      tab1,
      tab2,
      tab3,
      lppmUisi,
      fungsiTujuan,
      visiMisi,
      clicktab1,
      clicktab2,
      clicktab3
    ];
  }
  var Aboutuisi = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance9, create_fragment14, safe_not_equal, {});
    }
  };
  var aboutuisi_default = Aboutuisi;

  // src/pages/admin/buatpengumuman.svelte
  init_define_process();
  function create_default_slot_2(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Judul Pengumuman");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengumuman*/
          ctx[0]
        );
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*judulPengumuman*/
        1 && input.value !== /*judulPengumuman*/
        ctx2[0]) {
          set_input_value(
            input,
            /*judulPengumuman*/
            ctx2[0]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_1(ctx) {
    let wysiwyg;
    let current;
    wysiwyg = new Wysiwyg_default({
      props: {
        id: "isi",
        content: (
          /*isiPengumuman*/
          ctx[1]
        )
      }
    });
    return {
      c() {
        create_component(wysiwyg.$$.fragment);
      },
      m(target, anchor) {
        mount_component(wysiwyg, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(wysiwyg.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(wysiwyg.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(wysiwyg, detaching);
      }
    };
  }
  function create_default_slot2(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div0;
    let field0;
    let t3;
    let field1;
    let t4;
    let div1;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Judul Pengumuman",
        $$slots: { default: [create_default_slot_2] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Isi Pengumuman",
        $$slots: { default: [create_default_slot_1] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Buat Pengumuman";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div0 = element("div");
        create_component(field0.$$.fragment);
        t3 = space();
        create_component(field1.$$.fragment);
        t4 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(h2, "class", "title is-2");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t3);
        mount_component(field1, div0, null);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanPengumuman);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty & /*$$scope, judulPengumuman*/
        9) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty & /*$$scope*/
        8) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment15(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot2] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, judulPengumuman*/
        9) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function simpanPengumuman() {
  }
  function instance10($$self, $$props, $$invalidate) {
    let judulPengumuman, isiPengumuman;
    function input_input_handler() {
      judulPengumuman = this.value;
      $$invalidate(0, judulPengumuman);
    }
    return [judulPengumuman, isiPengumuman, input_input_handler];
  }
  var Buatpengumuman = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance10, create_fragment15, safe_not_equal, {});
    }
  };
  var buatpengumuman_default = Buatpengumuman;

  // src/pages/admin/createuser.svelte
  init_define_process();

  // src/libs/Modalerror.svelte
  init_define_process();
  function create_fragment16(ctx) {
    let b;
    let div1;
    let div0;
    let img;
    let img_src_value;
    let t0;
    let p;
    let t1;
    let button;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = (
      /*#slots*/
      ctx[4].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    return {
      c() {
        b = element("b");
        div1 = element("div");
        div0 = element("div");
        img = element("img");
        t0 = space();
        p = element("p");
        if (default_slot)
          default_slot.c();
        t1 = space();
        button = element("button");
        button.textContent = "Tutup";
        if (!src_url_equal(img.src, img_src_value = "/img/warning.png"))
          attr(img, "src", img_src_value);
        attr(img, "alt", "alert-icon");
        attr(img, "class", "svelte-l76t32");
        attr(p, "class", "svelte-l76t32");
        attr(button, "class", "button is-danger is-fullwidth");
        attr(div0, "class", "cookiesContent svelte-l76t32");
        attr(b, "class", "svelte-l76t32");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div1);
        append(div1, div0);
        append(div0, img);
        append(div0, t0);
        append(div0, p);
        if (default_slot) {
          default_slot.m(p, null);
        }
        append(div0, t1);
        append(div0, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*clickX*/
              ctx[2]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[1]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance11($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(3, $$scope = $$props2.$$scope);
    };
    return [show, handleClick, clickX, $$scope, slots];
  }
  var Modalerror = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance11, create_fragment16, safe_not_equal, { show: 0 });
    }
  };
  var Modalerror_default = Modalerror;

  // src/libs/Modalchecked.svelte
  init_define_process();
  function create_else_block2(ctx) {
    let img;
    let img_src_value;
    let img_intro;
    let img_outro;
    let current;
    return {
      c() {
        img = element("img");
        if (!src_url_equal(img.src, img_src_value = "/img/checked.png"))
          attr(img, "src", img_src_value);
        attr(img, "alt", "alert-icon");
        attr(img, "class", "svelte-14lwwno");
      },
      m(target, anchor) {
        insert(target, img, anchor);
        current = true;
      },
      i(local) {
        if (current)
          return;
        if (local) {
          add_render_callback(() => {
            if (!current)
              return;
            if (img_outro)
              img_outro.end(1);
            img_intro = create_in_transition(img, fade, { duration: 10 });
            img_intro.start();
          });
        }
        current = true;
      },
      o(local) {
        if (img_intro)
          img_intro.invalidate();
        if (local) {
          img_outro = create_out_transition(img, fade, { duration: 10 });
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(img);
        }
        if (detaching && img_outro)
          img_outro.end();
      }
    };
  }
  function create_if_block3(ctx) {
    let div1;
    let div0;
    let div0_intro;
    let div0_outro;
    let current;
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        attr(div0, "class", "loader is-loading svelte-14lwwno");
        attr(div1, "class", "loader-wrapper svelte-14lwwno");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        current = true;
      },
      i(local) {
        if (current)
          return;
        if (local) {
          add_render_callback(() => {
            if (!current)
              return;
            if (div0_outro)
              div0_outro.end(1);
            div0_intro = create_in_transition(div0, fade, { duration: 10 });
            div0_intro.start();
          });
        }
        current = true;
      },
      o(local) {
        if (div0_intro)
          div0_intro.invalidate();
        if (local) {
          div0_outro = create_out_transition(div0, fade, { duration: 10 });
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        if (detaching && div0_outro)
          div0_outro.end();
      }
    };
  }
  function create_fragment17(ctx) {
    let b;
    let div1;
    let div0;
    let current_block_type_index;
    let if_block;
    let t0;
    let h2;
    let t2;
    let p;
    let t3;
    let button;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block3, create_else_block2];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*showLoader*/
        ctx2[1]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const default_slot_template = (
      /*#slots*/
      ctx[5].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[4],
      null
    );
    return {
      c() {
        b = element("b");
        div1 = element("div");
        div0 = element("div");
        if_block.c();
        t0 = space();
        h2 = element("h2");
        h2.textContent = "Success!";
        t2 = space();
        p = element("p");
        if (default_slot)
          default_slot.c();
        t3 = space();
        button = element("button");
        button.textContent = "Confirm";
        attr(h2, "class", "title is-2");
        attr(p, "class", "svelte-14lwwno");
        attr(button, "class", "button is-success is-fullwidth");
        attr(div0, "class", "cookiesContent svelte-14lwwno");
        attr(b, "class", "svelte-14lwwno");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div1);
        append(div1, div0);
        if_blocks[current_block_type_index].m(div0, null);
        append(div0, t0);
        append(div0, h2);
        append(div0, t2);
        append(div0, p);
        if (default_slot) {
          default_slot.m(p, null);
        }
        append(div0, t3);
        append(div0, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*clickX*/
              ctx[3]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[2]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index !== previous_block_index) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
          }
          transition_in(if_block, 1);
          if_block.m(div0, t0);
        }
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[4],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[4]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[4],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if_blocks[current_block_type_index].d();
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance12($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    let showLoader = true;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(4, $$scope = $$props2.$$scope);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*show*/
      1) {
        $:
          if (show) {
            $$invalidate(1, showLoader = true);
            setTimeout(
              () => {
                $$invalidate(1, showLoader = false);
              },
              400
            );
          }
      }
    };
    return [show, showLoader, handleClick, clickX, $$scope, slots];
  }
  var Modalchecked = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance12, create_fragment17, safe_not_equal, { show: 0 });
    }
  };
  var Modalchecked_default = Modalchecked;

  // src/pages/admin/createuser.svelte
  function create_else_block3(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Anda tidak memiliki hak akses halaman ini!";
        attr(h4, "class", "title is-4");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block4(ctx) {
    let div1;
    let div0;
    let t1;
    let field0;
    let t2;
    let field1;
    let t3;
    let field2;
    let t4;
    let field3;
    let t5;
    let field4;
    let t6;
    let div4;
    let div2;
    let button0;
    let t8;
    let div3;
    let button1;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Username",
        $$slots: { default: [create_default_slot_8] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Password",
        $$slots: { default: [create_default_slot_7] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Email",
        $$slots: { default: [create_default_slot_6] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_5] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Active",
        $$slots: { default: [create_default_slot_4] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        div0.innerHTML = `<p>Untuk Dosen / Reviewer dari luar UISI!</p>`;
        t1 = space();
        create_component(field0.$$.fragment);
        t2 = space();
        create_component(field1.$$.fragment);
        t3 = space();
        create_component(field2.$$.fragment);
        t4 = space();
        create_component(field3.$$.fragment);
        t5 = space();
        create_component(field4.$$.fragment);
        t6 = space();
        div4 = element("div");
        div2 = element("div");
        button0 = element("button");
        button0.textContent = "Kembali";
        t8 = space();
        div3 = element("div");
        button1 = element("button");
        button1.textContent = "Create";
        attr(div0, "class", "notification is-warning is-light");
        attr(div1, "class", "box");
        attr(button0, "class", "button is-info is-light");
        attr(div2, "class", "control");
        attr(button1, "class", "button is-info");
        attr(div3, "class", "control");
        attr(div4, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div1, t1);
        mount_component(field0, div1, null);
        append(div1, t2);
        mount_component(field1, div1, null);
        append(div1, t3);
        mount_component(field2, div1, null);
        append(div1, t4);
        mount_component(field3, div1, null);
        append(div1, t5);
        mount_component(field4, div1, null);
        insert(target, t6, anchor);
        insert(target, div4, anchor);
        append(div4, div2);
        append(div2, button0);
        append(div4, t8);
        append(div4, div3);
        append(div3, button1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*kembali*/
              ctx[10]
            ),
            listen(
              button1,
              "click",
              /*HandleCreateUser*/
              ctx[11]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty & /*$$scope, error, createUsername*/
        134217761) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty & /*$$scope, error, createPassword*/
        134217762) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty & /*$$scope, error, createEmail*/
        134217764) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty & /*$$scope, error, jenisRole*/
        134217776) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty & /*$$scope, error, selectedActivation*/
        134217768) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
          detach(t6);
          detach(div4);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_5(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].createUsername + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].createUsername + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_8(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].createUsername && create_if_block_5(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "username");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan username");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*createUsername*/
          ctx[0]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[12]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*createUsername*/
        1 && input.value !== /*createUsername*/
        ctx2[0]) {
          set_input_value(
            input,
            /*createUsername*/
            ctx2[0]
          );
        }
        if (
          /*error*/
          ctx2[5].createUsername
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_5(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_42(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].createPassword + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].createPassword + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_7(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].createPassword && create_if_block_42(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "password");
        attr(input, "class", "input");
        attr(input, "type", "password");
        attr(input, "placeholder", "Masukkan password");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*createPassword*/
          ctx[1]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[13]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*createPassword*/
        2 && input.value !== /*createPassword*/
        ctx2[1]) {
          set_input_value(
            input,
            /*createPassword*/
            ctx2[1]
          );
        }
        if (
          /*error*/
          ctx2[5].createPassword
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_42(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_32(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].createEmail + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].createEmail + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_6(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].createEmail && create_if_block_32(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "email");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan email");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*createEmail*/
          ctx[2]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[14]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*createEmail*/
        4 && input.value !== /*createEmail*/
        ctx2[2]) {
          set_input_value(
            input,
            /*createEmail*/
            ctx2[2]
          );
        }
        if (
          /*error*/
          ctx2[5].createEmail
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_32(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_23(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].jenisRole + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].jenisRole + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_5(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let option5;
    let option6;
    let t7;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].jenisRole && create_if_block_23(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Role";
        option1 = element("option");
        option1.textContent = "Dosen";
        option2 = element("option");
        option2.textContent = "Admin";
        option3 = element("option");
        option3.textContent = "Reviewer";
        option4 = element("option");
        option4.textContent = "Kepala Departemen";
        option5 = element("option");
        option5.textContent = "Kepala LPPM";
        option6 = element("option");
        option6.textContent = "Kepala Pusat Kajian";
        t7 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "0";
        set_input_value(option1, option1.__value);
        option2.__value = "9";
        set_input_value(option2, option2.__value);
        option3.__value = "10";
        set_input_value(option3, option3.__value);
        option4.__value = "11";
        set_input_value(option4, option4.__value);
        option5.__value = "12";
        set_input_value(option5, option5.__value);
        option6.__value = "13";
        set_input_value(option6, option6.__value);
        attr(select, "id", "jenisRole");
        if (
          /*jenisRole*/
          ctx[4] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[15].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        append(select, option5);
        append(select, option6);
        select_option(
          select,
          /*jenisRole*/
          ctx[4],
          true
        );
        insert(target, t7, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[15]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*jenisRole*/
        16) {
          select_option(
            select,
            /*jenisRole*/
            ctx2[4]
          );
        }
        if (
          /*error*/
          ctx2[5].jenisRole
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_23(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t7);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_13(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[5].selectedActivation + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*error*/
        32 && t_value !== (t_value = /*error*/
        ctx2[5].selectedActivation + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_4(ctx) {
    let div;
    let label0;
    let input0;
    let t0;
    let t1;
    let label1;
    let input1;
    let t2;
    let t3;
    let if_block_anchor;
    let binding_group;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5].selectedActivation && create_if_block_13(ctx)
    );
    binding_group = init_binding_group(
      /*$$binding_groups*/
      ctx[17][0]
    );
    return {
      c() {
        div = element("div");
        label0 = element("label");
        input0 = element("input");
        t0 = text("\r\n                  Yes");
        t1 = space();
        label1 = element("label");
        input1 = element("input");
        t2 = text("\r\n                  No");
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input0, "id", "selectedActivation");
        attr(input0, "type", "radio");
        attr(input0, "name", "active");
        input0.__value = "1";
        set_input_value(input0, input0.__value);
        attr(label0, "class", "radio");
        attr(input1, "id", "selectedActivation");
        attr(input1, "type", "radio");
        attr(input1, "name", "active");
        input1.__value = "0";
        set_input_value(input1, input1.__value);
        attr(label1, "class", "radio");
        attr(div, "class", "control");
        binding_group.p(input0, input1);
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, label0);
        append(label0, input0);
        input0.checked = input0.__value === /*selectedActivation*/
        ctx[3];
        append(label0, t0);
        append(div, t1);
        append(div, label1);
        append(label1, input1);
        input1.checked = input1.__value === /*selectedActivation*/
        ctx[3];
        append(label1, t2);
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*input0_change_handler*/
              ctx[16]
            ),
            listen(
              input1,
              "change",
              /*input1_change_handler*/
              ctx[18]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*selectedActivation*/
        8) {
          input0.checked = input0.__value === /*selectedActivation*/
          ctx2[3];
        }
        if (dirty & /*selectedActivation*/
        8) {
          input1.checked = input1.__value === /*selectedActivation*/
          ctx2[3];
        }
        if (
          /*error*/
          ctx2[5].selectedActivation
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_13(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        binding_group.r();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_3(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block4, create_else_block3];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*role*/
        ctx2[9] === "admin"
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Create User";
        t1 = space();
        hr = element("hr");
        t2 = space();
        if_block.c();
        if_block_anchor = empty();
        attr(h2, "class", "title is-2");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_default_slot_22(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Username yang anda gunakan telah terdaftar, silahkan gunakan username lain";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_12(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi seluruh form!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot3(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berhasil menyimpan data";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment18(ctx) {
    let article2;
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let t2;
    let modalchecked;
    let updating_show_2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_3] },
        $$scope: { ctx }
      }
    });
    function modalerror0_show_binding(value) {
      ctx[19](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_22] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[6] !== void 0
    ) {
      modalerror0_props.show = /*showModalError*/
      ctx[6];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[20](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_12] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorEmptyForm*/
      ctx[7] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorEmptyForm*/
      ctx[7];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    function modalchecked_show_binding(value) {
      ctx[21](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot3] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[8] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[8];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
        t2 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, error, selectedActivation, jenisRole, createEmail, createPassword, createUsername*/
        134217791) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modalerror0_changes = {};
        if (dirty & /*$$scope*/
        134217728) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalError*/
        64) {
          updating_show = true;
          modalerror0_changes.show = /*showModalError*/
          ctx2[6];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty & /*$$scope*/
        134217728) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty & /*showModalErrorEmptyForm*/
        128) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorEmptyForm*/
          ctx2[7];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
        const modalchecked_changes = {};
        if (dirty & /*$$scope*/
        134217728) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty & /*showModalChecked*/
        256) {
          updating_show_2 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[8];
          add_flush_callback(() => updating_show_2 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
        }
        destroy_component(article2, detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function instance13($$self, $$props, $$invalidate) {
    let $apiURL;
    let $route;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(22, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(23, $route = $$value));
    let createUsername, createPassword, createEmail, createRole;
    let selectedActivation = "";
    let jenisRole = "";
    let error = {};
    let showModalError = false;
    let showModalErrorEmptyForm = false;
    let showModalChecked = false;
    const role = localStorage.getItem("role");
    const accessToken = localStorage.getItem("token");
    function kembali() {
      $route("/admin/usersmanagement");
    }
    const validateFormCreateUser = () => {
      $$invalidate(5, error = {});
      if (!createUsername)
        $$invalidate(5, error.createUsername = "Username is required.", error);
      if (!createPassword)
        $$invalidate(5, error.createPassword = "Password is required.", error);
      if (!createEmail)
        $$invalidate(5, error.createEmail = "Email is required.", error);
      if (!jenisRole)
        $$invalidate(5, error.jenisRole = "Role is required.", error);
      if (!selectedActivation)
        $$invalidate(5, error.selectedActivation = "Activation is required.", error);
    };
    async function HandleCreateUser() {
      validateFormCreateUser();
      if (Object.keys(error).length > 0) {
        $$invalidate(7, showModalErrorEmptyForm = true);
      } else {
        let payload2 = {
          createUsername,
          createPassword,
          createEmail,
          selectedActivation,
          jenisRole
        };
        try {
          const response = await fetch($apiURL + "/createUser", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify(payload2)
          });
          const result = await response.json();
          if (response.status === 401) {
            location.pathname = "/tokenexpired";
          } else {
            if (response.ok) {
              $$invalidate(8, showModalChecked = true);
              $$invalidate(0, createUsername = "");
              $$invalidate(1, createPassword = "");
              $$invalidate(2, createEmail = "");
              $$invalidate(3, selectedActivation = "");
              $$invalidate(4, jenisRole = "");
            } else {
              $$invalidate(6, showModalError = true);
            }
          }
        } catch (error2) {
          console.error("Error", error2);
        }
      }
    }
    const $$binding_groups = [[]];
    function input_input_handler() {
      createUsername = this.value;
      $$invalidate(0, createUsername);
    }
    function input_input_handler_1() {
      createPassword = this.value;
      $$invalidate(1, createPassword);
    }
    function input_input_handler_2() {
      createEmail = this.value;
      $$invalidate(2, createEmail);
    }
    function select_change_handler() {
      jenisRole = select_value(this);
      $$invalidate(4, jenisRole);
    }
    function input0_change_handler() {
      selectedActivation = this.__value;
      $$invalidate(3, selectedActivation);
    }
    function input1_change_handler() {
      selectedActivation = this.__value;
      $$invalidate(3, selectedActivation);
    }
    function modalerror0_show_binding(value) {
      showModalError = value;
      $$invalidate(6, showModalError);
    }
    function modalerror1_show_binding(value) {
      showModalErrorEmptyForm = value;
      $$invalidate(7, showModalErrorEmptyForm);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(8, showModalChecked);
    }
    return [
      createUsername,
      createPassword,
      createEmail,
      selectedActivation,
      jenisRole,
      error,
      showModalError,
      showModalErrorEmptyForm,
      showModalChecked,
      role,
      kembali,
      HandleCreateUser,
      input_input_handler,
      input_input_handler_1,
      input_input_handler_2,
      select_change_handler,
      input0_change_handler,
      $$binding_groups,
      input1_change_handler,
      modalerror0_show_binding,
      modalerror1_show_binding,
      modalchecked_show_binding
    ];
  }
  var Createuser = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance13, create_fragment18, safe_not_equal, {});
    }
  };
  var createuser_default = Createuser;

  // src/pages/admin/detailppm.svelte
  init_define_process();

  // src/libs/Fieldview.svelte
  init_define_process();

  // src/modules/Status.svelte
  init_define_process();
  function create_if_block_26(ctx) {
    let if_block_anchor;
    function select_block_type_3(ctx2, dirty) {
      if (
        /*code*/
        ctx2[0] === 0
      )
        return create_if_block_27;
      if (
        /*code*/
        ctx2[0] === 1
      )
        return create_if_block_28;
      if (
        /*code*/
        ctx2[0] === 2
      )
        return create_if_block_29;
      if (
        /*code*/
        ctx2[0] === 3
      )
        return create_if_block_30;
      if (
        /*code*/
        ctx2[0] === 4
      )
        return create_if_block_31;
      if (
        /*code*/
        ctx2[0] === 5
      )
        return create_if_block_322;
      if (
        /*code*/
        ctx2[0] === 6
      )
        return create_if_block_33;
      if (
        /*code*/
        ctx2[0] === 7
      )
        return create_if_block_34;
      if (
        /*code*/
        ctx2[0] === 8
      )
        return create_if_block_35;
      if (
        /*code*/
        ctx2[0] === 9
      )
        return create_if_block_36;
      if (
        /*code*/
        ctx2[0] === 10
      )
        return create_if_block_37;
      if (
        /*code*/
        ctx2[0] === 12
      )
        return create_if_block_38;
    }
    let current_block_type = select_block_type_3(ctx, -1);
    let if_block = current_block_type && current_block_type(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_3(ctx2, dirty))) {
          if (if_block)
            if_block.d(1);
          if_block = current_block_type && current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) {
          if_block.d(detaching);
        }
      }
    };
  }
  function create_if_block_132(ctx) {
    let if_block_anchor;
    function select_block_type_2(ctx2, dirty) {
      if (
        /*code*/
        ctx2[0] === 0
      )
        return create_if_block_14;
      if (
        /*code*/
        ctx2[0] === 1
      )
        return create_if_block_15;
      if (
        /*code*/
        ctx2[0] === 2
      )
        return create_if_block_16;
      if (
        /*code*/
        ctx2[0] === 3
      )
        return create_if_block_17;
      if (
        /*code*/
        ctx2[0] === 4
      )
        return create_if_block_18;
      if (
        /*code*/
        ctx2[0] === 5
      )
        return create_if_block_19;
      if (
        /*code*/
        ctx2[0] === 6
      )
        return create_if_block_20;
      if (
        /*code*/
        ctx2[0] === 7
      )
        return create_if_block_21;
      if (
        /*code*/
        ctx2[0] === 8
      )
        return create_if_block_222;
      if (
        /*code*/
        ctx2[0] === 9
      )
        return create_if_block_232;
      if (
        /*code*/
        ctx2[0] === 10
      )
        return create_if_block_24;
      if (
        /*code*/
        ctx2[0] === 12
      )
        return create_if_block_25;
    }
    let current_block_type = select_block_type_2(ctx, -1);
    let if_block = current_block_type && current_block_type(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_2(ctx2, dirty))) {
          if (if_block)
            if_block.d(1);
          if_block = current_block_type && current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) {
          if_block.d(detaching);
        }
      }
    };
  }
  function create_if_block5(ctx) {
    let if_block_anchor;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*code*/
        ctx2[0] === 0
      )
        return create_if_block_110;
      if (
        /*code*/
        ctx2[0] === 1
      )
        return create_if_block_210;
      if (
        /*code*/
        ctx2[0] === 2
      )
        return create_if_block_39;
      if (
        /*code*/
        ctx2[0] === 3
      )
        return create_if_block_43;
      if (
        /*code*/
        ctx2[0] === 4
      )
        return create_if_block_52;
      if (
        /*code*/
        ctx2[0] === 5
      )
        return create_if_block_6;
      if (
        /*code*/
        ctx2[0] === 6
      )
        return create_if_block_7;
      if (
        /*code*/
        ctx2[0] === 7
      )
        return create_if_block_8;
      if (
        /*code*/
        ctx2[0] === 8
      )
        return create_if_block_9;
      if (
        /*code*/
        ctx2[0] === 9
      )
        return create_if_block_10;
      if (
        /*code*/
        ctx2[0] === 10
      )
        return create_if_block_11;
      if (
        /*code*/
        ctx2[0] === 12
      )
        return create_if_block_122;
    }
    let current_block_type = select_block_type_1(ctx, -1);
    let if_block = current_block_type && current_block_type(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if (if_block)
            if_block.d(1);
          if_block = current_block_type && current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) {
          if_block.d(detaching);
        }
      }
    };
  }
  function create_if_block_38(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "PPM Selesai";
        attr(span, "class", "tag is-success");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_37(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Hasil PPM";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_36(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Hasil PPM";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_35(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "PPM Berlangsung";
        attr(span, "class", "tag is-info");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_34(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Proposal Ditolak";
        attr(span, "class", "tag is-danger");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_33(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review K. LPPM / K. Pusat Kajian";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_322(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi K. LPPM / K. Pusat Kajian";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_31(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review K. Departemen";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_30(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi K. Departemen";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_29(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Administrasi";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_28(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Proposal";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_27(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Draft Proposal";
        attr(span, "class", "tag is-warning is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_25(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "PPM Selesai";
        attr(span, "class", "tag is-success");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_24(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Hasil PPM";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_232(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Hasil PPM";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_222(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "PPM Berlangsung";
        attr(span, "class", "tag is-info");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_21(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Proposal Ditolak";
        attr(span, "class", "tag is-danger");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_20(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review K. LPPM / K. Pusat Kajian";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_19(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi K. LPPM / K. Pusat Kajian";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_18(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review K. Departemen";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_17(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi K. Departemen";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_16(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Administrasi";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_15(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Proposal";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_14(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Draft Proposal";
        attr(span, "class", "tag is-warning is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_122(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "PPM Selesai";
        attr(span, "class", "tag is-success");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_11(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Hasil PPM";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_10(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Hasil PPM";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_9(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "PPM Berlangsung";
        attr(span, "class", "tag is-info");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_8(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Proposal Ditolak";
        attr(span, "class", "tag is-danger");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_7(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review K. LPPM / K. Pusat Kajian";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_6(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi K. LPPM / K. Pusat Kajian";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_52(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review K. Departemen";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_43(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi K. Departemen";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_39(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Review Administrasi";
        attr(span, "class", "tag is-warning");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_210(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Revisi Proposal";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_110(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Draft Proposal";
        attr(span, "class", "tag is-warning is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_fragment19(ctx) {
    let if_block_anchor;
    function select_block_type(ctx2, dirty) {
      if (
        /*jenisSkema*/
        ctx2[1] === "Riset Mandiri" || /*jenisSkema*/
        ctx2[1] === "Pengabdian Masyarakat Mandiri"
      )
        return create_if_block5;
      if (
        /*jenisSkema*/
        ctx2[1] === "Riset Eksternal" || /*jenisSkema*/
        ctx2[1] === "Pengabdian Masyarakat Hibah Eksternal"
      )
        return create_if_block_132;
      if (
        /*jenisSkema*/
        ctx2[1] === "Riset Kelompok Keahlian" || /*jenisSkema*/
        ctx2[1] === "Riset Terapan" || /*jenisSkema*/
        ctx2[1] === "Riset Kerjasama" || /*jenisSkema*/
        ctx2[1] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
        ctx2[1] === "Pengabdian Masyarakat UMKM Binaan"
      )
        return create_if_block_26;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type && current_block_type(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, [dirty]) {
        if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if (if_block)
            if_block.d(1);
          if_block = current_block_type && current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block) {
          if_block.d(detaching);
        }
      }
    };
  }
  function instance14($$self, $$props, $$invalidate) {
    let { code } = $$props;
    let { jenisSkema } = $$props;
    $$self.$$set = ($$props2) => {
      if ("code" in $$props2)
        $$invalidate(0, code = $$props2.code);
      if ("jenisSkema" in $$props2)
        $$invalidate(1, jenisSkema = $$props2.jenisSkema);
    };
    return [code, jenisSkema];
  }
  var Status = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance14, create_fragment19, safe_not_equal, { code: 0, jenisSkema: 1 });
    }
  };
  var Status_default = Status;

  // src/libs/Fieldview.svelte
  function get_each_context3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[4] = list[i];
    return child_ctx;
  }
  function create_else_block4(ctx) {
    let t;
    let p;
    let current_block_type_index;
    let if_block1;
    let current;
    let if_block0 = (
      /*title*/
      ctx[0] !== "" && create_if_block_72(ctx)
    );
    const if_block_creators = [create_if_block_111, create_if_block_310, create_if_block_53];
    const if_blocks = [];
    function select_block_type_1(ctx2, dirty) {
      if (
        /*type*/
        ctx2[3] === "text"
      )
        return 0;
      if (
        /*type*/
        ctx2[3] === "list"
      )
        return 1;
      if (
        /*type*/
        ctx2[3] === "status"
      )
        return 2;
      return -1;
    }
    if (~(current_block_type_index = select_block_type_1(ctx, -1))) {
      if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    return {
      c() {
        if (if_block0)
          if_block0.c();
        t = space();
        p = element("p");
        if (if_block1)
          if_block1.c();
        attr(p, "class", "subtitle is-6 has-text-justified");
      },
      m(target, anchor) {
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t, anchor);
        insert(target, p, anchor);
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(p, null);
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*title*/
          ctx2[0] !== ""
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_72(ctx2);
            if_block0.c();
            if_block0.m(t.parentNode, t);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_1(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx2, dirty);
          }
        } else {
          if (if_block1) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block1 = if_blocks[current_block_type_index];
            if (!if_block1) {
              if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block1.c();
            } else {
              if_block1.p(ctx2, dirty);
            }
            transition_in(if_block1, 1);
            if_block1.m(p, null);
          } else {
            if_block1 = null;
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(p);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d();
        }
      }
    };
  }
  function create_if_block6(ctx) {
    let p0;
    let t;
    let p1;
    return {
      c() {
        p0 = element("p");
        p0.innerHTML = `<span></span>`;
        t = space();
        p1 = element("p");
        p1.innerHTML = `<span></span>`;
        attr(p0, "class", "title is-6");
        attr(p1, "class", "subtitle is-6");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        insert(target, t, anchor);
        insert(target, p1, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t);
          detach(p1);
        }
      }
    };
  }
  function create_if_block_72(ctx) {
    let p;
    let b;
    let t;
    return {
      c() {
        p = element("p");
        b = element("b");
        t = text(
          /*title*/
          ctx[0]
        );
        attr(p, "class", "title is-6");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, b);
        append(b, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*title*/
        1)
          set_data(
            t,
            /*title*/
            ctx2[0]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_53(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_62, create_else_block_3];
    const if_blocks = [];
    function select_block_type_4(ctx2, dirty) {
      if (
        /*content*/
        ctx2[1]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_4(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_4(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_310(ctx) {
    let if_block_anchor;
    function select_block_type_3(ctx2, dirty) {
      if (
        /*content*/
        ctx2[1] && /*content*/
        ctx2[1].length > 0
      )
        return create_if_block_44;
      return create_else_block_2;
    }
    let current_block_type = select_block_type_3(ctx, -1);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function create_if_block_111(ctx) {
    let if_block_anchor;
    function select_block_type_2(ctx2, dirty) {
      if (
        /*content*/
        ctx2[1]
      )
        return create_if_block_211;
      return create_else_block_1;
    }
    let current_block_type = select_block_type_2(ctx, -1);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function create_else_block_3(ctx) {
    let t;
    return {
      c() {
        t = text("...");
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_62(ctx) {
    let status;
    let current;
    status = new Status_default({
      props: {
        code: (
          /*content*/
          ctx[1]
        ),
        jenisSkema: (
          /*skema*/
          ctx[2]
        )
      }
    });
    return {
      c() {
        create_component(status.$$.fragment);
      },
      m(target, anchor) {
        mount_component(status, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const status_changes = {};
        if (dirty & /*content*/
        2)
          status_changes.code = /*content*/
          ctx2[1];
        if (dirty & /*skema*/
        4)
          status_changes.jenisSkema = /*skema*/
          ctx2[2];
        status.$set(status_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(status, detaching);
      }
    };
  }
  function create_else_block_2(ctx) {
    let t;
    return {
      c() {
        t = text("...");
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_44(ctx) {
    let ul;
    let each_value = ensure_array_like(
      /*content*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
    }
    return {
      c() {
        ul = element("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        set_style(ul, "list-style-type", "disc");
        attr(ul, "class", "svelte-1p63l8q");
      },
      m(target, anchor) {
        insert(target, ul, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*content*/
        2) {
          each_value = ensure_array_like(
            /*content*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context3(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block3(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(ul, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(ul);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block3(ctx) {
    let li;
    let t_value = (
      /*item*/
      ctx[4].label + ""
    );
    let t;
    return {
      c() {
        li = element("li");
        t = text(t_value);
        attr(li, "class", "svelte-1p63l8q");
      },
      m(target, anchor) {
        insert(target, li, anchor);
        append(li, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*content*/
        2 && t_value !== (t_value = /*item*/
        ctx2[4].label + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(li);
        }
      }
    };
  }
  function create_else_block_1(ctx) {
    let t;
    return {
      c() {
        t = text("...");
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_if_block_211(ctx) {
    let t;
    return {
      c() {
        t = text(
          /*content*/
          ctx[1]
        );
      },
      m(target, anchor) {
        insert(target, t, anchor);
      },
      p(ctx2, dirty) {
        if (dirty & /*content*/
        2)
          set_data(
            t,
            /*content*/
            ctx2[1]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
      }
    };
  }
  function create_fragment20(ctx) {
    let div1;
    let div0;
    let current_block_type_index;
    let if_block;
    let current;
    const if_block_creators = [create_if_block6, create_else_block4];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*title*/
        ctx2[0] === "" && /*content*/
        ctx2[1] === ""
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        if_block.c();
        attr(div0, "class", "field");
        attr(div1, "class", "column");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        if_blocks[current_block_type_index].m(div0, null);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div0, null);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        if_blocks[current_block_type_index].d();
      }
    };
  }
  function instance15($$self, $$props, $$invalidate) {
    let { title } = $$props;
    let { content } = $$props;
    let { skema } = $$props;
    let { type = "text" } = $$props;
    $$self.$$set = ($$props2) => {
      if ("title" in $$props2)
        $$invalidate(0, title = $$props2.title);
      if ("content" in $$props2)
        $$invalidate(1, content = $$props2.content);
      if ("skema" in $$props2)
        $$invalidate(2, skema = $$props2.skema);
      if ("type" in $$props2)
        $$invalidate(3, type = $$props2.type);
    };
    return [title, content, skema, type];
  }
  var Fieldview = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance15, create_fragment20, safe_not_equal, { title: 0, content: 1, skema: 2, type: 3 });
    }
  };
  var Fieldview_default = Fieldview;

  // src/libs/Modal.svelte
  init_define_process();
  var get_header_slot_changes = (dirty) => ({});
  var get_header_slot_context = (ctx) => ({});
  function create_fragment21(ctx) {
    let b;
    let div;
    let span1;
    let span0;
    let t1;
    let t2;
    let hr;
    let t3;
    let current;
    let mounted;
    let dispose;
    const header_slot_template = (
      /*#slots*/
      ctx[4].header
    );
    const header_slot = create_slot(
      header_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      get_header_slot_context
    );
    const default_slot_template = (
      /*#slots*/
      ctx[4].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    return {
      c() {
        b = element("b");
        div = element("div");
        span1 = element("span");
        span0 = element("span");
        span0.textContent = "\xD7";
        t1 = space();
        if (header_slot)
          header_slot.c();
        t2 = space();
        hr = element("hr");
        t3 = space();
        if (default_slot)
          default_slot.c();
        attr(span0, "class", "close svelte-gcisbw");
        attr(div, "class", "svelte-gcisbw");
        attr(b, "class", "svelte-gcisbw");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div);
        append(div, span1);
        append(span1, span0);
        append(span1, t1);
        if (header_slot) {
          header_slot.m(span1, null);
        }
        append(div, t2);
        append(div, hr);
        append(div, t3);
        if (default_slot) {
          default_slot.m(div, null);
        }
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              span0,
              "click",
              /*clickX*/
              ctx[2]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[1]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (header_slot) {
          if (header_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              header_slot,
              header_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                header_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                get_header_slot_changes
              ),
              get_header_slot_context
            );
          }
        }
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(header_slot, local);
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(header_slot, local);
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if (header_slot)
          header_slot.d(detaching);
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance16($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(3, $$scope = $$props2.$$scope);
    };
    return [show, handleClick, clickX, $$scope, slots];
  }
  var Modal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance16, create_fragment21, safe_not_equal, { show: 0 });
    }
  };
  var Modal_default = Modal;

  // src/libs/Icon.svelte
  init_define_process();
  function create_fragment22(ctx) {
    let svg;
    let path;
    return {
      c() {
        svg = svg_element("svg");
        path = svg_element("path");
        attr(path, "fill", "currentColor");
        attr(
          path,
          "d",
          /*src*/
          ctx[1]
        );
        attr(
          svg,
          "id",
          /*id*/
          ctx[0]
        );
        attr(svg, "xmlns", "http://www.w3.org/2000/svg");
        attr(
          svg,
          "width",
          /*width*/
          ctx[2]
        );
        attr(
          svg,
          "height",
          /*tinggi*/
          ctx[3]
        );
        attr(svg, "viewBox", "0 0 24 24");
      },
      m(target, anchor) {
        insert(target, svg, anchor);
        append(svg, path);
      },
      p(ctx2, [dirty]) {
        if (dirty & /*src*/
        2) {
          attr(
            path,
            "d",
            /*src*/
            ctx2[1]
          );
        }
        if (dirty & /*id*/
        1) {
          attr(
            svg,
            "id",
            /*id*/
            ctx2[0]
          );
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(svg);
        }
      }
    };
  }
  function instance17($$self, $$props, $$invalidate) {
    let { id } = $$props;
    let { src } = $$props;
    let { size = 1 } = $$props;
    let width = 24 * Number(size);
    let tinggi = 24 * Number(size);
    $$self.$$set = ($$props2) => {
      if ("id" in $$props2)
        $$invalidate(0, id = $$props2.id);
      if ("src" in $$props2)
        $$invalidate(1, src = $$props2.src);
      if ("size" in $$props2)
        $$invalidate(4, size = $$props2.size);
    };
    return [id, src, width, tinggi, size];
  }
  var Icon = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance17, create_fragment22, safe_not_equal, { id: 0, src: 1, size: 4 });
    }
  };
  var Icon_default = Icon;

  // src/libs/Select.svelte
  init_define_process();
  function get_each_context4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[10] = list[i];
    return child_ctx;
  }
  function create_if_block7(ctx) {
    let span;
    let each_value = ensure_array_like(
      /*filteredItems*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
    }
    return {
      c() {
        span = element("span");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(span, "class", "svelte-96jy70");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(span, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filteredItems, setSelected*/
        12) {
          each_value = ensure_array_like(
            /*filteredItems*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context4(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block4(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(span, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block4(ctx) {
    let a;
    let t_value = (
      /*item*/
      ctx[10].label + ""
    );
    let t;
    let a_data_value_value;
    let mounted;
    let dispose;
    return {
      c() {
        a = element("a");
        t = text(t_value);
        attr(a, "data-value", a_data_value_value = /*item*/
        ctx[10].value);
        attr(a, "class", "svelte-96jy70");
      },
      m(target, anchor) {
        insert(target, a, anchor);
        append(a, t);
        if (!mounted) {
          dispose = listen(
            a,
            "click",
            /*setSelected*/
            ctx[3]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filteredItems*/
        4 && t_value !== (t_value = /*item*/
        ctx2[10].label + ""))
          set_data(t, t_value);
        if (dirty & /*filteredItems*/
        4 && a_data_value_value !== (a_data_value_value = /*item*/
        ctx2[10].value)) {
          attr(a, "data-value", a_data_value_value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(a);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment23(ctx) {
    let div;
    let input;
    let t;
    let mounted;
    let dispose;
    let if_block = (
      /*filteredItems*/
      ctx[2] && create_if_block7(ctx)
    );
    return {
      c() {
        div = element("div");
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        attr(input, "class", "input svelte-96jy70");
        attr(input, "placeholder", "Cari user (min 2 huruf)");
        toggle_class(
          input,
          "focused",
          /*focused*/
          ctx[1]
        );
        attr(div, "class", "select svelte-96jy70");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(
          input,
          /*value*/
          ctx[0]
        );
        append(div, t);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[7]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (dirty & /*value*/
        1 && input.value !== /*value*/
        ctx2[0]) {
          set_input_value(
            input,
            /*value*/
            ctx2[0]
          );
        }
        if (dirty & /*focused*/
        2) {
          toggle_class(
            input,
            "focused",
            /*focused*/
            ctx2[1]
          );
        }
        if (
          /*filteredItems*/
          ctx2[2]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block7(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function instance18($$self, $$props, $$invalidate) {
    let { items } = $$props;
    let { start = 1 } = $$props;
    let { result = [] } = $$props;
    let focused = 0;
    let value = "";
    let filteredItems = items;
    function setSelected(e) {
      e.preventDefault();
      let el = e.target;
      if (el.classList.contains("selected")) {
        el.classList.remove("selected");
        $$invalidate(4, result = result.filter((it) => {
          return it.value !== el.getAttribute("data-value");
        }));
      } else {
        el.classList.add("selected");
        $$invalidate(4, result = [
          ...result,
          {
            value: el.getAttribute("data-value").trim(),
            label: el.innerText.trim(),
            role: "Anggota"
          }
        ]);
      }
    }
    function doFilter() {
      if (value.length >= start) {
        $$invalidate(2, filteredItems = items.filter((item) => {
          let it;
          if (item.label) {
            let idUser2 = Number(localStorage.getItem("id"));
            let itemLabel = item.label.toLowerCase();
            let itemValue = item.value;
            let valueLabel = value.toLowerCase();
            it = itemLabel.includes(valueLabel) && itemValue !== idUser2;
          }
          return it;
        }));
      } else {
        $$invalidate(2, filteredItems = items);
      }
    }
    function clickOutside(e) {
      let el = e.target;
      if (el.tagName !== "A" && el.tagName !== "INPUT") {
        $$invalidate(0, value = "");
        $$invalidate(1, focused = 0);
      }
    }
    document.querySelector("body").addEventListener("click", clickOutside);
    function input_input_handler() {
      value = this.value;
      $$invalidate(0, value);
    }
    $$self.$$set = ($$props2) => {
      if ("items" in $$props2)
        $$invalidate(5, items = $$props2.items);
      if ("start" in $$props2)
        $$invalidate(6, start = $$props2.start);
      if ("result" in $$props2)
        $$invalidate(4, result = $$props2.result);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*value, start*/
      65) {
        $:
          value, $$invalidate(1, focused = value.length >= start ? 1 : 0), doFilter();
      }
    };
    return [
      value,
      focused,
      filteredItems,
      setSelected,
      result,
      items,
      start,
      input_input_handler
    ];
  }
  var Select = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance18, create_fragment23, safe_not_equal, { items: 5, start: 6, result: 4 });
    }
  };
  var Select_default = Select;

  // src/store/icons.js
  init_define_process();
  var accountRounded = "M12 19.2c-2.5 0-4.71-1.28-6-3.2c.03-2 4-3.1 6-3.1s5.97 1.1 6 3.1a7.232 7.232 0 0 1-6 3.2M12 5a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-3A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10c0-5.53-4.5-10-10-10";
  var accountAdd = "M15 4a4 4 0 0 0-4 4a4 4 0 0 0 4 4a4 4 0 0 0 4-4a4 4 0 0 0-4-4m0 1.9a2.1 2.1 0 1 1 0 4.2A2.1 2.1 0 0 1 12.9 8A2.1 2.1 0 0 1 15 5.9M4 7v3H1v2h3v3h2v-3h3v-2H6V7H4m11 6c-2.67 0-8 1.33-8 4v3h16v-3c0-2.67-5.33-4-8-4m0 1.9c2.97 0 6.1 1.46 6.1 2.1v1.1H8.9V17c0-.64 3.1-2.1 6.1-2.1Z";
  var accountEdit = "M2 17v3h8v-1.89H3.9V17c0-.64 3.13-2.1 6.1-2.1c.96.01 1.91.14 2.83.38l1.52-1.52c-1.4-.47-2.85-.73-4.35-.76c-2.67 0-8 1.33-8 4m8-13C7.79 4 6 5.79 6 8s1.79 4 4 4s4-1.79 4-4s-1.79-4-4-4m0 6c-1.1 0-2-.89-2-2s.9-2 2-2s2 .9 2 2s-.89 2-2 2m11.7 3.35l-1 1l-2.05-2l1-1a.55.55 0 0 1 .77 0l1.28 1.28c.21.21.21.56 0 .77M12 18.94l6.06-6.06l2.05 2l-6 6.07H12z";
  var infoOutline = "M11 17h2v-6h-2v6Zm1-8q.425 0 .713-.288T13 8q0-.425-.288-.712T12 7q-.425 0-.712.288T11 8q0 .425.288.713T12 9Zm0 13q-2.075 0-3.9-.788t-3.175-2.137q-1.35-1.35-2.137-3.175T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Zm0-2q3.35 0 5.675-2.325T20 12q0-3.35-2.325-5.675T12 4Q8.65 4 6.325 6.325T4 12q0 3.35 2.325 5.675T12 20Zm0-8Z";
  var addProposal = "M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v6.7q-.475-.225-.975-.387T19 11.075V5H5v14h6.05q.075.55.238 1.05t.387.95H5Zm0-3v1V5v6.075V11v7Zm2-1h4.075q.075-.525.238-1.025t.362-.975H7v2Zm0-4h6.1q.8-.75 1.788-1.25T17 11.075V11H7v2Zm0-4h10V7H7v2Zm11 14q-2.075 0-3.537-1.463T13 18q0-2.075 1.463-3.537T18 13q2.075 0 3.538 1.463T23 18q0 2.075-1.463 3.538T18 23Zm-.5-2h1v-2.5H21v-1h-2.5V15h-1v2.5H15v1h2.5V21Z";
  var add = "M11 13H5v-2h6V5h2v6h6v2h-6v6h-2z";
  var deleteIcon = "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z";
  var penelitian = "M15.5 12c2.5 0 4.5 2 4.5 4.5c0 .88-.25 1.71-.69 2.4l3.08 3.1L21 23.39l-3.12-3.07c-.69.43-1.51.68-2.38.68c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5m0 2a2.5 2.5 0 0 0-2.5 2.5a2.5 2.5 0 0 0 2.5 2.5a2.5 2.5 0 0 0 2.5-2.5a2.5 2.5 0 0 0-2.5-2.5M5 3h14c1.11 0 2 .89 2 2v8.03c-.5-.8-1.19-1.49-2-2.03V5H5v14h4.5c.31.75.76 1.42 1.31 2H5c-1.11 0-2-.89-2-2V5c0-1.11.89-2 2-2m2 4h10v2H7zm0 4h5.03c-.8.5-1.49 1.19-2.03 2H7zm0 4h2.17c-.11.5-.17 1-.17 1.5v.5H7z";
  var pengmas = "M16.5 13c-1.2 0-3.07.34-4.5 1c-1.43-.67-3.3-1-4.5-1C5.33 13 1 14.08 1 16.25V19h22v-2.75c0-2.17-4.33-3.25-6.5-3.25m-4 4.5h-10v-1.25c0-.54 2.56-1.75 5-1.75s5 1.21 5 1.75zm9 0H14v-1.25c0-.46-.2-.86-.52-1.22c.88-.3 1.96-.53 3.02-.53c2.44 0 5 1.21 5 1.75zM7.5 12c1.93 0 3.5-1.57 3.5-3.5S9.43 5 7.5 5S4 6.57 4 8.5S5.57 12 7.5 12m0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2s-2-.9-2-2s.9-2 2-2m9 5.5c1.93 0 3.5-1.57 3.5-3.5S18.43 5 16.5 5S13 6.57 13 8.5s1.57 3.5 3.5 3.5m0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2s-2-.9-2-2s.9-2 2-2";
  var jurnal = "M12.04 6.017a4.75 4.75 0 1 0 .335-.012h-.01a1.35 1.35 0 0 0-.326.012m-1.622 1.835c-.226.677-.368 1.506-.407 2.398h-1.1a3.5 3.5 0 0 1 1.507-2.398m-.374 3.898a8.43 8.43 0 0 0 .379 1.91a3.507 3.507 0 0 1-1.405-1.91zm3.966 2.1l.003-.008c.22-.587.373-1.306.443-2.092h1.276a3.51 3.51 0 0 1-1.722 2.1m-1.061-2.1a6.556 6.556 0 0 1-.34 1.565c-.118.313-.24.514-.336.623a.914.914 0 0 1-.023.025a.914.914 0 0 1-.023-.025c-.097-.11-.218-.31-.335-.623c-.154-.41-.276-.947-.341-1.565zm.039-1.5h-1.476c.042-.828.185-1.547.38-2.065c.117-.313.238-.514.335-.623a.79.79 0 0 1 .023-.025a.79.79 0 0 1 .023.025c.097.11.218.31.335.623c.195.518.338 1.237.38 2.065m1.501 0c-.043-.978-.21-1.88-.475-2.588a3.503 3.503 0 0 1 1.825 2.588zm-2.182-2.76l-.004.002zm-.113 0l.003.002a.014.014 0 0 0-.004-.003zM6.5 2A2.5 2.5 0 0 0 4 4.5v15A2.5 2.5 0 0 0 6.5 22h13.25a.75.75 0 0 0 0-1.5H6.5a1 1 0 0 1-1-1h14.25a.75.75 0 0 0 .75-.75V4.5A2.5 2.5 0 0 0 18 2zM19 4.5V18H5.5V4.5a1 1 0 0 1 1-1H18a1 1 0 0 1 1 1m-6.697 9.509a.019.019 0 0 1 .004.002Z";
  var copyright = "M12 21a9 9 0 1 0 0-18a9 9 0 0 0 0 18m11-9c0 6.075-4.925 11-11 11S1 18.075 1 12S5.925 1 12 1s11 4.925 11 11M9.525 9.526a3.5 3.5 0 0 0 4.95 4.95l.707-.708l1.414 1.415l-.707.707a5.5 5.5 0 1 1 0-7.778l.707.707l-1.414 1.414l-.707-.707a3.5 3.5 0 0 0-4.95 0";
  var edit = "M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h8.925l-2 2H5v14h14v-6.95l2-2V19q0 .825-.587 1.413T19 21zm4-6v-4.25l9.175-9.175q.3-.3.675-.45t.75-.15q.4 0 .763.15t.662.45L22.425 3q.275.3.425.663T23 4.4q0 .375-.137.738t-.438.662L13.25 15zM21.025 4.4l-1.4-1.4zM11 13h1.4l5.8-5.8l-.7-.7l-.725-.7L11 11.575zm6.5-6.5l-.725-.7zl.7.7z";
  var searchIcon = "m19.6 21l-6.3-6.3q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5t1.888-4.612T9.5 3t4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l6.3 6.3zM9.5 14q1.875 0 3.188-1.312T14 9.5t-1.312-3.187T9.5 5T6.313 6.313T5 9.5t1.313 3.188T9.5 14";
  var cancelIcon = "M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2m0 16H5V5h14zM17 8.4L13.4 12l3.6 3.6l-1.4 1.4l-3.6-3.6L8.4 17L7 15.6l3.6-3.6L7 8.4L8.4 7l3.6 3.6L15.6 7z";
  var downloadIcon = "m12 16l-5-5l1.4-1.45l2.6 2.6V4h2v8.15l2.6-2.6L17 11zm-6 4q-.825 0-1.412-.587T4 18v-3h2v3h12v-3h2v3q0 .825-.587 1.413T18 20z";
  var dashboardFill = "M4 13h6c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1m0 8h6c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1m10 0h6c.55 0 1-.45 1-1v-8c0-.55-.45-1-1-1h-6c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1M13 4v4c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1h-6c-.55 0-1 .45-1 1";
  var article = "M4 21q-.825 0-1.412-.587T2 19V8q0-.425.288-.712T3 7t.713.288T4 8v11h14q.425 0 .713.288T19 20t-.288.713T18 21zm4-4q-.825 0-1.412-.587T6 15V4q0-.425.288-.712T7 3h15q.425 0 .713.288T23 4v11q0 .825-.587 1.413T21 17zm3-5h2q.425 0 .713-.288T14 11V8q0-.425-.288-.712T13 7h-2q-.425 0-.712.288T10 8v3q0 .425.288.713T11 12m5 0h2q.425 0 .713-.288T19 11t-.288-.712T18 10h-2q-.425 0-.712.288T15 11t.288.713T16 12m0-3h2q.425 0 .713-.288T19 8t-.288-.712T18 7h-2q-.425 0-.712.288T15 8t.288.713T16 9";
  var profile = "M17 16q-1.25 0-2.125-.875T14 13t.875-2.125T17 10t2.125.875T20 13t-.875 2.125T17 16m-8 4.1v.9H5q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v5q-.775-.975-1.75-1.487T17 8q0-.425-.288-.712T16 7H8q-.425 0-.712.288T7 8t.288.713T8 9h6q-.5.4-.9.9t-.675 1.1H8q-.425 0-.712.288T7 12t.288.713T8 13h4q0 .525.113 1.025t.312.975H8q-.425 0-.712.288T7 16t.288.713T8 17h2.45q-.675.575-1.062 1.388T9 20.1m3 2.9q-.425 0-.712-.288T11 22v-1.9q0-.525.25-.987t.7-.738q.8-.475 1.35-.663t1.475-.337q.3-.05.6.013t.5.287L17 19l1.1-1.325q.2-.25.5-.3t.6 0q.925.15 1.475.338t1.35.662q.45.275.713.738T23 20.1V22q0 .425-.288.713T22 23z";
  var about = "M12 7q.425 0 .713-.288T13 6t-.288-.712T12 5t-.712.288T11 6t.288.713T12 7m0 8q.425 0 .713-.288T13 14v-4q0-.425-.288-.712T12 9t-.712.288T11 10v4q0 .425.288.713T12 15m-6 3l-2.3 2.3q-.475.475-1.088.213T2 19.575V4q0-.825.588-1.412T4 2h16q.825 0 1.413.588T22 4v12q0 .825-.587 1.413T20 18z";
  var pengumuman = "M12 8H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h1v4a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-4h3l5 4V4zm9.5 4c0 1.71-.96 3.26-2.5 4V8c1.53.75 2.5 2.3 2.5 4";
  var template = "M6 2c-1.11 0-2 .89-2 2v16a2 2 0 0 0 2 2h4v-1.91L12.09 18H6v-2h8.09l2-2H6v-2h12.09L20 10.09V8l-6-6zm7 1.5L18.5 9H13zm7.15 9.5a.55.55 0 0 0-.4.16l-1.02 1.02l2.09 2.08l1.02-1.01c.21-.22.21-.58 0-.79l-1.3-1.3a.54.54 0 0 0-.39-.16m-2.01 1.77L12 20.92V23h2.08l6.15-6.15z";
  var approval = "m17.275 20.25l3.475-3.45l-1.05-1.05l-2.425 2.375l-.975-.975l-1.05 1.075zM6 9h12V7H6zm12 14q-2.075 0-3.537-1.463T13 18t1.463-3.537T18 13t3.538 1.463T23 18t-1.463 3.538T18 23M3 22V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v6.675q-.7-.35-1.463-.513T18 11H6v2h7.1q-.425.425-.787.925T11.675 15H6v2h5.075q-.05.25-.062.488T11 18q0 1.05.288 2.013t.862 1.837L12 22l-1.5-1.5L9 22l-1.5-1.5L6 22l-1.5-1.5z";

  // src/pages/admin/detailppm.svelte
  var { Boolean: Boolean_1 } = globals;
  function get_each_context5(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[173] = list[i];
    child_ctx[175] = i;
    return child_ctx;
  }
  function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[176] = list[i];
    return child_ctx;
  }
  function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[179] = list[i];
    return child_ctx;
  }
  function get_each_context_3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[182] = list[i];
    return child_ctx;
  }
  function get_each_context_4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[185] = list[i];
    return child_ctx;
  }
  function get_each_context_5(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[188] = list[i];
    return child_ctx;
  }
  function get_each_context_6(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[191] = list[i];
    return child_ctx;
  }
  function get_each_context_7(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[194] = list[i];
    return child_ctx;
  }
  function get_each_context_8(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[197] = list[i];
    return child_ctx;
  }
  function get_each_context_9(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[200] = list[i];
    return child_ctx;
  }
  function get_each_context_10(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[203] = list[i];
    return child_ctx;
  }
  function get_each_context_11(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[203] = list[i];
    return child_ctx;
  }
  function get_each_context_13(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[208] = list[i];
    return child_ctx;
  }
  function get_each_context_12(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[208] = list[i];
    child_ctx[210] = i;
    return child_ctx;
  }
  function create_if_block8(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_72] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*biodataAnggota, isLoading, skPPMVisible, presentasiVisible, jenisSkema, error, hasilPPMVisible, statusPencairanDana, danaPPMVisible, skpVisible, kpkSelected, klppmSelected, reviewerSelected, kdeptSelected, inputEvlVisible, CRPVisible, iPPVisible, anggotaTim, editModeRAB, editModeKontrakPPM, editModeProposal, jenisKegiatan, jenisProposal, data*/
        2145382463 | dirty[1] & /*tab2, status, $skPPMFile, presentasiHasilPPM, itemsCHP, catatanRevisiHasilPPM, $laporanKeuanganFile, $hasilPPMFile, $suratTugasFile, $suratKontrakFile, $skPendanaanFile, isFormFilled, ka_pusat_kajian, ka_lppm, reviewer, ka_departemen, itemsRCR, catatanRevisiProposal, $penilaianFile, $rabFile, $kontrakFile, $ppmFile, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, abstrak, judul, view, tab1*/
        2147483647 | dirty[6] & /*$$scope*/
        134217728) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_if_block_133(ctx) {
    let div0;
    let current_block_type_index;
    let if_block0;
    let t0;
    let show_if_4 = (
      /*skemaInternal*/
      ctx[62].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t1;
    let t2;
    let t3;
    let show_if_3 = (
      /*skemaInternal*/
      ctx[62].includes(
        /*jenisSkema*/
        ctx[30]
      ) && /*status*/
      ctx[38] >= 8 || /*skemaEksternal*/
      ctx[63].includes(
        /*jenisSkema*/
        ctx[30]
      ) && /*status*/
      ctx[38] >= 8 || /*skemaMandiri*/
      ctx[64].includes(
        /*jenisSkema*/
        ctx[30]
      ) && /*status*/
      ctx[38] >= 8
    );
    let t4;
    let div1;
    let show_if_2 = (
      /*ShowRPButton*/
      ctx[87]()
    );
    let t5;
    let t6;
    let show_if_1 = (
      /*ShowRDPButton*/
      ctx[88]()
    );
    let t7;
    let show_if = (
      /*ShowButtonPerbaikan*/
      ctx[91]()
    );
    let current;
    const if_block_creators = [create_if_block_50, create_else_block_18];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (!/*view*/
      ctx2[48])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = show_if_4 && create_if_block_47(ctx);
    let if_block2 = (
      /*status*/
      ctx[38] != 0 && create_if_block_422(ctx)
    );
    let if_block3 = (
      /*status*/
      ctx[38] != 0 && create_if_block_392(ctx)
    );
    let if_block4 = show_if_3 && create_if_block_182(ctx);
    let if_block5 = show_if_2 && create_if_block_172(ctx);
    let if_block6 = (
      /*status*/
      ctx[38] === 4 && create_if_block_162(ctx)
    );
    let if_block7 = show_if_1 && create_if_block_152(ctx);
    let if_block8 = show_if && create_if_block_142(ctx);
    return {
      c() {
        div0 = element("div");
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        if (if_block2)
          if_block2.c();
        t2 = space();
        if (if_block3)
          if_block3.c();
        t3 = space();
        if (if_block4)
          if_block4.c();
        t4 = space();
        div1 = element("div");
        if (if_block5)
          if_block5.c();
        t5 = space();
        if (if_block6)
          if_block6.c();
        t6 = space();
        if (if_block7)
          if_block7.c();
        t7 = space();
        if (if_block8)
          if_block8.c();
        attr(div0, "class", "box");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        if_blocks[current_block_type_index].m(div0, null);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t2, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, t3, anchor);
        if (if_block4)
          if_block4.m(target, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        if (if_block5)
          if_block5.m(div1, null);
        append(div1, t5);
        if (if_block6)
          if_block6.m(div1, null);
        append(div1, t6);
        if (if_block7)
          if_block7.m(div1, null);
        append(div1, t7);
        if (if_block8)
          if_block8.m(div1, null);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(div0, null);
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if_4 = /*skemaInternal*/
          ctx2[62].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if_4) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            1073741824) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_47(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[38] != 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_422(ctx2);
            if_block2.c();
            if_block2.m(t2.parentNode, t2);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*status*/
          ctx2[38] != 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[1] & /*status*/
            128) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_392(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(t3.parentNode, t3);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824 | dirty[1] & /*status*/
        128)
          show_if_3 = /*skemaInternal*/
          ctx2[62].includes(
            /*jenisSkema*/
            ctx2[30]
          ) && /*status*/
          ctx2[38] >= 8 || /*skemaEksternal*/
          ctx2[63].includes(
            /*jenisSkema*/
            ctx2[30]
          ) && /*status*/
          ctx2[38] >= 8 || /*skemaMandiri*/
          ctx2[64].includes(
            /*jenisSkema*/
            ctx2[30]
          ) && /*status*/
          ctx2[38] >= 8;
        if (show_if_3) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            1073741824 | dirty[1] & /*status*/
            128) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_182(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(t4.parentNode, t4);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
        if (show_if_2)
          if_block5.p(ctx2, dirty);
        if (
          /*status*/
          ctx2[38] === 4
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_162(ctx2);
            if_block6.c();
            if_block6.m(div1, t6);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (show_if_1)
          if_block7.p(ctx2, dirty);
        if (show_if)
          if_block8.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block3);
        transition_in(if_block4);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block3);
        transition_out(if_block4);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(div1);
        }
        if_blocks[current_block_type_index].d();
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
        if (if_block4)
          if_block4.d(detaching);
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_else_block_18(ctx) {
    let div0;
    let fieldview0;
    let t0;
    let div1;
    let fieldview1;
    let t1;
    let div2;
    let fieldview2;
    let t2;
    let hr;
    let t3;
    let div3;
    let fieldview3;
    let t4;
    let fieldview4;
    let t5;
    let div4;
    let fieldview5;
    let t6;
    let fieldview6;
    let t7;
    let div5;
    let fieldview7;
    let t8;
    let fieldview8;
    let t9;
    let div6;
    let fieldview9;
    let t10;
    let fieldview10;
    let t11;
    let div9;
    let div8;
    let div7;
    let p0;
    let t13;
    let p1;
    let button;
    let t15;
    let show_if_1 = (
      /*skemaEksternal*/
      ctx[63].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t16;
    let show_if = (
      /*skemaInternal*/
      ctx[62].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t17;
    let div10;
    let p2;
    let t19;
    let table;
    let thead;
    let t23;
    let tbody;
    let current;
    let mounted;
    let dispose;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Judul",
        content: (
          /*data*/
          ctx[27].judul
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Abstrak",
        content: (
          /*data*/
          ctx[27].abstrak
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "Status",
        content: (
          /*status*/
          ctx[38]
        ),
        skema: (
          /*data*/
          ctx[27].jenis_skema
        ),
        type: "status"
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "Jenis Proposal",
        content: (
          /*jenisProposal*/
          ctx[28]
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Jenis Kegiatan",
        content: (
          /*jenisKegiatan*/
          ctx[29]
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Jenis Skema",
        content: (
          /*jenisSkema*/
          ctx[30]
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Kelompok Keahlian",
        content: (
          /*kelompokKeahlian*/
          ctx[31]
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Topik",
        content: (
          /*topik*/
          ctx[32]
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Biaya Penelitian",
        content: (
          /*biayaPenelitian*/
          ctx[35]
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Tanggal Mulai",
        content: (
          /*tanggalMulai*/
          ctx[33]
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Tanggal Selesai",
        content: (
          /*tanggalSelesai*/
          ctx[34]
        )
      }
    });
    let if_block0 = show_if_1 && create_if_block_78(ctx);
    let if_block1 = show_if && create_if_block_77(ctx);
    let if_block2 = (
      /*anggotaTim*/
      ctx[26].length > 0 && create_if_block_76(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(fieldview0.$$.fragment);
        t0 = space();
        div1 = element("div");
        create_component(fieldview1.$$.fragment);
        t1 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t2 = space();
        hr = element("hr");
        t3 = space();
        div3 = element("div");
        create_component(fieldview3.$$.fragment);
        t4 = space();
        create_component(fieldview4.$$.fragment);
        t5 = space();
        div4 = element("div");
        create_component(fieldview5.$$.fragment);
        t6 = space();
        create_component(fieldview6.$$.fragment);
        t7 = space();
        div5 = element("div");
        create_component(fieldview7.$$.fragment);
        t8 = space();
        create_component(fieldview8.$$.fragment);
        t9 = space();
        div6 = element("div");
        create_component(fieldview9.$$.fragment);
        t10 = space();
        create_component(fieldview10.$$.fragment);
        t11 = space();
        div9 = element("div");
        div8 = element("div");
        div7 = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File Proposal</b>`;
        t13 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download Proposal";
        t15 = space();
        if (if_block0)
          if_block0.c();
        t16 = space();
        if (if_block1)
          if_block1.c();
        t17 = space();
        div10 = element("div");
        p2 = element("p");
        p2.innerHTML = `<b>Anggota Tim</b>`;
        t19 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t23 = space();
        tbody = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(div0, "class", "columns is-desktop");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div7, "class", "field");
        attr(div8, "class", "column");
        attr(div9, "class", "columns is-desktop");
        attr(p2, "class", "title is-6");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div10, "class", "field");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(fieldview0, div0, null);
        insert(target, t0, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview1, div1, null);
        insert(target, t1, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        insert(target, t2, anchor);
        insert(target, hr, anchor);
        insert(target, t3, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview3, div3, null);
        append(div3, t4);
        mount_component(fieldview4, div3, null);
        insert(target, t5, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview5, div4, null);
        append(div4, t6);
        mount_component(fieldview6, div4, null);
        insert(target, t7, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview7, div5, null);
        append(div5, t8);
        mount_component(fieldview8, div5, null);
        insert(target, t9, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview9, div6, null);
        append(div6, t10);
        mount_component(fieldview10, div6, null);
        insert(target, t11, anchor);
        insert(target, div9, anchor);
        append(div9, div8);
        append(div8, div7);
        append(div7, p0);
        append(div7, t13);
        append(div7, p1);
        append(p1, button);
        append(div9, t15);
        if (if_block0)
          if_block0.m(div9, null);
        append(div9, t16);
        if (if_block1)
          if_block1.m(div9, null);
        insert(target, t17, anchor);
        insert(target, div10, anchor);
        append(div10, p2);
        append(div10, t19);
        append(div10, table);
        append(table, thead);
        append(table, t23);
        append(table, tbody);
        if (if_block2)
          if_block2.m(tbody, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPpm*/
            ctx[77]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*data*/
        134217728)
          fieldview0_changes.content = /*data*/
          ctx2[27].judul;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*data*/
        134217728)
          fieldview1_changes.content = /*data*/
          ctx2[27].abstrak;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[1] & /*status*/
        128)
          fieldview2_changes.content = /*status*/
          ctx2[38];
        if (dirty[0] & /*data*/
        134217728)
          fieldview2_changes.skema = /*data*/
          ctx2[27].jenis_skema;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*jenisProposal*/
        268435456)
          fieldview3_changes.content = /*jenisProposal*/
          ctx2[28];
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        536870912)
          fieldview4_changes.content = /*jenisKegiatan*/
          ctx2[29];
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          fieldview5_changes.content = /*jenisSkema*/
          ctx2[30];
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[1] & /*kelompokKeahlian*/
        1)
          fieldview6_changes.content = /*kelompokKeahlian*/
          ctx2[31];
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[1] & /*topik*/
        2)
          fieldview7_changes.content = /*topik*/
          ctx2[32];
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[1] & /*biayaPenelitian*/
        16)
          fieldview8_changes.content = /*biayaPenelitian*/
          ctx2[35];
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[1] & /*tanggalMulai*/
        4)
          fieldview9_changes.content = /*tanggalMulai*/
          ctx2[33];
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[1] & /*tanggalSelesai*/
        8)
          fieldview10_changes.content = /*tanggalSelesai*/
          ctx2[34];
        fieldview10.$set(fieldview10_changes);
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if_1 = /*skemaEksternal*/
          ctx2[63].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if_1) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_78(ctx2);
            if_block0.c();
            if_block0.m(div9, t16);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if = /*skemaInternal*/
          ctx2[62].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_77(ctx2);
            if_block1.c();
            if_block1.m(div9, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*anggotaTim*/
          ctx2[26].length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_76(ctx2);
            if_block2.c();
            if_block2.m(tbody, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t0);
          detach(div1);
          detach(t1);
          detach(div2);
          detach(t2);
          detach(hr);
          detach(t3);
          detach(div3);
          detach(t5);
          detach(div4);
          detach(t7);
          detach(div5);
          detach(t9);
          detach(div6);
          detach(t11);
          detach(div9);
          detach(t17);
          detach(div10);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_50(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let hr0;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let field9;
    let t10;
    let field10;
    let t11;
    let hr1;
    let t12;
    let field11;
    let t13;
    let show_if_1 = (
      /*skemaEksternal*/
      ctx[63].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t14;
    let show_if = (
      /*skemaInternal*/
      ctx[62].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t15;
    let hr2;
    let t16;
    let field12;
    let t17;
    let br;
    let t18;
    let table;
    let thead;
    let t23;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_222] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_21] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Status",
        $$slots: { default: [create_default_slot_20] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_19] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_18] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_17] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_16] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_15] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_14] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_13] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_122] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "File Proposal",
        $$slots: { default: [create_default_slot_11] },
        $$scope: { ctx }
      }
    });
    let if_block0 = show_if_1 && create_if_block_58(ctx);
    let if_block1 = show_if && create_if_block_54(ctx);
    field12 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_82] },
        $$scope: { ctx }
      }
    });
    let if_block2 = (
      /*anggotaTim*/
      ctx[26].length > 0 && create_if_block_51(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        hr0 = element("hr");
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        create_component(field9.$$.fragment);
        t10 = space();
        create_component(field10.$$.fragment);
        t11 = space();
        hr1 = element("hr");
        t12 = space();
        create_component(field11.$$.fragment);
        t13 = space();
        if (if_block0)
          if_block0.c();
        t14 = space();
        if (if_block1)
          if_block1.c();
        t15 = space();
        hr2 = element("hr");
        t16 = space();
        create_component(field12.$$.fragment);
        t17 = space();
        br = element("br");
        t18 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:65px"></th> <th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t23 = space();
        tbody = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        insert(target, hr0, anchor);
        insert(target, t3, anchor);
        mount_component(field3, target, anchor);
        insert(target, t4, anchor);
        mount_component(field4, target, anchor);
        insert(target, t5, anchor);
        mount_component(field5, target, anchor);
        insert(target, t6, anchor);
        mount_component(field6, target, anchor);
        insert(target, t7, anchor);
        mount_component(field7, target, anchor);
        insert(target, t8, anchor);
        mount_component(field8, target, anchor);
        insert(target, t9, anchor);
        mount_component(field9, target, anchor);
        insert(target, t10, anchor);
        mount_component(field10, target, anchor);
        insert(target, t11, anchor);
        insert(target, hr1, anchor);
        insert(target, t12, anchor);
        mount_component(field11, target, anchor);
        insert(target, t13, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t14, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t15, anchor);
        insert(target, hr2, anchor);
        insert(target, t16, anchor);
        mount_component(field12, target, anchor);
        insert(target, t17, anchor);
        insert(target, br, anchor);
        insert(target, t18, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t23);
        append(table, tbody);
        if (if_block2)
          if_block2.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*judul*/
        32 | dirty[6] & /*$$scope*/
        134217728) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*abstrak*/
        64 | dirty[6] & /*$$scope*/
        134217728) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*data*/
        134217728 | dirty[1] & /*status*/
        128 | dirty[6] & /*$$scope*/
        134217728) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        268435472 | dirty[6] & /*$$scope*/
        134217728) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        536870928 | dirty[6] & /*$$scope*/
        134217728) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        1610612752 | dirty[6] & /*$$scope*/
        134217728) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*kelompokKeahlian*/
        1 | dirty[6] & /*$$scope*/
        134217728) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*topik*/
        2 | dirty[6] & /*$$scope*/
        134217728) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*tanggalMulai*/
        4 | dirty[6] & /*$$scope*/
        134217728) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*tanggalSelesai*/
        8 | dirty[6] & /*$$scope*/
        134217728) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        16 | dirty[1] & /*biayaPenelitian*/
        16 | dirty[6] & /*$$scope*/
        134217728) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*editModeProposal, error*/
        4194320 | dirty[1] & /*$ppmFile*/
        1073741824 | dirty[6] & /*$$scope*/
        134217728) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if_1 = /*skemaEksternal*/
          ctx2[63].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if_1) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            1073741824) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_58(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t14.parentNode, t14);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if = /*skemaInternal*/
          ctx2[62].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            1073741824) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_54(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t15.parentNode, t15);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        const field12_changes = {};
        if (dirty[0] & /*error, anggotaTim*/
        67108880 | dirty[6] & /*$$scope*/
        134217728) {
          field12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field12.$set(field12_changes);
        if (
          /*anggotaTim*/
          ctx2[26].length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            67108864) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_51(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(field12.$$.fragment, local);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(field12.$$.fragment, local);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(hr0);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(t10);
          detach(t11);
          detach(hr1);
          detach(t12);
          detach(t13);
          detach(t14);
          detach(t15);
          detach(hr2);
          detach(t16);
          detach(t17);
          detach(br);
          detach(t18);
          detach(table);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        destroy_component(field12, detaching);
        if (if_block2)
          if_block2.d();
      }
    };
  }
  function create_if_block_78(ctx) {
    let div;
    let p0;
    let t1;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File Kontrak PPM</b>`;
        t1 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download Kontrak PPM";
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div, "class", "column");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadKontrakPpmEksternal*/
            ctx[78]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_77(ctx) {
    let div1;
    let div0;
    let p0;
    let t1;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File RAB (Rencana Anggaran Biaya)</b>`;
        t1 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download RAB";
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div0, "class", "field");
        attr(div1, "class", "column");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, p0);
        append(div0, t1);
        append(div0, p1);
        append(p1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadRab*/
            ctx[76]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_76(ctx) {
    let each_1_anchor;
    let each_value_13 = ensure_array_like(
      /*anggotaTim*/
      ctx[26]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_13.length; i += 1) {
      each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_13, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        67108864) {
          each_value_13 = ensure_array_like(
            /*anggotaTim*/
            ctx2[26]
          );
          let i;
          for (i = 0; i < each_value_13.length; i += 1) {
            const child_ctx = get_each_context_13(ctx2, each_value_13, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_13(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_13.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_13(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*member*/
      ctx[208].role + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*member*/
      ctx[208].label + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        67108864 && t0_value !== (t0_value = /*member*/
        ctx2[208].role + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*anggotaTim*/
        67108864 && t2_value !== (t2_value = /*member*/
        ctx2[208].label + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_75(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_222(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].judul && create_if_block_75(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[36]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[108]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judul*/
        32 && input.value !== /*judul*/
        ctx2[36]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[4].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_75(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_74(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].abstrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].abstrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_21(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].abstrak && create_if_block_74(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "class", "textarea");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*abstrak*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[109]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*abstrak*/
        64) {
          set_input_value(
            textarea,
            /*abstrak*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[4].abstrak
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_74(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_20(ctx) {
    let status_1;
    let current;
    status_1 = new Status_default({
      props: {
        code: (
          /*status*/
          ctx[38]
        ),
        jenisSkema: (
          /*data*/
          ctx[27].jenis_skema
        )
      }
    });
    return {
      c() {
        create_component(status_1.$$.fragment);
      },
      m(target, anchor) {
        mount_component(status_1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const status_1_changes = {};
        if (dirty[1] & /*status*/
        128)
          status_1_changes.code = /*status*/
          ctx2[38];
        if (dirty[0] & /*data*/
        134217728)
          status_1_changes.jenisSkema = /*data*/
          ctx2[27].jenis_skema;
        status_1.$set(status_1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(status_1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status_1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(status_1, detaching);
      }
    };
  }
  function create_if_block_73(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_19(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].jenisProposal && create_if_block_73(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        if (
          /*jenisProposal*/
          ctx[28] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[110].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[28],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[110]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        268435456) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[28]
          );
        }
        if (
          /*error*/
          ctx2[4].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_73(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_722(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_18(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].jenisKegiatan && create_if_block_722(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*jenisKegiatan*/
          ctx[29] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[111].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[29],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[111]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        536870912) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[4].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_722(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_17(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat Mandiri";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option3, option3.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
        }
      }
    };
  }
  function create_if_block_71(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option3 = element("option");
        option3.textContent = "Riset Mandiri";
        option4 = element("option");
        option4.textContent = "Riset Eksternal";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
        option3.__value = "Riset Mandiri";
        set_input_value(option3, option3.__value);
        option4.__value = "Riset Eksternal";
        set_input_value(option4, option4.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
        insert(target, option4, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
          detach(option4);
        }
      }
    };
  }
  function create_if_block_70(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_17(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[29] === "Penelitian"
      )
        return create_if_block_71;
      return create_else_block_17;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[4].jenisSkema && create_if_block_70(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\r\n                        ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        if (
          /*jenisSkema*/
          ctx[30] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[112].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[30],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[112]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[4].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_70(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_69(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_16(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].kelompokKeahlian && create_if_block_69(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Kelompok Keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[113]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*kelompokKeahlian*/
        1 && input.value !== /*kelompokKeahlian*/
        ctx2[31]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[4].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_69(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_68(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_15(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].topik && create_if_block_68(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[32]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[114]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*topik*/
        2 && input.value !== /*topik*/
        ctx2[32]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[4].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_68(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_67(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_14(ctx) {
    let div;
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].tanggalMulai && create_if_block_67(ctx)
    );
    return {
      c() {
        div = element("div");
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
        attr(div, "class", "field");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[115]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalMulai*/
        4) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[4].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_67(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_66(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_13(ctx) {
    let div;
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].tanggalSelesai && create_if_block_66(ctx)
    );
    return {
      c() {
        div = element("div");
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
        attr(div, "class", "field");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, input);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[34]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[116]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalSelesai*/
        8) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[4].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_66(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_65(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_122(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].biayaPenelitian && create_if_block_65(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[35]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_5*/
              ctx[117]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[118]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPenelitian*/
        16 && input.value !== /*biayaPenelitian*/
        ctx2[35]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[35]
          );
        }
        if (
          /*error*/
          ctx2[4].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_65(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_15(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_3(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[61]?.name
      )
        return create_if_block_64;
      return create_else_block_16;
    }
    let current_block_type = select_block_type_3(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[4].fileProposal && create_if_block_63(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light is-small");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-sov48l");
        attr(p, "class", "help svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*filePpmChange*/
              ctx[95]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeProposal*/
              ctx[92]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[4].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_63(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_622(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download Proposal";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button is-small");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light is-small");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadPpm*/
              ctx[77]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeProposal*/
              ctx[92]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_16(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_64(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[61].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$ppmFile*/
        1073741824 && t_value !== (t_value = /*$ppmFile*/
        ctx2[61].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_63(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_11(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_622, create_else_block_15];
    const if_blocks = [];
    function select_block_type_2(ctx2, dirty) {
      if (!/*editModeProposal*/
      ctx2[22])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_2(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_2(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_58(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "File Kontrak PPM",
        $$slots: { default: [create_default_slot_10] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*editModeKontrakPPM, error*/
        16777232 | dirty[1] & /*$kontrakFile*/
        536870912 | dirty[6] & /*$$scope*/
        134217728) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block_13(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_5(ctx2, dirty) {
      if (
        /*$kontrakFile*/
        ctx2[60]?.name
      )
        return create_if_block_61;
      return create_else_block_14;
    }
    let current_block_type = select_block_type_5(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[4].fileKontrak && create_if_block_60(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "fileKontrak");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileKontrak");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light is-small");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-sov48l");
        attr(p, "class", "help svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileKontrakChange*/
              ctx[96]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeKontrakPPM*/
              ctx[94]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_5(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[4].fileKontrak
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_60(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_59(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download Kontrak PPM";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button is-small");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light is-small");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadKontrakPpmEksternal*/
              ctx[78]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeKontrakPPM*/
              ctx[94]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_14(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_61(ctx) {
    let span;
    let t_value = (
      /*$kontrakFile*/
      ctx[60].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$kontrakFile*/
        536870912 && t_value !== (t_value = /*$kontrakFile*/
        ctx2[60].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_60(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].fileKontrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].fileKontrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_10(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_59, create_else_block_13];
    const if_blocks = [];
    function select_block_type_4(ctx2, dirty) {
      if (!/*editModeKontrakPPM*/
      ctx2[24])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_4(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_4(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_54(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "File RAB",
        $$slots: { default: [create_default_slot_9] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*editModeRAB, error*/
        8388624 | dirty[1] & /*$rabFile*/
        268435456 | dirty[6] & /*$$scope*/
        134217728) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block_11(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_7(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[59]?.name
      )
        return create_if_block_57;
      return create_else_block_12;
    }
    let current_block_type = select_block_type_7(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[4].fileRAB && create_if_block_56(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileRab");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light is-small");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-sov48l");
        attr(p, "class", "help svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileRabChange*/
              ctx[97]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeRAB*/
              ctx[93]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_7(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[4].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_56(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_55(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download RAB";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button is-small");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light is-small");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadRab*/
              ctx[76]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeRAB*/
              ctx[93]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_12(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_57(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[59]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$rabFile*/
        268435456 && t_value !== (t_value = /*$rabFile*/
        ctx2[59]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_56(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_9(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_55, create_else_block_11];
    const if_blocks = [];
    function select_block_type_6(ctx2, dirty) {
      if (!/*editModeRAB*/
      ctx2[23])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_6(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_6(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_532(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_82(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[119](value);
    }
    let select_props = { start: "2", items: (
      /*items*/
      ctx[65]
    ) };
    if (
      /*anggotaTim*/
      ctx[26] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[26];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[4].anggotaTim && create_if_block_532(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (!updating_result && dirty[0] & /*anggotaTim*/
        67108864) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[26];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[4].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_532(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_51(ctx) {
    let each_1_anchor;
    let current;
    let each_value_12 = ensure_array_like(
      /*anggotaTim*/
      ctx[26]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_12.length; i += 1) {
      each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_12, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        67108864 | dirty[2] & /*deleteMember*/
        8192) {
          each_value_12 = ensure_array_like(
            /*anggotaTim*/
            ctx2[26]
          );
          let i;
          for (i = 0; i < each_value_12.length; i += 1) {
            const child_ctx = get_each_context_12(ctx2, each_value_12, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_12(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_12.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_12.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_1);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_522(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[208].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[75]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        67108864 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[208].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_12(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[208].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[208].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[210] > 0 && create_if_block_522(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[210] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        67108864) && t1_value !== (t1_value = /*member*/
        ctx2[208].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        67108864) && t3_value !== (t3_value = /*member*/
        ctx2[208].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_47(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*iPPVisible*/
      ctx[19] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*iPPVisible*/
      ctx[19] && create_if_block_48(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Penilaian Proposal\r\n                  ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler*/
            ctx[120]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty[0] & /*iPPVisible*/
        524288) && t1_value !== (t1_value = /*iPPVisible*/
        ctx2[19] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*iPPVisible*/
          ctx2[19]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*iPPVisible*/
            524288) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_48(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_48(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t6;
    let tbody;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button0;
    let t16;
    let div1;
    let p;
    let button1;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_8(ctx2, dirty) {
      if (
        /*$penilaianFile*/
        ctx2[58]?.name
      )
        return create_if_block_49;
      return create_else_block_10;
    }
    let current_block_type = select_block_type_8(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File (.xlsx)</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        td0 = element("td");
        td0.textContent = "Penilaian Proposal PPM";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block.c();
        t14 = space();
        td2 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t16 = space();
        div1 = element("div");
        p = element("p");
        button1 = element("button");
        button1.textContent = "Simpan Penilaian";
        attr(input0, "id", "filePenilaian");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePenilaian");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper mb-1 svelte-sov48l");
        attr(button0, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t6);
        append(table, tbody);
        append(tbody, td0);
        append(tbody, t8);
        append(tbody, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label);
        append(label, input1);
        append(label, t10);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label, t13);
        if_block.m(label, null);
        append(tbody, t14);
        append(tbody, td2);
        append(td2, button0);
        insert(target, t16, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*filePenilaianChange*/
              ctx[98]
            ),
            listen(
              button0,
              "click",
              /*handleDownloadPenilaian*/
              ctx[79]
            ),
            listen(
              button1,
              "click",
              /*handleSimpanPenilaian*/
              ctx[73]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_8(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(label, null);
          }
        }
        if (!current || dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
          detach(t16);
          detach(div1);
        }
        destroy_component(icon);
        if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_10(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_49(ctx) {
    let span;
    let t_value = (
      /*$penilaianFile*/
      ctx[58].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$penilaianFile*/
        134217728 && t_value !== (t_value = /*$penilaianFile*/
        ctx2[58].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_422(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*CRPVisible*/
      ctx[18] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*CRPVisible*/
      ctx[18] && create_if_block_432(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Informasi Revisi Proposal ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_1*/
            ctx[121]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*CRPVisible*/
        262144 && t1_value !== (t1_value = /*CRPVisible*/
        ctx2[18] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*CRPVisible*/
          ctx2[18]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_432(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_432(ctx) {
    let hr0;
    let t0;
    let show_if;
    let t1;
    let hr1;
    let t2;
    let table;
    let thead;
    let t8;
    function select_block_type_9(ctx2, dirty) {
      if (
        /*cttnRevisiProposalisRequired*/
        ctx2[89]()
      )
        return create_if_block_45;
      return create_else_block_9;
    }
    let current_block_type = select_block_type_9(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*itemsRCR*/
      ctx[44] && create_if_block_442(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        if_block0.c();
        t1 = space();
        hr1 = element("hr");
        t2 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%; text-align: center">Evaluator</th> <th style="width: 15%; text-align: center">Tanggal</th></tr>`;
        t8 = space();
        if (if_block1)
          if_block1.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        if_block0.m(target, anchor);
        insert(target, t1, anchor);
        insert(target, hr1, anchor);
        insert(target, t2, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t8);
        if (if_block1)
          if_block1.m(table, null);
      },
      p(ctx2, dirty) {
        if_block0.p(ctx2, dirty);
        if (
          /*itemsRCR*/
          ctx2[44]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_442(ctx2);
            if_block1.c();
            if_block1.m(table, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(t1);
          detach(hr1);
          detach(t2);
          detach(table);
        }
        if_block0.d(detaching);
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function create_else_block_9(ctx) {
    let div;
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Perhatikan catatan revisi dari evaluator untuk detail
                           yang akan direvisi!</p>`;
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
      }
    };
  }
  function create_if_block_45(ctx) {
    let div0;
    let t1;
    let div1;
    let p1;
    let t3;
    let textarea;
    let t4;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[4].catatanRevisiProposal && create_if_block_46(ctx)
    );
    return {
      c() {
        div0 = element("div");
        div0.innerHTML = `<p>Berikan catatan revisi jika ingin revisi proposal</p>`;
        t1 = space();
        div1 = element("div");
        p1 = element("p");
        p1.innerHTML = `<b>Catatan Revisi</b>`;
        t3 = space();
        textarea = element("textarea");
        t4 = space();
        if (if_block)
          if_block.c();
        attr(div0, "class", "notification is-warning is-light");
        attr(p1, "class", "title is-6");
        attr(textarea, "class", "textarea mb-1");
        attr(textarea, "name", "catatanRevisiProposal");
        attr(textarea, "id", "catatanRevisiProposal");
        attr(div1, "class", "field");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        insert(target, t1, anchor);
        insert(target, div1, anchor);
        append(div1, p1);
        append(div1, t3);
        append(div1, textarea);
        set_input_value(
          textarea,
          /*catatanRevisiProposal*/
          ctx[46]
        );
        append(div1, t4);
        if (if_block)
          if_block.m(div1, null);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler_1*/
            ctx[122]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*catatanRevisiProposal*/
        32768) {
          set_input_value(
            textarea,
            /*catatanRevisiProposal*/
            ctx2[46]
          );
        }
        if (
          /*error*/
          ctx2[4].catatanRevisiProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_46(ctx2);
            if_block.c();
            if_block.m(div1, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t1);
          detach(div1);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_46(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].catatanRevisiProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].catatanRevisiProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_442(ctx) {
    let tbody;
    let each_value_11 = ensure_array_like(
      /*itemsRCR*/
      ctx[44]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_11.length; i += 1) {
      each_blocks[i] = create_each_block_11(get_each_context_11(ctx, each_value_11, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*itemsRCR*/
        8192) {
          each_value_11 = ensure_array_like(
            /*itemsRCR*/
            ctx2[44]
          );
          let i;
          for (i = 0; i < each_value_11.length; i += 1) {
            const child_ctx = get_each_context_11(ctx2, each_value_11, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_11(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_11.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_11(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[203].catatan_revisi_proposal + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[203].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[203].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        set_style(td1, "text-align", "center");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*itemsRCR*/
        8192 && t0_value !== (t0_value = /*item*/
        ctx2[203].catatan_revisi_proposal + ""))
          set_data(t0, t0_value);
        if (dirty[1] & /*itemsRCR*/
        8192 && t2_value !== (t2_value = /*item*/
        ctx2[203].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[1] & /*itemsRCR*/
        8192 && t4_value !== (t4_value = /*item*/
        ctx2[203].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_392(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*inputEvlVisible*/
      ctx[20] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*inputEvlVisible*/
      ctx[20] && create_if_block_40(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Input Evaluator ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_2*/
            ctx[123]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty[0] & /*inputEvlVisible*/
        1048576) && t1_value !== (t1_value = /*inputEvlVisible*/
        ctx2[20] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*inputEvlVisible*/
          ctx2[20]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*inputEvlVisible*/
            1048576) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_40(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_40(ctx) {
    let hr;
    let t0;
    let field0;
    let updating_value;
    let updating_selected;
    let t1;
    let br0;
    let t2;
    let field1;
    let updating_value_1;
    let updating_selected_1;
    let t3;
    let br1;
    let t4;
    let field2;
    let updating_value_2;
    let updating_selected_2;
    let t5;
    let br2;
    let t6;
    let field3;
    let updating_value_3;
    let updating_selected_3;
    let t7;
    let div;
    let p;
    let current;
    function field0_value_binding(value) {
      ctx[124](value);
    }
    function field0_selected_binding(value) {
      ctx[125](value);
    }
    let field0_props = {
      id: "evaluatorKdept",
      name: "K.Departemen",
      select: true,
      view: true,
      userId: (
        /*kdeptSelected*/
        ctx[0]
      )
    };
    if (
      /*ka_departemen*/
      ctx[39] !== void 0
    ) {
      field0_props.value = /*ka_departemen*/
      ctx[39];
    }
    if (
      /*kdeptSelected*/
      ctx[0] !== void 0
    ) {
      field0_props.selected = /*kdeptSelected*/
      ctx[0];
    }
    field0 = new Field_default({ props: field0_props });
    binding_callbacks.push(() => bind(field0, "value", field0_value_binding));
    binding_callbacks.push(() => bind(field0, "selected", field0_selected_binding));
    function field1_value_binding(value) {
      ctx[126](value);
    }
    function field1_selected_binding(value) {
      ctx[127](value);
    }
    let field1_props = {
      id: "evaluatorReviewer",
      name: "Reviewer",
      select: true,
      view: true,
      userId: (
        /*reviewerSelected*/
        ctx[3]
      )
    };
    if (
      /*reviewer*/
      ctx[41] !== void 0
    ) {
      field1_props.value = /*reviewer*/
      ctx[41];
    }
    if (
      /*reviewerSelected*/
      ctx[3] !== void 0
    ) {
      field1_props.selected = /*reviewerSelected*/
      ctx[3];
    }
    field1 = new Field_default({ props: field1_props });
    binding_callbacks.push(() => bind(field1, "value", field1_value_binding));
    binding_callbacks.push(() => bind(field1, "selected", field1_selected_binding));
    function field2_value_binding(value) {
      ctx[128](value);
    }
    function field2_selected_binding(value) {
      ctx[129](value);
    }
    let field2_props = {
      id: "evaluatorKlppm",
      name: "K.LPPM",
      select: true,
      view: true,
      userId: (
        /*klppmSelected*/
        ctx[1]
      )
    };
    if (
      /*ka_lppm*/
      ctx[40] !== void 0
    ) {
      field2_props.value = /*ka_lppm*/
      ctx[40];
    }
    if (
      /*klppmSelected*/
      ctx[1] !== void 0
    ) {
      field2_props.selected = /*klppmSelected*/
      ctx[1];
    }
    field2 = new Field_default({ props: field2_props });
    binding_callbacks.push(() => bind(field2, "value", field2_value_binding));
    binding_callbacks.push(() => bind(field2, "selected", field2_selected_binding));
    function field3_value_binding(value) {
      ctx[130](value);
    }
    function field3_selected_binding(value) {
      ctx[131](value);
    }
    let field3_props = {
      id: "evaluatorKpk",
      name: "K.Pusat Kajian",
      select: true,
      view: true,
      userId: (
        /*kpkSelected*/
        ctx[2]
      )
    };
    if (
      /*ka_pusat_kajian*/
      ctx[42] !== void 0
    ) {
      field3_props.value = /*ka_pusat_kajian*/
      ctx[42];
    }
    if (
      /*kpkSelected*/
      ctx[2] !== void 0
    ) {
      field3_props.selected = /*kpkSelected*/
      ctx[2];
    }
    field3 = new Field_default({ props: field3_props });
    binding_callbacks.push(() => bind(field3, "value", field3_value_binding));
    binding_callbacks.push(() => bind(field3, "selected", field3_selected_binding));
    function select_block_type_10(ctx2, dirty) {
      if (
        /*isFormFilled*/
        ctx2[51]
      )
        return create_if_block_41;
      return create_else_block_8;
    }
    let current_block_type = select_block_type_10(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        hr = element("hr");
        t0 = space();
        create_component(field0.$$.fragment);
        t1 = space();
        br0 = element("br");
        t2 = space();
        create_component(field1.$$.fragment);
        t3 = space();
        br1 = element("br");
        t4 = space();
        create_component(field2.$$.fragment);
        t5 = space();
        br2 = element("br");
        t6 = space();
        create_component(field3.$$.fragment);
        t7 = space();
        div = element("div");
        p = element("p");
        if_block.c();
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        mount_component(field0, target, anchor);
        insert(target, t1, anchor);
        insert(target, br0, anchor);
        insert(target, t2, anchor);
        mount_component(field1, target, anchor);
        insert(target, t3, anchor);
        insert(target, br1, anchor);
        insert(target, t4, anchor);
        mount_component(field2, target, anchor);
        insert(target, t5, anchor);
        insert(target, br2, anchor);
        insert(target, t6, anchor);
        mount_component(field3, target, anchor);
        insert(target, t7, anchor);
        insert(target, div, anchor);
        append(div, p);
        if_block.m(p, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*kdeptSelected*/
        1)
          field0_changes.userId = /*kdeptSelected*/
          ctx2[0];
        if (!updating_value && dirty[1] & /*ka_departemen*/
        256) {
          updating_value = true;
          field0_changes.value = /*ka_departemen*/
          ctx2[39];
          add_flush_callback(() => updating_value = false);
        }
        if (!updating_selected && dirty[0] & /*kdeptSelected*/
        1) {
          updating_selected = true;
          field0_changes.selected = /*kdeptSelected*/
          ctx2[0];
          add_flush_callback(() => updating_selected = false);
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*reviewerSelected*/
        8)
          field1_changes.userId = /*reviewerSelected*/
          ctx2[3];
        if (!updating_value_1 && dirty[1] & /*reviewer*/
        1024) {
          updating_value_1 = true;
          field1_changes.value = /*reviewer*/
          ctx2[41];
          add_flush_callback(() => updating_value_1 = false);
        }
        if (!updating_selected_1 && dirty[0] & /*reviewerSelected*/
        8) {
          updating_selected_1 = true;
          field1_changes.selected = /*reviewerSelected*/
          ctx2[3];
          add_flush_callback(() => updating_selected_1 = false);
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*klppmSelected*/
        2)
          field2_changes.userId = /*klppmSelected*/
          ctx2[1];
        if (!updating_value_2 && dirty[1] & /*ka_lppm*/
        512) {
          updating_value_2 = true;
          field2_changes.value = /*ka_lppm*/
          ctx2[40];
          add_flush_callback(() => updating_value_2 = false);
        }
        if (!updating_selected_2 && dirty[0] & /*klppmSelected*/
        2) {
          updating_selected_2 = true;
          field2_changes.selected = /*klppmSelected*/
          ctx2[1];
          add_flush_callback(() => updating_selected_2 = false);
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*kpkSelected*/
        4)
          field3_changes.userId = /*kpkSelected*/
          ctx2[2];
        if (!updating_value_3 && dirty[1] & /*ka_pusat_kajian*/
        2048) {
          updating_value_3 = true;
          field3_changes.value = /*ka_pusat_kajian*/
          ctx2[42];
          add_flush_callback(() => updating_value_3 = false);
        }
        if (!updating_selected_3 && dirty[0] & /*kpkSelected*/
        4) {
          updating_selected_3 = true;
          field3_changes.selected = /*kpkSelected*/
          ctx2[2];
          add_flush_callback(() => updating_selected_3 = false);
        }
        field3.$set(field3_changes);
        if (current_block_type === (current_block_type = select_block_type_10(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(p, null);
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(t1);
          detach(br0);
          detach(t2);
          detach(t3);
          detach(br1);
          detach(t4);
          detach(t5);
          detach(br2);
          detach(t6);
          detach(t7);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        if_block.d();
      }
    };
  }
  function create_else_block_8(ctx) {
    let button;
    return {
      c() {
        button = element("button");
        button.textContent = "Submit Evaluator";
        attr(button, "class", "button is-info");
        button.disabled = true;
      },
      m(target, anchor) {
        insert(target, button, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button);
        }
      }
    };
  }
  function create_if_block_41(ctx) {
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        button.textContent = "Submit Evaluator";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
      },
      m(target, anchor) {
        insert(target, button, anchor);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleSubmitEvaluator*/
            ctx[67]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_182(ctx) {
    let show_if_2;
    let current_block_type_index;
    let if_block0;
    let t0;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[62].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t1;
    let div0;
    let h50;
    let t2;
    let span0;
    let t3_value = (
      /*hasilPPMVisible*/
      ctx[13] ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let show_if = !/*skemaEksternal*/
    ctx[63].includes(
      /*jenisSkema*/
      ctx[30]
    ) && !/*skemaMandiri*/
    ctx[64].includes(
      /*jenisSkema*/
      ctx[30]
    );
    let t6;
    let div1;
    let h51;
    let t7;
    let span1;
    let t8_value = (
      /*skPPMVisible*/
      ctx[15] ? "(tutup)" : "(buka)"
    );
    let t8;
    let t9;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block_323, create_else_block_6];
    const if_blocks = [];
    function select_block_type_11(ctx2, dirty) {
      if (dirty[0] & /*jenisSkema*/
      1073741824)
        show_if_2 = null;
      if (show_if_2 == null)
        show_if_2 = !!/*skemaInternal*/
        ctx2[62].includes(
          /*jenisSkema*/
          ctx2[30]
        );
      if (show_if_2)
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_11(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = show_if_1 && create_if_block_302(ctx);
    let if_block2 = (
      /*hasilPPMVisible*/
      ctx[13] && create_if_block_233(ctx)
    );
    let if_block3 = show_if && create_if_block_212(ctx);
    let if_block4 = (
      /*skPPMVisible*/
      ctx[15] && create_if_block_192(ctx)
    );
    return {
      c() {
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        div0 = element("div");
        h50 = element("h5");
        t2 = text("Laporan Hasil PPM\r\n                  ");
        span0 = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block2)
          if_block2.c();
        t5 = space();
        if (if_block3)
          if_block3.c();
        t6 = space();
        div1 = element("div");
        h51 = element("h5");
        t7 = text("File SK PPM\r\n                  ");
        span1 = element("span");
        t8 = text(t8_value);
        t9 = space();
        if (if_block4)
          if_block4.c();
        attr(span0, "class", "toggle-button svelte-sov48l");
        attr(h50, "class", "title is-6");
        attr(div0, "class", "box");
        attr(span1, "class", "toggle-button svelte-sov48l");
        attr(h51, "class", "title is-6");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        insert(target, div0, anchor);
        append(div0, h50);
        append(h50, t2);
        append(h50, span0);
        append(span0, t3);
        append(div0, t4);
        if (if_block2)
          if_block2.m(div0, null);
        insert(target, t5, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, t6, anchor);
        insert(target, div1, anchor);
        append(div1, h51);
        append(h51, t7);
        append(h51, span1);
        append(span1, t8);
        append(div1, t9);
        if (if_block4)
          if_block4.m(div1, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              span0,
              "click",
              /*click_handler_6*/
              ctx[136]
            ),
            listen(
              span1,
              "click",
              /*click_handler_8*/
              ctx[140]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_11(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if_1 = /*skemaInternal*/
          ctx2[62].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if_1) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_302(ctx2);
            if_block1.c();
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if ((!current || dirty[0] & /*hasilPPMVisible*/
        8192) && t3_value !== (t3_value = /*hasilPPMVisible*/
        ctx2[13] ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*hasilPPMVisible*/
          ctx2[13]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*hasilPPMVisible*/
            8192) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_233(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(div0, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if = !/*skemaEksternal*/
          ctx2[63].includes(
            /*jenisSkema*/
            ctx2[30]
          ) && !/*skemaMandiri*/
          ctx2[64].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_212(ctx2);
            if_block3.c();
            if_block3.m(t6.parentNode, t6);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if ((!current || dirty[0] & /*skPPMVisible*/
        32768) && t8_value !== (t8_value = /*skPPMVisible*/
        ctx2[15] ? "(tutup)" : "(buka)"))
          set_data(t8, t8_value);
        if (
          /*skPPMVisible*/
          ctx2[15]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[0] & /*skPPMVisible*/
            32768) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_192(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(div1, null);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block2);
        transition_in(if_block4);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block2);
        transition_out(if_block4);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(div0);
          detach(t5);
          detach(t6);
          detach(div1);
        }
        if_blocks[current_block_type_index].d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d(detaching);
        if (if_block4)
          if_block4.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_6(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*skpVisible*/
      ctx[17] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*skpVisible*/
      ctx[17] && create_if_block_372(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Dokumen Pendukung\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_4*/
            ctx[133]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty[0] & /*skpVisible*/
        131072) && t1_value !== (t1_value = /*skpVisible*/
        ctx2[17] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*skpVisible*/
          ctx2[17]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*skpVisible*/
            131072) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_372(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_323(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*skpVisible*/
      ctx[17] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*skpVisible*/
      ctx[17] && create_if_block_332(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Dokumen Pendukung\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_3*/
            ctx[132]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty[0] & /*skpVisible*/
        131072) && t1_value !== (t1_value = /*skpVisible*/
        ctx2[17] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*skpVisible*/
          ctx2[17]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*skpVisible*/
            131072) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_332(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_372(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t6;
    let tbody;
    let tr1;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button0;
    let t16;
    let div1;
    let p;
    let button1;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_15(ctx2, dirty) {
      if (
        /*$suratTugasFile*/
        ctx2[55]?.name
      )
        return create_if_block_382;
      return create_else_block_7;
    }
    let current_block_type = select_block_type_15(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File (.pdf)</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Surat Tugas";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block.c();
        t14 = space();
        td2 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t16 = space();
        div1 = element("div");
        p = element("p");
        button1 = element("button");
        button1.textContent = "Submit File";
        attr(input0, "id", "fileSuratTugas");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileSuratTugas");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-sov48l");
        attr(button0, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t6);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t8);
        append(tr1, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label);
        append(label, input1);
        append(label, t10);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label, t13);
        if_block.m(label, null);
        append(tr1, t14);
        append(tr1, td2);
        append(td2, button0);
        insert(target, t16, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileSuratTugasChange*/
              ctx[101]
            ),
            listen(
              button0,
              "click",
              /*handleDownloadSuratTugas*/
              ctx[82]
            ),
            listen(
              button1,
              "click",
              /*handleSubmitFile*/
              ctx[68]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_15(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(label, null);
          }
        }
        if (!current || dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
          detach(t16);
          detach(div1);
        }
        destroy_component(icon);
        if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_7(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_382(ctx) {
    let span;
    let t_value = (
      /*$suratTugasFile*/
      ctx[55].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$suratTugasFile*/
        16777216 && t_value !== (t_value = /*$suratTugasFile*/
        ctx2[55].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_332(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t6;
    let tbody;
    let tr1;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label0;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon0;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button0;
    let t16;
    let tr2;
    let td3;
    let t18;
    let td4;
    let span7;
    let input2;
    let t19;
    let div1;
    let label1;
    let input3;
    let t20;
    let span6;
    let span4;
    let icon1;
    let t21;
    let span5;
    let t23;
    let t24;
    let td5;
    let button1;
    let t26;
    let tr3;
    let td6;
    let t28;
    let td7;
    let span11;
    let input4;
    let t29;
    let div2;
    let label2;
    let input5;
    let t30;
    let span10;
    let span8;
    let icon2;
    let t31;
    let span9;
    let t33;
    let t34;
    let td8;
    let button2;
    let t36;
    let div3;
    let p;
    let button3;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_12(ctx2, dirty) {
      if (
        /*$skPendanaanFile*/
        ctx2[57]?.name
      )
        return create_if_block_362;
      return create_else_block_5;
    }
    let current_block_type = select_block_type_12(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_13(ctx2, dirty) {
      if (
        /*$suratKontrakFile*/
        ctx2[56]?.name
      )
        return create_if_block_352;
      return create_else_block_4;
    }
    let current_block_type_1 = select_block_type_13(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block1 = current_block_type_1(ctx);
    icon2 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_14(ctx2, dirty) {
      if (
        /*$suratTugasFile*/
        ctx2[55]?.name
      )
        return create_if_block_342;
      return create_else_block_32;
    }
    let current_block_type_2 = select_block_type_14(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block2 = current_block_type_2(ctx);
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File (.pdf)</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "SK Pendanaan";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label0 = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block0.c();
        t14 = space();
        td2 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t16 = space();
        tr2 = element("tr");
        td3 = element("td");
        td3.textContent = "Surat Kontrak PPM";
        t18 = space();
        td4 = element("td");
        span7 = element("span");
        input2 = element("input");
        t19 = space();
        div1 = element("div");
        label1 = element("label");
        input3 = element("input");
        t20 = space();
        span6 = element("span");
        span4 = element("span");
        create_component(icon1.$$.fragment);
        t21 = space();
        span5 = element("span");
        span5.textContent = "Choose a file";
        t23 = space();
        if_block1.c();
        t24 = space();
        td5 = element("td");
        button1 = element("button");
        button1.textContent = "Download";
        t26 = space();
        tr3 = element("tr");
        td6 = element("td");
        td6.textContent = "Surat Tugas";
        t28 = space();
        td7 = element("td");
        span11 = element("span");
        input4 = element("input");
        t29 = space();
        div2 = element("div");
        label2 = element("label");
        input5 = element("input");
        t30 = space();
        span10 = element("span");
        span8 = element("span");
        create_component(icon2.$$.fragment);
        t31 = space();
        span9 = element("span");
        span9.textContent = "Choose a file";
        t33 = space();
        if_block2.c();
        t34 = space();
        td8 = element("td");
        button2 = element("button");
        button2.textContent = "Download";
        t36 = space();
        div3 = element("div");
        p = element("p");
        button3 = element("button");
        button3.textContent = "Submit File";
        attr(input0, "id", "fileSkPendanaan");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label0, "class", "file-label");
        attr(label0, "for", "fileSkPendanaan");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-sov48l");
        attr(button0, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(input2, "id", "fileSuratKontrak");
        attr(input2, "class", "inputf custom-file-input svelte-sov48l");
        attr(input2, "accept", "application/pdf");
        attr(input2, "type", "file");
        attr(input3, "class", "file-input svelte-sov48l");
        attr(input3, "type", "file");
        attr(input3, "name", "resume");
        attr(span4, "class", "file-icon");
        attr(span5, "class", "file-label");
        attr(span6, "class", "file-cta");
        attr(label1, "class", "file-label");
        attr(label1, "for", "fileSuratKontrak");
        attr(div1, "class", "file has-name is-small");
        attr(span7, "class", "inputf__wrapper svelte-sov48l");
        attr(button1, "class", "button is-link button is-small");
        set_style(td5, "text-align", "center");
        attr(input4, "id", "fileSuratTugas");
        attr(input4, "class", "inputf custom-file-input svelte-sov48l");
        attr(input4, "accept", "application/pdf");
        attr(input4, "type", "file");
        attr(input5, "class", "file-input svelte-sov48l");
        attr(input5, "type", "file");
        attr(input5, "name", "resume");
        attr(span8, "class", "file-icon");
        attr(span9, "class", "file-label");
        attr(span10, "class", "file-cta");
        attr(label2, "class", "file-label");
        attr(label2, "for", "fileSuratTugas");
        attr(div2, "class", "file has-name is-small");
        attr(span11, "class", "inputf__wrapper svelte-sov48l");
        attr(button2, "class", "button is-link button is-small");
        set_style(td8, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(button3, "class", "button is-info");
        toggle_class(
          button3,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
        attr(div3, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t6);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t8);
        append(tr1, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label0);
        append(label0, input1);
        append(label0, t10);
        append(label0, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label0, t13);
        if_block0.m(label0, null);
        append(tr1, t14);
        append(tr1, td2);
        append(td2, button0);
        append(tbody, t16);
        append(tbody, tr2);
        append(tr2, td3);
        append(tr2, t18);
        append(tr2, td4);
        append(td4, span7);
        append(span7, input2);
        append(span7, t19);
        append(span7, div1);
        append(div1, label1);
        append(label1, input3);
        append(label1, t20);
        append(label1, span6);
        append(span6, span4);
        mount_component(icon1, span4, null);
        append(span6, t21);
        append(span6, span5);
        append(label1, t23);
        if_block1.m(label1, null);
        append(tr2, t24);
        append(tr2, td5);
        append(td5, button1);
        append(tbody, t26);
        append(tbody, tr3);
        append(tr3, td6);
        append(tr3, t28);
        append(tr3, td7);
        append(td7, span11);
        append(span11, input4);
        append(span11, t29);
        append(span11, div2);
        append(div2, label2);
        append(label2, input5);
        append(label2, t30);
        append(label2, span10);
        append(span10, span8);
        mount_component(icon2, span8, null);
        append(span10, t31);
        append(span10, span9);
        append(label2, t33);
        if_block2.m(label2, null);
        append(tr3, t34);
        append(tr3, td8);
        append(td8, button2);
        insert(target, t36, anchor);
        insert(target, div3, anchor);
        append(div3, p);
        append(p, button3);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileSkPendanaanChange*/
              ctx[99]
            ),
            listen(
              button0,
              "click",
              /*handleDownloadSkPendanaan*/
              ctx[80]
            ),
            listen(
              input2,
              "change",
              /*fileSuratKontrakChange*/
              ctx[100]
            ),
            listen(
              button1,
              "click",
              /*handleDownloadSuratKontrak*/
              ctx[81]
            ),
            listen(
              input4,
              "change",
              /*fileSuratTugasChange*/
              ctx[101]
            ),
            listen(
              button2,
              "click",
              /*handleDownloadSuratTugas*/
              ctx[82]
            ),
            listen(
              button3,
              "click",
              /*handleSubmitFile*/
              ctx[68]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_12(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label0, null);
          }
        }
        if (current_block_type_1 === (current_block_type_1 = select_block_type_13(ctx2, dirty)) && if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1.d(1);
          if_block1 = current_block_type_1(ctx2);
          if (if_block1) {
            if_block1.c();
            if_block1.m(label1, null);
          }
        }
        if (current_block_type_2 === (current_block_type_2 = select_block_type_14(ctx2, dirty)) && if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2.d(1);
          if_block2 = current_block_type_2(ctx2);
          if (if_block2) {
            if_block2.c();
            if_block2.m(label2, null);
          }
        }
        if (!current || dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button3,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
          detach(t36);
          detach(div3);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if_block1.d();
        destroy_component(icon2);
        if_block2.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_5(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_362(ctx) {
    let span;
    let t_value = (
      /*$skPendanaanFile*/
      ctx[57].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$skPendanaanFile*/
        67108864 && t_value !== (t_value = /*$skPendanaanFile*/
        ctx2[57].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_else_block_4(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_352(ctx) {
    let span;
    let t_value = (
      /*$suratKontrakFile*/
      ctx[56].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$suratKontrakFile*/
        33554432 && t_value !== (t_value = /*$suratKontrakFile*/
        ctx2[56].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_else_block_32(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_342(ctx) {
    let span;
    let t_value = (
      /*$suratTugasFile*/
      ctx[55].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$suratTugasFile*/
        16777216 && t_value !== (t_value = /*$suratTugasFile*/
        ctx2[55].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_302(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*danaPPMVisible*/
      ctx[14] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*danaPPMVisible*/
      ctx[14] && create_if_block_312(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Pendanaan PPM\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_5*/
            ctx[134]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*danaPPMVisible*/
        16384 && t1_value !== (t1_value = /*danaPPMVisible*/
        ctx2[14] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*danaPPMVisible*/
          ctx2[14]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_312(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_312(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let tr0;
    let th0;
    let t2;
    let th1;
    let div0;
    let select;
    let option0;
    let option1;
    let option2;
    let t6;
    let tbody;
    let t8;
    let div2;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        tr0 = element("tr");
        th0 = element("th");
        th0.textContent = "Status Pencairan Dana";
        t2 = space();
        th1 = element("th");
        div0 = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih status pendanaan";
        option1 = element("option");
        option1.textContent = "30% Dana telah dicairkan";
        option2 = element("option");
        option2.textContent = "100% Dana telah dicairkan";
        t6 = space();
        tbody = element("tbody");
        tbody.innerHTML = `<tr><td colspan="2"><div class="notification is-warning is-light"><p class="subtitle is-6">Untuk pengambilan dana dan penjelasan
                                       lebih lanjut terkait Pendanaan, hubungi
                                       LPPM UISI.</p></div></td></tr>`;
        t8 = space();
        div2 = element("div");
        p1 = element("p");
        button = element("button");
        button.textContent = "Submit Status Pendanaan";
        set_style(th0, "width", "70%");
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "30% Dana telah dicairkan";
        set_input_value(option1, option1.__value);
        option2.__value = "100% Dana telah dicairkan";
        set_input_value(option2, option2.__value);
        if (
          /*statusPencairanDana*/
          ctx[25] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_3*/
            ctx[135].call(select)
          ));
        attr(div0, "class", "select");
        attr(th1, "class", "is-narrow");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p1, "class", "control");
        attr(div2, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(thead, tr0);
        append(tr0, th0);
        append(tr0, t2);
        append(tr0, th1);
        append(th1, div0);
        append(div0, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*statusPencairanDana*/
          ctx[25],
          true
        );
        append(table, t6);
        append(table, tbody);
        insert(target, t8, anchor);
        insert(target, div2, anchor);
        append(div2, p1);
        append(p1, button);
        if (!mounted) {
          dispose = [
            listen(
              select,
              "change",
              /*select_change_handler_3*/
              ctx[135]
            ),
            listen(
              button,
              "click",
              /*handleSubmitStatusPendanaan*/
              ctx[66]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*statusPencairanDana*/
        33554432) {
          select_option(
            select,
            /*statusPencairanDana*/
            ctx2[25]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
          detach(t8);
          detach(div2);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_233(ctx) {
    let hr0;
    let t0;
    let table0;
    let thead0;
    let t6;
    let tbody;
    let tr1;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button;
    let t16;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[62].includes(
        /*jenisSkema*/
        ctx[30]
      )
    );
    let t17;
    let show_if = (
      /*showSubmitHasilPPM_Button*/
      ctx[90]()
    );
    let t18;
    let hr1;
    let t19;
    let div1;
    let t21;
    let div2;
    let p1;
    let t23;
    let textarea;
    let t24;
    let t25;
    let hr2;
    let t26;
    let table1;
    let thead1;
    let t32;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_16(ctx2, dirty) {
      if (
        /*$hasilPPMFile*/
        ctx2[53]?.name
      )
        return create_if_block_292;
      return create_else_block_22;
    }
    let current_block_type = select_block_type_16(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = show_if_1 && create_if_block_272(ctx);
    let if_block2 = show_if && create_if_block_262(ctx);
    let if_block3 = (
      /*error*/
      ctx[4].catatanRevisiHasilPPM && create_if_block_252(ctx)
    );
    let if_block4 = (
      /*itemsCHP*/
      ctx[45] && create_if_block_242(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File (.pdf)</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Laporan Hasil PPM";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block0.c();
        t14 = space();
        td2 = element("td");
        button = element("button");
        button.textContent = "Download";
        t16 = space();
        if (if_block1)
          if_block1.c();
        t17 = space();
        if (if_block2)
          if_block2.c();
        t18 = space();
        hr1 = element("hr");
        t19 = space();
        div1 = element("div");
        div1.innerHTML = `<p>Berikan catatan revisi jika ingin revisi Hasil PPM</p>`;
        t21 = space();
        div2 = element("div");
        p1 = element("p");
        p1.innerHTML = `<b>Catatan Revisi</b>`;
        t23 = space();
        textarea = element("textarea");
        t24 = space();
        if (if_block3)
          if_block3.c();
        t25 = space();
        hr2 = element("hr");
        t26 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%; text-align: center">Evaluator</th> <th style="width: 15%; text-align: center">Tanggal</th></tr>`;
        t32 = space();
        if (if_block4)
          if_block4.c();
        attr(input0, "id", "fileHasilPPM");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileHasilPPM");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-sov48l");
        attr(button, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "notification is-warning is-light");
        attr(p1, "class", "title is-6");
        attr(textarea, "class", "textarea mb-1");
        attr(textarea, "name", "catatanRevisiHasilPPM");
        attr(textarea, "id", "catatanRevisiHasilPPM");
        attr(div2, "class", "field");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t6);
        append(table0, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t8);
        append(tr1, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label);
        append(label, input1);
        append(label, t10);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label, t13);
        if_block0.m(label, null);
        append(tr1, t14);
        append(tr1, td2);
        append(td2, button);
        append(tbody, t16);
        if (if_block1)
          if_block1.m(tbody, null);
        insert(target, t17, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t18, anchor);
        insert(target, hr1, anchor);
        insert(target, t19, anchor);
        insert(target, div1, anchor);
        insert(target, t21, anchor);
        insert(target, div2, anchor);
        append(div2, p1);
        append(div2, t23);
        append(div2, textarea);
        set_input_value(
          textarea,
          /*catatanRevisiHasilPPM*/
          ctx[47]
        );
        append(div2, t24);
        if (if_block3)
          if_block3.m(div2, null);
        insert(target, t25, anchor);
        insert(target, hr2, anchor);
        insert(target, t26, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t32);
        if (if_block4)
          if_block4.m(table1, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileHasilPPMChange*/
              ctx[103]
            ),
            listen(
              button,
              "click",
              /*handleDownloadHasilPPM*/
              ctx[84]
            ),
            listen(
              textarea,
              "input",
              /*textarea_input_handler_2*/
              ctx[137]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_16(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        1073741824)
          show_if_1 = /*skemaInternal*/
          ctx2[62].includes(
            /*jenisSkema*/
            ctx2[30]
          );
        if (show_if_1) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            1073741824) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_272(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (show_if)
          if_block2.p(ctx2, dirty);
        if (dirty[1] & /*catatanRevisiHasilPPM*/
        65536) {
          set_input_value(
            textarea,
            /*catatanRevisiHasilPPM*/
            ctx2[47]
          );
        }
        if (
          /*error*/
          ctx2[4].catatanRevisiHasilPPM
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_252(ctx2);
            if_block3.c();
            if_block3.m(div2, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*itemsCHP*/
          ctx2[45]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_242(ctx2);
            if_block4.c();
            if_block4.m(table1, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(table0);
          detach(t17);
          detach(t18);
          detach(hr1);
          detach(t19);
          detach(div1);
          detach(t21);
          detach(div2);
          detach(t25);
          detach(hr2);
          detach(t26);
          detach(table1);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_22(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_292(ctx) {
    let span;
    let t_value = (
      /*$hasilPPMFile*/
      ctx[53].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$hasilPPMFile*/
        4194304 && t_value !== (t_value = /*$hasilPPMFile*/
        ctx2[53].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_272(ctx) {
    let tr;
    let td0;
    let t1;
    let td1;
    let span3;
    let input0;
    let t2;
    let div;
    let label;
    let input1;
    let t3;
    let span2;
    let span0;
    let icon;
    let t4;
    let span1;
    let t6;
    let t7;
    let td2;
    let button;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_17(ctx2, dirty) {
      if (
        /*$laporanKeuanganFile*/
        ctx2[52]?.name
      )
        return create_if_block_282;
      return create_else_block_19;
    }
    let current_block_type = select_block_type_17(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        td0.textContent = "Laporan Keuangan";
        t1 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t2 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t3 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t4 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t6 = space();
        if_block.c();
        t7 = space();
        td2 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(input0, "id", "fileLaporanKeuangan");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileLaporanKeuangan");
        attr(div, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-sov48l");
        attr(button, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(tr, t1);
        append(tr, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t2);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t3);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t4);
        append(span2, span1);
        append(label, t6);
        if_block.m(label, null);
        append(tr, t7);
        append(tr, td2);
        append(td2, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileLaporanKeuanganChange*/
              ctx[104]
            ),
            listen(
              button,
              "click",
              /*handleDownloadLaporanKeuangan*/
              ctx[85]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_17(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(label, null);
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_19(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_282(ctx) {
    let span;
    let t_value = (
      /*$laporanKeuanganFile*/
      ctx[52].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$laporanKeuanganFile*/
        2097152 && t_value !== (t_value = /*$laporanKeuanganFile*/
        ctx2[52].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_262(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Submit Hasil PPM";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleSubmitHasilPPM*/
            ctx[69]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_252(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[4].catatanRevisiHasilPPM + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-sov48l");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        16 && t_value !== (t_value = /*error*/
        ctx2[4].catatanRevisiHasilPPM + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_242(ctx) {
    let tbody;
    let each_value_10 = ensure_array_like(
      /*itemsCHP*/
      ctx[45]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_10(get_each_context_10(ctx, each_value_10, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*itemsCHP*/
        16384) {
          each_value_10 = ensure_array_like(
            /*itemsCHP*/
            ctx2[45]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_10(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_10(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_10.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_10(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[203].catatan_revisi_hasil_ppm + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[203].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[203].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        set_style(td1, "text-align", "center");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*itemsCHP*/
        16384 && t0_value !== (t0_value = /*item*/
        ctx2[203].catatan_revisi_hasil_ppm + ""))
          set_data(t0, t0_value);
        if (dirty[1] & /*itemsCHP*/
        16384 && t2_value !== (t2_value = /*item*/
        ctx2[203].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[1] & /*itemsCHP*/
        16384 && t4_value !== (t4_value = /*item*/
        ctx2[203].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_212(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*presentasiVisible*/
      ctx[16] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*presentasiVisible*/
      ctx[16] && create_if_block_223(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Presentasi Hasil PPM\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_7*/
            ctx[138]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*presentasiVisible*/
        65536 && t1_value !== (t1_value = /*presentasiVisible*/
        ctx2[16] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*presentasiVisible*/
          ctx2[16]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_223(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_223(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Kegiatan</th> <th class="is-narrow" style="text-align: center">Checkbox</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Mempresentasikan hasil PPM di seminar\r\n                                 Penelitian / Pengmas bersama UISI di bulan\r\n                                 Desember";
        t6 = space();
        td1 = element("td");
        input = element("input");
        attr(input, "type", "checkbox");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, input);
        input.checked = /*presentasiHasilPPM*/
        ctx[43];
        if (!mounted) {
          dispose = [
            listen(
              input,
              "change",
              /*input_change_handler*/
              ctx[139]
            ),
            listen(
              input,
              "change",
              /*checkboxPresentasiHasilPPM*/
              ctx[86]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*presentasiHasilPPM*/
        4096) {
          input.checked = /*presentasiHasilPPM*/
          ctx2[43];
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_192(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t6;
    let tbody;
    let tr1;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button0;
    let t16;
    let div1;
    let p;
    let button1;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_18(ctx2, dirty) {
      if (
        /*$skPPMFile*/
        ctx2[54]?.name
      )
        return create_if_block_202;
      return create_else_block5;
    }
    let current_block_type = select_block_type_18(ctx, [-1, -1, -1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "SK PPM";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block.c();
        t14 = space();
        td2 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t16 = space();
        div1 = element("div");
        p = element("p");
        button1 = element("button");
        button1.textContent = "Submit File";
        attr(input0, "id", "fileSkPPM");
        attr(input0, "class", "inputf custom-file-input svelte-sov48l");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-sov48l");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileSkPPM");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-sov48l");
        attr(button0, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t6);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t8);
        append(tr1, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label);
        append(label, input1);
        append(label, t10);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label, t13);
        if_block.m(label, null);
        append(tr1, t14);
        append(tr1, td2);
        append(td2, button0);
        insert(target, t16, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileSkPPMChange*/
              ctx[102]
            ),
            listen(
              button0,
              "click",
              /*handleDownloadSkPPM*/
              ctx[83]
            ),
            listen(
              button1,
              "click",
              /*handleSubmitFile*/
              ctx[68]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_18(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(label, null);
          }
        }
        if (!current || dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
          detach(t16);
          detach(div1);
        }
        destroy_component(icon);
        if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block5(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_202(ctx) {
    let span;
    let t_value = (
      /*$skPPMFile*/
      ctx[54].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$skPPMFile*/
        8388608 && t_value !== (t_value = /*$skPPMFile*/
        ctx2[54].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_172(ctx) {
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let mounted;
    let dispose;
    return {
      c() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Setujui";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p1, "class", "control");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        append(p0, button0);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
        append(p1, button1);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[71]
            ),
            listen(
              button1,
              "click",
              /*handlePass*/
              ctx[74]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_162(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Setujui";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePass*/
            ctx[74]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_152(ctx) {
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Ditolak";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Setujui";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-danger is-light is-outlined");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p2, "class", "control");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        append(p0, button0);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
        append(p1, button1);
        insert(target, t3, anchor);
        insert(target, p2, anchor);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[71]
            ),
            listen(
              button1,
              "click",
              /*handleDitolak*/
              ctx[72]
            ),
            listen(
              button2,
              "click",
              /*handlePass*/
              ctx[74]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
          detach(t3);
          detach(p2);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_142(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Perbaikan";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[12]
        );
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePerbaikan*/
            ctx[70]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4096) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[12]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_112(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[5].length > 0 && create_if_block_213(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[5].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            32) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_213(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_213(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context5(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block5(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_1);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_311(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let fieldview13;
    let t18;
    let hr1;
    let t19;
    let h51;
    let t21;
    let table0;
    let thead0;
    let t31;
    let tbody0;
    let t32;
    let table1;
    let thead1;
    let t42;
    let tbody1;
    let t43;
    let table2;
    let thead2;
    let t53;
    let tbody2;
    let t54;
    let hr2;
    let t55;
    let h52;
    let t57;
    let table3;
    let thead3;
    let t67;
    let tbody3;
    let t68;
    let hr3;
    let t69;
    let h53;
    let t71;
    let table4;
    let thead4;
    let t81;
    let tbody4;
    let t82;
    let hr4;
    let t83;
    let h54;
    let t85;
    let table5;
    let thead5;
    let t93;
    let tbody5;
    let t94;
    let hr5;
    let t95;
    let h55;
    let t97;
    let table6;
    let thead6;
    let t107;
    let tbody6;
    let t108;
    let hr6;
    let t109;
    let h56;
    let t111;
    let table7;
    let thead7;
    let t121;
    let tbody7;
    let t122;
    let hr7;
    let t123;
    let h57;
    let t125;
    let table8;
    let thead8;
    let t135;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[173].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[173].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[173].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[173].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[173].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[173].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[173].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[173].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[173].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[173].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[173].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[173].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[173].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    fieldview13 = new Fieldview_default({ props: { title: "", content: "" } });
    let if_block0 = (
      /*user*/
      ctx[173].RPS1.length > 0 && create_if_block_123(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[173].RPS2.length > 0 && create_if_block_113(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[173].RPS3.length > 0 && create_if_block_102(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[173].Ppenelitian.length > 0 && create_if_block_92(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[173].Ppengmas.length > 0 && create_if_block_82(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[173].Pdiseminasi.length > 0 && create_if_block_79(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[173].Ppublikasi.length > 0 && create_if_block_610(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[173].PpenulisanBuku.length > 0 && create_if_block_510(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[173].Phki.length > 0 && create_if_block_410(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        create_component(fieldview13.$$.fragment);
        t18 = space();
        hr1 = element("hr");
        t19 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t21 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t31 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t32 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t42 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t43 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t53 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t54 = space();
        hr2 = element("hr");
        t55 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t57 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t67 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t68 = space();
        hr3 = element("hr");
        t69 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t71 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t81 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t82 = space();
        hr4 = element("hr");
        t83 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t85 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t93 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t94 = space();
        hr5 = element("hr");
        t95 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan\r\n                        Proceeding)";
        t97 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                 Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t107 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t108 = space();
        hr6 = element("hr");
        t109 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t111 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t121 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t122 = space();
        hr7 = element("hr");
        t123 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t125 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t135 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        append(div7, t17);
        mount_component(fieldview13, div7, null);
        insert(target, t18, anchor);
        insert(target, hr1, anchor);
        insert(target, t19, anchor);
        insert(target, h51, anchor);
        insert(target, t21, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t31);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t32, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t42);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t43, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t53);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t54, anchor);
        insert(target, hr2, anchor);
        insert(target, t55, anchor);
        insert(target, h52, anchor);
        insert(target, t57, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t67);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t68, anchor);
        insert(target, hr3, anchor);
        insert(target, t69, anchor);
        insert(target, h53, anchor);
        insert(target, t71, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t81);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t82, anchor);
        insert(target, hr4, anchor);
        insert(target, t83, anchor);
        insert(target, h54, anchor);
        insert(target, t85, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t93);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t94, anchor);
        insert(target, hr5, anchor);
        insert(target, t95, anchor);
        insert(target, h55, anchor);
        insert(target, t97, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t107);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t108, anchor);
        insert(target, hr6, anchor);
        insert(target, t109, anchor);
        insert(target, h56, anchor);
        insert(target, t111, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t121);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t122, anchor);
        insert(target, hr7, anchor);
        insert(target, t123, anchor);
        insert(target, h57, anchor);
        insert(target, t125, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t135);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview0_changes.content = /*user*/
          ctx2[173].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview1_changes.content = /*user*/
          ctx2[173].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview2_changes.content = /*user*/
          ctx2[173].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview3_changes.content = /*user*/
          ctx2[173].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview4_changes.content = /*user*/
          ctx2[173].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview5_changes.content = /*user*/
          ctx2[173].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview6_changes.content = /*user*/
          ctx2[173].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview7_changes.content = /*user*/
          ctx2[173].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview8_changes.content = /*user*/
          ctx2[173].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview9_changes.content = /*user*/
          ctx2[173].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview10_changes.content = /*user*/
          ctx2[173].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview11_changes.content = /*user*/
          ctx2[173].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32)
          fieldview12_changes.content = /*user*/
          ctx2[173].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[173].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_123(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[173].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_113(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[173].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_102(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[173].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_92(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[173].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_82(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[173].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_79(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[173].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_610(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[173].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_510(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[173].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_410(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        transition_in(fieldview13.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        transition_out(fieldview13.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t18);
          detach(hr1);
          detach(t19);
          detach(h51);
          detach(t21);
          detach(table0);
          detach(t32);
          detach(table1);
          detach(t43);
          detach(table2);
          detach(t54);
          detach(hr2);
          detach(t55);
          detach(h52);
          detach(t57);
          detach(table3);
          detach(t68);
          detach(hr3);
          detach(t69);
          detach(h53);
          detach(t71);
          detach(table4);
          detach(t82);
          detach(hr4);
          detach(t83);
          detach(h54);
          detach(t85);
          detach(table5);
          detach(t94);
          detach(hr5);
          detach(t95);
          detach(h55);
          detach(t97);
          detach(table6);
          detach(t108);
          detach(hr6);
          detach(t109);
          detach(h56);
          detach(t111);
          detach(table7);
          detach(t122);
          detach(hr7);
          detach(t123);
          detach(h57);
          detach(t125);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        destroy_component(fieldview13);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_123(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[173].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[173].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_9(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_9(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_9(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[200].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[200].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[200].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[200].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[200].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*RPS1*/
        ctx2[200].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*RPS1*/
        ctx2[200].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*RPS1*/
        ctx2[200].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*RPS1*/
        ctx2[200].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*RPS1*/
        ctx2[200].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_113(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[173].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[173].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_8(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_8(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_8(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[197].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[197].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[197].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[197].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[197].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*RPS2*/
        ctx2[197].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*RPS2*/
        ctx2[197].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*RPS2*/
        ctx2[197].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*RPS2*/
        ctx2[197].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*RPS2*/
        ctx2[197].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_102(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[173].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[173].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_7(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_7(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_7(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[194].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[194].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[194].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[194].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[194].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*RPS3*/
        ctx2[194].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*RPS3*/
        ctx2[194].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*RPS3*/
        ctx2[194].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*RPS3*/
        ctx2[194].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*RPS3*/
        ctx2[194].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_92(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[173].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[173].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_6(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_6(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_6(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[191].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[191].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[191].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[191].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[191].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*PP*/
        ctx2[191].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*PP*/
        ctx2[191].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*PP*/
        ctx2[191].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*PP*/
        ctx2[191].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*PP*/
        ctx2[191].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_82(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[173].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[173].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_5(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_5(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_5(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[188].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[188].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[188].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[188].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[188].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*PM*/
        ctx2[188].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*PM*/
        ctx2[188].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*PM*/
        ctx2[188].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*PM*/
        ctx2[188].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*PM*/
        ctx2[188].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_79(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[173].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[173].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_4(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_4(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_4(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[185].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[185].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[185].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[185].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*PD*/
        ctx2[185].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*PD*/
        ctx2[185].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*PD*/
        ctx2[185].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*PD*/
        ctx2[185].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_610(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[173].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[173].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_3(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_3(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_3(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[182].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[182].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[182].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[182].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[182].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*PPub*/
        ctx2[182].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*PPub*/
        ctx2[182].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*PPub*/
        ctx2[182].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*PPub*/
        ctx2[182].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*PPub*/
        ctx2[182].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_510(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[173].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[173].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_2(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_2(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[179].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[179].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[179].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[179].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[179].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*PPB*/
        ctx2[179].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*PPB*/
        ctx2[179].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*PPB*/
        ctx2[179].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*PPB*/
        ctx2[179].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*PPB*/
        ctx2[179].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_410(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[173].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[173].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_1(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_1(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[176].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[176].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[176].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[176].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[176].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32 && t0_value !== (t0_value = /*PHKI*/
        ctx2[176].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t2_value !== (t2_value = /*PHKI*/
        ctx2[176].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t4_value !== (t4_value = /*PHKI*/
        ctx2[176].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t6_value !== (t6_value = /*PHKI*/
        ctx2[176].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32 && t8_value !== (t8_value = /*PHKI*/
        ctx2[176].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block5(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[173].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[5][
        /*index*/
        ctx[175]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler_9() {
      return (
        /*click_handler_9*/
        ctx[141](
          /*index*/
          ctx[175]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[5][
        /*index*/
        ctx[175]
      ].profileVisible && create_if_block_311(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-sov48l");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler_9);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        32) && t1_value !== (t1_value = /*user*/
        ctx[173].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        32) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[5][
          /*index*/
          ctx[175]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[5][
            /*index*/
            ctx[175]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            32) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_311(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_72(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let t6;
    let if_block1_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[49] === true && create_if_block_133(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[50] === true && create_if_block_112(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Detail PPM";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Detail PPM</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Biodata Peneliti</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[49]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[50]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[105]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[106]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*tab1*/
        262144) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[49]
          );
        }
        if (!current || dirty[1] & /*tab2*/
        524288) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[50]
          );
        }
        if (
          /*tab1*/
          ctx2[49] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*tab1*/
            262144) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_133(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[50] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*tab2*/
            524288) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_112(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t5);
          detach(t6);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_62(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_52(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Gagal mengunduh file. Pastikan file telah di upload atau coba unduh\r\n      beberapa saat lagi.";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_42(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum memasukkan catatan revisi";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_32(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum mengupload file penilaian proposal";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_23(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum mengupload file Laporan Hasil PPM";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_110(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi form input evaluator";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot4(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berhasil menyimpan data";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment24(ctx) {
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let t2;
    let modalerror2;
    let updating_show_2;
    let t3;
    let modalerror3;
    let updating_show_3;
    let t4;
    let modalerror4;
    let updating_show_4;
    let t5;
    let modalerror5;
    let updating_show_5;
    let t6;
    let modalchecked;
    let updating_show_6;
    let current;
    let if_block = (
      /*data*/
      ctx[27] && create_if_block8(ctx)
    );
    function modalerror0_show_binding(value) {
      ctx[142](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_62] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[6] !== void 0
    ) {
      modalerror0_props.show = /*showModalError*/
      ctx[6];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[143](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_52] },
      $$scope: { ctx }
    };
    if (
      /*ModalFileNotFound*/
      ctx[7] !== void 0
    ) {
      modalerror1_props.show = /*ModalFileNotFound*/
      ctx[7];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    function modalerror2_show_binding(value) {
      ctx[144](value);
    }
    let modalerror2_props = {
      $$slots: { default: [create_default_slot_42] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorRevisi*/
      ctx[8] !== void 0
    ) {
      modalerror2_props.show = /*showModalErrorRevisi*/
      ctx[8];
    }
    modalerror2 = new Modalerror_default({ props: modalerror2_props });
    binding_callbacks.push(() => bind(modalerror2, "show", modalerror2_show_binding));
    function modalerror3_show_binding(value) {
      ctx[145](value);
    }
    let modalerror3_props = {
      $$slots: { default: [create_default_slot_32] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorPassReviewer*/
      ctx[9] !== void 0
    ) {
      modalerror3_props.show = /*showModalErrorPassReviewer*/
      ctx[9];
    }
    modalerror3 = new Modalerror_default({ props: modalerror3_props });
    binding_callbacks.push(() => bind(modalerror3, "show", modalerror3_show_binding));
    function modalerror4_show_binding(value) {
      ctx[146](value);
    }
    let modalerror4_props = {
      $$slots: { default: [create_default_slot_23] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorHasilPPM*/
      ctx[10] !== void 0
    ) {
      modalerror4_props.show = /*showModalErrorHasilPPM*/
      ctx[10];
    }
    modalerror4 = new Modalerror_default({ props: modalerror4_props });
    binding_callbacks.push(() => bind(modalerror4, "show", modalerror4_show_binding));
    function modalerror5_show_binding(value) {
      ctx[147](value);
    }
    let modalerror5_props = {
      $$slots: { default: [create_default_slot_110] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorInputEvaluator*/
      ctx[11] !== void 0
    ) {
      modalerror5_props.show = /*showModalErrorInputEvaluator*/
      ctx[11];
    }
    modalerror5 = new Modalerror_default({ props: modalerror5_props });
    binding_callbacks.push(() => bind(modalerror5, "show", modalerror5_show_binding));
    function modalchecked_show_binding(value) {
      ctx[148](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot4] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[21] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[21];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
        t2 = space();
        create_component(modalerror2.$$.fragment);
        t3 = space();
        create_component(modalerror3.$$.fragment);
        t4 = space();
        create_component(modalerror4.$$.fragment);
        t5 = space();
        create_component(modalerror5.$$.fragment);
        t6 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modalerror2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modalerror3, target, anchor);
        insert(target, t4, anchor);
        mount_component(modalerror4, target, anchor);
        insert(target, t5, anchor);
        mount_component(modalerror5, target, anchor);
        insert(target, t6, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*data*/
          ctx2[27]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*data*/
            134217728) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block8(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        const modalerror0_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalError*/
        64) {
          updating_show = true;
          modalerror0_changes.show = /*showModalError*/
          ctx2[6];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*ModalFileNotFound*/
        128) {
          updating_show_1 = true;
          modalerror1_changes.show = /*ModalFileNotFound*/
          ctx2[7];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
        const modalerror2_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalerror2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[0] & /*showModalErrorRevisi*/
        256) {
          updating_show_2 = true;
          modalerror2_changes.show = /*showModalErrorRevisi*/
          ctx2[8];
          add_flush_callback(() => updating_show_2 = false);
        }
        modalerror2.$set(modalerror2_changes);
        const modalerror3_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalerror3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[0] & /*showModalErrorPassReviewer*/
        512) {
          updating_show_3 = true;
          modalerror3_changes.show = /*showModalErrorPassReviewer*/
          ctx2[9];
          add_flush_callback(() => updating_show_3 = false);
        }
        modalerror3.$set(modalerror3_changes);
        const modalerror4_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalerror4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_4 && dirty[0] & /*showModalErrorHasilPPM*/
        1024) {
          updating_show_4 = true;
          modalerror4_changes.show = /*showModalErrorHasilPPM*/
          ctx2[10];
          add_flush_callback(() => updating_show_4 = false);
        }
        modalerror4.$set(modalerror4_changes);
        const modalerror5_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalerror5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_5 && dirty[0] & /*showModalErrorInputEvaluator*/
        2048) {
          updating_show_5 = true;
          modalerror5_changes.show = /*showModalErrorInputEvaluator*/
          ctx2[11];
          add_flush_callback(() => updating_show_5 = false);
        }
        modalerror5.$set(modalerror5_changes);
        const modalchecked_changes = {};
        if (dirty[6] & /*$$scope*/
        134217728) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_6 && dirty[0] & /*showModalChecked*/
        2097152) {
          updating_show_6 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[21];
          add_flush_callback(() => updating_show_6 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(modalerror2.$$.fragment, local);
        transition_in(modalerror3.$$.fragment, local);
        transition_in(modalerror4.$$.fragment, local);
        transition_in(modalerror5.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(modalerror2.$$.fragment, local);
        transition_out(modalerror3.$$.fragment, local);
        transition_out(modalerror4.$$.fragment, local);
        transition_out(modalerror5.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
        }
        if (if_block)
          if_block.d(detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        destroy_component(modalerror2, detaching);
        destroy_component(modalerror3, detaching);
        destroy_component(modalerror4, detaching);
        destroy_component(modalerror5, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function isEdit(code, jenisSkema) {
    let editStatus;
    switch (jenisSkema) {
      case "Riset Kelompok Keahlian":
      case "Riset Terapan":
      case "Riset Kerjasama":
      case "Pengabdian Masyarakat Desa Binaan":
      case "Pengabdian Masyarakat UMKM Binaan":
        editStatus = [0, 1, 3, 5];
        break;
      case "Riset Eksternal":
      case "Pengabdian Masyarakat Hibah Eksternal":
        editStatus = [0, 1, 3, 5];
        break;
      case "Riset Mandiri":
      case "Pengabdian Masyarakat Mandiri":
        editStatus = [0, 1, 3, 5];
        break;
      default:
        editStatus = [];
    }
    return editStatus.includes(code);
  }
  function isObjectEmpty(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function formatDate(dateString) {
    const date = new Date(dateString);
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, "0");
    const day = String(date.getUTCDate()).padStart(2, "0");
    const hours = String(date.getUTCHours()).padStart(2, "0");
    const minutes = String(date.getUTCMinutes()).padStart(2, "0");
    const seconds = String(date.getUTCSeconds()).padStart(2, "0");
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }
  function formatRupiah(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance19($$self, $$props, $$invalidate) {
    let isFormFilled;
    let $laporanKeuanganFile;
    let $hasilPPMFile;
    let $skPPMFile;
    let $suratTugasFile;
    let $suratKontrakFile;
    let $skPendanaanFile;
    let $penilaianFile;
    let $rabFile;
    let $kontrakFile;
    let $ppmFile;
    let $apiURL;
    let $route;
    component_subscribe($$self, laporanKeuanganFile, ($$value) => $$invalidate(52, $laporanKeuanganFile = $$value));
    component_subscribe($$self, hasilPPMFile, ($$value) => $$invalidate(53, $hasilPPMFile = $$value));
    component_subscribe($$self, skPPMFile, ($$value) => $$invalidate(54, $skPPMFile = $$value));
    component_subscribe($$self, suratTugasFile, ($$value) => $$invalidate(55, $suratTugasFile = $$value));
    component_subscribe($$self, suratKontrakFile, ($$value) => $$invalidate(56, $suratKontrakFile = $$value));
    component_subscribe($$self, skPendanaanFile, ($$value) => $$invalidate(57, $skPendanaanFile = $$value));
    component_subscribe($$self, penilaianFile, ($$value) => $$invalidate(58, $penilaianFile = $$value));
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(59, $rabFile = $$value));
    component_subscribe($$self, kontrakFile, ($$value) => $$invalidate(60, $kontrakFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(61, $ppmFile = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(160, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(161, $route = $$value));
    let { params } = $$props;
    const id = params["1"];
    const skemaInternal = [
      "Riset Kelompok Keahlian",
      "Riset Terapan",
      "Riset Kerjasama",
      "Pengabdian Masyarakat Desa Binaan",
      "Pengabdian Masyarakat UMKM Binaan"
    ];
    const skemaEksternal = ["Riset Eksternal", "Pengabdian Masyarakat Hibah Eksternal"];
    const skemaMandiri = ["Riset Mandiri", "Pengabdian Masyarakat Mandiri"];
    let error = {};
    let newBiodataAnggota = [];
    let biodataAnggota = [];
    const idEvaluator = localStorage.getItem("id");
    let showModalError = false;
    let ModalFileNotFound = false;
    let showModalErrorRevisi = false;
    let showModalErrorPassReviewer = false;
    let showModalErrorHasilPPM = false;
    let showModalErrorInputEvaluator = false;
    let isLoading = false;
    let hasilPPMVisible = false;
    let danaPPMVisible = false;
    let skPPMVisible = false;
    let presentasiVisible = false;
    let skpVisible = false;
    let CRPVisible = false;
    let iPPVisible = false;
    let inputEvlVisible = false;
    let showModalChecked = false;
    let editModeProposal = false;
    let editModeRAB = false;
    let editModeKontrakPPM = false;
    let randomPenilaianFileName;
    let statusPencairanDana = "";
    let anggotaTim = [];
    let data2;
    let ppmid, jenisProposal, jenisKegiatan, jenisSkema, kelompokKeahlian, topik, tanggalMulai, tanggalSelesai, biayaPenelitian, judul, abstrak, status, ttdSuratKontrak, ka_departemen, ka_lppm, reviewer, ka_pusat_kajian, kdeptSelected2, klppmSelected2, kpkSelected2, reviewerSelected2, presentasiHasilPPM;
    let options;
    let itemsRCR, itemsCHP;
    let fileRab, filePpm, fileSkPendanaan, fileSuratKontrak, fileSuratTugas, fileSkPPM, fileHasilPPM;
    let catatanRevisiProposal, catatanRevisiHasilPPM;
    let items = [];
    let view;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      await getDetailPPM();
      let randomChar = "";
      let resultGenerateRandomChar = "";
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let i = 0; i < 10; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultGenerateRandomChar += characters.charAt(randomIndex);
      }
      randomChar = resultGenerateRandomChar;
      randomPenilaianFileName = id + "_Penilaian Proposal PPM_" + randomChar;
      const responseEvl = await fetch($apiURL + "/user/" + idEvaluator, { method: "GET", headers });
      const resultEvl = await responseEvl.json();
      if (responseEvl.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseEvl.ok) {
          dataEvl = resultEvl;
          namaLengkapEvl = dataEvl.nama_lengkap;
        }
      }
      const responseRCR = await fetch($apiURL + "/riwayatCatatanRevisiProposal/" + ppmId, { method: "GET", headers });
      const dataRCR = await responseRCR.json();
      if (responseRCR.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRCR.ok) {
          $$invalidate(44, itemsRCR = dataRCR.dbData.map((item) => ({ ...item, time: formatDate(item.time) })));
        }
      }
      const responseCHP = await fetch($apiURL + "/riwayatCatatanRevisiHasilPPM/" + ppmId, { method: "GET", headers });
      const dataCHP = await responseCHP.json();
      if (responseCHP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCHP.ok) {
          $$invalidate(45, itemsCHP = dataCHP.dbData.map((item) => ({ ...item, time: formatDate(item.time) })));
        }
      }
    });
    async function getDetailPPM() {
      $$invalidate(39, ka_departemen = await findRole(11));
      $$invalidate(40, ka_lppm = await findRole(12));
      $$invalidate(42, ka_pusat_kajian = await findRole(13));
      $$invalidate(41, reviewer = await findRole(10));
      const response = await fetch($apiURL + "/ppm/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(27, data2 = result);
          $$invalidate(48, view = !isEdit(data2.status, data2.jenis_skema));
          ppmId = data2.id;
          uidProposal = data2.uid;
          $$invalidate(28, jenisProposal = data2.jenis_proposal);
          $$invalidate(29, jenisKegiatan = data2.jenis_kegiatan);
          $$invalidate(30, jenisSkema = data2.jenis_skema);
          $$invalidate(31, kelompokKeahlian = data2.kelompok_keahlian);
          $$invalidate(32, topik = data2.topik);
          $$invalidate(33, tanggalMulai = data2.tanggal_mulai);
          $$invalidate(34, tanggalSelesai = data2.tanggal_selesai);
          $$invalidate(35, biayaPenelitian = data2.biaya_penelitian);
          $$invalidate(26, anggotaTim = data2.anggota_tim);
          $$invalidate(5, biodataAnggota = data2.biodata_anggota);
          $$invalidate(36, judul = data2.judul);
          $$invalidate(37, abstrak = data2.abstrak);
          isi = data2.isi;
          $$invalidate(38, status = data2.status);
          $$invalidate(0, kdeptSelected2 = data2.uid_kdept);
          $$invalidate(1, klppmSelected2 = data2.uid_klppm);
          $$invalidate(2, kpkSelected2 = data2.uid_kpk);
          $$invalidate(3, reviewerSelected2 = data2.uid_reviewer);
          rabFileName = data2.rab_file_name;
          ppmFileName = data2.ppm_file_name;
          kontrakFileName = data2.kontrak_ppm_eksternal_file_name;
          randomPenilaianFileNamedb = data2.penilaian_file_name;
          ttdSuratKontrak = data2.ttd_surat_kontrak;
          $$invalidate(43, presentasiHasilPPM = data2.presentasi_hasil_ppm);
          fileSkPendanaanNameDB = data2.file_sk_pendanaan;
          fileSuratKontrakNameDB = data2.file_surat_kontrak;
          fileSuratTugasNameDB = data2.file_surat_tugas;
          fileSkPPMNameDB = data2.file_sk_ppm;
          fileHasilPPMNameDB = data2.file_hasil_ppm;
          fileLaporanKeuanganNameDB = data2.file_laporan_keuangan;
          $$invalidate(25, statusPencairanDana = data2.status_pencairan_dana || "");
        }
      }
    }
    async function getBiodataAnggota() {
      let ids = anggotaTim.map((anggota) => anggota.value);
      let promises = ids.map(async (idAnggota) => {
        try {
          const profileResponse = await fetch($apiURL + "/user/" + idAnggota, { method: "GET", headers });
          if (profileResponse.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!profileResponse.ok) {
            throw new Error(`Failed to fetch profile for ID ${idAnggota}`);
          }
          const profileResult = await profileResponse.json();
          const RPS1Response = await fetch($apiURL + "/riwayatPendidikanS1/" + idAnggota, { method: "GET", headers });
          if (RPS1Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS1Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S1 for ID ${idAnggota}`);
          }
          const RPS1Result = await RPS1Response.json();
          const RPS2Response = await fetch($apiURL + "/riwayatPendidikanS2/" + idAnggota, { method: "GET", headers });
          if (RPS2Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS2Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S2 for ID ${idAnggota}`);
          }
          const RPS2Result = await RPS2Response.json();
          const RPS3Response = await fetch($apiURL + "/riwayatPendidikanS3/" + idAnggota, { method: "GET", headers });
          if (RPS3Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS3Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const RPS3Result = await RPS3Response.json();
          const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + idAnggota, { method: "GET", headers });
          if (responsePP.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePP.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPP = await responsePP.json();
          const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + idAnggota, { method: "GET", headers });
          if (responsePM.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePM.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPM = await responsePM.json();
          const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + idAnggota, { method: "GET", headers });
          if (responsePD.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePD.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPD = await responsePD.json();
          const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + idAnggota, { method: "GET", headers });
          if (responsePPub.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPub.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPub = await responsePPub.json();
          const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idAnggota, { method: "GET", headers });
          if (responsePPB.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPB.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPB = await responsePPB.json();
          const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + idAnggota, { method: "GET", headers });
          if (responsePHKI.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePHKI.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPHKI = await responsePHKI.json();
          return {
            profile: profileResult,
            RPS1: RPS1Result.dbData,
            RPS2: RPS2Result.dbData,
            RPS3: RPS3Result.dbData,
            Ppenelitian: resultPP.dbData,
            Ppengmas: resultPM.dbData,
            Pdiseminasi: resultPD.dbData,
            Ppublikasi: resultPPub.dbData,
            PpenulisanBuku: resultPPB.dbData,
            Phki: resultPHKI.dbData
          };
        } catch (error2) {
          console.error(`Error fetching data for ID ${idAnggota}:`, error2);
          return {
            profile: null,
            RPS1: [],
            RPS2: [],
            RPS3: [],
            Ppenelitian: [],
            Ppengmas: [],
            Pdiseminasi: [],
            Ppublikasi: [],
            PpenulisanBuku: [],
            Phki: [],
            error: error2.message
          };
        }
      });
      newBiodataAnggota = await Promise.all(promises.filter(Boolean));
    }
    async function handleSubmitStatusPendanaan() {
      $$invalidate(12, isLoading = true);
      payload = { statusPencairanDana, id };
      const response = await fetch($apiURL + "/submitStatusPencairanDana", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getDetailPPM();
        } else {
          console.log(response);
        }
      }
      $$invalidate(21, showModalChecked = true);
      $$invalidate(12, isLoading = false);
    }
    async function handleSubmitEvaluator() {
      $$invalidate(4, error = {});
      $$invalidate(12, isLoading = true);
      const payload2 = {
        id,
        kdeptSelected: kdeptSelected2,
        klppmSelected: klppmSelected2,
        kpkSelected: kpkSelected2,
        reviewerSelected: reviewerSelected2
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(4, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(11, showModalErrorInputEvaluator = true);
      } else {
        const response = await fetch($apiURL + "/submitEvaluator", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            getDetailPPM();
            $$invalidate(21, showModalChecked = true);
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handleSubmitFile() {
      $$invalidate(12, isLoading = true);
      const readerSkPendanaan = new FileReader();
      const readerSuratKontrak = new FileReader();
      const readerSuratTugas = new FileReader();
      const readerSkPPM = new FileReader();
      let fileSkPendanaanName = id + "_SK Pendanaan";
      let fileSuratKontrakName = id + "_Surat Kontrak PPM";
      let fileSuratTugasName = id + "_Surat Tugas";
      let fileSkPPMName = id + "_SK PPM";
      let payloadFileName = {
        fileSkPendanaanName,
        fileSuratKontrakName,
        fileSuratTugasName,
        fileSkPPMName,
        id
      };
      const submitFileName = new Promise(async (resolve, reject) => {
        try {
          const response = await fetch($apiURL + "/submitFilePPM", {
            method: "PATCH",
            headers,
            body: JSON.stringify(payloadFileName)
          });
          const result = await response.json();
          if (response.status === 401) {
            location.pathname = "/tokenexpired";
            reject("Token expired");
          } else if (response.ok) {
            resolve(result);
          } else {
            console.log(result.msg, error);
            reject("Error submitting file");
          }
        } catch (error2) {
          reject(error2);
        }
      });
      const uploadSkPendanaan = new Promise((resolve, reject) => {
        if (!fileSkPendanaan) {
          resolve("No file SkPendanaan selected");
          return;
        }
        readerSkPendanaan.onloadend = async () => {
          const base64Data = readerSkPendanaan.result.split(",")[1];
          const payloadSkPendanaanFile = {
            fileSkPendanaan: {
              name: fileSkPendanaan.name,
              type: fileSkPendanaan.type,
              data: base64Data
            },
            fileSkPendanaanName
          };
          try {
            const response = await fetch($apiURL + "/uploadDownloadSKPendanaan", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadSkPendanaanFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        if (fileSkPendanaan)
          readerSkPendanaan.readAsDataURL(fileSkPendanaan);
      });
      const uploadSuratKontrak = new Promise((resolve, reject) => {
        if (!fileSuratKontrak) {
          resolve("No file SuratKontrak selected");
          return;
        }
        readerSuratKontrak.onloadend = async () => {
          const base64Data = readerSuratKontrak.result.split(",")[1];
          const payloadSuratKontrakFile = {
            fileSuratKontrak: {
              name: fileSuratKontrak.name,
              type: fileSuratKontrak.type,
              data: base64Data
            },
            fileSuratKontrakName
          };
          try {
            const response = await fetch($apiURL + "/uploadDownloadSuratKontrak", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadSuratKontrakFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        if (fileSuratKontrak)
          readerSuratKontrak.readAsDataURL(fileSuratKontrak);
      });
      const uploadSuratTugas = new Promise((resolve, reject) => {
        if (!fileSuratTugas) {
          resolve("No file SuratTugas selected");
          return;
        }
        readerSuratTugas.onloadend = async () => {
          const base64Data = readerSuratTugas.result.split(",")[1];
          const payloadSuratTugasFile = {
            fileSuratTugas: {
              name: fileSuratTugas.name,
              type: fileSuratTugas.type,
              data: base64Data
            },
            fileSuratTugasName
          };
          try {
            const response = await fetch($apiURL + "/uploadDownloadSuratTugas", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadSuratTugasFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        if (fileSuratTugas)
          readerSuratTugas.readAsDataURL(fileSuratTugas);
      });
      const uploadSkPPM = new Promise((resolve, reject) => {
        if (!fileSkPPM) {
          resolve("No file SkPPM selected");
          return;
        }
        readerSkPPM.onloadend = async () => {
          const base64Data = readerSkPPM.result.split(",")[1];
          const payloadSkPPMFile = {
            fileSkPPM: {
              name: fileSkPPM.name,
              type: fileSkPPM.type,
              data: base64Data
            },
            fileSkPPMName
          };
          try {
            const response = await fetch($apiURL + "/uploadDownloadSKPPM", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadSkPPMFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        if (fileSkPPM)
          readerSkPPM.readAsDataURL(fileSkPPM);
      });
      try {
        await Promise.all([
          submitFileName,
          uploadSkPendanaan,
          uploadSuratKontrak,
          uploadSuratTugas,
          uploadSkPPM
        ]);
      } finally {
        $$invalidate(21, showModalChecked = true);
        $$invalidate(12, isLoading = false);
      }
    }
    async function handleSubmitHasilPPM() {
      $$invalidate(12, isLoading = true);
      const readerHasilPPM = new FileReader();
      const readerLaporanKeuanganPPM = new FileReader();
      let payloadFileName;
      let fileHasilPPMName = id + "_Laporan Hasil PPM";
      let fileLaporanKeuanganName = id + "_Laporan Keuangan PPM";
      if (hasilPPMisRequired()) {
        payloadFileName = {
          status: Number(data2.status) + 2,
          fileHasilPPMName,
          fileLaporanKeuanganName,
          id
        };
      } else if (hasilPPMisRevisi()) {
        payloadFileName = {
          status: Number(data2.status) + 1,
          fileHasilPPMName,
          fileLaporanKeuanganName,
          id
        };
      }
      if (skemaInternal.includes(jenisSkema) && hasilPPMisRequired() && (!fileHasilPPM || !fileLaporanKeuangan)) {
        $$invalidate(10, showModalErrorHasilPPM = true);
        $$invalidate(12, isLoading = false);
        return;
      } else if (hasilPPMisRequired() && !fileHasilPPM) {
        $$invalidate(10, showModalErrorHasilPPM = true);
        $$invalidate(12, isLoading = false);
        return;
      } else {
        const uploadHasilPPM = new Promise((resolve, reject) => {
          if (!fileHasilPPM) {
            resolve("No file Hasil PPM selected");
            return;
          }
          readerHasilPPM.onloadend = async () => {
            const base64Data = readerHasilPPM.result.split(",")[1];
            const payloadHasilPPMFile = {
              fileHasilPPM: {
                name: fileHasilPPM.name,
                type: fileHasilPPM.type,
                data: base64Data
              },
              fileHasilPPMName
            };
            try {
              const response = await fetch($apiURL + "/uploadDownloadHasilPPM", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadHasilPPMFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileHasilPPM)
            readerHasilPPM.readAsDataURL(fileHasilPPM);
        });
        const laporanKeuanganPPM = new Promise((resolve, reject) => {
          if (!fileLaporanKeuangan) {
            resolve("No file Hasil PPM selected");
            return;
          }
          readerLaporanKeuanganPPM.onloadend = async () => {
            const base64Data = readerLaporanKeuanganPPM.result.split(",")[1];
            const payloadLaporanKeuanganFile = {
              fileLaporanKeuangan: {
                name: fileLaporanKeuangan.name,
                type: fileLaporanKeuangan.type,
                data: base64Data
              },
              fileLaporanKeuanganName
            };
            try {
              const response = await fetch($apiURL + "/uploadDownloadLaporanKeuangan", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadLaporanKeuanganFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileLaporanKeuangan)
            readerLaporanKeuanganPPM.readAsDataURL(fileLaporanKeuangan);
        });
        const submitFileName = new Promise(async (resolve, reject) => {
          try {
            const response = await fetch($apiURL + "/submitFilePPM/pass", {
              method: "PATCH",
              headers,
              body: JSON.stringify(payloadFileName)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              console.log(result.msg, error);
              reject("Error submitting file");
            }
          } catch (error2) {
            reject(error2);
          }
        });
        try {
          await Promise.all([uploadHasilPPM, laporanKeuanganPPM, submitFileName]);
        } finally {
          $$invalidate(12, isLoading = false);
          $$invalidate(21, showModalChecked = true);
          setTimeout(
            () => {
              window.location.reload();
            },
            500
          );
        }
      }
    }
    async function handlePerbaikan() {
      await getBiodataAnggota();
      $$invalidate(4, error = {});
      $$invalidate(12, isLoading = true);
      const readerRab = new FileReader();
      const readerPpm = new FileReader();
      const readerHasilPPM = new FileReader();
      const readerKontrakPpm = new FileReader();
      let fileHasilPPMName = id + "_Laporan Hasil PPM";
      const payload2 = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        newBiodataAnggota,
        id,
        judul,
        abstrak,
        status: Number(data2.status) + 1,
        kdeptSelected: kdeptSelected2,
        klppmSelected: klppmSelected2,
        kpkSelected: kpkSelected2,
        reviewerSelected: reviewerSelected2,
        rabFileName,
        ppmFileName
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!["catatanRevisiProposal"].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(4, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(6, showModalError = true);
        $$invalidate(12, isLoading = false);
      } else {
        const cekFileProposal = new Promise((resolve, reject) => {
          if (!filePpm) {
            resolve("No fileProposal selected");
            return;
          }
          readerPpm.onloadend = async () => {
            const base64Data = readerPpm.result.split(",")[1];
            const payloadPpmFile = {
              filePpm: {
                name: filePpm.name,
                type: filePpm.type,
                data: base64Data
              },
              ppmFileName
            };
            try {
              const response = await fetch($apiURL + "/uploadPpm", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadPpmFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (filePpm)
            readerPpm.readAsDataURL(filePpm);
        });
        const cekFileKontrakPPM = new Promise((resolve, reject) => {
          if (!fileKontrak) {
            resolve("No fileKontrak selected");
            return;
          }
          readerKontrakPpm.onloadend = async () => {
            const base64Data = readerKontrakPpm.result.split(",")[1];
            const payloadKontrakPpmFile = {
              fileKontrak: {
                name: fileKontrak.name,
                type: fileKontrak.type,
                data: base64Data
              },
              kontrakFileName
            };
            try {
              const response = await fetch($apiURL + "/uploadKontrakPPMEksternal", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadKontrakPpmFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileKontrak)
            readerKontrakPpm.readAsDataURL(fileKontrak);
        });
        const cekFileRAB = new Promise((resolve, reject) => {
          if (!fileRab) {
            resolve("No fileRab selected");
            return;
          }
          readerRab.onloadend = async () => {
            const base64Data = readerRab.result.split(",")[1];
            const payloadRabFile = {
              fileRab: {
                name: fileRab.name,
                type: fileRab.type,
                data: base64Data
              },
              rabFileName
            };
            try {
              const response = await fetch($apiURL + "/uploadRab", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadRabFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileRab)
            readerRab.readAsDataURL(fileRab);
        });
        const cekFileHasilPPM = new Promise((resolve, reject) => {
          if (!fileHasilPPM) {
            resolve("No fileHasilPPM selected");
            return;
          }
          readerHasilPPM.onloadend = async () => {
            const base64Data = readerHasilPPM.result.split(",")[1];
            const payloadHasilPPMFile = {
              fileHasilPPM: {
                name: fileHasilPPM.name,
                type: fileHasilPPM.type,
                data: base64Data
              },
              fileHasilPPMName
            };
            try {
              const response = await fetch($apiURL + "/uploadDownloadHasilPPM", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadHasilPPMFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileHasilPPM)
            readerHasilPPM.readAsDataURL(fileHasilPPM);
        });
        const cekPatchDataPPM = new Promise(async (resolve, reject) => {
          const response = await fetch($apiURL + "/ppm", {
            method: "PATCH",
            headers,
            body: JSON.stringify(payload2)
          });
          const result = await response.json();
          if (response.status === 401) {
            location.pathname = "/tokenexpired";
            reject("Token expired");
          } else {
            if (response.ok) {
              resolve(result);
            } else {
              console.log(response);
              reject("Error submitting file");
            }
          }
        });
        try {
          await Promise.all([cekFileProposal, cekFileRAB, cekFileHasilPPM, cekPatchDataPPM]);
        } finally {
          $$invalidate(12, isLoading = false);
          $route("/admin/ppmmanagement");
        }
      }
    }
    async function handleRevisi() {
      $$invalidate(4, error = {});
      $$invalidate(12, isLoading = true);
      let payload2 = { status: Number(data2.status) - 1, id };
      const payloadCttnRevisiProposal = {
        ppmId,
        catatanRevisiProposal,
        namaLengkapEvl
      };
      const payloadCttnRevisiHasilPPM = {
        ppmId,
        catatanRevisiHasilPPM,
        namaLengkapEvl
      };
      if (cttnRevisiProposalisRequired()) {
        if (!payloadCttnRevisiProposal.catatanRevisiProposal) {
          $$invalidate(4, error.catatanRevisiProposal = `This field is required`, error);
        }
      }
      if (cttnRevisiHasilPPMisRequired()) {
        if (!payloadCttnRevisiHasilPPM.catatanRevisiHasilPPM) {
          $$invalidate(4, error.catatanRevisiHasilPPM = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(8, showModalErrorRevisi = true);
      } else {
        if (cttnRevisiProposalisRequired()) {
          const responseRevisiProposal = await fetch($apiURL + "/riwayatCatatanRevisiProposal", {
            method: "POST",
            headers,
            body: JSON.stringify(payloadCttnRevisiProposal)
          });
          const resultRevisiProposal = await responseRevisiProposal.json();
          if (responseRevisiProposal.status === 401) {
            location.pathname = "/tokenexpired";
          } else {
            if (!responseRevisiProposal.ok) {
              console.log(responseRevisiProposal);
            }
          }
        }
        if (cttnRevisiHasilPPMisRequired()) {
          const responseRevisiHasilPPM = await fetch($apiURL + "/riwayatCatatanRevisiHasilPPM", {
            method: "POST",
            headers,
            body: JSON.stringify(payloadCttnRevisiHasilPPM)
          });
          const resultRevisiHasilPPM = await responseRevisiHasilPPM.json();
          if (responseRevisiHasilPPM.status === 401) {
            location.pathname = "/tokenexpired";
          } else {
            if (!responseRevisiHasilPPM.ok) {
              console.log(responseRevisiHasilPPM);
            }
          }
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/admin/ppmmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handleDitolak() {
      $$invalidate(12, isLoading = true);
      const payload2 = { status: Number(data2.status) + 1, id };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload2)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/admin/ppmmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handleSimpanPenilaian() {
      $$invalidate(4, error = {});
      $$invalidate(12, isLoading = true);
      const readerPenilaian = new FileReader();
      const payload2 = {
        status: Number(data2.status),
        randomPenilaianFileName,
        id
      };
      if (isObjectEmpty($penilaianFile)) {
        $$invalidate(4, error["filePenilaian"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(9, showModalErrorPassReviewer = true);
      } else {
        if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
          readerPenilaian.onloadend = async () => {
            const base64Data = readerPenilaian.result.split(",")[1];
            const payloadPenilaianFile = {
              filePenilaian: {
                name: filePenilaian.name,
                type: filePenilaian.type,
                data: base64Data
              },
              randomPenilaianFileName
            };
            try {
              const responseUpload = await fetch($apiURL + "/uploadPenilaian", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadPenilaianFile)
              });
              const resultUpload = await responseUpload.json();
              if (responseUpload.status === 401) {
                location.pathname = "/tokenexpired";
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
            }
          };
          readerPenilaian.readAsDataURL(filePenilaian);
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            getDetailPPM();
            $$invalidate(21, showModalChecked = true);
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    async function handlePass() {
      let db_Kdept = data2.uid_kdept;
      let db_Klppm = data2.uid_klppm;
      let db_Kpk = data2.uid_kpk;
      let db_Reviewer = data2.uid_reviewer;
      let payload2 = { status: Number(data2.status) + 2, id };
      let dbEvaluator = { db_Kdept, db_Klppm, db_Kpk, db_Reviewer };
      $$invalidate(4, error = {});
      $$invalidate(12, isLoading = true);
      for (const [key, value] of Object.entries(dbEvaluator)) {
        if (!dbEvaluator[key]) {
          $$invalidate(4, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(11, showModalErrorInputEvaluator = true);
      } else {
        const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/admin/ppmmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(12, isLoading = false);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(26, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    async function handleDownloadRab(e) {
      let filename = "RAB_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadRab/${rabFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPpm(e) {
      let filename = "Proposal_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadPpm/${ppmFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadKontrakPpmEksternal(e) {
      let filename = "Kontrak PPM_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadKontrakPPMEksternal/${kontrakFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPenilaian(e) {
      let filename = "Penilaian Proposal_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadPenilaian/${randomPenilaianFileNamedb}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSkPendanaan(e) {
      let filename = "SK Pendanaan.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSKPendanaan/${fileSkPendanaanNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSuratKontrak() {
      let filename = "Surat Kontrak Penelitian.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSuratKontrak/${fileSuratKontrakNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSuratTugas() {
      let filename = "Surat Tugas.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSuratTugas/${fileSuratTugasNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSkPPM() {
      let filename = "SK PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSKPPM/${fileSkPPMNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadHasilPPM() {
      let filename = "Laporan Hasil PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadHasilPPM/${fileHasilPPMNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadLaporanKeuangan() {
      let filename = "Laporan Keuangan.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadLaporanKeuangan/${fileLaporanKeuanganNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(7, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function checkboxPresentasiHasilPPM(event) {
      $$invalidate(43, presentasiHasilPPM = event.target.checked ? 1 : 0);
      payload = { ppmId, presentasiHasilPPM };
      const response = await fetch($apiURL + "/checkBoxPPM/id/presentasiPPM", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    async function findRole(role) {
      const response = await fetch($apiURL + "/role/" + role, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          options = result;
          return options;
        } else {
          console.log(response);
        }
      }
    }
    function ShowRPButton() {
      const StatusForInternal = [2, 10];
      const StatusForEksternal = [2, 10];
      const StatusForMandiri = [2, 10];
      if (skemaInternal.includes(data2.jenis_skema) && StatusForInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && StatusForEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && StatusForMandiri.includes(data2.status)) {
        return true;
      }
    }
    function hasilPPMisRequired() {
      const ReviewKpkKlppmSkemaInternal = [8];
      const ReviewKpkKlppmSkemaEksternal = [8];
      const ReviewKpkKlppmSkemaMandiri = [8];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function ShowRDPButton() {
      const ReviewKpkKlppmSkemaInternal = [6];
      const ReviewKpkKlppmSkemaEksternal = [6];
      const ReviewKpkKlppmSkemaMandiri = [6];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function cttnRevisiProposalisRequired() {
      const RevisiSkemaInternal = [2, 6];
      const RevisiSkemaEksternal = [2, 6];
      const RevisiSkemaMandiri = [2, 6];
      if (skemaInternal.includes(data2.jenis_skema) && RevisiSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && RevisiSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && RevisiSkemaMandiri.includes(data2.status)) {
        return true;
      }
      return false;
    }
    function showSubmitHasilPPM_Button() {
      const ReviewKpkKlppmSkemaInternal = [8, 9];
      const ReviewKpkKlppmSkemaEksternal = [8, 9];
      const ReviewKpkKlppmSkemaMandiri = [8, 9];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function cttnRevisiHasilPPMisRequired() {
      const RevisiSkemaInternal = [10];
      const RevisiSkemaEksternal = [10];
      const RevisiSkemaMandiri = [10];
      if (skemaInternal.includes(data2.jenis_skema) && RevisiSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && RevisiSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && RevisiSkemaMandiri.includes(data2.status)) {
        return true;
      }
      return false;
    }
    function hasilPPMisRevisi() {
      const ReviewKpkKlppmSkemaInternal = [9];
      const ReviewKpkKlppmSkemaEksternal = [9];
      const ReviewKpkKlppmSkemaMandiri = [9];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function ShowButtonPerbaikan() {
      const RevisiSkemaInternal = [1, 3, 5];
      const RevisiSkemaEksternal = [1, 3, 5];
      const RevisiSkemaMandiri = [1, 3, 5];
      if (skemaInternal.includes(data2.jenis_skema) && RevisiSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && RevisiSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && RevisiSkemaMandiri.includes(data2.status)) {
        return true;
      }
      return false;
    }
    function toggleEditModeProposal() {
      $$invalidate(22, editModeProposal = !editModeProposal);
    }
    function toggleEditModeRAB() {
      $$invalidate(23, editModeRAB = !editModeRAB);
    }
    function toggleEditModeKontrakPPM() {
      $$invalidate(24, editModeKontrakPPM = !editModeKontrakPPM);
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileKontrakChange(e) {
      fileKontrak = e.target.files[0];
      set_store_value(kontrakFile, $kontrakFile = e.target.files[0], $kontrakFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function filePenilaianChange(e) {
      filePenilaian = e.target.files[0];
      set_store_value(penilaianFile, $penilaianFile = e.target.files[0], $penilaianFile);
    }
    function fileSkPendanaanChange(e) {
      fileSkPendanaan = e.target.files[0];
      set_store_value(skPendanaanFile, $skPendanaanFile = e.target.files[0], $skPendanaanFile);
    }
    function fileSuratKontrakChange(e) {
      fileSuratKontrak = e.target.files[0];
      set_store_value(suratKontrakFile, $suratKontrakFile = e.target.files[0], $suratKontrakFile);
    }
    function fileSuratTugasChange(e) {
      fileSuratTugas = e.target.files[0];
      set_store_value(suratTugasFile, $suratTugasFile = e.target.files[0], $suratTugasFile);
    }
    function fileSkPPMChange(e) {
      fileSkPPM = e.target.files[0];
      set_store_value(skPPMFile, $skPPMFile = e.target.files[0], $skPPMFile);
    }
    function fileHasilPPMChange(e) {
      fileHasilPPM = e.target.files[0];
      set_store_value(hasilPPMFile, $hasilPPMFile = e.target.files[0], $hasilPPMFile);
    }
    function fileLaporanKeuanganChange(e) {
      fileLaporanKeuangan = e.target.files[0];
      set_store_value(laporanKeuanganFile, $laporanKeuanganFile = e.target.files[0], $laporanKeuanganFile);
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(49, tab1 = true);
      $$invalidate(50, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(49, tab1 = false);
      $$invalidate(50, tab2 = true);
    }
    function input_input_handler() {
      judul = this.value;
      $$invalidate(36, judul);
    }
    function textarea_input_handler() {
      abstrak = this.value;
      $$invalidate(37, abstrak);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(28, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(29, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(30, jenisSkema);
    }
    function input_input_handler_1() {
      kelompokKeahlian = this.value;
      $$invalidate(31, kelompokKeahlian);
    }
    function input_input_handler_2() {
      topik = this.value;
      $$invalidate(32, topik);
    }
    function input_input_handler_3() {
      tanggalMulai = this.value;
      $$invalidate(33, tanggalMulai);
    }
    function input_input_handler_4() {
      tanggalSelesai = this.value;
      $$invalidate(34, tanggalSelesai);
    }
    function input_input_handler_5() {
      biayaPenelitian = this.value;
      $$invalidate(35, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(35, biayaPenelitian = formatRupiah(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(26, anggotaTim);
    }
    const click_handler = () => $$invalidate(19, iPPVisible = !iPPVisible);
    const click_handler_1 = () => $$invalidate(18, CRPVisible = !CRPVisible);
    function textarea_input_handler_1() {
      catatanRevisiProposal = this.value;
      $$invalidate(46, catatanRevisiProposal);
    }
    const click_handler_2 = () => $$invalidate(20, inputEvlVisible = !inputEvlVisible);
    function field0_value_binding(value) {
      ka_departemen = value;
      $$invalidate(39, ka_departemen);
    }
    function field0_selected_binding(value) {
      kdeptSelected2 = value;
      $$invalidate(0, kdeptSelected2);
    }
    function field1_value_binding(value) {
      reviewer = value;
      $$invalidate(41, reviewer);
    }
    function field1_selected_binding(value) {
      reviewerSelected2 = value;
      $$invalidate(3, reviewerSelected2);
    }
    function field2_value_binding(value) {
      ka_lppm = value;
      $$invalidate(40, ka_lppm);
    }
    function field2_selected_binding(value) {
      klppmSelected2 = value;
      $$invalidate(1, klppmSelected2);
    }
    function field3_value_binding(value) {
      ka_pusat_kajian = value;
      $$invalidate(42, ka_pusat_kajian);
    }
    function field3_selected_binding(value) {
      kpkSelected2 = value;
      $$invalidate(2, kpkSelected2);
    }
    const click_handler_3 = () => $$invalidate(17, skpVisible = !skpVisible);
    const click_handler_4 = () => $$invalidate(17, skpVisible = !skpVisible);
    const click_handler_5 = () => $$invalidate(14, danaPPMVisible = !danaPPMVisible);
    function select_change_handler_3() {
      statusPencairanDana = select_value(this);
      $$invalidate(25, statusPencairanDana);
    }
    const click_handler_6 = () => $$invalidate(13, hasilPPMVisible = !hasilPPMVisible);
    function textarea_input_handler_2() {
      catatanRevisiHasilPPM = this.value;
      $$invalidate(47, catatanRevisiHasilPPM);
    }
    const click_handler_7 = () => $$invalidate(16, presentasiVisible = !presentasiVisible);
    function input_change_handler() {
      presentasiHasilPPM = this.checked;
      $$invalidate(43, presentasiHasilPPM);
    }
    const click_handler_8 = () => $$invalidate(15, skPPMVisible = !skPPMVisible);
    const click_handler_9 = (index) => $$invalidate(5, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalError = value;
      $$invalidate(6, showModalError);
    }
    function modalerror1_show_binding(value) {
      ModalFileNotFound = value;
      $$invalidate(7, ModalFileNotFound);
    }
    function modalerror2_show_binding(value) {
      showModalErrorRevisi = value;
      $$invalidate(8, showModalErrorRevisi);
    }
    function modalerror3_show_binding(value) {
      showModalErrorPassReviewer = value;
      $$invalidate(9, showModalErrorPassReviewer);
    }
    function modalerror4_show_binding(value) {
      showModalErrorHasilPPM = value;
      $$invalidate(10, showModalErrorHasilPPM);
    }
    function modalerror5_show_binding(value) {
      showModalErrorInputEvaluator = value;
      $$invalidate(11, showModalErrorInputEvaluator);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(21, showModalChecked);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(107, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty[0] & /*kdeptSelected, klppmSelected, reviewerSelected, kpkSelected*/
      15) {
        $:
          $$invalidate(51, isFormFilled = kdeptSelected2 && klppmSelected2 && reviewerSelected2 && kpkSelected2);
      }
    };
    return [
      kdeptSelected2,
      klppmSelected2,
      kpkSelected2,
      reviewerSelected2,
      error,
      biodataAnggota,
      showModalError,
      ModalFileNotFound,
      showModalErrorRevisi,
      showModalErrorPassReviewer,
      showModalErrorHasilPPM,
      showModalErrorInputEvaluator,
      isLoading,
      hasilPPMVisible,
      danaPPMVisible,
      skPPMVisible,
      presentasiVisible,
      skpVisible,
      CRPVisible,
      iPPVisible,
      inputEvlVisible,
      showModalChecked,
      editModeProposal,
      editModeRAB,
      editModeKontrakPPM,
      statusPencairanDana,
      anggotaTim,
      data2,
      jenisProposal,
      jenisKegiatan,
      jenisSkema,
      kelompokKeahlian,
      topik,
      tanggalMulai,
      tanggalSelesai,
      biayaPenelitian,
      judul,
      abstrak,
      status,
      ka_departemen,
      ka_lppm,
      reviewer,
      ka_pusat_kajian,
      presentasiHasilPPM,
      itemsRCR,
      itemsCHP,
      catatanRevisiProposal,
      catatanRevisiHasilPPM,
      view,
      tab1,
      tab2,
      isFormFilled,
      $laporanKeuanganFile,
      $hasilPPMFile,
      $skPPMFile,
      $suratTugasFile,
      $suratKontrakFile,
      $skPendanaanFile,
      $penilaianFile,
      $rabFile,
      $kontrakFile,
      $ppmFile,
      skemaInternal,
      skemaEksternal,
      skemaMandiri,
      items,
      handleSubmitStatusPendanaan,
      handleSubmitEvaluator,
      handleSubmitFile,
      handleSubmitHasilPPM,
      handlePerbaikan,
      handleRevisi,
      handleDitolak,
      handleSimpanPenilaian,
      handlePass,
      deleteMember,
      handleDownloadRab,
      handleDownloadPpm,
      handleDownloadKontrakPpmEksternal,
      handleDownloadPenilaian,
      handleDownloadSkPendanaan,
      handleDownloadSuratKontrak,
      handleDownloadSuratTugas,
      handleDownloadSkPPM,
      handleDownloadHasilPPM,
      handleDownloadLaporanKeuangan,
      checkboxPresentasiHasilPPM,
      ShowRPButton,
      ShowRDPButton,
      cttnRevisiProposalisRequired,
      showSubmitHasilPPM_Button,
      ShowButtonPerbaikan,
      toggleEditModeProposal,
      toggleEditModeRAB,
      toggleEditModeKontrakPPM,
      filePpmChange,
      fileKontrakChange,
      fileRabChange,
      filePenilaianChange,
      fileSkPendanaanChange,
      fileSuratKontrakChange,
      fileSuratTugasChange,
      fileSkPPMChange,
      fileHasilPPMChange,
      fileLaporanKeuanganChange,
      clicktab1,
      clicktab2,
      params,
      input_input_handler,
      textarea_input_handler,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      keyup_handler,
      select_result_binding,
      click_handler,
      click_handler_1,
      textarea_input_handler_1,
      click_handler_2,
      field0_value_binding,
      field0_selected_binding,
      field1_value_binding,
      field1_selected_binding,
      field2_value_binding,
      field2_selected_binding,
      field3_value_binding,
      field3_selected_binding,
      click_handler_3,
      click_handler_4,
      click_handler_5,
      select_change_handler_3,
      click_handler_6,
      textarea_input_handler_2,
      click_handler_7,
      input_change_handler,
      click_handler_8,
      click_handler_9,
      modalerror0_show_binding,
      modalerror1_show_binding,
      modalerror2_show_binding,
      modalerror3_show_binding,
      modalerror4_show_binding,
      modalerror5_show_binding,
      modalchecked_show_binding
    ];
  }
  var Detailppm = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance19, create_fragment24, safe_not_equal, { params: 107 }, null, [-1, -1, -1, -1, -1, -1, -1]);
    }
  };
  var detailppm_default = Detailppm;

  // src/pages/admin/home.svelte
  init_define_process();
  function get_each_context6(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[7] = list[i];
    return child_ctx;
  }
  function create_else_block6(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "...";
        attr(p, "class", "title");
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block9(ctx) {
    let p;
    let t_value = (
      /*cardCounter*/
      ctx[7].title + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "title");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*cardCounter*/
        128 && t_value !== (t_value = /*cardCounter*/
        ctx2[7].title + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_each_block6(ctx) {
    let div3;
    let div2;
    let div0;
    let icon;
    let t0;
    let div1;
    let p;
    let t1_value = (
      /*cardCounter*/
      ctx[7].heading + ""
    );
    let t1;
    let t2;
    let t3;
    let current;
    icon = new Icon_default({
      props: {
        id: "logo",
        src: (
          /*cardCounter*/
          ctx[7].icon
        ),
        size: "2"
      }
    });
    function select_block_type(ctx2, dirty) {
      if (
        /*cardCounter*/
        ctx2[7].title
      )
        return create_if_block9;
      return create_else_block6;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    return {
      c() {
        div3 = element("div");
        div2 = element("div");
        div0 = element("div");
        create_component(icon.$$.fragment);
        t0 = space();
        div1 = element("div");
        p = element("p");
        t1 = text(t1_value);
        t2 = space();
        if_block.c();
        t3 = space();
        attr(div0, "class", "flex-item-left svelte-g8zc3i");
        attr(p, "class", "heading");
        attr(div1, "class", "flex-item-right has-text-centered svelte-g8zc3i");
        attr(div2, "class", "box cardCounter svelte-g8zc3i");
        attr(div3, "class", "column");
      },
      m(target, anchor) {
        insert(target, div3, anchor);
        append(div3, div2);
        append(div2, div0);
        mount_component(icon, div0, null);
        append(div2, t0);
        append(div2, div1);
        append(div1, p);
        append(p, t1);
        append(div1, t2);
        if_block.m(div1, null);
        append(div3, t3);
        current = true;
      },
      p(ctx2, dirty) {
        const icon_changes = {};
        if (dirty & /*cardCounter*/
        128)
          icon_changes.src = /*cardCounter*/
          ctx2[7].icon;
        icon.$set(icon_changes);
        if ((!current || dirty & /*cardCounter*/
        128) && t1_value !== (t1_value = /*cardCounter*/
        ctx2[7].heading + ""))
          set_data(t1, t1_value);
        if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(div1, null);
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div3);
        }
        destroy_component(icon);
        if_block.d();
      }
    };
  }
  function create_default_slot5(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div0;
    let t3;
    let div3;
    let div2;
    let div1;
    let h5;
    let t5;
    let table;
    let thead;
    let t13;
    let tbody;
    let tr1;
    let td0;
    let t15;
    let td1;
    let input0;
    let t16;
    let td2;
    let input1;
    let t17;
    let td3;
    let input2;
    let t18;
    let tr2;
    let td4;
    let t20;
    let td5;
    let t21;
    let td6;
    let t22;
    let td7;
    let input3;
    let t23;
    let tr3;
    let td8;
    let t25;
    let td9;
    let input4;
    let t26;
    let td10;
    let input5;
    let t27;
    let td11;
    let input6;
    let current;
    let mounted;
    let dispose;
    let each_value = ensure_array_like(
      /*cardCounter*/
      ctx[7]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Dashboard";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div0 = element("div");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t3 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        h5 = element("h5");
        h5.textContent = "Waktu Pendaftaran Proposal PPM";
        t5 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Jenis Skema</th> <th class="is-narrow" style="text-align: center;">Tanggal Mulai</th> <th class="is-narrow" style="text-align: center;">Tanggal Selesai</th> <th class="is-narrow" style="text-align: center;">Buka Pendaftaran</th></tr>`;
        t13 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Pendanaan Hibah Internal UISI";
        t15 = space();
        td1 = element("td");
        input0 = element("input");
        t16 = space();
        td2 = element("td");
        input1 = element("input");
        t17 = space();
        td3 = element("td");
        input2 = element("input");
        t18 = space();
        tr2 = element("tr");
        td4 = element("td");
        td4.textContent = "Pendanaan Hibah Eksternal";
        t20 = space();
        td5 = element("td");
        t21 = space();
        td6 = element("td");
        t22 = space();
        td7 = element("td");
        input3 = element("input");
        t23 = space();
        tr3 = element("tr");
        td8 = element("td");
        td8.textContent = "Pendanaan Mandiri";
        t25 = space();
        td9 = element("td");
        input4 = element("input");
        t26 = space();
        td10 = element("td");
        input5 = element("input");
        t27 = space();
        td11 = element("td");
        input6 = element("input");
        attr(h2, "class", "title is-2");
        attr(div0, "class", "columns cardCounter-container is-desktop");
        attr(h5, "class", "title is-5");
        attr(input0, "type", "date");
        attr(input0, "class", "input is-small");
        attr(td1, "class", "centerText svelte-g8zc3i");
        attr(input1, "type", "date");
        attr(input1, "class", "input is-small");
        attr(td2, "class", "centerText svelte-g8zc3i");
        attr(input2, "type", "checkbox");
        attr(td3, "class", "centerText svelte-g8zc3i");
        attr(input3, "type", "checkbox");
        attr(td7, "class", "centerText svelte-g8zc3i");
        attr(input4, "type", "date");
        attr(input4, "class", "input is-small");
        attr(td9, "class", "centerText svelte-g8zc3i");
        attr(input5, "type", "date");
        attr(input5, "class", "input is-small");
        attr(td10, "class", "centerText svelte-g8zc3i");
        attr(input6, "type", "checkbox");
        attr(td11, "class", "centerText svelte-g8zc3i");
        attr(table, "class", "table is-bordered is-striped is-narrow is-hoverable is-fullwidth");
        attr(div1, "class", "box");
        attr(div2, "class", "column");
        attr(div3, "class", "columns is-desktop");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div0, null);
          }
        }
        insert(target, t3, anchor);
        insert(target, div3, anchor);
        append(div3, div2);
        append(div2, div1);
        append(div1, h5);
        append(div1, t5);
        append(div1, table);
        append(table, thead);
        append(table, t13);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t15);
        append(tr1, td1);
        append(td1, input0);
        set_input_value(
          input0,
          /*tanggalMulai_HibahInternal*/
          ctx[3]
        );
        append(tr1, t16);
        append(tr1, td2);
        append(td2, input1);
        set_input_value(
          input1,
          /*tanggalSelesai_HibahInternal*/
          ctx[4]
        );
        append(tr1, t17);
        append(tr1, td3);
        append(td3, input2);
        input2.checked = /*pendaftaranHibahInternal*/
        ctx[0];
        append(tbody, t18);
        append(tbody, tr2);
        append(tr2, td4);
        append(tr2, t20);
        append(tr2, td5);
        append(tr2, t21);
        append(tr2, td6);
        append(tr2, t22);
        append(tr2, td7);
        append(td7, input3);
        input3.checked = /*pendaftaranHibahEksternal*/
        ctx[1];
        append(tbody, t23);
        append(tbody, tr3);
        append(tr3, td8);
        append(tr3, t25);
        append(tr3, td9);
        append(td9, input4);
        set_input_value(
          input4,
          /*tanggalMulai_PPMMandiri*/
          ctx[5]
        );
        append(tr3, t26);
        append(tr3, td10);
        append(td10, input5);
        set_input_value(
          input5,
          /*tanggalSelesai_PPMMandiri*/
          ctx[6]
        );
        append(tr3, t27);
        append(tr3, td11);
        append(td11, input6);
        input6.checked = /*pendaftaranMandiri*/
        ctx[2];
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "input",
              /*input0_input_handler*/
              ctx[12]
            ),
            listen(
              input0,
              "change",
              /*onChange_waktuPendaftaran_HibahInternal*/
              ctx[11]
            ),
            listen(
              input1,
              "input",
              /*input1_input_handler*/
              ctx[13]
            ),
            listen(
              input1,
              "change",
              /*onChange_waktuPendaftaran_HibahInternal*/
              ctx[11]
            ),
            listen(
              input2,
              "change",
              /*input2_change_handler*/
              ctx[14]
            ),
            listen(
              input2,
              "change",
              /*checkPendaftaranInternal*/
              ctx[8]
            ),
            listen(
              input3,
              "change",
              /*input3_change_handler*/
              ctx[15]
            ),
            listen(
              input3,
              "change",
              /*checkPendaftaranEksternal*/
              ctx[9]
            ),
            listen(
              input4,
              "input",
              /*input4_input_handler*/
              ctx[16]
            ),
            listen(
              input4,
              "change",
              /*onChange_waktuPendaftaran_HibahInternal*/
              ctx[11]
            ),
            listen(
              input5,
              "input",
              /*input5_input_handler*/
              ctx[17]
            ),
            listen(
              input5,
              "change",
              /*onChange_waktuPendaftaran_HibahInternal*/
              ctx[11]
            ),
            listen(
              input6,
              "change",
              /*input6_change_handler*/
              ctx[18]
            ),
            listen(
              input6,
              "change",
              /*checkPendaftaranMandiri*/
              ctx[10]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*cardCounter*/
        128) {
          each_value = ensure_array_like(
            /*cardCounter*/
            ctx2[7]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context6(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block6(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(div0, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
        if (dirty & /*tanggalMulai_HibahInternal*/
        8) {
          set_input_value(
            input0,
            /*tanggalMulai_HibahInternal*/
            ctx2[3]
          );
        }
        if (dirty & /*tanggalSelesai_HibahInternal*/
        16) {
          set_input_value(
            input1,
            /*tanggalSelesai_HibahInternal*/
            ctx2[4]
          );
        }
        if (dirty & /*pendaftaranHibahInternal*/
        1) {
          input2.checked = /*pendaftaranHibahInternal*/
          ctx2[0];
        }
        if (dirty & /*pendaftaranHibahEksternal*/
        2) {
          input3.checked = /*pendaftaranHibahEksternal*/
          ctx2[1];
        }
        if (dirty & /*tanggalMulai_PPMMandiri*/
        32) {
          set_input_value(
            input4,
            /*tanggalMulai_PPMMandiri*/
            ctx2[5]
          );
        }
        if (dirty & /*tanggalSelesai_PPMMandiri*/
        64) {
          set_input_value(
            input5,
            /*tanggalSelesai_PPMMandiri*/
            ctx2[6]
          );
        }
        if (dirty & /*pendaftaranMandiri*/
        4) {
          input6.checked = /*pendaftaranMandiri*/
          ctx2[2];
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div0);
          detach(t3);
          detach(div3);
        }
        destroy_each(each_blocks, detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment25(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot5] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, pendaftaranMandiri, tanggalSelesai_PPMMandiri, tanggalMulai_PPMMandiri, pendaftaranHibahEksternal, pendaftaranHibahInternal, tanggalSelesai_HibahInternal, tanggalMulai_HibahInternal, cardCounter*/
        67109119) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function instance20($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(21, $apiURL = $$value));
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let penelitianCounter, pengmasCounter;
    let cardCounter = [];
    let pendaftaranHibahInternal2, pendaftaranHibahEksternal2, pendaftaranMandiri2;
    let tanggalMulai_HibahInternal2, tanggalSelesai_HibahInternal2;
    let tanggalMulai_PPMMandiri2, tanggalSelesai_PPMMandiri2;
    onMount(async () => {
      const responseWP = await fetch($apiURL + "/waktuPendaftaranPPMInternal", { method: "GET", headers });
      const resultWP = await responseWP.json();
      if (responseWP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseWP.ok) {
          $$invalidate(3, tanggalMulai_HibahInternal2 = resultWP.tanggal_mulai_hibah_internal);
          $$invalidate(4, tanggalSelesai_HibahInternal2 = resultWP.tanggal_selesai_hibah_internal);
          $$invalidate(5, tanggalMulai_PPMMandiri2 = resultWP.tanggal_mulai_ppm_mandiri);
          $$invalidate(6, tanggalSelesai_PPMMandiri2 = resultWP.tanggal_selesai_ppm_mandiri);
          $$invalidate(0, pendaftaranHibahInternal2 = resultWP.buka_pendaftaran_hibah_internal);
          $$invalidate(1, pendaftaranHibahEksternal2 = resultWP.buka_pendaftaran_hibah_eksternal);
          $$invalidate(2, pendaftaranMandiri2 = resultWP.buka_pendaftaran_mandiri);
        } else {
          console.log(responseWP);
        }
      }
      const responseCP = await fetch($apiURL + "/counterPenelitian", { method: "GET", headers });
      const resultCP = await responseCP.json();
      if (responseCP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCP.ok) {
          penelitianCounter = resultCP.penelitianCounter;
        } else {
          console.log(responseCP);
        }
      }
      const responseCPM = await fetch($apiURL + "/counterPengmas", { method: "GET", headers });
      const resultCPM = await responseCPM.json();
      if (responseCPM.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCPM.ok) {
          pengmasCounter = resultCPM.pengmasCounter;
        } else {
          console.log(responseCPM);
        }
      }
      $$invalidate(7, cardCounter = [
        {
          heading: "Penelitian",
          title: penelitianCounter,
          icon: penelitian
        },
        {
          heading: "Pengmas",
          title: pengmasCounter,
          icon: pengmas
        },
        {
          heading: "Ongoing",
          title: "...",
          icon: jurnal
        },
        {
          heading: "Completed",
          title: "...",
          icon: copyright
        }
      ]);
    });
    async function checkPendaftaranInternal(event) {
      $$invalidate(0, pendaftaranHibahInternal2 = event.target.checked ? 1 : 0);
      payload = { pendaftaranHibahInternal: pendaftaranHibahInternal2 };
      const response = await fetch($apiURL + "/waktuPendaftaranPPMInternal", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    async function checkPendaftaranEksternal(event) {
      $$invalidate(1, pendaftaranHibahEksternal2 = event.target.checked ? 1 : 0);
      payload = { pendaftaranHibahEksternal: pendaftaranHibahEksternal2 };
      const response = await fetch($apiURL + "/waktuPendaftaranPPMEksternal", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    async function checkPendaftaranMandiri(event) {
      $$invalidate(2, pendaftaranMandiri2 = event.target.checked ? 1 : 0);
      payload = { pendaftaranMandiri: pendaftaranMandiri2 };
      const response = await fetch($apiURL + "/waktuPendaftaranPPMMandiri", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    async function onChange_waktuPendaftaran_HibahInternal() {
      payload = {
        tanggalMulai_HibahInternal: tanggalMulai_HibahInternal2,
        tanggalSelesai_HibahInternal: tanggalSelesai_HibahInternal2,
        tanggalMulai_PPMMandiri: tanggalMulai_PPMMandiri2,
        tanggalSelesai_PPMMandiri: tanggalSelesai_PPMMandiri2
      };
      const response = await fetch($apiURL + "/waktuPendaftaranPPMInternal/time", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    function input0_input_handler() {
      tanggalMulai_HibahInternal2 = this.value;
      $$invalidate(3, tanggalMulai_HibahInternal2);
    }
    function input1_input_handler() {
      tanggalSelesai_HibahInternal2 = this.value;
      $$invalidate(4, tanggalSelesai_HibahInternal2);
    }
    function input2_change_handler() {
      pendaftaranHibahInternal2 = this.checked;
      $$invalidate(0, pendaftaranHibahInternal2);
    }
    function input3_change_handler() {
      pendaftaranHibahEksternal2 = this.checked;
      $$invalidate(1, pendaftaranHibahEksternal2);
    }
    function input4_input_handler() {
      tanggalMulai_PPMMandiri2 = this.value;
      $$invalidate(5, tanggalMulai_PPMMandiri2);
    }
    function input5_input_handler() {
      tanggalSelesai_PPMMandiri2 = this.value;
      $$invalidate(6, tanggalSelesai_PPMMandiri2);
    }
    function input6_change_handler() {
      pendaftaranMandiri2 = this.checked;
      $$invalidate(2, pendaftaranMandiri2);
    }
    return [
      pendaftaranHibahInternal2,
      pendaftaranHibahEksternal2,
      pendaftaranMandiri2,
      tanggalMulai_HibahInternal2,
      tanggalSelesai_HibahInternal2,
      tanggalMulai_PPMMandiri2,
      tanggalSelesai_PPMMandiri2,
      cardCounter,
      checkPendaftaranInternal,
      checkPendaftaranEksternal,
      checkPendaftaranMandiri,
      onChange_waktuPendaftaran_HibahInternal,
      input0_input_handler,
      input1_input_handler,
      input2_change_handler,
      input3_change_handler,
      input4_input_handler,
      input5_input_handler,
      input6_change_handler
    ];
  }
  var Home = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance20, create_fragment25, safe_not_equal, {});
    }
  };
  var home_default = Home;

  // src/pages/admin/pengumuman.svelte
  init_define_process();
  function create_default_slot6(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div4;
    let div0;
    let button0;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let input;
    let t6;
    let span2;
    let icon1;
    let t7;
    let div6;
    let table;
    let thead;
    let t10;
    let tbody;
    let tr1;
    let td0;
    let t12;
    let td1;
    let div5;
    let p0;
    let button1;
    let span3;
    let icon2;
    let t13;
    let p1;
    let button2;
    let span4;
    let icon3;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "accountAdd", src: add } });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pengumuman";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div4 = element("div");
        div0 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Buat Pengumuman</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        input = element("input");
        t6 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t7 = space();
        div6 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Judul</th> <th class="is-narrow"></th></tr>`;
        t10 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Contoh Nama Pengumuman 1";
        t12 = space();
        td1 = element("td");
        div5 = element("div");
        p0 = element("p");
        button1 = element("button");
        span3 = element("span");
        create_component(icon2.$$.fragment);
        t13 = space();
        p1 = element("p");
        button2 = element("button");
        span4 = element("span");
        create_component(icon3.$$.fragment);
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div0, "class", "column");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span2, "class", "icon is-left");
        attr(div1, "class", "control has-icons-left");
        attr(div2, "class", "field");
        attr(div3, "class", "column");
        attr(div4, "class", "columns");
        attr(span3, "class", "icon");
        attr(button1, "class", "button is-danger is-outlined is-small");
        attr(p0, "class", "control");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-link is-outlined is-small");
        attr(p1, "class", "control");
        attr(div5, "class", "field is-grouped");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div6, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        append(div4, div0);
        append(div0, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t3);
        append(button0, span1);
        append(div4, t5);
        append(div4, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, input);
        append(div1, t6);
        append(div1, span2);
        mount_component(icon1, span2, null);
        insert(target, t7, anchor);
        insert(target, div6, anchor);
        append(div6, table);
        append(table, thead);
        append(table, t10);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t12);
        append(tr1, td1);
        append(td1, div5);
        append(div5, p0);
        append(p0, button1);
        append(button1, span3);
        mount_component(icon2, span3, null);
        append(div5, t13);
        append(div5, p1);
        append(p1, button2);
        append(button2, span4);
        mount_component(icon3, span4, null);
        current = true;
        if (!mounted) {
          dispose = listen(button0, "click", addPengumuman);
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div4);
          detach(t7);
          detach(div6);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment26(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot6] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        1) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function addPengumuman() {
    location.href = "/admin/buatpengumuman";
  }
  var Pengumuman2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment26, safe_not_equal, {});
    }
  };
  var pengumuman_default = Pengumuman2;

  // src/pages/admin/ppmmanagement.svelte
  init_define_process();
  function get_each_context7(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[15] = list[i];
    return child_ctx;
  }
  function create_if_block10(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot7] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty & /*$$scope, items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        262175) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_each_block7(ctx) {
    let tr;
    let td0;
    let p0;
    let t0_value = (
      /*item*/
      ctx[15].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p1;
    let t2_value = (
      /*item*/
      ctx[15].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p2;
    let t4_value = (
      /*item*/
      ctx[15].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_uid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({
      props: {
        code: (
          /*item*/
          ctx[15].status
        ),
        jenisSkema: (
          /*item*/
          ctx[15].jenis_skema
        )
      }
    });
    icon = new Icon_default({
      props: { id: "review", src: infoOutline }
    });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        p0 = element("p");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p1 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p2 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-1x235cl");
        attr(td1, "class", "kegiatan svelte-1x235cl");
        attr(td2, "class", "skema svelte-1x235cl");
        attr(td3, "class", "status svelte-1x235cl");
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "uid", button_uid_value = /*item*/
        ctx[15].id);
        attr(td4, "class", "review svelte-1x235cl");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, p0);
        append(p0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p1);
        append(p1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p2);
        append(p2, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleReview*/
            ctx[5]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        31) && t0_value !== (t0_value = /*item*/
        ctx2[15].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        31) && t2_value !== (t2_value = /*item*/
        ctx2[15].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        31) && t4_value !== (t4_value = /*item*/
        ctx2[15].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        31)
          status_changes.code = /*item*/
          ctx2[15].status;
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        31)
          status_changes.jenisSkema = /*item*/
          ctx2[15].jenis_skema;
        status.$set(status_changes);
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus*/
        31 && button_uid_value !== (button_uid_value = /*item*/
        ctx2[15].id)) {
          attr(button, "uid", button_uid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot7(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div12;
    let div2;
    let div1;
    let div0;
    let select0;
    let option0;
    let option1;
    let option2;
    let t6;
    let div5;
    let div4;
    let div3;
    let select1;
    let option3;
    let optgroup0;
    let option4;
    let option5;
    let option6;
    let option7;
    let option8;
    let optgroup1;
    let option9;
    let option10;
    let option11;
    let option12;
    let t17;
    let div8;
    let div7;
    let div6;
    let select2;
    let option13;
    let option14;
    let option15;
    let t21;
    let div11;
    let div10;
    let div9;
    let input;
    let t22;
    let span;
    let icon;
    let t23;
    let div14;
    let div13;
    let table;
    let thead;
    let t33;
    let tbody;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let each_value = ensure_array_like(
      /*items*/
      ctx[0].filter(
        /*func*/
        ctx[10]
      )
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "PPM Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div12 = element("div");
        div2 = element("div");
        div1 = element("div");
        div0 = element("div");
        select0 = element("select");
        option0 = element("option");
        option0.textContent = "Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t6 = space();
        div5 = element("div");
        div4 = element("div");
        div3 = element("div");
        select1 = element("select");
        option3 = element("option");
        option3.textContent = "Jenis Skema";
        optgroup0 = element("optgroup");
        option4 = element("option");
        option4.textContent = "Riset Kelompok Keahlian";
        option5 = element("option");
        option5.textContent = "Riset Terapan";
        option6 = element("option");
        option6.textContent = "Riset Kerjasama";
        option7 = element("option");
        option7.textContent = "Riset Eksternal";
        option8 = element("option");
        option8.textContent = "Riset Mandiri";
        optgroup1 = element("optgroup");
        option9 = element("option");
        option9.textContent = "Pengabdian Masyarakat Desa Binaan";
        option10 = element("option");
        option10.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option11 = element("option");
        option11.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option12 = element("option");
        option12.textContent = "Pengabdian Masyarakat Mandiri";
        t17 = space();
        div8 = element("div");
        div7 = element("div");
        div6 = element("div");
        select2 = element("select");
        option13 = element("option");
        option13.textContent = "Status";
        option14 = element("option");
        option14.textContent = "Review Administrasi";
        option15 = element("option");
        option15.textContent = "Lainnya";
        t21 = space();
        div11 = element("div");
        div10 = element("div");
        div9 = element("div");
        input = element("input");
        t22 = space();
        span = element("span");
        create_component(icon.$$.fragment);
        t23 = space();
        div14 = element("div");
        div13 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t33 = space();
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(h2, "class", "title is-2");
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*filterJenisKegiatan*/
          ctx[4] === void 0
        )
          add_render_callback(() => (
            /*select0_change_handler*/
            ctx[6].call(select0)
          ));
        attr(div0, "class", "select is-fullwidth");
        attr(div1, "class", "field");
        attr(div2, "class", "column is-narrow");
        option3.__value = "";
        set_input_value(option3, option3.__value);
        option3.selected = true;
        option3.disabled = true;
        option3.hidden = true;
        option4.__value = "Riset Kelompok Keahlian";
        set_input_value(option4, option4.__value);
        option5.__value = "Riset Terapan";
        set_input_value(option5, option5.__value);
        option6.__value = "Riset Kerjasama";
        set_input_value(option6, option6.__value);
        option7.__value = "Riset Eksternal";
        set_input_value(option7, option7.__value);
        option8.__value = "Riset Mandiri";
        set_input_value(option8, option8.__value);
        attr(optgroup0, "label", "Penelitian");
        option9.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option9, option9.__value);
        option10.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option10, option10.__value);
        option11.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option11, option11.__value);
        option12.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option12, option12.__value);
        attr(optgroup1, "label", "Pengabdian Masyarakat");
        if (
          /*filterJenisSkema*/
          ctx[3] === void 0
        )
          add_render_callback(() => (
            /*select1_change_handler*/
            ctx[7].call(select1)
          ));
        attr(div3, "class", "select is-fullwidth");
        attr(div4, "class", "field");
        attr(div5, "class", "column is-narrow");
        option13.__value = "";
        set_input_value(option13, option13.__value);
        option13.selected = true;
        option13.disabled = true;
        option13.hidden = true;
        option14.__value = "2";
        set_input_value(option14, option14.__value);
        option15.__value = "";
        set_input_value(option15, option15.__value);
        if (
          /*filterStatus*/
          ctx[2] === void 0
        )
          add_render_callback(() => (
            /*select2_change_handler*/
            ctx[8].call(select2)
          ));
        attr(div6, "class", "select is-fullwidth");
        attr(div7, "class", "field");
        attr(div8, "class", "column is-narrow");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span, "class", "icon is-left");
        attr(div9, "class", "control has-icons-left");
        attr(div10, "class", "field");
        attr(div11, "class", "column");
        attr(div12, "class", "columns");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div13, "class", "child svelte-1x235cl");
        attr(div14, "class", "box parent svelte-1x235cl");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div12, anchor);
        append(div12, div2);
        append(div2, div1);
        append(div1, div0);
        append(div0, select0);
        append(select0, option0);
        append(select0, option1);
        append(select0, option2);
        select_option(
          select0,
          /*filterJenisKegiatan*/
          ctx[4],
          true
        );
        append(div12, t6);
        append(div12, div5);
        append(div5, div4);
        append(div4, div3);
        append(div3, select1);
        append(select1, option3);
        append(select1, optgroup0);
        append(optgroup0, option4);
        append(optgroup0, option5);
        append(optgroup0, option6);
        append(optgroup0, option7);
        append(optgroup0, option8);
        append(select1, optgroup1);
        append(optgroup1, option9);
        append(optgroup1, option10);
        append(optgroup1, option11);
        append(optgroup1, option12);
        select_option(
          select1,
          /*filterJenisSkema*/
          ctx[3],
          true
        );
        append(div12, t17);
        append(div12, div8);
        append(div8, div7);
        append(div7, div6);
        append(div6, select2);
        append(select2, option13);
        append(select2, option14);
        append(select2, option15);
        select_option(
          select2,
          /*filterStatus*/
          ctx[2],
          true
        );
        append(div12, t21);
        append(div12, div11);
        append(div11, div10);
        append(div10, div9);
        append(div9, input);
        set_input_value(
          input,
          /*filterJudul*/
          ctx[1]
        );
        append(div9, t22);
        append(div9, span);
        mount_component(icon, span, null);
        insert(target, t23, anchor);
        insert(target, div14, anchor);
        append(div14, div13);
        append(div13, table);
        append(table, thead);
        append(table, t33);
        append(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              select0,
              "change",
              /*select0_change_handler*/
              ctx[6]
            ),
            listen(
              select1,
              "change",
              /*select1_change_handler*/
              ctx[7]
            ),
            listen(
              select2,
              "change",
              /*select2_change_handler*/
              ctx[8]
            ),
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[9]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filterJenisKegiatan*/
        16) {
          select_option(
            select0,
            /*filterJenisKegiatan*/
            ctx2[4]
          );
        }
        if (dirty & /*filterJenisSkema*/
        8) {
          select_option(
            select1,
            /*filterJenisSkema*/
            ctx2[3]
          );
        }
        if (dirty & /*filterStatus*/
        4) {
          select_option(
            select2,
            /*filterStatus*/
            ctx2[2]
          );
        }
        if (dirty & /*filterJudul*/
        2 && input.value !== /*filterJudul*/
        ctx2[1]) {
          set_input_value(
            input,
            /*filterJudul*/
            ctx2[1]
          );
        }
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, filterStatus, Number, handleReview*/
        63) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0].filter(
              /*func*/
              ctx2[10]
            )
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context7(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block7(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tbody, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div12);
          detach(t23);
          detach(div14);
        }
        destroy_component(icon);
        destroy_each(each_blocks, detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment27(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*items*/
      ctx[0] && create_if_block10(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block10(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function instance21($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(11, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(12, $apiURL = $$value));
    let items;
    let filterJudul = "";
    let filterStatus = "";
    let filterJenisSkema = "";
    let filterJenisKegiatan = "";
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/ppm", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(0, items = result.dbData);
        }
      }
    });
    async function handleReview(ev) {
      const id = ev.target.getAttribute("uid");
      $route("/admin/detailppm/" + id);
    }
    function select0_change_handler() {
      filterJenisKegiatan = select_value(this);
      $$invalidate(4, filterJenisKegiatan);
    }
    function select1_change_handler() {
      filterJenisSkema = select_value(this);
      $$invalidate(3, filterJenisSkema);
    }
    function select2_change_handler() {
      filterStatus = select_value(this);
      $$invalidate(2, filterStatus);
    }
    function input_input_handler() {
      filterJudul = this.value;
      $$invalidate(1, filterJudul);
    }
    const func = (item) => item.judul.toLowerCase().includes(filterJudul.toLowerCase()) && (filterJenisKegiatan === "" || item.jenis_kegiatan === filterJenisKegiatan) && (filterJenisSkema === "" || item.jenis_skema === filterJenisSkema) && (filterStatus === "" || item.status === Number(filterStatus));
    return [
      items,
      filterJudul,
      filterStatus,
      filterJenisSkema,
      filterJenisKegiatan,
      handleReview,
      select0_change_handler,
      select1_change_handler,
      select2_change_handler,
      input_input_handler,
      func
    ];
  }
  var Ppmmanagement = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance21, create_fragment27, safe_not_equal, {});
    }
  };
  var ppmmanagement_default = Ppmmanagement;

  // src/pages/admin/profile.svelte
  init_define_process();
  function get_each_context8(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[201] = list[i];
    return child_ctx;
  }
  function get_each_context_14(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[204] = list[i];
    return child_ctx;
  }
  function get_each_context_22(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[207] = list[i];
    return child_ctx;
  }
  function get_each_context_32(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[210] = list[i];
    return child_ctx;
  }
  function get_each_context_42(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[213] = list[i];
    return child_ctx;
  }
  function get_each_context_52(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[216] = list[i];
    return child_ctx;
  }
  function get_each_context_62(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[219] = list[i];
    return child_ctx;
  }
  function get_each_context_72(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[222] = list[i];
    return child_ctx;
  }
  function get_each_context_82(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[225] = list[i];
    return child_ctx;
  }
  function get_each_context_92(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[228] = list[i];
    return child_ctx;
  }
  function create_if_block_552(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let field12;
    let t12;
    let br;
    let t13;
    let table;
    let thead;
    let t16;
    let tbody;
    let t17;
    let div1;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_68] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_67] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_66] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_65] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat Lahir",
        $$slots: { default: [create_default_slot_64] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Lahir",
        $$slots: { default: [create_default_slot_63] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_622] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_61] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Nomor Handphone",
        $$slots: { default: [create_default_slot_60] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_59] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_58] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        class: "input",
        name: "Email",
        $$slots: { default: [create_default_slot_57] },
        $$scope: { ctx }
      }
    });
    field12 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_56] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*mataKuliah*/
      ctx[67] && /*mataKuliah*/
      ctx[67].length > 0 && create_if_block_562(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        create_component(field12.$$.fragment);
        t12 = space();
        br = element("br");
        t13 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow"></th> <th>Mata Kuliah</th></tr>`;
        t16 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        t17 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        mount_component(field9, div0, null);
        append(div0, t9);
        mount_component(field10, div0, null);
        append(div0, t10);
        mount_component(field11, div0, null);
        append(div0, t11);
        mount_component(field12, div0, null);
        append(div0, t12);
        append(div0, br);
        append(div0, t13);
        append(div0, table);
        append(table, thead);
        append(table, t16);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
        insert(target, t17, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanIdentitas*/
            ctx[100]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaLengkap*/
        16777216 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jabatanFungsional*/
        33554432 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nip*/
        67108864 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nidn*/
        134217728 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tempatLahir*/
        268435456 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tanggalLahir*/
        536870912 | dirty[7] & /*$$scope*/
        16384) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*alamatRumah*/
        1073741824 | dirty[7] & /*$$scope*/
        16384) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*telpFaxRumah*/
        1 | dirty[7] & /*$$scope*/
        16384) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*nomorHandphone*/
        2 | dirty[7] & /*$$scope*/
        16384) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*alamatKantor*/
        4 | dirty[7] & /*$$scope*/
        16384) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*telpFaxKantor*/
        8 | dirty[7] & /*$$scope*/
        16384) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*email*/
        16 | dirty[7] & /*$$scope*/
        16384) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        const field12_changes = {};
        if (dirty[0] & /*vmataKuliah, error*/
        3 | dirty[7] & /*$$scope*/
        16384) {
          field12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field12.$set(field12_changes);
        if (
          /*mataKuliah*/
          ctx2[67] && /*mataKuliah*/
          ctx2[67].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[2] & /*mataKuliah*/
            32) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_562(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(field12.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(field12.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t17);
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        destroy_component(field12);
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_692(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaLengkap + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaLengkap + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_68(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaLengkap && create_if_block_692(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan nama lengkap dengan gelar");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaLengkap*/
          ctx[55]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[116]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        16777216 && input.value !== /*namaLengkap*/
        ctx2[55]) {
          set_input_value(
            input,
            /*namaLengkap*/
            ctx2[55]
          );
        }
        if (
          /*error*/
          ctx2[1].namaLengkap
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_692(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_682(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].jabatanFungsional + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jabatanFungsional + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_67(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let t5;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jabatanFungsional && create_if_block_682(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jabatan Fungsional";
        option1 = element("option");
        option1.textContent = "Asisten Ahli";
        option2 = element("option");
        option2.textContent = "Lektor";
        option3 = element("option");
        option3.textContent = "Lektor Kepala";
        option4 = element("option");
        option4.textContent = "Profesor";
        t5 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Asisten Ahli";
        set_input_value(option1, option1.__value);
        option2.__value = "Lektor";
        set_input_value(option2, option2.__value);
        option3.__value = "Lektor Kepala";
        set_input_value(option3, option3.__value);
        option4.__value = "Profesor";
        set_input_value(option4, option4.__value);
        if (
          /*jabatanFungsional*/
          ctx[56] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[117].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        select_option(
          select,
          /*jabatanFungsional*/
          ctx[56],
          true
        );
        insert(target, t5, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[117]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        33554432) {
          select_option(
            select,
            /*jabatanFungsional*/
            ctx2[56]
          );
        }
        if (
          /*error*/
          ctx2[1].jabatanFungsional
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_682(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t5);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_672(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nip + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nip + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_66(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nip && create_if_block_672(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nip*/
          ctx[57]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[118]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        67108864 && to_number(input.value) !== /*nip*/
        ctx2[57]) {
          set_input_value(
            input,
            /*nip*/
            ctx2[57]
          );
        }
        if (
          /*error*/
          ctx2[1].nip
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_672(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_662(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nidn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nidn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_65(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nidn && create_if_block_662(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nidn*/
          ctx[58]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[119]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        134217728 && to_number(input.value) !== /*nidn*/
        ctx2[58]) {
          set_input_value(
            input,
            /*nidn*/
            ctx2[58]
          );
        }
        if (
          /*error*/
          ctx2[1].nidn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_662(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_652(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tempatLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tempatLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_64(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tempatLahir && create_if_block_652(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tempatLahir*/
          ctx[59]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[120]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        268435456 && input.value !== /*tempatLahir*/
        ctx2[59]) {
          set_input_value(
            input,
            /*tempatLahir*/
            ctx2[59]
          );
        }
        if (
          /*error*/
          ctx2[1].tempatLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_652(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_642(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tanggalLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tanggalLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_63(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tanggalLahir && create_if_block_642(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalLahir*/
          ctx[60]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[121]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalLahir*/
        536870912) {
          set_input_value(
            input,
            /*tanggalLahir*/
            ctx2[60]
          );
        }
        if (
          /*error*/
          ctx2[1].tanggalLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_642(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_632(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_622(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatRumah && create_if_block_632(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatRumah*/
          ctx[61]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[122]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        1073741824 && input.value !== /*alamatRumah*/
        ctx2[61]) {
          set_input_value(
            input,
            /*alamatRumah*/
            ctx2[61]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_632(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_623(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_61(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxRumah && create_if_block_623(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxRumah*/
          ctx[62]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_6*/
            ctx[123]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*telpFaxRumah*/
        1 && to_number(input.value) !== /*telpFaxRumah*/
        ctx2[62]) {
          set_input_value(
            input,
            /*telpFaxRumah*/
            ctx2[62]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_623(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_612(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nomorHandphone + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nomorHandphone + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_60(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nomorHandphone && create_if_block_612(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nomorHandphone*/
          ctx[63]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_7*/
            ctx[124]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*nomorHandphone*/
        2 && to_number(input.value) !== /*nomorHandphone*/
        ctx2[63]) {
          set_input_value(
            input,
            /*nomorHandphone*/
            ctx2[63]
          );
        }
        if (
          /*error*/
          ctx2[1].nomorHandphone
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_612(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_602(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_59(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatKantor && create_if_block_602(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatKantor*/
          ctx[64]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_8*/
            ctx[125]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*alamatKantor*/
        4 && input.value !== /*alamatKantor*/
        ctx2[64]) {
          set_input_value(
            input,
            /*alamatKantor*/
            ctx2[64]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_602(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_592(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_58(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxKantor && create_if_block_592(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxKantor*/
          ctx[65]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_9*/
            ctx[126]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*telpFaxKantor*/
        8 && to_number(input.value) !== /*telpFaxKantor*/
        ctx2[65]) {
          set_input_value(
            input,
            /*telpFaxKantor*/
            ctx2[65]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_592(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_582(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].email + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].email + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_57(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].email && create_if_block_582(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*email*/
          ctx[66]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_10*/
            ctx[127]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*email*/
        16 && input.value !== /*email*/
        ctx2[66]) {
          set_input_value(
            input,
            /*email*/
            ctx2[66]
          );
        }
        if (
          /*error*/
          ctx2[1].email
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_582(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_572(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].mataKuliah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].mataKuliah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_56(ctx) {
    let div;
    let p0;
    let input;
    let t0;
    let t1;
    let p1;
    let button;
    let span0;
    let icon;
    let t2;
    let span1;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].mataKuliah && create_if_block_572(ctx)
    );
    icon = new Icon_default({ props: { id: "orang", src: add } });
    return {
      c() {
        div = element("div");
        p0 = element("p");
        input = element("input");
        t0 = space();
        if (if_block)
          if_block.c();
        t1 = space();
        p1 = element("p");
        button = element("button");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Tambahkan mata kuliah yang diampu");
        attr(p0, "class", "control is-expanded");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        button.disabled = button_disabled_value = /*vmataKuliah*/
        ctx[0] ? false : true;
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, input);
        set_input_value(
          input,
          /*vmataKuliah*/
          ctx[0]
        );
        append(p0, t0);
        if (if_block)
          if_block.m(p0, null);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        append(button, span0);
        mount_component(icon, span0, null);
        append(button, t2);
        append(button, span1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_11*/
              ctx[128]
            ),
            listen(
              button,
              "click",
              /*addMatkul*/
              ctx[104]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*vmataKuliah*/
        1 && input.value !== /*vmataKuliah*/
        ctx2[0]) {
          set_input_value(
            input,
            /*vmataKuliah*/
            ctx2[0]
          );
        }
        if (
          /*error*/
          ctx2[1].mataKuliah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_572(ctx2);
            if_block.c();
            if_block.m(p0, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (!current || dirty[0] & /*vmataKuliah*/
        1 && button_disabled_value !== (button_disabled_value = /*vmataKuliah*/
        ctx2[0] ? false : true)) {
          button.disabled = button_disabled_value;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_562(ctx) {
    let each_1_anchor;
    let current;
    let each_value_9 = ensure_array_like(
      /*mataKuliah*/
      ctx[67]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_92(get_each_context_92(ctx, each_value_9, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*mataKuliah*/
        32 | dirty[3] & /*deleteMatkul*/
        2097152) {
          each_value_9 = ensure_array_like(
            /*mataKuliah*/
            ctx2[67]
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_92(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_92(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_9.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_9.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_92(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let t0;
    let td1;
    let t1_value = (
      /*matkul*/
      ctx[228].label + ""
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*matkul*/
        ctx[228].label);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMatkul*/
            ctx[114]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*mataKuliah*/
        32 && button_data_value_value !== (button_data_value_value = /*matkul*/
        ctx2[228].label)) {
          attr(button, "data-value", button_data_value_value);
        }
        if ((!current || dirty[2] & /*mataKuliah*/
        32) && t1_value !== (t1_value = /*matkul*/
        ctx2[228].label + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_512(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let div9;
    let nav1;
    let div6;
    let t18;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t19;
    let span3;
    let t21;
    let table1;
    let thead1;
    let t32;
    let tbody1;
    let t33;
    let div14;
    let nav2;
    let div11;
    let t35;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t36;
    let span5;
    let t38;
    let table2;
    let thead2;
    let t49;
    let tbody2;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "add", src: add } });
    let if_block0 = (
      /*dataRPS1*/
      ctx[2] && create_if_block_542(ctx)
    );
    icon1 = new Icon_default({ props: { id: "add", src: add } });
    let if_block1 = (
      /*dataRPS2*/
      ctx[3] && create_if_block_533(ctx)
    );
    icon2 = new Icon_default({ props: { id: "add", src: add } });
    let if_block2 = (
      /*dataRPS3*/
      ctx[4] && create_if_block_523(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Riwayat Pendidikan S1</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th></th> <th style="width: 25%;">Nama Perguruan Tinggi</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Riwayat Pendidikan S2</h6></div>`;
        t18 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t19 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t21 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th></th> <th style="width: 25%;">Nama Perguruan Tinggi</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t32 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t33 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Riwayat Pendidikan S3</h6></div>`;
        t35 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t36 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t38 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th></th> <th style="width: 25%;">Nama Perguruan Tinggi</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t49 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div14, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t18);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t19);
        append(button1, span3);
        append(div9, t21);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t32);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t33, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t35);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t36);
        append(button2, span5);
        append(div14, t38);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t49);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*modalInputRiwayatPendidikanS1*/
              ctx[82]
            ),
            listen(
              button1,
              "click",
              /*modalInputRiwayatPendidikanS2*/
              ctx[83]
            ),
            listen(
              button2,
              "click",
              /*modalInputRiwayatPendidikanS3*/
              ctx[84]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataRPS1*/
          ctx2[2]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*dataRPS1*/
            4) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_542(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataRPS2*/
          ctx2[3]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*dataRPS2*/
            8) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_533(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataRPS3*/
          ctx2[4]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*dataRPS3*/
            16) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_523(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(div9);
          detach(t33);
          detach(div14);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_542(ctx) {
    let each_1_anchor;
    let current;
    let each_value_8 = ensure_array_like(
      /*dataRPS1*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_82(get_each_context_82(ctx, each_value_8, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataRPS1*/
        4 | dirty[3] & /*delrowRPS1*/
        4096) {
          each_value_8 = ensure_array_like(
            /*dataRPS1*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_82(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_82(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_8.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_8.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_82(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*RPS1*/
      ctx[225].nama_perguruan_tinggi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*RPS1*/
      ctx[225].bidang_ilmu + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*RPS1*/
      ctx[225].tahun_masuk + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*RPS1*/
      ctx[225].tahun_lulus + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*RPS1*/
      ctx[225].judul_skripsi + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*RPS1*/
        ctx[225].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowRPS1*/
            ctx[105]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataRPS1*/
        4 && button_pid_value !== (button_pid_value = /*RPS1*/
        ctx2[225].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t1_value !== (t1_value = /*RPS1*/
        ctx2[225].nama_perguruan_tinggi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t3_value !== (t3_value = /*RPS1*/
        ctx2[225].bidang_ilmu + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t5_value !== (t5_value = /*RPS1*/
        ctx2[225].tahun_masuk + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t7_value !== (t7_value = /*RPS1*/
        ctx2[225].tahun_lulus + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t9_value !== (t9_value = /*RPS1*/
        ctx2[225].judul_skripsi + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_533(ctx) {
    let each_1_anchor;
    let current;
    let each_value_7 = ensure_array_like(
      /*dataRPS2*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_72(get_each_context_72(ctx, each_value_7, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataRPS2*/
        8 | dirty[3] & /*delrowRPS2*/
        8192) {
          each_value_7 = ensure_array_like(
            /*dataRPS2*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_72(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_72(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_7.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_7.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_72(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*RPS2*/
      ctx[222].nama_perguruan_tinggi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*RPS2*/
      ctx[222].bidang_ilmu + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*RPS2*/
      ctx[222].tahun_masuk + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*RPS2*/
      ctx[222].tahun_lulus + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*RPS2*/
      ctx[222].judul_tesis + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*RPS2*/
        ctx[222].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowRPS2*/
            ctx[106]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataRPS2*/
        8 && button_pid_value !== (button_pid_value = /*RPS2*/
        ctx2[222].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t1_value !== (t1_value = /*RPS2*/
        ctx2[222].nama_perguruan_tinggi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t3_value !== (t3_value = /*RPS2*/
        ctx2[222].bidang_ilmu + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t5_value !== (t5_value = /*RPS2*/
        ctx2[222].tahun_masuk + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t7_value !== (t7_value = /*RPS2*/
        ctx2[222].tahun_lulus + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t9_value !== (t9_value = /*RPS2*/
        ctx2[222].judul_tesis + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_523(ctx) {
    let each_1_anchor;
    let current;
    let each_value_6 = ensure_array_like(
      /*dataRPS3*/
      ctx[4]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_62(get_each_context_62(ctx, each_value_6, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataRPS3*/
        16 | dirty[3] & /*delrowRPS3*/
        16384) {
          each_value_6 = ensure_array_like(
            /*dataRPS3*/
            ctx2[4]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_62(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_62(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_6.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_6.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_62(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*RPS3*/
      ctx[219].nama_perguruan_tinggi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*RPS3*/
      ctx[219].bidang_ilmu + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*RPS3*/
      ctx[219].tahun_masuk + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*RPS3*/
      ctx[219].tahun_lulus + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*RPS3*/
      ctx[219].judul_disertasi + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*RPS3*/
        ctx[219].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowRPS3*/
            ctx[107]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataRPS3*/
        16 && button_pid_value !== (button_pid_value = /*RPS3*/
        ctx2[219].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t1_value !== (t1_value = /*RPS3*/
        ctx2[219].nama_perguruan_tinggi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t3_value !== (t3_value = /*RPS3*/
        ctx2[219].bidang_ilmu + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t5_value !== (t5_value = /*RPS3*/
        ctx2[219].tahun_masuk + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t7_value !== (t7_value = /*RPS3*/
        ctx2[219].tahun_lulus + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t9_value !== (t9_value = /*RPS3*/
        ctx2[219].judul_disertasi + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_443(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let div9;
    let nav1;
    let div6;
    let t18;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t19;
    let span3;
    let t21;
    let table1;
    let thead1;
    let t32;
    let tbody1;
    let t33;
    let div14;
    let nav2;
    let div11;
    let t35;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t36;
    let span5;
    let t38;
    let table2;
    let thead2;
    let t47;
    let tbody2;
    let t48;
    let div19;
    let nav3;
    let div16;
    let t50;
    let div18;
    let div17;
    let button3;
    let span6;
    let icon3;
    let t51;
    let span7;
    let t53;
    let table3;
    let thead3;
    let t64;
    let tbody3;
    let t65;
    let div24;
    let nav4;
    let div21;
    let t67;
    let div23;
    let div22;
    let button4;
    let span8;
    let icon4;
    let t68;
    let span9;
    let t70;
    let table4;
    let thead4;
    let t81;
    let tbody4;
    let t82;
    let div29;
    let nav5;
    let div26;
    let t84;
    let div28;
    let div27;
    let button5;
    let span10;
    let icon5;
    let t85;
    let span11;
    let t87;
    let table5;
    let thead5;
    let t98;
    let tbody5;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block0 = (
      /*dataPP*/
      ctx[20] && create_if_block_502(ctx)
    );
    icon1 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block1 = (
      /*dataPM*/
      ctx[21] && create_if_block_492(ctx)
    );
    icon2 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block2 = (
      /*dataPD*/
      ctx[22] && create_if_block_482(ctx)
    );
    icon3 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block3 = (
      /*dataPPub*/
      ctx[23] && create_if_block_472(ctx)
    );
    icon4 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block4 = (
      /*dataPPB*/
      ctx[24] && create_if_block_462(ctx)
    );
    icon5 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block5 = (
      /*dataPHKI*/
      ctx[25] && create_if_block_452(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penelitian</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Pengabdian Masyarakat</h6></div>`;
        t18 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t19 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t21 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Ketua / Anggota</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t32 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t33 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran</h6></div>`;
        t35 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t36 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t38 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t47 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t48 = space();
        div19 = element("div");
        nav3 = element("nav");
        div16 = element("div");
        div16.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)</h6></div>`;
        t50 = space();
        div18 = element("div");
        div17 = element("div");
        button3 = element("button");
        span6 = element("span");
        create_component(icon3.$$.fragment);
        t51 = space();
        span7 = element("span");
        span7.innerHTML = `<a>Tambah</a>`;
        t53 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t64 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t65 = space();
        div24 = element("div");
        nav4 = element("nav");
        div21 = element("div");
        div21.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penulisan Buku</h6></div>`;
        t67 = space();
        div23 = element("div");
        div22 = element("div");
        button4 = element("button");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t68 = space();
        span9 = element("span");
        span9.innerHTML = `<a>Tambah</a>`;
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t81 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t82 = space();
        div29 = element("div");
        nav5 = element("nav");
        div26 = element("div");
        div26.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Hak Kekayaan Intelektual</h6></div>`;
        t84 = space();
        div28 = element("div");
        div27 = element("div");
        button5 = element("button");
        span10 = element("span");
        create_component(icon5.$$.fragment);
        t85 = space();
        span11 = element("span");
        span11.innerHTML = `<a>Tambah</a>`;
        t87 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t98 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div14, "class", "box");
        attr(div16, "class", "level-left");
        attr(span6, "class", "icon");
        attr(button3, "class", "button is-info");
        attr(div17, "class", "level-item");
        attr(div18, "class", "level-right");
        attr(nav3, "class", "level");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div19, "class", "box");
        attr(div21, "class", "level-left");
        attr(span8, "class", "icon");
        attr(button4, "class", "button is-info");
        attr(div22, "class", "level-item");
        attr(div23, "class", "level-right");
        attr(nav4, "class", "level");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div24, "class", "box");
        attr(div26, "class", "level-left");
        attr(span10, "class", "icon");
        attr(button5, "class", "button is-info");
        attr(div27, "class", "level-item");
        attr(div28, "class", "level-right");
        attr(nav5, "class", "level");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div29, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t18);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t19);
        append(button1, span3);
        append(div9, t21);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t32);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t33, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t35);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t36);
        append(button2, span5);
        append(div14, t38);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t47);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t48, anchor);
        insert(target, div19, anchor);
        append(div19, nav3);
        append(nav3, div16);
        append(nav3, t50);
        append(nav3, div18);
        append(div18, div17);
        append(div17, button3);
        append(button3, span6);
        mount_component(icon3, span6, null);
        append(button3, t51);
        append(button3, span7);
        append(div19, t53);
        append(div19, table3);
        append(table3, thead3);
        append(table3, t64);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t65, anchor);
        insert(target, div24, anchor);
        append(div24, nav4);
        append(nav4, div21);
        append(nav4, t67);
        append(nav4, div23);
        append(div23, div22);
        append(div22, button4);
        append(button4, span8);
        mount_component(icon4, span8, null);
        append(button4, t68);
        append(button4, span9);
        append(div24, t70);
        append(div24, table4);
        append(table4, thead4);
        append(table4, t81);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t82, anchor);
        insert(target, div29, anchor);
        append(div29, nav5);
        append(nav5, div26);
        append(nav5, t84);
        append(nav5, div28);
        append(div28, div27);
        append(div27, button5);
        append(button5, span10);
        mount_component(icon5, span10, null);
        append(button5, t85);
        append(button5, span11);
        append(div29, t87);
        append(div29, table5);
        append(table5, thead5);
        append(table5, t98);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clickModalPenelitian*/
              ctx[85]
            ),
            listen(
              button1,
              "click",
              /*clickModalPengmas*/
              ctx[86]
            ),
            listen(
              button2,
              "click",
              /*clickModalDiseminasi*/
              ctx[87]
            ),
            listen(
              button3,
              "click",
              /*clickModalPublikasi*/
              ctx[88]
            ),
            listen(
              button4,
              "click",
              /*clickModalPenulisanBuku*/
              ctx[89]
            ),
            listen(
              button5,
              "click",
              /*clickModalHKI*/
              ctx[90]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataPP*/
          ctx2[20]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*dataPP*/
            1048576) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_502(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataPM*/
          ctx2[21]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*dataPM*/
            2097152) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_492(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataPD*/
          ctx2[22]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*dataPD*/
            4194304) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_482(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*dataPPub*/
          ctx2[23]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[0] & /*dataPPub*/
            8388608) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_472(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*dataPPB*/
          ctx2[24]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[0] & /*dataPPB*/
            16777216) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_462(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
        if (
          /*dataPHKI*/
          ctx2[25]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
            if (dirty[0] & /*dataPHKI*/
            33554432) {
              transition_in(if_block5, 1);
            }
          } else {
            if_block5 = create_if_block_452(ctx2);
            if_block5.c();
            transition_in(if_block5, 1);
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          group_outros();
          transition_out(if_block5, 1, 1, () => {
            if_block5 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        transition_in(icon3.$$.fragment, local);
        transition_in(if_block3);
        transition_in(icon4.$$.fragment, local);
        transition_in(if_block4);
        transition_in(icon5.$$.fragment, local);
        transition_in(if_block5);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        transition_out(icon3.$$.fragment, local);
        transition_out(if_block3);
        transition_out(icon4.$$.fragment, local);
        transition_out(if_block4);
        transition_out(icon5.$$.fragment, local);
        transition_out(if_block5);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(div9);
          detach(t33);
          detach(div14);
          detach(t48);
          detach(div19);
          detach(t65);
          detach(div24);
          detach(t82);
          detach(div29);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        destroy_component(icon3);
        if (if_block3)
          if_block3.d();
        destroy_component(icon4);
        if (if_block4)
          if_block4.d();
        destroy_component(icon5);
        if (if_block5)
          if_block5.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_502(ctx) {
    let each_1_anchor;
    let current;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[20]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_52(get_each_context_52(ctx, each_value_5, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        1048576 | dirty[3] & /*delrowPP*/
        32768) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[20]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_52(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_52(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_5.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_5.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_52(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PP*/
      ctx[216].tahun_penelitian + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PP*/
      ctx[216].judul_penelitian + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PP*/
      ctx[216].role_penelitian + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PP*/
      ctx[216].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PP*/
      ctx[216].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PP*/
        ctx[216].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPP*/
            ctx[108]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPP*/
        1048576 && button_pid_value !== (button_pid_value = /*PP*/
        ctx2[216].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t1_value !== (t1_value = /*PP*/
        ctx2[216].tahun_penelitian + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t3_value !== (t3_value = /*PP*/
        ctx2[216].judul_penelitian + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t5_value !== (t5_value = /*PP*/
        ctx2[216].role_penelitian + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t7_value !== (t7_value = /*PP*/
        ctx2[216].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t9_value !== (t9_value = /*PP*/
        ctx2[216].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_492(ctx) {
    let each_1_anchor;
    let current;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[21]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_42(get_each_context_42(ctx, each_value_4, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        2097152 | dirty[3] & /*delrowPM*/
        65536) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[21]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_42(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_42(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_4.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_4.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_42(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PM*/
      ctx[213].tahun_pengmas + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PM*/
      ctx[213].judul_pengmas + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PM*/
      ctx[213].role_pengmas + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PM*/
      ctx[213].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PM*/
      ctx[213].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PM*/
        ctx[213].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPM*/
            ctx[109]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPM*/
        2097152 && button_pid_value !== (button_pid_value = /*PM*/
        ctx2[213].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t1_value !== (t1_value = /*PM*/
        ctx2[213].tahun_pengmas + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t3_value !== (t3_value = /*PM*/
        ctx2[213].judul_pengmas + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t5_value !== (t5_value = /*PM*/
        ctx2[213].role_pengmas + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t7_value !== (t7_value = /*PM*/
        ctx2[213].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t9_value !== (t9_value = /*PM*/
        ctx2[213].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_482(ctx) {
    let each_1_anchor;
    let current;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[22]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_32(get_each_context_32(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        4194304 | dirty[3] & /*delrowPD*/
        131072) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[22]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_32(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_32(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_32(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PD*/
      ctx[210].tahun_diseminasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PD*/
      ctx[210].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PD*/
      ctx[210].nama_pemakalah + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PD*/
      ctx[210].nama_pertemuan + ""
    );
    let t7;
    let t8;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PD*/
        ctx[210].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPD*/
            ctx[110]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPD*/
        4194304 && button_pid_value !== (button_pid_value = /*PD*/
        ctx2[210].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t1_value !== (t1_value = /*PD*/
        ctx2[210].tahun_diseminasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t3_value !== (t3_value = /*PD*/
        ctx2[210].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t5_value !== (t5_value = /*PD*/
        ctx2[210].nama_pemakalah + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t7_value !== (t7_value = /*PD*/
        ctx2[210].nama_pertemuan + ""))
          set_data(t7, t7_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_472(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[23]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_22(get_each_context_22(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        8388608 | dirty[3] & /*delrowPPub*/
        262144) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[23]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_22(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_22(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_22(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPub*/
      ctx[207].tahun_publikasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPub*/
      ctx[207].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPub*/
      ctx[207].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPub*/
      ctx[207].nama_jurnal + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPub*/
      ctx[207].impact + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPub*/
        ctx[207].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPub*/
            ctx[111]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPub*/
        8388608 && button_pid_value !== (button_pid_value = /*PPub*/
        ctx2[207].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t1_value !== (t1_value = /*PPub*/
        ctx2[207].tahun_publikasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t3_value !== (t3_value = /*PPub*/
        ctx2[207].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t5_value !== (t5_value = /*PPub*/
        ctx2[207].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t7_value !== (t7_value = /*PPub*/
        ctx2[207].nama_jurnal + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t9_value !== (t9_value = /*PPub*/
        ctx2[207].impact + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_462(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[24]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_14(get_each_context_14(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        16777216 | dirty[3] & /*delrowPPB*/
        524288) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[24]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_14(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_14(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_14(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPB*/
      ctx[204].tahun_buku + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPB*/
      ctx[204].judul_buku + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPB*/
      ctx[204].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPB*/
      ctx[204].penerbit + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPB*/
      ctx[204].isbn + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPB*/
        ctx[204].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPB*/
            ctx[112]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPB*/
        16777216 && button_pid_value !== (button_pid_value = /*PPB*/
        ctx2[204].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t1_value !== (t1_value = /*PPB*/
        ctx2[204].tahun_buku + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t3_value !== (t3_value = /*PPB*/
        ctx2[204].judul_buku + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t5_value !== (t5_value = /*PPB*/
        ctx2[204].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t7_value !== (t7_value = /*PPB*/
        ctx2[204].penerbit + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t9_value !== (t9_value = /*PPB*/
        ctx2[204].isbn + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_452(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[25]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        33554432 | dirty[3] & /*delrowPHKI*/
        1048576) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[25]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context8(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block8(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block8(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PHKI*/
      ctx[201].tahun_hki + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PHKI*/
      ctx[201].judul_hki + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PHKI*/
      ctx[201].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PHKI*/
      ctx[201].jenis_hki + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PHKI*/
      ctx[201].no_hki + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PHKI*/
        ctx[201].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPHKI*/
            ctx[113]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPHKI*/
        33554432 && button_pid_value !== (button_pid_value = /*PHKI*/
        ctx2[201].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t1_value !== (t1_value = /*PHKI*/
        ctx2[201].tahun_hki + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t3_value !== (t3_value = /*PHKI*/
        ctx2[201].judul_hki + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t5_value !== (t5_value = /*PHKI*/
        ctx2[201].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t7_value !== (t7_value = /*PHKI*/
        ctx2[201].jenis_hki + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t9_value !== (t9_value = /*PHKI*/
        ctx2[201].no_hki + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_55(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let li2;
    let t7;
    let t8;
    let t9;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[79] === true && create_if_block_552(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[80] === true && create_if_block_512(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[81] === true && create_if_block_443(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Profile";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Riwayat Pendidikan</span></a>`;
        t5 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Pengalaman</span></a>`;
        t7 = space();
        if (if_block0)
          if_block0.c();
        t8 = space();
        if (if_block1)
          if_block1.c();
        t9 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[79]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[80]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[81]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        append(ul, t5);
        append(ul, li2);
        insert(target, t7, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t8, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t9, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[101]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[102]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[103]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1*/
        131072) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[79]
          );
        }
        if (!current || dirty[2] & /*tab2*/
        262144) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[80]
          );
        }
        if (!current || dirty[2] & /*tab3*/
        524288) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[81]
          );
        }
        if (
          /*tab1*/
          ctx2[79] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1*/
            131072) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_552(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t8.parentNode, t8);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[80] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[2] & /*tab2*/
            262144) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_512(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t9.parentNode, t9);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab3*/
          ctx2[81] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[2] & /*tab3*/
            524288) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_443(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_433(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nama_pertiS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nama_pertiS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_54(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nama_pertiS1 && create_if_block_433(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nama_pertiS1*/
          ctx[5]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_12*/
            ctx[129]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nama_pertiS1*/
        32 && input.value !== /*nama_pertiS1*/
        ctx2[5]) {
          set_input_value(
            input,
            /*nama_pertiS1*/
            ctx2[5]
          );
        }
        if (
          /*error*/
          ctx2[1].nama_pertiS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_433(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_423(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].bidang_ilmuS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].bidang_ilmuS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_53(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].bidang_ilmuS1 && create_if_block_423(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*bidang_ilmuS1*/
          ctx[6]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_13*/
            ctx[130]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*bidang_ilmuS1*/
        64 && input.value !== /*bidang_ilmuS1*/
        ctx2[6]) {
          set_input_value(
            input,
            /*bidang_ilmuS1*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[1].bidang_ilmuS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_423(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_412(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunMasukS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunMasukS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_522(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunMasukS1 && create_if_block_412(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunMasukS1*/
          ctx[7]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_14*/
            ctx[131]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunMasukS1*/
        128 && to_number(input.value) !== /*tahunMasukS1*/
        ctx2[7]) {
          set_input_value(
            input,
            /*tahunMasukS1*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunMasukS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_412(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_402(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunLulusS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunLulusS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_51(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunLulusS1 && create_if_block_402(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunLulusS1*/
          ctx[8]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_15*/
            ctx[132]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunLulusS1*/
        256 && to_number(input.value) !== /*tahunLulusS1*/
        ctx2[8]) {
          set_input_value(
            input,
            /*tahunLulusS1*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunLulusS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_402(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_393(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulSkripsi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulSkripsi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_50(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulSkripsi && create_if_block_393(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulSkripsi*/
          ctx[9]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_16*/
            ctx[133]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulSkripsi*/
        512 && input.value !== /*judulSkripsi*/
        ctx2[9]) {
          set_input_value(
            input,
            /*judulSkripsi*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[1].judulSkripsi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_393(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_49(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Perguruan Tinggi",
        $$slots: { default: [create_default_slot_54] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Bidang Ilmu",
        $$slots: { default: [create_default_slot_53] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Tahun Masuk",
        $$slots: { default: [create_default_slot_522] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Tahun Lulus",
        $$slots: { default: [create_default_slot_51] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Judul Skripsi",
        $$slots: { default: [create_default_slot_50] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanRP_S1*/
            ctx[91]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, nama_pertiS1*/
        34 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, bidang_ilmuS1*/
        66 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, tahunMasukS1*/
        130 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, tahunLulusS1*/
        258 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, judulSkripsi*/
        514 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_8(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Riwayat Pendidikan S1";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_383(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nama_pertiS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nama_pertiS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_48(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nama_pertiS2 && create_if_block_383(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nama_pertiS2*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_17*/
            ctx[135]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nama_pertiS2*/
        1024 && input.value !== /*nama_pertiS2*/
        ctx2[10]) {
          set_input_value(
            input,
            /*nama_pertiS2*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[1].nama_pertiS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_383(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_373(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].bidang_ilmuS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].bidang_ilmuS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_47(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].bidang_ilmuS2 && create_if_block_373(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*bidang_ilmuS2*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_18*/
            ctx[136]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*bidang_ilmuS2*/
        2048 && input.value !== /*bidang_ilmuS2*/
        ctx2[11]) {
          set_input_value(
            input,
            /*bidang_ilmuS2*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[1].bidang_ilmuS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_373(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_363(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunMasukS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunMasukS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_46(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunMasukS2 && create_if_block_363(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunMasukS2*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_19*/
            ctx[137]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunMasukS2*/
        4096 && to_number(input.value) !== /*tahunMasukS2*/
        ctx2[12]) {
          set_input_value(
            input,
            /*tahunMasukS2*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunMasukS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_363(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_353(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunLulusS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunLulusS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_45(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunLulusS2 && create_if_block_353(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunLulusS2*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_20*/
            ctx[138]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunLulusS2*/
        8192 && to_number(input.value) !== /*tahunLulusS2*/
        ctx2[13]) {
          set_input_value(
            input,
            /*tahunLulusS2*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunLulusS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_353(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_343(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulTesis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulTesis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_44(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulTesis && create_if_block_343(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulTesis*/
          ctx[14]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_21*/
            ctx[139]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulTesis*/
        16384 && input.value !== /*judulTesis*/
        ctx2[14]) {
          set_input_value(
            input,
            /*judulTesis*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[1].judulTesis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_343(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_43(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Perguruan Tinggi",
        $$slots: { default: [create_default_slot_48] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Bidang Ilmu",
        $$slots: { default: [create_default_slot_47] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Tahun Masuk",
        $$slots: { default: [create_default_slot_46] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Tahun Lulus",
        $$slots: { default: [create_default_slot_45] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Judul Tesis",
        $$slots: { default: [create_default_slot_44] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanRP_S2*/
            ctx[92]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, nama_pertiS2*/
        1026 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, bidang_ilmuS2*/
        2050 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, tahunMasukS2*/
        4098 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, tahunLulusS2*/
        8194 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, judulTesis*/
        16386 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_7(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Riwayat Pendidikan S2";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_333(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nama_pertiS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nama_pertiS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_422(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nama_pertiS3 && create_if_block_333(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nama_pertiS3*/
          ctx[15]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_22*/
            ctx[141]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nama_pertiS3*/
        32768 && input.value !== /*nama_pertiS3*/
        ctx2[15]) {
          set_input_value(
            input,
            /*nama_pertiS3*/
            ctx2[15]
          );
        }
        if (
          /*error*/
          ctx2[1].nama_pertiS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_333(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_324(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].bidang_ilmuS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].bidang_ilmuS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_41(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].bidang_ilmuS3 && create_if_block_324(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*bidang_ilmuS3*/
          ctx[16]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_23*/
            ctx[142]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*bidang_ilmuS3*/
        65536 && input.value !== /*bidang_ilmuS3*/
        ctx2[16]) {
          set_input_value(
            input,
            /*bidang_ilmuS3*/
            ctx2[16]
          );
        }
        if (
          /*error*/
          ctx2[1].bidang_ilmuS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_324(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_313(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunMasukS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunMasukS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_40(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunMasukS3 && create_if_block_313(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunMasukS3*/
          ctx[17]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_24*/
            ctx[143]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunMasukS3*/
        131072 && to_number(input.value) !== /*tahunMasukS3*/
        ctx2[17]) {
          set_input_value(
            input,
            /*tahunMasukS3*/
            ctx2[17]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunMasukS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_313(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_303(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunLulusS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunLulusS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_39(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunLulusS3 && create_if_block_303(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunLulusS3*/
          ctx[18]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_25*/
            ctx[144]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunLulusS3*/
        262144 && to_number(input.value) !== /*tahunLulusS3*/
        ctx2[18]) {
          set_input_value(
            input,
            /*tahunLulusS3*/
            ctx2[18]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunLulusS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_303(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_293(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulDisertasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulDisertasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_38(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulDisertasi && create_if_block_293(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDisertasi*/
          ctx[19]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_26*/
            ctx[145]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulDisertasi*/
        524288 && input.value !== /*judulDisertasi*/
        ctx2[19]) {
          set_input_value(
            input,
            /*judulDisertasi*/
            ctx2[19]
          );
        }
        if (
          /*error*/
          ctx2[1].judulDisertasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_293(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_37(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Perguruan Tinggi",
        $$slots: { default: [create_default_slot_422] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Bidang Ilmu",
        $$slots: { default: [create_default_slot_41] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Tahun Masuk",
        $$slots: { default: [create_default_slot_40] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Tahun Lulus",
        $$slots: { default: [create_default_slot_39] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Judul Disertasi",
        $$slots: { default: [create_default_slot_38] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanRP_S3*/
            ctx[93]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, nama_pertiS3*/
        32770 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, bidang_ilmuS3*/
        65538 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, tahunMasukS3*/
        131074 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, tahunLulusS3*/
        262146 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, judulDisertasi*/
        524290 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_6(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Riwayat Pendidikan S3";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_283(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_36(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPenelitian && create_if_block_283(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPenelitian*/
          ctx[27]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_27*/
            ctx[147]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPenelitian*/
        134217728 && to_number(input.value) !== /*tahunPenelitian*/
        ctx2[27]) {
          set_input_value(
            input,
            /*tahunPenelitian*/
            ctx2[27]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_283(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_273(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_35(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPenelitian && create_if_block_273(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPenelitian*/
          ctx[28]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_28*/
            ctx[148]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPenelitian*/
        268435456 && input.value !== /*judulPenelitian*/
        ctx2[28]) {
          set_input_value(
            input,
            /*judulPenelitian*/
            ctx2[28]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_273(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_263(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_34(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePenelitian && create_if_block_263(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePenelitian*/
          ctx[29] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[149].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePenelitian*/
          ctx[29],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[149]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*rolePenelitian*/
        536870912) {
          select_option(
            select,
            /*rolePenelitian*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_263(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_253(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_33(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPenelitian && create_if_block_253(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPenelitian*/
          ctx[30]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_29*/
            ctx[150]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*sumberDanaPenelitian*/
        1073741824 && input.value !== /*sumberDanaPenelitian*/
        ctx2[30]) {
          set_input_value(
            input,
            /*sumberDanaPenelitian*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_253(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_243(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPP + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPP + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_322(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPP && create_if_block_243(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPP*/
          ctx[26]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_30*/
              ctx[151]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[152]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPP*/
        67108864 && input.value !== /*biayaPP*/
        ctx2[26]) {
          set_input_value(
            input,
            /*biayaPP*/
            ctx2[26]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPP
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_243(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_31(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_36] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Penelitian",
        $$slots: { default: [create_default_slot_35] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Ketua/Anggota",
        $$slots: { default: [create_default_slot_34] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_33] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_322] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPP*/
            ctx[94]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPenelitian*/
        134217730 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPenelitian*/
        268435458 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, rolePenelitian*/
        536870914 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, sumberDanaPenelitian*/
        1073741826 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, biayaPP*/
        67108866 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_5(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penelitian";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_234(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_30(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPengmas && create_if_block_234(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPengmas*/
          ctx[32]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_31*/
            ctx[154]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunPengmas*/
        2 && to_number(input.value) !== /*tahunPengmas*/
        ctx2[32]) {
          set_input_value(
            input,
            /*tahunPengmas*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_234(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_224(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_29(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPengmas && create_if_block_224(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengmas*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_32*/
            ctx[155]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulPengmas*/
        4 && input.value !== /*judulPengmas*/
        ctx2[33]) {
          set_input_value(
            input,
            /*judulPengmas*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_224(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_214(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_28(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePengmas && create_if_block_214(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePengmas*/
          ctx[34] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[156].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePengmas*/
          ctx[34],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[156]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*rolePengmas*/
        8) {
          select_option(
            select,
            /*rolePengmas*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_214(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_203(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_27(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPengmas && create_if_block_203(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPengmas*/
          ctx[35]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_33*/
            ctx[157]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*sumberDanaPengmas*/
        16 && input.value !== /*sumberDanaPengmas*/
        ctx2[35]) {
          set_input_value(
            input,
            /*sumberDanaPengmas*/
            ctx2[35]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_203(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_193(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_26(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPengmas && create_if_block_193(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Pengmas");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPengmas*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_34*/
              ctx[158]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler_1*/
              ctx[159]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPengmas*/
        1 && input.value !== /*biayaPengmas*/
        ctx2[31]) {
          set_input_value(
            input,
            /*biayaPengmas*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_193(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_25(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_30] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Pengmas",
        $$slots: { default: [create_default_slot_29] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Ketua/Anggota",
        $$slots: { default: [create_default_slot_28] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_27] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_26] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPM*/
            ctx[95]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunPengmas*/
        2 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*judulPengmas*/
        4 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*rolePengmas*/
        8 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*sumberDanaPengmas*/
        16 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*biayaPengmas*/
        1 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_4(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Pengabdian Masyarakat";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_183(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_24(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunDiseminasi && create_if_block_183(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunDiseminasi*/
          ctx[36]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_35*/
            ctx[161]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunDiseminasi*/
        32 && to_number(input.value) !== /*tahunDiseminasi*/
        ctx2[36]) {
          set_input_value(
            input,
            /*tahunDiseminasi*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_183(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_173(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_232(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulDiseminasi && create_if_block_173(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDiseminasi*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_36*/
            ctx[162]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulDiseminasi*/
        64 && input.value !== /*judulDiseminasi*/
        ctx2[37]) {
          set_input_value(
            input,
            /*judulDiseminasi*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[1].judulDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_173(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_163(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPemakalahDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_223(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi && create_if_block_163(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPemakalahDiseminasi*/
          ctx[38]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_37*/
            ctx[163]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPemakalahDiseminasi*/
        128 && input.value !== /*namaPemakalahDiseminasi*/
        ctx2[38]) {
          set_input_value(
            input,
            /*namaPemakalahDiseminasi*/
            ctx2[38]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPemakalahDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_163(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_153(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPertemuanDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_212(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi && create_if_block_153(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPertemuanDiseminasi*/
          ctx[39]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_38*/
            ctx[164]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPertemuanDiseminasi*/
        256 && input.value !== /*namaPertemuanDiseminasi*/
        ctx2[39]) {
          set_input_value(
            input,
            /*namaPertemuanDiseminasi*/
            ctx2[39]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPertemuanDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_153(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_202(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let hr;
    let t4;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_24] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_232] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Pemakalah",
        $$slots: { default: [create_default_slot_223] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Pertemuan Ilmiah/Pameran",
        $$slots: { default: [create_default_slot_212] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        hr = element("hr");
        t4 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        insert(target, hr, anchor);
        insert(target, t4, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPD*/
            ctx[96]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunDiseminasi*/
        32 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*judulDiseminasi*/
        64 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPemakalahDiseminasi*/
        128 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPertemuanDiseminasi*/
        256 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(hr);
          detach(t4);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_3(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Diseminasi Ilmiah dalam<br/>Pertemuan / Pameran`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_143(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_192(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPublikasi && create_if_block_143(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPublikasi*/
          ctx[40]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_39*/
            ctx[166]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunPublikasi*/
        512 && to_number(input.value) !== /*tahunPublikasi*/
        ctx2[40]) {
          set_input_value(
            input,
            /*tahunPublikasi*/
            ctx2[40]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_143(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_134(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_182(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPublikasi && create_if_block_134(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPublikasi*/
          ctx[41]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_40*/
            ctx[167]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulPublikasi*/
        1024 && input.value !== /*judulPublikasi*/
        ctx2[41]) {
          set_input_value(
            input,
            /*judulPublikasi*/
            ctx2[41]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_134(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_124(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_172(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulis && create_if_block_124(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulis*/
          ctx[42]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_41*/
            ctx[168]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulis*/
        2048 && input.value !== /*namaPenulis*/
        ctx2[42]) {
          set_input_value(
            input,
            /*namaPenulis*/
            ctx2[42]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_124(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_114(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaJurnal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaJurnal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_162(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaJurnal && create_if_block_114(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaJurnal*/
          ctx[43]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_42*/
            ctx[169]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaJurnal*/
        4096 && input.value !== /*namaJurnal*/
        ctx2[43]) {
          set_input_value(
            input,
            /*namaJurnal*/
            ctx2[43]
          );
        }
        if (
          /*error*/
          ctx2[1].namaJurnal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_114(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_103(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].impactFactor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].impactFactor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_152(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].impactFactor && create_if_block_103(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*impactFactor*/
          ctx[44]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_43*/
            ctx[170]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*impactFactor*/
        8192 && input.value !== /*impactFactor*/
        ctx2[44]) {
          set_input_value(
            input,
            /*impactFactor*/
            ctx2[44]
          );
        }
        if (
          /*error*/
          ctx2[1].impactFactor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_103(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_142(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_192] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_182] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_172] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Jurnal, Vol., No Issue/No Artikel, Halaman",
        $$slots: { default: [create_default_slot_162] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Impact Factor/Scopus Quarter/Akreditasi",
        $$slots: { default: [create_default_slot_152] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPublikasi*/
            ctx[97]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunPublikasi*/
        512 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*judulPublikasi*/
        1024 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulis*/
        2048 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaJurnal*/
        4096 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*impactFactor*/
        8192 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_2(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Publikasi Ilmiah <br/> dalam Jurnal (bukan Proceeding)`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_93(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_132(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunBuku && create_if_block_93(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunBuku*/
          ctx[45]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_44*/
            ctx[172]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunBuku*/
        16384 && to_number(input.value) !== /*tahunBuku*/
        ctx2[45]) {
          set_input_value(
            input,
            /*tahunBuku*/
            ctx2[45]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_93(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_83(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_123(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulBuku && create_if_block_83(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulBuku*/
          ctx[46]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_45*/
            ctx[173]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*JudulBuku*/
        32768 && input.value !== /*JudulBuku*/
        ctx2[46]) {
          set_input_value(
            input,
            /*JudulBuku*/
            ctx2[46]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_83(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_710(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_112(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisBuku && create_if_block_710(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisBuku*/
          ctx[47]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_46*/
            ctx[174]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulisBuku*/
        65536 && input.value !== /*namaPenulisBuku*/
        ctx2[47]) {
          set_input_value(
            input,
            /*namaPenulisBuku*/
            ctx2[47]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_710(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_611(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].PenerbitBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].PenerbitBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_102(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].PenerbitBuku && create_if_block_611(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*PenerbitBuku*/
          ctx[48]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_47*/
            ctx[175]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*PenerbitBuku*/
        131072 && input.value !== /*PenerbitBuku*/
        ctx2[48]) {
          set_input_value(
            input,
            /*PenerbitBuku*/
            ctx2[48]
          );
        }
        if (
          /*error*/
          ctx2[1].PenerbitBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_611(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_511(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].Isbn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].Isbn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_92(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].Isbn && create_if_block_511(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*Isbn*/
          ctx[49]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_48*/
            ctx[176]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*Isbn*/
        262144 && input.value !== /*Isbn*/
        ctx2[49]) {
          set_input_value(
            input,
            /*Isbn*/
            ctx2[49]
          );
        }
        if (
          /*error*/
          ctx2[1].Isbn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_511(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_83(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_132] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Buku",
        $$slots: { default: [create_default_slot_123] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_112] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_102] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_92] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPB*/
            ctx[98]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunBuku*/
        16384 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*JudulBuku*/
        32768 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulisBuku*/
        65536 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*PenerbitBuku*/
        131072 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*Isbn*/
        262144 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_1(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penulisan Buku";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_411(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_73(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunHKI && create_if_block_411(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunHKI*/
          ctx[50]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_49*/
            ctx[178]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunHKI*/
        524288 && to_number(input.value) !== /*tahunHKI*/
        ctx2[50]) {
          set_input_value(
            input,
            /*tahunHKI*/
            ctx2[50]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_411(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_314(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_69(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulHKI && create_if_block_314(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulHKI*/
          ctx[51]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_50*/
            ctx[179]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*JudulHKI*/
        1048576 && input.value !== /*JudulHKI*/
        ctx2[51]) {
          set_input_value(
            input,
            /*JudulHKI*/
            ctx2[51]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_314(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_215(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_510(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisHKI && create_if_block_215(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisHKI*/
          ctx[52]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_51*/
            ctx[180]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulisHKI*/
        2097152 && input.value !== /*namaPenulisHKI*/
        ctx2[52]) {
          set_input_value(
            input,
            /*namaPenulisHKI*/
            ctx2[52]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_215(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_115(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[1].jenisHKI + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jenisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_410(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jenisHKI && create_if_block_115(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*jenisHKI*/
          ctx[53]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_52*/
            ctx[181]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisHKI*/
        4194304 && input.value !== /*jenisHKI*/
        ctx2[53]) {
          set_input_value(
            input,
            /*jenisHKI*/
            ctx2[53]
          );
        }
        if (
          /*error*/
          ctx2[1].jenisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_115(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block11(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].noHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].noHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_310(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].noHKI && create_if_block11(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*noHKI*/
          ctx[54]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_53*/
            ctx[182]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*noHKI*/
        8388608 && input.value !== /*noHKI*/
        ctx2[54]) {
          set_input_value(
            input,
            /*noHKI*/
            ctx2[54]
          );
        }
        if (
          /*error*/
          ctx2[1].noHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block11(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_210(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_73] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul HKI",
        $$slots: { default: [create_default_slot_69] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_510] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_410] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_310] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPHKI*/
            ctx[99]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunHKI*/
        524288 | dirty[7] & /*$$scope*/
        16384) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*JudulHKI*/
        1048576 | dirty[7] & /*$$scope*/
        16384) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulisHKI*/
        2097152 | dirty[7] & /*$$scope*/
        16384) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jenisHKI*/
        4194304 | dirty[7] & /*$$scope*/
        16384) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI*/
        8388608 | dirty[7] & /*$$scope*/
        16384) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Hak Kekayaan Intelektual";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_default_slot_111(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form sebelum disimpan";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot8(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berhasil menyimpan data";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment28(ctx) {
    let article2;
    let t0;
    let modal0;
    let updating_show;
    let t1;
    let modal1;
    let updating_show_1;
    let t2;
    let modal2;
    let updating_show_2;
    let t3;
    let modal3;
    let updating_show_3;
    let t4;
    let modal4;
    let updating_show_4;
    let t5;
    let modal5;
    let updating_show_5;
    let t6;
    let modal6;
    let updating_show_6;
    let t7;
    let modal7;
    let updating_show_7;
    let t8;
    let modal8;
    let updating_show_8;
    let t9;
    let modalerror;
    let updating_show_9;
    let t10;
    let modalchecked;
    let updating_show_10;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_55] },
        $$scope: { ctx }
      }
    });
    function modal0_show_binding(value) {
      ctx[134](value);
    }
    let modal0_props = {
      $$slots: {
        header: [create_header_slot_8],
        default: [create_default_slot_49]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalRiwayatPendidikanS1*/
      ctx[68] !== void 0
    ) {
      modal0_props.show = /*showModalRiwayatPendidikanS1*/
      ctx[68];
    }
    modal0 = new Modal_default({ props: modal0_props });
    binding_callbacks.push(() => bind(modal0, "show", modal0_show_binding));
    function modal1_show_binding(value) {
      ctx[140](value);
    }
    let modal1_props = {
      $$slots: {
        header: [create_header_slot_7],
        default: [create_default_slot_43]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalRiwayatPendidikanS2*/
      ctx[69] !== void 0
    ) {
      modal1_props.show = /*showModalRiwayatPendidikanS2*/
      ctx[69];
    }
    modal1 = new Modal_default({ props: modal1_props });
    binding_callbacks.push(() => bind(modal1, "show", modal1_show_binding));
    function modal2_show_binding(value) {
      ctx[146](value);
    }
    let modal2_props = {
      $$slots: {
        header: [create_header_slot_6],
        default: [create_default_slot_37]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalRiwayatPendidikanS3*/
      ctx[70] !== void 0
    ) {
      modal2_props.show = /*showModalRiwayatPendidikanS3*/
      ctx[70];
    }
    modal2 = new Modal_default({ props: modal2_props });
    binding_callbacks.push(() => bind(modal2, "show", modal2_show_binding));
    function modal3_show_binding(value) {
      ctx[153](value);
    }
    let modal3_props = {
      $$slots: {
        header: [create_header_slot_5],
        default: [create_default_slot_31]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenelitian*/
      ctx[71] !== void 0
    ) {
      modal3_props.show = /*showModalPenelitian*/
      ctx[71];
    }
    modal3 = new Modal_default({ props: modal3_props });
    binding_callbacks.push(() => bind(modal3, "show", modal3_show_binding));
    function modal4_show_binding(value) {
      ctx[160](value);
    }
    let modal4_props = {
      $$slots: {
        header: [create_header_slot_4],
        default: [create_default_slot_25]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPengmas*/
      ctx[72] !== void 0
    ) {
      modal4_props.show = /*showModalPengmas*/
      ctx[72];
    }
    modal4 = new Modal_default({ props: modal4_props });
    binding_callbacks.push(() => bind(modal4, "show", modal4_show_binding));
    function modal5_show_binding(value) {
      ctx[165](value);
    }
    let modal5_props = {
      $$slots: {
        header: [create_header_slot_3],
        default: [create_default_slot_202]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalDiseminasi*/
      ctx[73] !== void 0
    ) {
      modal5_props.show = /*showModalDiseminasi*/
      ctx[73];
    }
    modal5 = new Modal_default({ props: modal5_props });
    binding_callbacks.push(() => bind(modal5, "show", modal5_show_binding));
    function modal6_show_binding(value) {
      ctx[171](value);
    }
    let modal6_props = {
      $$slots: {
        header: [create_header_slot_2],
        default: [create_default_slot_142]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPublikasi*/
      ctx[74] !== void 0
    ) {
      modal6_props.show = /*showModalPublikasi*/
      ctx[74];
    }
    modal6 = new Modal_default({ props: modal6_props });
    binding_callbacks.push(() => bind(modal6, "show", modal6_show_binding));
    function modal7_show_binding(value) {
      ctx[177](value);
    }
    let modal7_props = {
      $$slots: {
        header: [create_header_slot_1],
        default: [create_default_slot_83]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenulisanBuku*/
      ctx[75] !== void 0
    ) {
      modal7_props.show = /*showModalPenulisanBuku*/
      ctx[75];
    }
    modal7 = new Modal_default({ props: modal7_props });
    binding_callbacks.push(() => bind(modal7, "show", modal7_show_binding));
    function modal8_show_binding(value) {
      ctx[183](value);
    }
    let modal8_props = {
      $$slots: {
        header: [create_header_slot],
        default: [create_default_slot_210]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalHKI*/
      ctx[76] !== void 0
    ) {
      modal8_props.show = /*showModalHKI*/
      ctx[76];
    }
    modal8 = new Modal_default({ props: modal8_props });
    binding_callbacks.push(() => bind(modal8, "show", modal8_show_binding));
    function modalerror_show_binding(value) {
      ctx[184](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot_111] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorForm*/
      ctx[77] !== void 0
    ) {
      modalerror_props.show = /*showModalErrorForm*/
      ctx[77];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    function modalchecked_show_binding(value) {
      ctx[185](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot8] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[78] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[78];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t0 = space();
        create_component(modal0.$$.fragment);
        t1 = space();
        create_component(modal1.$$.fragment);
        t2 = space();
        create_component(modal2.$$.fragment);
        t3 = space();
        create_component(modal3.$$.fragment);
        t4 = space();
        create_component(modal4.$$.fragment);
        t5 = space();
        create_component(modal5.$$.fragment);
        t6 = space();
        create_component(modal6.$$.fragment);
        t7 = space();
        create_component(modal7.$$.fragment);
        t8 = space();
        create_component(modal8.$$.fragment);
        t9 = space();
        create_component(modalerror.$$.fragment);
        t10 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t0, anchor);
        mount_component(modal0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modal1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modal2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modal3, target, anchor);
        insert(target, t4, anchor);
        mount_component(modal4, target, anchor);
        insert(target, t5, anchor);
        mount_component(modal5, target, anchor);
        insert(target, t6, anchor);
        mount_component(modal6, target, anchor);
        insert(target, t7, anchor);
        mount_component(modal7, target, anchor);
        insert(target, t8, anchor);
        mount_component(modal8, target, anchor);
        insert(target, t9, anchor);
        mount_component(modalerror, target, anchor);
        insert(target, t10, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, dataRPS3, dataRPS2, dataRPS1, vmataKuliah, error*/
        66060319 | dirty[1] & /*alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap*/
        2130706432 | dirty[2] & /*tab3, tab2, mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, tab1*/
        917567 | dirty[7] & /*$$scope*/
        16384) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modal0_changes = {};
        if (dirty[0] & /*error, judulSkripsi, tahunLulusS1, tahunMasukS1, bidang_ilmuS1, nama_pertiS1*/
        994 | dirty[7] & /*$$scope*/
        16384) {
          modal0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[2] & /*showModalRiwayatPendidikanS1*/
        64) {
          updating_show = true;
          modal0_changes.show = /*showModalRiwayatPendidikanS1*/
          ctx2[68];
          add_flush_callback(() => updating_show = false);
        }
        modal0.$set(modal0_changes);
        const modal1_changes = {};
        if (dirty[0] & /*error, judulTesis, tahunLulusS2, tahunMasukS2, bidang_ilmuS2, nama_pertiS2*/
        31746 | dirty[7] & /*$$scope*/
        16384) {
          modal1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[2] & /*showModalRiwayatPendidikanS2*/
        128) {
          updating_show_1 = true;
          modal1_changes.show = /*showModalRiwayatPendidikanS2*/
          ctx2[69];
          add_flush_callback(() => updating_show_1 = false);
        }
        modal1.$set(modal1_changes);
        const modal2_changes = {};
        if (dirty[0] & /*error, judulDisertasi, tahunLulusS3, tahunMasukS3, bidang_ilmuS3, nama_pertiS3*/
        1015810 | dirty[7] & /*$$scope*/
        16384) {
          modal2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[2] & /*showModalRiwayatPendidikanS3*/
        256) {
          updating_show_2 = true;
          modal2_changes.show = /*showModalRiwayatPendidikanS3*/
          ctx2[70];
          add_flush_callback(() => updating_show_2 = false);
        }
        modal2.$set(modal2_changes);
        const modal3_changes = {};
        if (dirty[0] & /*error, biayaPP, sumberDanaPenelitian, rolePenelitian, judulPenelitian, tahunPenelitian*/
        2080374786 | dirty[7] & /*$$scope*/
        16384) {
          modal3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[2] & /*showModalPenelitian*/
        512) {
          updating_show_3 = true;
          modal3_changes.show = /*showModalPenelitian*/
          ctx2[71];
          add_flush_callback(() => updating_show_3 = false);
        }
        modal3.$set(modal3_changes);
        const modal4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*biayaPengmas, sumberDanaPengmas, rolePengmas, judulPengmas, tahunPengmas*/
        31 | dirty[7] & /*$$scope*/
        16384) {
          modal4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_4 && dirty[2] & /*showModalPengmas*/
        1024) {
          updating_show_4 = true;
          modal4_changes.show = /*showModalPengmas*/
          ctx2[72];
          add_flush_callback(() => updating_show_4 = false);
        }
        modal4.$set(modal4_changes);
        const modal5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPertemuanDiseminasi, namaPemakalahDiseminasi, judulDiseminasi, tahunDiseminasi*/
        480 | dirty[7] & /*$$scope*/
        16384) {
          modal5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_5 && dirty[2] & /*showModalDiseminasi*/
        2048) {
          updating_show_5 = true;
          modal5_changes.show = /*showModalDiseminasi*/
          ctx2[73];
          add_flush_callback(() => updating_show_5 = false);
        }
        modal5.$set(modal5_changes);
        const modal6_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*impactFactor, namaJurnal, namaPenulis, judulPublikasi, tahunPublikasi*/
        15872 | dirty[7] & /*$$scope*/
        16384) {
          modal6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_6 && dirty[2] & /*showModalPublikasi*/
        4096) {
          updating_show_6 = true;
          modal6_changes.show = /*showModalPublikasi*/
          ctx2[74];
          add_flush_callback(() => updating_show_6 = false);
        }
        modal6.$set(modal6_changes);
        const modal7_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*Isbn, PenerbitBuku, namaPenulisBuku, JudulBuku, tahunBuku*/
        507904 | dirty[7] & /*$$scope*/
        16384) {
          modal7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_7 && dirty[2] & /*showModalPenulisanBuku*/
        8192) {
          updating_show_7 = true;
          modal7_changes.show = /*showModalPenulisanBuku*/
          ctx2[75];
          add_flush_callback(() => updating_show_7 = false);
        }
        modal7.$set(modal7_changes);
        const modal8_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI, jenisHKI, namaPenulisHKI, JudulHKI, tahunHKI*/
        16252928 | dirty[7] & /*$$scope*/
        16384) {
          modal8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_8 && dirty[2] & /*showModalHKI*/
        16384) {
          updating_show_8 = true;
          modal8_changes.show = /*showModalHKI*/
          ctx2[76];
          add_flush_callback(() => updating_show_8 = false);
        }
        modal8.$set(modal8_changes);
        const modalerror_changes = {};
        if (dirty[7] & /*$$scope*/
        16384) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_9 && dirty[2] & /*showModalErrorForm*/
        32768) {
          updating_show_9 = true;
          modalerror_changes.show = /*showModalErrorForm*/
          ctx2[77];
          add_flush_callback(() => updating_show_9 = false);
        }
        modalerror.$set(modalerror_changes);
        const modalchecked_changes = {};
        if (dirty[7] & /*$$scope*/
        16384) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_10 && dirty[2] & /*showModalChecked*/
        65536) {
          updating_show_10 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[78];
          add_flush_callback(() => updating_show_10 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modal0.$$.fragment, local);
        transition_in(modal1.$$.fragment, local);
        transition_in(modal2.$$.fragment, local);
        transition_in(modal3.$$.fragment, local);
        transition_in(modal4.$$.fragment, local);
        transition_in(modal5.$$.fragment, local);
        transition_in(modal6.$$.fragment, local);
        transition_in(modal7.$$.fragment, local);
        transition_in(modal8.$$.fragment, local);
        transition_in(modalerror.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modal0.$$.fragment, local);
        transition_out(modal1.$$.fragment, local);
        transition_out(modal2.$$.fragment, local);
        transition_out(modal3.$$.fragment, local);
        transition_out(modal4.$$.fragment, local);
        transition_out(modal5.$$.fragment, local);
        transition_out(modal6.$$.fragment, local);
        transition_out(modal7.$$.fragment, local);
        transition_out(modal8.$$.fragment, local);
        transition_out(modalerror.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(t10);
        }
        destroy_component(article2, detaching);
        destroy_component(modal0, detaching);
        destroy_component(modal1, detaching);
        destroy_component(modal2, detaching);
        destroy_component(modal3, detaching);
        destroy_component(modal4, detaching);
        destroy_component(modal5, detaching);
        destroy_component(modal6, detaching);
        destroy_component(modal7, detaching);
        destroy_component(modal8, detaching);
        destroy_component(modalerror, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function formatRupiah2(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance22($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(188, $apiURL = $$value));
    let { params } = $$props;
    const id = params["1"];
    let vmataKuliah;
    let error = {};
    let dataRPS1, dataRPS2, dataRPS3;
    let nama_pertiS1, bidang_ilmuS1, tahunMasukS1, tahunLulusS1, judulSkripsi;
    let nama_pertiS2, bidang_ilmuS2, tahunMasukS2, tahunLulusS2, judulTesis;
    let nama_pertiS3, bidang_ilmuS3, tahunMasukS3, tahunLulusS3, judulDisertasi;
    let data2, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let biayaPP, tahunPenelitian, judulPenelitian, rolePenelitian, sumberDanaPenelitian;
    let biayaPengmas, tahunPengmas, judulPengmas, rolePengmas, sumberDanaPengmas;
    let tahunDiseminasi, judulDiseminasi, namaPemakalahDiseminasi, namaPertemuanDiseminasi;
    let tahunPublikasi, judulPublikasi, namaPenulis, namaJurnal, impactFactor;
    let tahunBuku, JudulBuku, namaPenulisBuku, PenerbitBuku, Isbn;
    let tahunHKI, JudulHKI, namaPenulisHKI, jenisHKI, noHKI;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email2, mataKuliah = [];
    let showModalRiwayatPendidikanS1 = false;
    let showModalRiwayatPendidikanS2 = false;
    let showModalRiwayatPendidikanS3 = false;
    let showModalPenelitian = false;
    let showModalPengmas = false;
    let showModalDiseminasi = false;
    let showModalPublikasi = false;
    let showModalPenulisanBuku = false;
    let showModalHKI = false;
    let showModalErrorForm = false;
    let showModalChecked = false;
    async function modalInputRiwayatPendidikanS1() {
      $$invalidate(68, showModalRiwayatPendidikanS1 = true);
    }
    async function modalInputRiwayatPendidikanS2() {
      $$invalidate(69, showModalRiwayatPendidikanS2 = true);
    }
    async function modalInputRiwayatPendidikanS3() {
      $$invalidate(70, showModalRiwayatPendidikanS3 = true);
    }
    async function clickModalPenelitian() {
      $$invalidate(71, showModalPenelitian = true);
    }
    async function clickModalPengmas() {
      $$invalidate(72, showModalPengmas = true);
    }
    async function clickModalDiseminasi() {
      $$invalidate(73, showModalDiseminasi = true);
    }
    async function clickModalPublikasi() {
      $$invalidate(74, showModalPublikasi = true);
    }
    async function clickModalPenulisanBuku() {
      $$invalidate(75, showModalPenulisanBuku = true);
    }
    async function clickModalHKI() {
      $$invalidate(76, showModalHKI = true);
    }
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          data2 = result;
          idProfile = data2.id;
          idUser = data2.uid;
          $$invalidate(55, namaLengkap = data2.nama_lengkap);
          $$invalidate(56, jabatanFungsional = data2.jabatan_fungsional);
          $$invalidate(57, nip = data2.nip);
          $$invalidate(58, nidn = data2.nidn);
          $$invalidate(59, tempatLahir = data2.tempat_lahir);
          $$invalidate(60, tanggalLahir = data2.tanggal_lahir);
          $$invalidate(61, alamatRumah = data2.alamat_rumah);
          $$invalidate(62, telpFaxRumah = data2.telp_fax_rumah);
          $$invalidate(63, nomorHandphone = data2.nomor_handphone);
          $$invalidate(64, alamatKantor = data2.alamat_kantor);
          $$invalidate(65, telpFaxKantor = data2.telp_fax_kantor);
          $$invalidate(66, email2 = data2.email);
          $$invalidate(67, mataKuliah = typeof data2.mata_kuliah === "string" ? JSON.parse(data2.mata_kuliah) : data2.mata_kuliah || []);
        }
      }
      getRiwayatPendidikanS1();
      getRiwayatPendidikanS2();
      getRiwayatPendidikanS3();
      getPengalamanPenelitian();
      getPengalamanPengmas();
      getPengalamanDiseminasi();
      getPengalamanPublikasi();
      getPengalamanPenulisanBuku();
      getPengalamanHKI();
    });
    async function getRiwayatPendidikanS1() {
      const responseRPS1 = await fetch($apiURL + "/riwayatPendidikanS1/" + id, { method: "GET", headers });
      const resultRPS1 = await responseRPS1.json();
      if (responseRPS1.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRPS1.ok) {
          $$invalidate(2, dataRPS1 = resultRPS1.dbData);
        } else {
          console.log(responseRPS1);
        }
      }
    }
    async function getRiwayatPendidikanS2() {
      const responseRPS2 = await fetch($apiURL + "/riwayatPendidikanS2/" + id, { method: "GET", headers });
      const resultRPS2 = await responseRPS2.json();
      if (responseRPS2.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRPS2.ok) {
          $$invalidate(3, dataRPS2 = resultRPS2.dbData);
        } else {
          console.log(responseRPS2);
        }
      }
    }
    async function getRiwayatPendidikanS3() {
      const responseRPS3 = await fetch($apiURL + "/riwayatPendidikanS3/" + id, { method: "GET", headers });
      const resultRPS3 = await responseRPS3.json();
      if (responseRPS3.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRPS3.ok) {
          $$invalidate(4, dataRPS3 = resultRPS3.dbData);
        } else {
          console.log(responseRPS3);
        }
      }
    }
    async function getPengalamanPenelitian() {
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + id, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (responsePP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(20, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
    }
    async function getPengalamanPengmas() {
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + id, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (responsePM.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(21, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
    }
    async function getPengalamanDiseminasi() {
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + id, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (responsePD.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(22, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
    }
    async function getPengalamanPublikasi() {
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + id, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (responsePPub.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(23, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
    }
    async function getPengalamanPenulisanBuku() {
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + id, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (responsePPB.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(24, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
    }
    async function getPengalamanHKI() {
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + id, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (responsePHKI.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(25, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
    }
    async function simpanRP_S1() {
      $$invalidate(1, error = {});
      let payload2 = {
        nama_pertiS1,
        bidang_ilmuS1,
        tahunMasukS1,
        tahunLulusS1,
        judulSkripsi,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/riwayatPendidikanS1", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(68, showModalRiwayatPendidikanS1 = false);
            $$invalidate(5, nama_pertiS1 = "");
            $$invalidate(6, bidang_ilmuS1 = "");
            $$invalidate(7, tahunMasukS1 = "");
            $$invalidate(8, tahunLulusS1 = "");
            $$invalidate(9, judulSkripsi = "");
            getRiwayatPendidikanS1();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRP_S2() {
      $$invalidate(1, error = {});
      let payload2 = {
        nama_pertiS2,
        bidang_ilmuS2,
        tahunMasukS2,
        tahunLulusS2,
        judulTesis,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/riwayatPendidikanS2", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(69, showModalRiwayatPendidikanS2 = false);
            $$invalidate(10, nama_pertiS2 = "");
            $$invalidate(11, bidang_ilmuS2 = "");
            $$invalidate(12, tahunMasukS2 = "");
            $$invalidate(13, tahunLulusS2 = "");
            $$invalidate(14, judulTesis = "");
            getRiwayatPendidikanS2();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRP_S3() {
      $$invalidate(1, error = {});
      let payload2 = {
        nama_pertiS3,
        bidang_ilmuS3,
        tahunMasukS3,
        tahunLulusS3,
        judulDisertasi,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/riwayatPendidikanS3", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(70, showModalRiwayatPendidikanS3 = false);
            $$invalidate(15, nama_pertiS3 = "");
            $$invalidate(16, bidang_ilmuS3 = "");
            $$invalidate(17, tahunMasukS3 = "");
            $$invalidate(18, tahunLulusS3 = "");
            $$invalidate(19, judulDisertasi = "");
            getRiwayatPendidikanS3();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPP() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunPenelitian,
        judulPenelitian,
        rolePenelitian,
        sumberDanaPenelitian,
        biayaPP,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenelitian", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(71, showModalPenelitian = false);
            $$invalidate(27, tahunPenelitian = "");
            $$invalidate(28, judulPenelitian = "");
            $$invalidate(29, rolePenelitian = "");
            $$invalidate(30, sumberDanaPenelitian = "");
            $$invalidate(26, biayaPP = "");
            getPengalamanPenelitian();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPM() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunPengmas,
        judulPengmas,
        rolePengmas,
        sumberDanaPengmas,
        biayaPengmas,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPengmas", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(72, showModalPengmas = false);
            $$invalidate(32, tahunPengmas = "");
            $$invalidate(33, judulPengmas = "");
            $$invalidate(34, rolePengmas = "");
            $$invalidate(35, sumberDanaPengmas = "");
            $$invalidate(31, biayaPengmas = "");
            getPengalamanPengmas();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPD() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunDiseminasi,
        judulDiseminasi,
        namaPemakalahDiseminasi,
        namaPertemuanDiseminasi,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanDiseminasi", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(73, showModalDiseminasi = false);
            $$invalidate(36, tahunDiseminasi = "");
            $$invalidate(37, judulDiseminasi = "");
            $$invalidate(38, namaPemakalahDiseminasi = "");
            $$invalidate(39, namaPertemuanDiseminasi = "");
            getPengalamanDiseminasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPublikasi() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunPublikasi,
        judulPublikasi,
        namaPenulis,
        namaJurnal,
        impactFactor,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPublikasi", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(74, showModalPublikasi = false);
            $$invalidate(40, tahunPublikasi = "");
            $$invalidate(41, judulPublikasi = "");
            $$invalidate(42, namaPenulis = "");
            $$invalidate(43, namaJurnal = "");
            $$invalidate(44, impactFactor = "");
            getPengalamanPublikasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPB() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunBuku,
        JudulBuku,
        namaPenulisBuku,
        PenerbitBuku,
        Isbn,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenulisanBuku", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(75, showModalPenulisanBuku = false);
            $$invalidate(45, tahunBuku = "");
            $$invalidate(46, JudulBuku = "");
            $$invalidate(47, namaPenulisBuku = "");
            $$invalidate(48, PenerbitBuku = "");
            $$invalidate(49, Isbn = "");
            getPengalamanPenulisanBuku();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPHKI() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunHKI,
        JudulHKI,
        namaPenulisHKI,
        jenisHKI,
        noHKI,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanHKI", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(76, showModalHKI = false);
            $$invalidate(50, tahunHKI = "");
            $$invalidate(51, JudulHKI = "");
            $$invalidate(52, namaPenulisHKI = "");
            $$invalidate(53, jenisHKI = "");
            $$invalidate(54, noHKI = "");
            getPengalamanHKI();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanIdentitas() {
      $$invalidate(1, error = {});
      let payload2 = {
        idProfile,
        namaLengkap,
        jabatanFungsional,
        nip,
        nidn,
        tempatLahir,
        tanggalLahir,
        alamatRumah,
        telpFaxRumah,
        nomorHandphone,
        alamatKantor,
        telpFaxKantor,
        email: email2,
        mataKuliah
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/userprofile", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(78, showModalChecked = true);
          } else {
            console.log(response);
          }
        }
      }
    }
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(79, tab1 = true);
      $$invalidate(80, tab2 = false);
      $$invalidate(81, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(79, tab1 = false);
      $$invalidate(80, tab2 = true);
      $$invalidate(81, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(79, tab1 = false);
      $$invalidate(80, tab2 = false);
      $$invalidate(81, tab3 = true);
    }
    function addMatkul() {
      let addVmatkul = { label: vmataKuliah };
      $$invalidate(67, mataKuliah = [...mataKuliah, addVmatkul]);
      $$invalidate(0, vmataKuliah = "");
    }
    async function delrowRPS1(ev) {
      let idRPS1 = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/riwayatPendidikanS1/" + idRPS1, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getRiwayatPendidikanS1();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowRPS2(ev) {
      let idRPS2 = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/riwayatPendidikanS2/" + idRPS2, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getRiwayatPendidikanS2();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowRPS3(ev) {
      let idRPS3 = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/riwayatPendidikanS3/" + idRPS3, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getRiwayatPendidikanS3();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPP(ev) {
      let idPP = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenelitian/" + idPP, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenelitian();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPM(ev) {
      let idPM = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPengmas/" + idPM, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPengmas();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPD(ev) {
      let idPD = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanDiseminasi/" + idPD, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanDiseminasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPub(ev) {
      let idPPub = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPublikasi/" + idPPub, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPublikasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPB(ev) {
      let idPPB = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idPPB, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenulisanBuku();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPHKI(ev) {
      let idPHKI = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanHKI/" + idPHKI, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanHKI();
        } else {
          console.log(response);
        }
      }
    }
    function deleteMatkul(e) {
      let delMatkul = e.target.getAttribute("data-value");
      $$invalidate(67, mataKuliah = mataKuliah.filter((matkul) => {
        return matkul.label !== delMatkul;
      }));
    }
    function input_input_handler() {
      namaLengkap = this.value;
      $$invalidate(55, namaLengkap);
    }
    function select_change_handler() {
      jabatanFungsional = select_value(this);
      $$invalidate(56, jabatanFungsional);
    }
    function input_input_handler_1() {
      nip = to_number(this.value);
      $$invalidate(57, nip);
    }
    function input_input_handler_2() {
      nidn = to_number(this.value);
      $$invalidate(58, nidn);
    }
    function input_input_handler_3() {
      tempatLahir = this.value;
      $$invalidate(59, tempatLahir);
    }
    function input_input_handler_4() {
      tanggalLahir = this.value;
      $$invalidate(60, tanggalLahir);
    }
    function input_input_handler_5() {
      alamatRumah = this.value;
      $$invalidate(61, alamatRumah);
    }
    function input_input_handler_6() {
      telpFaxRumah = to_number(this.value);
      $$invalidate(62, telpFaxRumah);
    }
    function input_input_handler_7() {
      nomorHandphone = to_number(this.value);
      $$invalidate(63, nomorHandphone);
    }
    function input_input_handler_8() {
      alamatKantor = this.value;
      $$invalidate(64, alamatKantor);
    }
    function input_input_handler_9() {
      telpFaxKantor = to_number(this.value);
      $$invalidate(65, telpFaxKantor);
    }
    function input_input_handler_10() {
      email2 = this.value;
      $$invalidate(66, email2);
    }
    function input_input_handler_11() {
      vmataKuliah = this.value;
      $$invalidate(0, vmataKuliah);
    }
    function input_input_handler_12() {
      nama_pertiS1 = this.value;
      $$invalidate(5, nama_pertiS1);
    }
    function input_input_handler_13() {
      bidang_ilmuS1 = this.value;
      $$invalidate(6, bidang_ilmuS1);
    }
    function input_input_handler_14() {
      tahunMasukS1 = to_number(this.value);
      $$invalidate(7, tahunMasukS1);
    }
    function input_input_handler_15() {
      tahunLulusS1 = to_number(this.value);
      $$invalidate(8, tahunLulusS1);
    }
    function input_input_handler_16() {
      judulSkripsi = this.value;
      $$invalidate(9, judulSkripsi);
    }
    function modal0_show_binding(value) {
      showModalRiwayatPendidikanS1 = value;
      $$invalidate(68, showModalRiwayatPendidikanS1);
    }
    function input_input_handler_17() {
      nama_pertiS2 = this.value;
      $$invalidate(10, nama_pertiS2);
    }
    function input_input_handler_18() {
      bidang_ilmuS2 = this.value;
      $$invalidate(11, bidang_ilmuS2);
    }
    function input_input_handler_19() {
      tahunMasukS2 = to_number(this.value);
      $$invalidate(12, tahunMasukS2);
    }
    function input_input_handler_20() {
      tahunLulusS2 = to_number(this.value);
      $$invalidate(13, tahunLulusS2);
    }
    function input_input_handler_21() {
      judulTesis = this.value;
      $$invalidate(14, judulTesis);
    }
    function modal1_show_binding(value) {
      showModalRiwayatPendidikanS2 = value;
      $$invalidate(69, showModalRiwayatPendidikanS2);
    }
    function input_input_handler_22() {
      nama_pertiS3 = this.value;
      $$invalidate(15, nama_pertiS3);
    }
    function input_input_handler_23() {
      bidang_ilmuS3 = this.value;
      $$invalidate(16, bidang_ilmuS3);
    }
    function input_input_handler_24() {
      tahunMasukS3 = to_number(this.value);
      $$invalidate(17, tahunMasukS3);
    }
    function input_input_handler_25() {
      tahunLulusS3 = to_number(this.value);
      $$invalidate(18, tahunLulusS3);
    }
    function input_input_handler_26() {
      judulDisertasi = this.value;
      $$invalidate(19, judulDisertasi);
    }
    function modal2_show_binding(value) {
      showModalRiwayatPendidikanS3 = value;
      $$invalidate(70, showModalRiwayatPendidikanS3);
    }
    function input_input_handler_27() {
      tahunPenelitian = to_number(this.value);
      $$invalidate(27, tahunPenelitian);
    }
    function input_input_handler_28() {
      judulPenelitian = this.value;
      $$invalidate(28, judulPenelitian);
    }
    function select_change_handler_1() {
      rolePenelitian = select_value(this);
      $$invalidate(29, rolePenelitian);
    }
    function input_input_handler_29() {
      sumberDanaPenelitian = this.value;
      $$invalidate(30, sumberDanaPenelitian);
    }
    function input_input_handler_30() {
      biayaPP = this.value;
      $$invalidate(26, biayaPP);
    }
    const keyup_handler = () => $$invalidate(26, biayaPP = formatRupiah2(biayaPP, "Rp. "));
    function modal3_show_binding(value) {
      showModalPenelitian = value;
      $$invalidate(71, showModalPenelitian);
    }
    function input_input_handler_31() {
      tahunPengmas = to_number(this.value);
      $$invalidate(32, tahunPengmas);
    }
    function input_input_handler_32() {
      judulPengmas = this.value;
      $$invalidate(33, judulPengmas);
    }
    function select_change_handler_2() {
      rolePengmas = select_value(this);
      $$invalidate(34, rolePengmas);
    }
    function input_input_handler_33() {
      sumberDanaPengmas = this.value;
      $$invalidate(35, sumberDanaPengmas);
    }
    function input_input_handler_34() {
      biayaPengmas = this.value;
      $$invalidate(31, biayaPengmas);
    }
    const keyup_handler_1 = () => $$invalidate(31, biayaPengmas = formatRupiah2(biayaPengmas, "Rp. "));
    function modal4_show_binding(value) {
      showModalPengmas = value;
      $$invalidate(72, showModalPengmas);
    }
    function input_input_handler_35() {
      tahunDiseminasi = to_number(this.value);
      $$invalidate(36, tahunDiseminasi);
    }
    function input_input_handler_36() {
      judulDiseminasi = this.value;
      $$invalidate(37, judulDiseminasi);
    }
    function input_input_handler_37() {
      namaPemakalahDiseminasi = this.value;
      $$invalidate(38, namaPemakalahDiseminasi);
    }
    function input_input_handler_38() {
      namaPertemuanDiseminasi = this.value;
      $$invalidate(39, namaPertemuanDiseminasi);
    }
    function modal5_show_binding(value) {
      showModalDiseminasi = value;
      $$invalidate(73, showModalDiseminasi);
    }
    function input_input_handler_39() {
      tahunPublikasi = to_number(this.value);
      $$invalidate(40, tahunPublikasi);
    }
    function input_input_handler_40() {
      judulPublikasi = this.value;
      $$invalidate(41, judulPublikasi);
    }
    function input_input_handler_41() {
      namaPenulis = this.value;
      $$invalidate(42, namaPenulis);
    }
    function input_input_handler_42() {
      namaJurnal = this.value;
      $$invalidate(43, namaJurnal);
    }
    function input_input_handler_43() {
      impactFactor = this.value;
      $$invalidate(44, impactFactor);
    }
    function modal6_show_binding(value) {
      showModalPublikasi = value;
      $$invalidate(74, showModalPublikasi);
    }
    function input_input_handler_44() {
      tahunBuku = to_number(this.value);
      $$invalidate(45, tahunBuku);
    }
    function input_input_handler_45() {
      JudulBuku = this.value;
      $$invalidate(46, JudulBuku);
    }
    function input_input_handler_46() {
      namaPenulisBuku = this.value;
      $$invalidate(47, namaPenulisBuku);
    }
    function input_input_handler_47() {
      PenerbitBuku = this.value;
      $$invalidate(48, PenerbitBuku);
    }
    function input_input_handler_48() {
      Isbn = this.value;
      $$invalidate(49, Isbn);
    }
    function modal7_show_binding(value) {
      showModalPenulisanBuku = value;
      $$invalidate(75, showModalPenulisanBuku);
    }
    function input_input_handler_49() {
      tahunHKI = to_number(this.value);
      $$invalidate(50, tahunHKI);
    }
    function input_input_handler_50() {
      JudulHKI = this.value;
      $$invalidate(51, JudulHKI);
    }
    function input_input_handler_51() {
      namaPenulisHKI = this.value;
      $$invalidate(52, namaPenulisHKI);
    }
    function input_input_handler_52() {
      jenisHKI = this.value;
      $$invalidate(53, jenisHKI);
    }
    function input_input_handler_53() {
      noHKI = this.value;
      $$invalidate(54, noHKI);
    }
    function modal8_show_binding(value) {
      showModalHKI = value;
      $$invalidate(76, showModalHKI);
    }
    function modalerror_show_binding(value) {
      showModalErrorForm = value;
      $$invalidate(77, showModalErrorForm);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(78, showModalChecked);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(115, params = $$props2.params);
    };
    return [
      vmataKuliah,
      error,
      dataRPS1,
      dataRPS2,
      dataRPS3,
      nama_pertiS1,
      bidang_ilmuS1,
      tahunMasukS1,
      tahunLulusS1,
      judulSkripsi,
      nama_pertiS2,
      bidang_ilmuS2,
      tahunMasukS2,
      tahunLulusS2,
      judulTesis,
      nama_pertiS3,
      bidang_ilmuS3,
      tahunMasukS3,
      tahunLulusS3,
      judulDisertasi,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      biayaPP,
      tahunPenelitian,
      judulPenelitian,
      rolePenelitian,
      sumberDanaPenelitian,
      biayaPengmas,
      tahunPengmas,
      judulPengmas,
      rolePengmas,
      sumberDanaPengmas,
      tahunDiseminasi,
      judulDiseminasi,
      namaPemakalahDiseminasi,
      namaPertemuanDiseminasi,
      tahunPublikasi,
      judulPublikasi,
      namaPenulis,
      namaJurnal,
      impactFactor,
      tahunBuku,
      JudulBuku,
      namaPenulisBuku,
      PenerbitBuku,
      Isbn,
      tahunHKI,
      JudulHKI,
      namaPenulisHKI,
      jenisHKI,
      noHKI,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email2,
      mataKuliah,
      showModalRiwayatPendidikanS1,
      showModalRiwayatPendidikanS2,
      showModalRiwayatPendidikanS3,
      showModalPenelitian,
      showModalPengmas,
      showModalDiseminasi,
      showModalPublikasi,
      showModalPenulisanBuku,
      showModalHKI,
      showModalErrorForm,
      showModalChecked,
      tab1,
      tab2,
      tab3,
      modalInputRiwayatPendidikanS1,
      modalInputRiwayatPendidikanS2,
      modalInputRiwayatPendidikanS3,
      clickModalPenelitian,
      clickModalPengmas,
      clickModalDiseminasi,
      clickModalPublikasi,
      clickModalPenulisanBuku,
      clickModalHKI,
      simpanRP_S1,
      simpanRP_S2,
      simpanRP_S3,
      simpanPP,
      simpanPM,
      simpanPD,
      simpanPPublikasi,
      simpanPPB,
      simpanPHKI,
      simpanIdentitas,
      clicktab1,
      clicktab2,
      clicktab3,
      addMatkul,
      delrowRPS1,
      delrowRPS2,
      delrowRPS3,
      delrowPP,
      delrowPM,
      delrowPD,
      delrowPPub,
      delrowPPB,
      delrowPHKI,
      deleteMatkul,
      params,
      input_input_handler,
      select_change_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      input_input_handler_6,
      input_input_handler_7,
      input_input_handler_8,
      input_input_handler_9,
      input_input_handler_10,
      input_input_handler_11,
      input_input_handler_12,
      input_input_handler_13,
      input_input_handler_14,
      input_input_handler_15,
      input_input_handler_16,
      modal0_show_binding,
      input_input_handler_17,
      input_input_handler_18,
      input_input_handler_19,
      input_input_handler_20,
      input_input_handler_21,
      modal1_show_binding,
      input_input_handler_22,
      input_input_handler_23,
      input_input_handler_24,
      input_input_handler_25,
      input_input_handler_26,
      modal2_show_binding,
      input_input_handler_27,
      input_input_handler_28,
      select_change_handler_1,
      input_input_handler_29,
      input_input_handler_30,
      keyup_handler,
      modal3_show_binding,
      input_input_handler_31,
      input_input_handler_32,
      select_change_handler_2,
      input_input_handler_33,
      input_input_handler_34,
      keyup_handler_1,
      modal4_show_binding,
      input_input_handler_35,
      input_input_handler_36,
      input_input_handler_37,
      input_input_handler_38,
      modal5_show_binding,
      input_input_handler_39,
      input_input_handler_40,
      input_input_handler_41,
      input_input_handler_42,
      input_input_handler_43,
      modal6_show_binding,
      input_input_handler_44,
      input_input_handler_45,
      input_input_handler_46,
      input_input_handler_47,
      input_input_handler_48,
      modal7_show_binding,
      input_input_handler_49,
      input_input_handler_50,
      input_input_handler_51,
      input_input_handler_52,
      input_input_handler_53,
      modal8_show_binding,
      modalerror_show_binding,
      modalchecked_show_binding
    ];
  }
  var Profile = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance22, create_fragment28, safe_not_equal, { params: 115 }, null, [-1, -1, -1, -1, -1, -1, -1, -1]);
    }
  };
  var profile_default = Profile;

  // src/pages/admin/template.svelte
  init_define_process();
  function create_default_slot_311(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div4;
    let div0;
    let button0;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let input;
    let t6;
    let span2;
    let icon1;
    let t7;
    let div6;
    let table;
    let thead;
    let t11;
    let tbody;
    let tr1;
    let td0;
    let t13;
    let td1;
    let button1;
    let t15;
    let td2;
    let div5;
    let p0;
    let button2;
    let span3;
    let icon2;
    let t16;
    let p1;
    let button3;
    let span4;
    let icon3;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "accountAdd", src: add } });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Template";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div4 = element("div");
        div0 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah Template</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        input = element("input");
        t6 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t7 = space();
        div6 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Nama Template</th> <th class="is-narrow"></th> <th class="is-narrow"></th></tr>`;
        t11 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Contoh Template Penelitian Internal";
        t13 = space();
        td1 = element("td");
        button1 = element("button");
        button1.textContent = "Download";
        t15 = space();
        td2 = element("td");
        div5 = element("div");
        p0 = element("p");
        button2 = element("button");
        span3 = element("span");
        create_component(icon2.$$.fragment);
        t16 = space();
        p1 = element("p");
        button3 = element("button");
        span4 = element("span");
        create_component(icon3.$$.fragment);
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div0, "class", "column");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span2, "class", "icon is-left");
        attr(div1, "class", "control has-icons-left");
        attr(div2, "class", "field");
        attr(div3, "class", "column");
        attr(div4, "class", "columns");
        attr(button1, "class", "button is-link button is-small");
        attr(span3, "class", "icon");
        attr(button2, "class", "button is-danger is-outlined is-small");
        attr(p0, "class", "control");
        attr(span4, "class", "icon");
        attr(button3, "class", "button is-link is-outlined is-small");
        attr(p1, "class", "control");
        attr(div5, "class", "field is-grouped");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div6, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div4, anchor);
        append(div4, div0);
        append(div0, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t3);
        append(button0, span1);
        append(div4, t5);
        append(div4, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, input);
        append(div1, t6);
        append(div1, span2);
        mount_component(icon1, span2, null);
        insert(target, t7, anchor);
        insert(target, div6, anchor);
        append(div6, table);
        append(table, thead);
        append(table, t11);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t13);
        append(tr1, td1);
        append(td1, button1);
        append(tr1, t15);
        append(tr1, td2);
        append(td2, div5);
        append(div5, p0);
        append(p0, button2);
        append(button2, span3);
        mount_component(icon2, span3, null);
        append(div5, t16);
        append(div5, p1);
        append(p1, button3);
        append(button3, span4);
        mount_component(icon3, span4, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(button0, "click", simpanTemplate),
            listen(button1, "click", handleDownloadTemplate)
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div4);
          detach(t7);
          detach(div6);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_211(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaTemplate*/
          ctx[0]
        );
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[3]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*namaTemplate*/
        1 && input.value !== /*namaTemplate*/
        ctx2[0]) {
          set_input_value(
            input,
            /*namaTemplate*/
            ctx2[0]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_113(ctx) {
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "accept", ".xlsx");
        attr(input, "type", "file");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "change",
            /*change_handler*/
            ctx[4]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(input);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot9(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let hr;
    let t2;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Template",
        $$slots: { default: [create_default_slot_211] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "File Template",
        $$slots: { default: [create_default_slot_113] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        hr = element("hr");
        t2 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", simpanTemplate);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty & /*$$scope, namaTemplate*/
        129) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty & /*$$scope, file*/
        130) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot2(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Tambah Template";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_fragment29(ctx) {
    let article2;
    let t;
    let modal;
    let updating_show;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_311] },
        $$scope: { ctx }
      }
    });
    function modal_show_binding(value) {
      ctx[5](value);
    }
    let modal_props = {
      $$slots: {
        header: [create_header_slot2],
        default: [create_default_slot9]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalTambahTemplate*/
      ctx[2] !== void 0
    ) {
      modal_props.show = /*showModalTambahTemplate*/
      ctx[2];
    }
    modal = new Modal_default({ props: modal_props });
    binding_callbacks.push(() => bind(modal, "show", modal_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t = space();
        create_component(modal.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t, anchor);
        mount_component(modal, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        128) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modal_changes = {};
        if (dirty & /*$$scope, file, namaTemplate*/
        131) {
          modal_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalTambahTemplate*/
        4) {
          updating_show = true;
          modal_changes.show = /*showModalTambahTemplate*/
          ctx2[2];
          add_flush_callback(() => updating_show = false);
        }
        modal.$set(modal_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modal.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modal.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(article2, detaching);
        destroy_component(modal, detaching);
      }
    };
  }
  function simpanTemplate() {
  }
  function handleDownloadTemplate() {
  }
  function instance23($$self, $$props, $$invalidate) {
    let namaTemplate;
    let file;
    let showModalTambahTemplate = false;
    function clickModalTambahTemplate() {
      $$invalidate(2, showModalTambahTemplate = true);
    }
    function input_input_handler() {
      namaTemplate = this.value;
      $$invalidate(0, namaTemplate);
    }
    const change_handler = (e) => $$invalidate(1, file = e.target.files[0]);
    function modal_show_binding(value) {
      showModalTambahTemplate = value;
      $$invalidate(2, showModalTambahTemplate);
    }
    return [
      namaTemplate,
      file,
      showModalTambahTemplate,
      input_input_handler,
      change_handler,
      modal_show_binding
    ];
  }
  var Template = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance23, create_fragment29, safe_not_equal, {});
    }
  };
  var template_default = Template;

  // src/pages/admin/usersmanagement.svelte
  init_define_process();
  function get_each_context9(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[18] = list[i];
    child_ctx[20] = i;
    return child_ctx;
  }
  function create_else_block7(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Anda tidak memiliki hak akses halaman ini!";
        attr(h4, "class", "title is-4");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block12(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*items*/
      ctx[0] && create_if_block_116(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_116(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_116(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div7;
    let div0;
    let button;
    let span0;
    let icon0;
    let t3;
    let span1;
    let t5;
    let div3;
    let div2;
    let div1;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let option5;
    let option6;
    let t13;
    let div6;
    let div5;
    let div4;
    let input;
    let t14;
    let span2;
    let icon1;
    let t15;
    let div9;
    let div8;
    let table;
    let thead;
    let t23;
    let tbody;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "accountAdd", src: accountAdd }
    });
    icon1 = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let each_value = ensure_array_like(
      /*items*/
      ctx[0].filter(
        /*func*/
        ctx[11]
      )
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
    }
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "User Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div7 = element("div");
        div0 = element("div");
        button = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Create user</a>`;
        t5 = space();
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Role";
        option1 = element("option");
        option1.textContent = "Admin";
        option2 = element("option");
        option2.textContent = "Dosen";
        option3 = element("option");
        option3.textContent = "Reviewer";
        option4 = element("option");
        option4.textContent = "K. Departemen";
        option5 = element("option");
        option5.textContent = "K. LPPM";
        option6 = element("option");
        option6.textContent = "K. Pusat Kajian";
        t13 = space();
        div6 = element("div");
        div5 = element("div");
        div4 = element("div");
        input = element("input");
        t14 = space();
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t15 = space();
        div9 = element("div");
        div8 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th>Username</th> <th style="text-align: center">Email</th> <th style="text-align: center" class="is-narrow">Role</th> <th class="is-narrow">Active</th></tr>`;
        t23 = space();
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info is-fullwidth");
        attr(div0, "class", "column is-narrow");
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "9";
        set_input_value(option1, option1.__value);
        option2.__value = "0";
        set_input_value(option2, option2.__value);
        option3.__value = "10";
        set_input_value(option3, option3.__value);
        option4.__value = "11";
        set_input_value(option4, option4.__value);
        option5.__value = "12";
        set_input_value(option5, option5.__value);
        option6.__value = "13";
        set_input_value(option6, option6.__value);
        attr(select, "class", "svelte-1amf2xn");
        if (
          /*filterRole*/
          ctx[2] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[9].call(select)
          ));
        attr(div1, "class", "select is-fullwidth");
        attr(div2, "class", "field");
        attr(div3, "class", "column is-narrow");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search username");
        attr(span2, "class", "icon is-left");
        attr(div4, "class", "control has-icons-left");
        attr(div5, "class", "field");
        attr(div6, "class", "column");
        attr(div7, "class", "columns");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div8, "class", "child svelte-1amf2xn");
        attr(div9, "class", "box parent svelte-1amf2xn");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div7, anchor);
        append(div7, div0);
        append(div0, button);
        append(button, span0);
        mount_component(icon0, span0, null);
        append(button, t3);
        append(button, span1);
        append(div7, t5);
        append(div7, div3);
        append(div3, div2);
        append(div2, div1);
        append(div1, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        append(select, option5);
        append(select, option6);
        select_option(
          select,
          /*filterRole*/
          ctx[2],
          true
        );
        append(div7, t13);
        append(div7, div6);
        append(div6, div5);
        append(div5, div4);
        append(div4, input);
        set_input_value(
          input,
          /*filterUsername*/
          ctx[1]
        );
        append(div4, t14);
        append(div4, span2);
        mount_component(icon1, span2, null);
        insert(target, t15, anchor);
        insert(target, div9, anchor);
        append(div9, div8);
        append(div8, table);
        append(table, thead);
        append(table, t23);
        append(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*addUser*/
              ctx[6]
            ),
            listen(
              select,
              "change",
              /*select_change_handler*/
              ctx[9]
            ),
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[10]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filterRole*/
        4) {
          select_option(
            select,
            /*filterRole*/
            ctx2[2]
          );
        }
        if (dirty & /*filterUsername*/
        2 && input.value !== /*filterUsername*/
        ctx2[1]) {
          set_input_value(
            input,
            /*filterUsername*/
            ctx2[1]
          );
        }
        if (dirty & /*items, filterUsername, filterRole, Number, handleActive, handleGroup*/
        55) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0].filter(
              /*func*/
              ctx2[11]
            )
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context9(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block9(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div7);
          detach(t15);
          detach(div9);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_each(each_blocks, detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_each_block9(ctx) {
    let tr;
    let td0;
    let a;
    let t0_value = (
      /*item*/
      ctx[18].username + ""
    );
    let t0;
    let a_href_value;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[18].email + ""
    );
    let t2;
    let t3;
    let td2;
    let div;
    let select;
    let option0;
    let t4;
    let option0_selected_value;
    let option1;
    let t5;
    let option1_selected_value;
    let option2;
    let t6;
    let option2_selected_value;
    let option3;
    let t7;
    let option3_selected_value;
    let option4;
    let t8;
    let option4_selected_value;
    let option5;
    let t9;
    let option5_selected_value;
    let select_uid_value;
    let t10;
    let td3;
    let t11_value = (
      /*item*/
      ctx[18].active ? "\u2714" : "\u2718"
    );
    let t11;
    let td3_uid_value;
    let td3_role_value;
    let t12;
    let mounted;
    let dispose;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        a = element("a");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        div = element("div");
        select = element("select");
        option0 = element("option");
        t4 = text("Admin");
        option1 = element("option");
        t5 = text("Dosen");
        option2 = element("option");
        t6 = text("Reviewer");
        option3 = element("option");
        t7 = text("K. Departemen");
        option4 = element("option");
        t8 = text("K. LPPM");
        option5 = element("option");
        t9 = text("K. Pusat Kajian");
        t10 = space();
        td3 = element("td");
        t11 = text(t11_value);
        t12 = space();
        attr(a, "href", a_href_value = "/admin/profile/" + /*item*/
        ctx[18].id);
        attr(td1, "fixed", "");
        attr(td1, "class", "svelte-1amf2xn");
        option0.__value = "9";
        set_input_value(option0, option0.__value);
        option0.selected = option0_selected_value = /*item*/
        ctx[18].role === 9;
        option1.__value = "0";
        set_input_value(option1, option1.__value);
        option1.selected = option1_selected_value = /*item*/
        ctx[18].role === 0;
        option2.__value = "10";
        set_input_value(option2, option2.__value);
        option2.selected = option2_selected_value = /*item*/
        ctx[18].role === 10;
        option3.__value = "11";
        set_input_value(option3, option3.__value);
        option3.selected = option3_selected_value = /*item*/
        ctx[18].role === 11;
        option4.__value = "12";
        set_input_value(option4, option4.__value);
        option4.selected = option4_selected_value = /*item*/
        ctx[18].role === 12;
        option5.__value = "13";
        set_input_value(option5, option5.__value);
        option5.selected = option5_selected_value = /*item*/
        ctx[18].role === 13;
        attr(select, "uid", select_uid_value = /*idx*/
        ctx[20]);
        attr(select, "class", "svelte-1amf2xn");
        attr(div, "class", "select");
        attr(td2, "fixed", "");
        attr(td2, "class", "group svelte-1amf2xn");
        attr(td3, "fixed", "");
        attr(td3, "uid", td3_uid_value = /*idx*/
        ctx[20]);
        attr(td3, "role", td3_role_value = /*item*/
        ctx[18].role);
        attr(td3, "class", "active svelte-1amf2xn");
        toggle_class(td3, "red", !/*item*/
        ctx[18].active);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, a);
        append(a, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, div);
        append(div, select);
        append(select, option0);
        append(option0, t4);
        append(select, option1);
        append(option1, t5);
        append(select, option2);
        append(option2, t6);
        append(select, option3);
        append(option3, t7);
        append(select, option4);
        append(option4, t8);
        append(select, option5);
        append(option5, t9);
        append(tr, t10);
        append(tr, td3);
        append(td3, t11);
        append(tr, t12);
        if (!mounted) {
          dispose = [
            listen(
              select,
              "change",
              /*handleGroup*/
              ctx[5]
            ),
            listen(
              td3,
              "click",
              /*handleActive*/
              ctx[4]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*items, filterUsername, filterRole*/
        7 && t0_value !== (t0_value = /*item*/
        ctx2[18].username + ""))
          set_data(t0, t0_value);
        if (dirty & /*items, filterUsername, filterRole*/
        7 && a_href_value !== (a_href_value = "/admin/profile/" + /*item*/
        ctx2[18].id)) {
          attr(a, "href", a_href_value);
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && t2_value !== (t2_value = /*item*/
        ctx2[18].email + ""))
          set_data(t2, t2_value);
        if (dirty & /*items, filterUsername, filterRole*/
        7 && option0_selected_value !== (option0_selected_value = /*item*/
        ctx2[18].role === 9)) {
          option0.selected = option0_selected_value;
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && option1_selected_value !== (option1_selected_value = /*item*/
        ctx2[18].role === 0)) {
          option1.selected = option1_selected_value;
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && option2_selected_value !== (option2_selected_value = /*item*/
        ctx2[18].role === 10)) {
          option2.selected = option2_selected_value;
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && option3_selected_value !== (option3_selected_value = /*item*/
        ctx2[18].role === 11)) {
          option3.selected = option3_selected_value;
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && option4_selected_value !== (option4_selected_value = /*item*/
        ctx2[18].role === 12)) {
          option4.selected = option4_selected_value;
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && option5_selected_value !== (option5_selected_value = /*item*/
        ctx2[18].role === 13)) {
          option5.selected = option5_selected_value;
        }
        if (dirty & /*items, filterUsername, filterRole*/
        7 && t11_value !== (t11_value = /*item*/
        ctx2[18].active ? "\u2714" : "\u2718"))
          set_data(t11, t11_value);
        if (dirty & /*items, filterUsername, filterRole*/
        7 && td3_role_value !== (td3_role_value = /*item*/
        ctx2[18].role)) {
          attr(td3, "role", td3_role_value);
        }
        if (dirty & /*items, filterUsername, filterRole, Number*/
        7) {
          toggle_class(td3, "red", !/*item*/
          ctx2[18].active);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot10(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block12, create_else_block7];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*roleFromToken*/
        ctx2[3] === "admin"
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_fragment30(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot10] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items, filterUsername, filterRole*/
        2097159) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function instance24($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(12, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(13, $apiURL = $$value));
    let { params } = $$props;
    let profile2;
    let items;
    let filterUsername = "";
    let filterRole = "";
    const accessToken = localStorage.getItem("token");
    const roleFromToken = localStorage.getItem("role");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    async function populateTable() {
      const response = await fetch($apiURL + "/user", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.status === 200) {
          $$invalidate(0, items = result.dbData);
        }
      }
    }
    async function handleActive(ev) {
      const value = ev.target.getAttribute("role");
      const id = ev.target.getAttribute("uid");
      const payload2 = {
        id: items[id].id,
        role: Number(value),
        active: !items[id].active
      };
      const response = await fetch($apiURL + "/user", {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload2)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          populateTable();
        } else {
          console.log(response);
        }
      }
    }
    async function handleGroup(ev) {
      const value = ev.target.value;
      const id = ev.target.getAttribute("uid");
      const payload2 = {
        id: items[id].id,
        role: Number(value),
        active: items[id].active
      };
      const response = await fetch($apiURL + "/user", {
        method: "PATCH",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload2)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          populateTable();
        } else {
          console.log(response);
        }
      }
    }
    async function getPage() {
      if (params["1"] === "profile") {
        let id = params["2"];
        const response = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            if (!result.length)
              return;
            $$invalidate(8, profile2 = []);
            for (const [field, value] of Object.entries(result[0])) {
              profile2.push({ field, value });
            }
          } else {
            data = null;
          }
        }
      }
    }
    function addUser() {
      $route("/admin/createuser");
    }
    function select_change_handler() {
      filterRole = select_value(this);
      $$invalidate(2, filterRole);
    }
    function input_input_handler() {
      filterUsername = this.value;
      $$invalidate(1, filterUsername);
    }
    const func = (item) => item.username.toLowerCase().includes(filterUsername.toLowerCase()) && (filterRole === "" || item.role === Number(filterRole));
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(7, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      128) {
        $:
          params, getPage();
      }
      if ($$self.$$.dirty & /*profile*/
      256) {
        $:
          profile2, profile2 ? $$invalidate(0, items = null) : populateTable();
      }
    };
    return [
      items,
      filterUsername,
      filterRole,
      roleFromToken,
      handleActive,
      handleGroup,
      addUser,
      params,
      profile2,
      select_change_handler,
      input_input_handler,
      func
    ];
  }
  var Usersmanagement = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance24, create_fragment30, safe_not_equal, { params: 7 });
    }
  };
  var usersmanagement_default = Usersmanagement;

  // src/modules/E404.svelte
  init_define_process();
  function create_fragment31(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<p class="title is-2">404</p> <p class="subtitle is-5">PAGE NOT FOUND</p>`;
        attr(article2, "class", "svelte-w5hzam");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  var E404 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, null, create_fragment31, safe_not_equal, {});
    }
  };
  var E404_default = E404;

  // src/pages/admin/Index.svelte
  function create_else_block8(ctx) {
    let e404;
    let current;
    e404 = new E404_default({});
    return {
      c() {
        create_component(e404.$$.fragment);
      },
      m(target, anchor) {
        mount_component(e404, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(e404.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(e404.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(e404, detaching);
      }
    };
  }
  function create_if_block_117(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        2 && switch_value !== (switch_value = /*cmp*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block13(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = home_default;
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = home_default)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_fragment32(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block13, create_if_block_117, create_else_block8];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (dirty & /*params*/
      1)
        show_if = null;
      if (show_if == null)
        show_if = !!(Object.keys(
          /*params*/
          ctx2[0]
        ).length === 0);
      if (show_if)
        return 0;
      if (
        /*cmp*/
        ctx2[1]
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance25($$self, $$props, $$invalidate) {
    let { params = {} } = $$props;
    let cmp;
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      1) {
        $:
          params, $$invalidate(1, cmp = admin_exports[params["0"]] || null);
      }
    };
    return [params, cmp];
  }
  var Index2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance25, create_fragment32, safe_not_equal, { params: 0 });
    }
  };
  var Index_default2 = Index2;

  // src/pages/auth/Index.svelte
  init_define_process();
  var pages = __toESM(require_auth());
  function create_else_block9(ctx) {
    let e404;
    let current;
    e404 = new E404_default({});
    return {
      c() {
        create_component(e404.$$.fragment);
      },
      m(target, anchor) {
        mount_component(e404, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(e404.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(e404.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(e404, detaching);
      }
    };
  }
  function create_if_block_118(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        2 && switch_value !== (switch_value = /*cmp*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block14(ctx) {
    let article2;
    return {
      c() {
        article2 = element("article");
        article2.innerHTML = `<h1>Auth Google</h1>`;
      },
      m(target, anchor) {
        insert(target, article2, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
      }
    };
  }
  function create_fragment33(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block14, create_if_block_118, create_else_block9];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (dirty & /*params*/
      1)
        show_if = null;
      if (show_if == null)
        show_if = !!(Object.keys(
          /*params*/
          ctx2[0]
        ).length === 0);
      if (show_if)
        return 0;
      if (
        /*cmp*/
        ctx2[1]
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance26($$self, $$props, $$invalidate) {
    let $route;
    let $isUsername;
    let $isLogin;
    component_subscribe($$self, route, ($$value) => $$invalidate(2, $route = $$value));
    component_subscribe($$self, isUsername, ($$value) => $$invalidate(3, $isUsername = $$value));
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(4, $isLogin = $$value));
    let { params = {} } = $$props;
    const token = params.token || null;
    const username2 = params.username;
    if (token) {
      set_store_value(isLogin, $isLogin = true, $isLogin);
      set_store_value(isUsername, $isUsername = username2, $isUsername);
      localStorage.setItem("id", params.id);
      localStorage.setItem("username", params.username);
      localStorage.setItem("role", params.role);
      localStorage.setItem("token", params.token);
      let role = params.role;
      if (role === "admin")
        $route("/admin");
      else
        $route("/dosen");
    } else {
      $route("/login");
    }
    let cmp;
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      1) {
        $:
          params, $$invalidate(1, cmp = pages[params["0"]] || null);
      }
    };
    return [params, cmp];
  }
  var Index3 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance26, create_fragment33, safe_not_equal, { params: 0 });
    }
  };
  var Index_default3 = Index3;

  // src/pages/dosen/Index.svelte
  init_define_process();

  // src/pages/dosen/index.js
  var dosen_exports = {};
  __export(dosen_exports, {
    approvalmanagement: () => approvalmanagement_default,
    detailapproval: () => detailapproval_default,
    detailppm: () => detailppm_default2,
    home: () => home_default2,
    pendaftaran: () => pendaftaran_default,
    pendaftaranproposal: () => pendaftaranproposal_default,
    ppmmanagement: () => ppmmanagement_default2,
    profile: () => profile_default2,
    proposalhibaheksternal: () => proposalhibaheksternal_default,
    proposalhibahinternal: () => proposalhibahinternal_default,
    proposalmandiri: () => proposalmandiri_default,
    select: () => select_default,
    testform: () => testform_default
  });
  init_define_process();

  // src/pages/dosen/approvalmanagement.svelte
  init_define_process();
  function get_each_context10(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[21] = list[i];
    return child_ctx;
  }
  function get_each_context_15(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[21] = list[i];
    return child_ctx;
  }
  function get_each_context_23(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[21] = list[i];
    return child_ctx;
  }
  function create_if_block15(ctx) {
    let div1;
    let div0;
    let table;
    let thead;
    let t9;
    let tbody;
    let t10;
    let t11;
    let current;
    let if_block0 = (
      /*role*/
      (ctx[5] === "K.PusatKajian" || /*role*/
      ctx[5] === "K.LPPM") && create_if_block_513(ctx)
    );
    let if_block1 = (
      /*role*/
      ctx[5] === "reviewer" && create_if_block_315(ctx)
    );
    let if_block2 = (
      /*role*/
      ctx[5] === "K.Departemen" && create_if_block_119(ctx)
    );
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t9 = space();
        tbody = element("tbody");
        if (if_block0)
          if_block0.c();
        t10 = space();
        if (if_block1)
          if_block1.c();
        t11 = space();
        if (if_block2)
          if_block2.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div0, "class", "child svelte-xyvxfs");
        attr(div1, "class", "box parent svelte-xyvxfs");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, table);
        append(table, thead);
        append(table, t9);
        append(table, tbody);
        if (if_block0)
          if_block0.m(tbody, null);
        append(tbody, t10);
        if (if_block1)
          if_block1.m(tbody, null);
        append(tbody, t11);
        if (if_block2)
          if_block2.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*role*/
          ctx2[5] === "K.PusatKajian" || /*role*/
          ctx2[5] === "K.LPPM"
        )
          if_block0.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[5] === "reviewer"
        )
          if_block1.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[5] === "K.Departemen"
        )
          if_block2.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
      }
    };
  }
  function create_if_block_513(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*items*/
      ctx[0].filter(
        /*func*/
        ctx[10]
      )
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_23(get_each_context_23(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, detail*/
        79) {
          each_value_2 = ensure_array_like(
            /*items*/
            ctx2[0].filter(
              /*func*/
              ctx2[10]
            )
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_23(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_23(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_613(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[21].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[21].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[21].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({
      props: {
        code: (
          /*item*/
          ctx[21].status
        ),
        jenisSkema: (
          /*item*/
          ctx[21].jenis_skema
        )
      }
    });
    icon = new Icon_default({ props: { id: "info", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-xyvxfs");
        attr(td1, "class", "kegiatan svelte-xyvxfs");
        attr(td2, "class", "skema svelte-xyvxfs");
        attr(td3, "class", "status svelte-xyvxfs");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[21].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[21].id);
        attr(td4, "class", "review svelte-xyvxfs");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[6]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15) && t0_value !== (t0_value = /*item*/
        ctx2[21].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15) && t2_value !== (t2_value = /*item*/
        ctx2[21].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15) && t4_value !== (t4_value = /*item*/
        ctx2[21].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15)
          status_changes.code = /*item*/
          ctx2[21].status;
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15)
          status_changes.jenisSkema = /*item*/
          ctx2[21].jenis_skema;
        status.$set(status_changes);
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[21].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        15 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[21].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_23(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*item*/
      ctx[21].status > 4 && /*item*/
      ctx[21].status !== 7 && /*item*/
      ctx[21].status !== 12 && create_if_block_613(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*item*/
          ctx2[21].status > 4 && /*item*/
          ctx2[21].status !== 7 && /*item*/
          ctx2[21].status !== 12
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
            15) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_613(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_315(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*items*/
      ctx[0].filter(
        /*func_1*/
        ctx[11]
      )
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_15(get_each_context_15(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, filterJudul, filterJenisKegiatan, detail, skemaInternal*/
        87) {
          each_value_1 = ensure_array_like(
            /*items*/
            ctx2[0].filter(
              /*func_1*/
              ctx2[11]
            )
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_15(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_15(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_413(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[21].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[21].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[21].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({
      props: {
        code: (
          /*item*/
          ctx[21].status
        ),
        jenisSkema: (
          /*item*/
          ctx[21].jenis_skema
        )
      }
    });
    icon = new Icon_default({ props: { id: "orang", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-xyvxfs");
        attr(td1, "class", "kegiatan svelte-xyvxfs");
        attr(td2, "class", "skema svelte-xyvxfs");
        attr(td3, "class", "status svelte-xyvxfs");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[21].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[21].id);
        attr(td4, "class", "review svelte-xyvxfs");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[6]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7) && t0_value !== (t0_value = /*item*/
        ctx2[21].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7) && t2_value !== (t2_value = /*item*/
        ctx2[21].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7) && t4_value !== (t4_value = /*item*/
        ctx2[21].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items, filterJudul, filterJenisKegiatan*/
        7)
          status_changes.code = /*item*/
          ctx2[21].status;
        if (dirty & /*items, filterJudul, filterJenisKegiatan*/
        7)
          status_changes.jenisSkema = /*item*/
          ctx2[21].jenis_skema;
        status.$set(status_changes);
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[21].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[21].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_15(ctx) {
    let show_if = (
      /*skemaInternal*/
      ctx[4].includes(
        /*item*/
        ctx[21].jenis_skema
      ) && /*item*/
      ctx[21].status === 6
    );
    let if_block_anchor;
    let current;
    let if_block = show_if && create_if_block_413(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, filterJudul, filterJenisKegiatan*/
        7)
          show_if = /*skemaInternal*/
          ctx2[4].includes(
            /*item*/
            ctx2[21].jenis_skema
          ) && /*item*/
          ctx2[21].status === 6;
        if (show_if) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items, filterJudul, filterJenisKegiatan*/
            7) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_413(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_119(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*items*/
      ctx[0].filter(
        /*func_2*/
        ctx[12]
      )
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block10(get_each_context10(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, filterJudul, filterJenisKegiatan, detail*/
        71) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0].filter(
              /*func_2*/
              ctx2[12]
            )
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context10(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block10(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_216(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[21].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p0;
    let t2_value = (
      /*item*/
      ctx[21].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p1;
    let t4_value = (
      /*item*/
      ctx[21].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({
      props: {
        code: (
          /*item*/
          ctx[21].status
        ),
        jenisSkema: (
          /*item*/
          ctx[21].jenis_skema
        )
      }
    });
    icon = new Icon_default({ props: { id: "orang", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p0 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p1 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-xyvxfs");
        attr(td1, "class", "kegiatan svelte-xyvxfs");
        attr(td2, "class", "skema svelte-xyvxfs");
        attr(td3, "class", "status svelte-xyvxfs");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[21].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[21].id);
        attr(td4, "class", "review svelte-xyvxfs");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p0);
        append(p0, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p1);
        append(p1, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*detail*/
            ctx[6]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7) && t0_value !== (t0_value = /*item*/
        ctx2[21].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7) && t2_value !== (t2_value = /*item*/
        ctx2[21].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7) && t4_value !== (t4_value = /*item*/
        ctx2[21].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items, filterJudul, filterJenisKegiatan*/
        7)
          status_changes.code = /*item*/
          ctx2[21].status;
        if (dirty & /*items, filterJudul, filterJenisKegiatan*/
        7)
          status_changes.jenisSkema = /*item*/
          ctx2[21].jenis_skema;
        status.$set(status_changes);
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[21].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan*/
        7 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[21].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block10(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*item*/
      ctx[21].status === 4 && create_if_block_216(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*item*/
          ctx2[21].status === 4
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items, filterJudul, filterJenisKegiatan*/
            7) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_216(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_default_slot11(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div9;
    let div2;
    let div1;
    let div0;
    let select0;
    let option0;
    let option1;
    let option2;
    let t6;
    let div5;
    let div4;
    let div3;
    let select1;
    let option3;
    let optgroup0;
    let option4;
    let option5;
    let option6;
    let option7;
    let option8;
    let optgroup1;
    let option9;
    let option10;
    let option11;
    let option12;
    let t17;
    let div8;
    let div7;
    let div6;
    let input;
    let t18;
    let span;
    let icon;
    let t19;
    let if_block_anchor;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let if_block = (
      /*items*/
      ctx[0] && create_if_block15(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Approval Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div9 = element("div");
        div2 = element("div");
        div1 = element("div");
        div0 = element("div");
        select0 = element("select");
        option0 = element("option");
        option0.textContent = "Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t6 = space();
        div5 = element("div");
        div4 = element("div");
        div3 = element("div");
        select1 = element("select");
        option3 = element("option");
        option3.textContent = "Jenis Skema";
        optgroup0 = element("optgroup");
        option4 = element("option");
        option4.textContent = "Riset Kelompok Keahlian";
        option5 = element("option");
        option5.textContent = "Riset Terapan";
        option6 = element("option");
        option6.textContent = "Riset Kerjasama";
        option7 = element("option");
        option7.textContent = "Riset Eksternal";
        option8 = element("option");
        option8.textContent = "Riset Mandiri";
        optgroup1 = element("optgroup");
        option9 = element("option");
        option9.textContent = "Pengabdian Masyarakat Desa Binaan";
        option10 = element("option");
        option10.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option11 = element("option");
        option11.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option12 = element("option");
        option12.textContent = "Pengabdian Masyarakat Mandiri";
        t17 = space();
        div8 = element("div");
        div7 = element("div");
        div6 = element("div");
        input = element("input");
        t18 = space();
        span = element("span");
        create_component(icon.$$.fragment);
        t19 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(h2, "class", "title is-2");
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*filterJenisKegiatan*/
          ctx[2] === void 0
        )
          add_render_callback(() => (
            /*select0_change_handler*/
            ctx[7].call(select0)
          ));
        attr(div0, "class", "select is-fullwidth");
        attr(div1, "class", "field");
        attr(div2, "class", "column is-narrow");
        option3.__value = "";
        set_input_value(option3, option3.__value);
        option3.selected = true;
        option3.disabled = true;
        option3.hidden = true;
        option4.__value = "Riset Kelompok Keahlian";
        set_input_value(option4, option4.__value);
        option5.__value = "Riset Terapan";
        set_input_value(option5, option5.__value);
        option6.__value = "Riset Kerjasama";
        set_input_value(option6, option6.__value);
        option7.__value = "Riset Eksternal";
        set_input_value(option7, option7.__value);
        option8.__value = "Riset Mandiri";
        set_input_value(option8, option8.__value);
        attr(optgroup0, "label", "Penelitian");
        option9.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option9, option9.__value);
        option10.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option10, option10.__value);
        option11.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option11, option11.__value);
        option12.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option12, option12.__value);
        attr(optgroup1, "label", "Pengabdian Masyarakat");
        if (
          /*filterJenisSkema*/
          ctx[3] === void 0
        )
          add_render_callback(() => (
            /*select1_change_handler*/
            ctx[8].call(select1)
          ));
        attr(div3, "class", "select is-fullwidth");
        attr(div4, "class", "field");
        attr(div5, "class", "column is-narrow");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span, "class", "icon is-left");
        attr(div6, "class", "control has-icons-left");
        attr(div7, "class", "field");
        attr(div8, "class", "column");
        attr(div9, "class", "columns");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div9, anchor);
        append(div9, div2);
        append(div2, div1);
        append(div1, div0);
        append(div0, select0);
        append(select0, option0);
        append(select0, option1);
        append(select0, option2);
        select_option(
          select0,
          /*filterJenisKegiatan*/
          ctx[2],
          true
        );
        append(div9, t6);
        append(div9, div5);
        append(div5, div4);
        append(div4, div3);
        append(div3, select1);
        append(select1, option3);
        append(select1, optgroup0);
        append(optgroup0, option4);
        append(optgroup0, option5);
        append(optgroup0, option6);
        append(optgroup0, option7);
        append(optgroup0, option8);
        append(select1, optgroup1);
        append(optgroup1, option9);
        append(optgroup1, option10);
        append(optgroup1, option11);
        append(optgroup1, option12);
        select_option(
          select1,
          /*filterJenisSkema*/
          ctx[3],
          true
        );
        append(div9, t17);
        append(div9, div8);
        append(div8, div7);
        append(div7, div6);
        append(div6, input);
        set_input_value(
          input,
          /*filterJudul*/
          ctx[1]
        );
        append(div6, t18);
        append(div6, span);
        mount_component(icon, span, null);
        insert(target, t19, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              select0,
              "change",
              /*select0_change_handler*/
              ctx[7]
            ),
            listen(
              select1,
              "change",
              /*select1_change_handler*/
              ctx[8]
            ),
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[9]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filterJenisKegiatan*/
        4) {
          select_option(
            select0,
            /*filterJenisKegiatan*/
            ctx2[2]
          );
        }
        if (dirty & /*filterJenisSkema*/
        8) {
          select_option(
            select1,
            /*filterJenisSkema*/
            ctx2[3]
          );
        }
        if (dirty & /*filterJudul*/
        2 && input.value !== /*filterJudul*/
        ctx2[1]) {
          set_input_value(
            input,
            /*filterJudul*/
            ctx2[1]
          );
        }
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block15(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div9);
          detach(t19);
          detach(if_block_anchor);
        }
        destroy_component(icon);
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_fragment34(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot11] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        268435471) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function instance27($$self, $$props, $$invalidate) {
    let $route;
    let $apiURL;
    component_subscribe($$self, route, ($$value) => $$invalidate(13, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(14, $apiURL = $$value));
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    const skemaInternal = [
      "Riset Kelompok Keahlian",
      "Riset Terapan",
      "Riset Kerjasama",
      "Pengabdian Masyarakat Desa Binaan",
      "Pengabdian Masyarakat UMKM Binaan"
    ];
    const skemaEksternal = ["Riset Eksternal", "Pengabdian Masyarakat Hibah Eksternal"];
    const skemaMandiri = ["Riset Mandiri", "Pengabdian Masyarakat Mandiri"];
    const showPPMinKPKandKLPPM = [2, 7, 12];
    const id = localStorage.id;
    let role = localStorage.role;
    let items;
    let filterJudul = "";
    let filterJenisKegiatan = "";
    let filterJenisSkema = "";
    onMount(async () => {
      const response = await fetch($apiURL + "/approval/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(0, items = result.dbData);
        } else {
          console.log(response);
        }
      }
    });
    function detail2(ev) {
      let propId = ev.target.getAttribute("pid");
      $route("/dosen/detailapproval/" + propId);
    }
    function select0_change_handler() {
      filterJenisKegiatan = select_value(this);
      $$invalidate(2, filterJenisKegiatan);
    }
    function select1_change_handler() {
      filterJenisSkema = select_value(this);
      $$invalidate(3, filterJenisSkema);
    }
    function input_input_handler() {
      filterJudul = this.value;
      $$invalidate(1, filterJudul);
    }
    const func = (item) => item.judul.toLowerCase().includes(filterJudul.toLowerCase()) && (filterJenisKegiatan === "" || item.jenis_kegiatan === filterJenisKegiatan) && (filterJenisSkema === "" || item.jenis_skema === filterJenisSkema);
    const func_1 = (item) => item.judul.toLowerCase().includes(filterJudul.toLowerCase()) && (filterJenisKegiatan === "" || item.jenis_kegiatan === filterJenisKegiatan);
    const func_2 = (item) => item.judul.toLowerCase().includes(filterJudul.toLowerCase()) && (filterJenisKegiatan === "" || item.jenis_kegiatan === filterJenisKegiatan);
    return [
      items,
      filterJudul,
      filterJenisKegiatan,
      filterJenisSkema,
      skemaInternal,
      role,
      detail2,
      select0_change_handler,
      select1_change_handler,
      input_input_handler,
      func,
      func_1,
      func_2
    ];
  }
  var Approvalmanagement = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance27, create_fragment34, safe_not_equal, {});
    }
  };
  var approvalmanagement_default = Approvalmanagement;

  // src/pages/dosen/detailapproval.svelte
  init_define_process();
  function get_each_context11(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[91] = list[i];
    child_ctx[93] = i;
    return child_ctx;
  }
  function get_each_context_16(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[94] = list[i];
    return child_ctx;
  }
  function get_each_context_24(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[97] = list[i];
    return child_ctx;
  }
  function get_each_context_33(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[100] = list[i];
    return child_ctx;
  }
  function get_each_context_43(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[103] = list[i];
    return child_ctx;
  }
  function get_each_context_53(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[106] = list[i];
    return child_ctx;
  }
  function get_each_context_63(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[109] = list[i];
    return child_ctx;
  }
  function get_each_context_73(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[112] = list[i];
    return child_ctx;
  }
  function get_each_context_83(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[115] = list[i];
    return child_ctx;
  }
  function get_each_context_93(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[118] = list[i];
    return child_ctx;
  }
  function get_each_context_102(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[121] = list[i];
    return child_ctx;
  }
  function get_each_context_112(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[121] = list[i];
    return child_ctx;
  }
  function get_each_context_122(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[126] = list[i];
    return child_ctx;
  }
  function create_if_block16(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_411] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*biodataAnggota, isLoading, status, skPPMVisible, presentasiHasilPPM, presentasiVisible, jenisSkema, itemsCHP, error, catatanRevisiHasilPPM, hasilPPMVisible, statusPencairanDana, danaPPMVisible, skpVisible, itemsRCR, catatanRevisiProposal, CRPVisible, iPPVisible, anggotaTim, tanggalSelesai, tanggalMulai, biayaPenelitian, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, data*/
        2147483632 | dirty[1] & /*tab2, $penilaianFile, tab1*/
        7 | dirty[4] & /*$$scope*/
        32) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_if_block_135(ctx) {
    let div11;
    let div0;
    let fieldview0;
    let t0;
    let div1;
    let fieldview1;
    let t1;
    let div2;
    let fieldview2;
    let t2;
    let hr;
    let t3;
    let div3;
    let fieldview3;
    let t4;
    let fieldview4;
    let t5;
    let div4;
    let fieldview5;
    let t6;
    let fieldview6;
    let t7;
    let div5;
    let fieldview7;
    let t8;
    let fieldview8;
    let t9;
    let div6;
    let fieldview9;
    let t10;
    let fieldview10;
    let t11;
    let div9;
    let div8;
    let div7;
    let p0;
    let t13;
    let p1;
    let button;
    let t15;
    let show_if_3 = (
      /*skemaEksternal*/
      ctx[35].includes(
        /*jenisSkema*/
        ctx[19]
      )
    );
    let t16;
    let show_if_2 = (
      /*skemaInternal*/
      ctx[34].includes(
        /*jenisSkema*/
        ctx[19]
      )
    );
    let t17;
    let div10;
    let p2;
    let t19;
    let table;
    let thead;
    let t23;
    let tbody;
    let t24;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[34].includes(
        /*jenisSkema*/
        ctx[19]
      )
    );
    let t25;
    let t26;
    let show_if = (
      /*skemaInternal*/
      ctx[34].includes(
        /*jenisSkema*/
        ctx[19]
      ) && /*status*/
      ctx[26] >= 8 || /*skemaEksternal*/
      ctx[35].includes(
        /*jenisSkema*/
        ctx[19]
      ) && /*status*/
      ctx[26] >= 8 || /*skemaMandiri*/
      ctx[36].includes(
        /*jenisSkema*/
        ctx[19]
      ) && /*status*/
      ctx[26] >= 8
    );
    let t27;
    let t28;
    let t29;
    let if_block8_anchor;
    let current;
    let mounted;
    let dispose;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Judul",
        content: (
          /*data*/
          ctx[14].judul
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Abstrak",
        content: (
          /*data*/
          ctx[14].abstrak
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "Status",
        content: (
          /*status*/
          ctx[26]
        ),
        skema: (
          /*data*/
          ctx[14].jenis_skema
        ),
        type: "status"
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "Jenis Proposal",
        content: (
          /*jenisProposal*/
          ctx[17]
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Jenis Kegiatan",
        content: (
          /*jenisKegiatan*/
          ctx[18]
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Jenis Skema",
        content: (
          /*jenisSkema*/
          ctx[19]
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Kelompok Keahlian",
        content: (
          /*kelompokKeahlian*/
          ctx[20]
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Topik",
        content: (
          /*topik*/
          ctx[21]
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Biaya Penelitian",
        content: (
          /*biayaPenelitian*/
          ctx[24]
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Tanggal Mulai",
        content: (
          /*tanggalMulai*/
          ctx[22]
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Tanggal Selesai",
        content: (
          /*tanggalSelesai*/
          ctx[23]
        )
      }
    });
    let if_block0 = show_if_3 && create_if_block_463(ctx);
    let if_block1 = show_if_2 && create_if_block_453(ctx);
    let if_block2 = (
      /*anggotaTim*/
      ctx[25].length > 0 && create_if_block_444(ctx)
    );
    let if_block3 = show_if_1 && create_if_block_384(ctx);
    let if_block4 = (
      /*role*/
      ctx[37] !== "K.Departemen" && /*role*/
      ctx[37] !== "reviewer" && create_if_block_334(ctx)
    );
    let if_block5 = show_if && create_if_block_204(ctx);
    let if_block6 = (
      /*role*/
      ctx[37] === "K.Departemen" && create_if_block_184(ctx)
    );
    let if_block7 = (
      /*role*/
      (ctx[37] === "K.PusatKajian" || /*role*/
      ctx[37] === "K.LPPM") && create_if_block_164(ctx)
    );
    let if_block8 = (
      /*role*/
      (ctx[37] === "K.PusatKajian" || /*role*/
      ctx[37] === "K.LPPM") && create_if_block_144(ctx)
    );
    return {
      c() {
        div11 = element("div");
        div0 = element("div");
        create_component(fieldview0.$$.fragment);
        t0 = space();
        div1 = element("div");
        create_component(fieldview1.$$.fragment);
        t1 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t2 = space();
        hr = element("hr");
        t3 = space();
        div3 = element("div");
        create_component(fieldview3.$$.fragment);
        t4 = space();
        create_component(fieldview4.$$.fragment);
        t5 = space();
        div4 = element("div");
        create_component(fieldview5.$$.fragment);
        t6 = space();
        create_component(fieldview6.$$.fragment);
        t7 = space();
        div5 = element("div");
        create_component(fieldview7.$$.fragment);
        t8 = space();
        create_component(fieldview8.$$.fragment);
        t9 = space();
        div6 = element("div");
        create_component(fieldview9.$$.fragment);
        t10 = space();
        create_component(fieldview10.$$.fragment);
        t11 = space();
        div9 = element("div");
        div8 = element("div");
        div7 = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File Proposal</b>`;
        t13 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download Proposal";
        t15 = space();
        if (if_block0)
          if_block0.c();
        t16 = space();
        if (if_block1)
          if_block1.c();
        t17 = space();
        div10 = element("div");
        p2 = element("p");
        p2.innerHTML = `<b>Anggota Tim</b>`;
        t19 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t23 = space();
        tbody = element("tbody");
        if (if_block2)
          if_block2.c();
        t24 = space();
        if (if_block3)
          if_block3.c();
        t25 = space();
        if (if_block4)
          if_block4.c();
        t26 = space();
        if (if_block5)
          if_block5.c();
        t27 = space();
        if (if_block6)
          if_block6.c();
        t28 = space();
        if (if_block7)
          if_block7.c();
        t29 = space();
        if (if_block8)
          if_block8.c();
        if_block8_anchor = empty();
        attr(div0, "class", "columns is-desktop");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div7, "class", "field");
        attr(div8, "class", "column");
        attr(div9, "class", "columns is-desktop");
        attr(p2, "class", "title is-6");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div10, "class", "field");
        attr(div11, "class", "box");
      },
      m(target, anchor) {
        insert(target, div11, anchor);
        append(div11, div0);
        mount_component(fieldview0, div0, null);
        append(div11, t0);
        append(div11, div1);
        mount_component(fieldview1, div1, null);
        append(div11, t1);
        append(div11, div2);
        mount_component(fieldview2, div2, null);
        append(div11, t2);
        append(div11, hr);
        append(div11, t3);
        append(div11, div3);
        mount_component(fieldview3, div3, null);
        append(div3, t4);
        mount_component(fieldview4, div3, null);
        append(div11, t5);
        append(div11, div4);
        mount_component(fieldview5, div4, null);
        append(div4, t6);
        mount_component(fieldview6, div4, null);
        append(div11, t7);
        append(div11, div5);
        mount_component(fieldview7, div5, null);
        append(div5, t8);
        mount_component(fieldview8, div5, null);
        append(div11, t9);
        append(div11, div6);
        mount_component(fieldview9, div6, null);
        append(div6, t10);
        mount_component(fieldview10, div6, null);
        append(div11, t11);
        append(div11, div9);
        append(div9, div8);
        append(div8, div7);
        append(div7, p0);
        append(div7, t13);
        append(div7, p1);
        append(p1, button);
        append(div9, t15);
        if (if_block0)
          if_block0.m(div9, null);
        append(div9, t16);
        if (if_block1)
          if_block1.m(div9, null);
        append(div11, t17);
        append(div11, div10);
        append(div10, p2);
        append(div10, t19);
        append(div10, table);
        append(table, thead);
        append(table, t23);
        append(table, tbody);
        if (if_block2)
          if_block2.m(tbody, null);
        insert(target, t24, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, t25, anchor);
        if (if_block4)
          if_block4.m(target, anchor);
        insert(target, t26, anchor);
        if (if_block5)
          if_block5.m(target, anchor);
        insert(target, t27, anchor);
        if (if_block6)
          if_block6.m(target, anchor);
        insert(target, t28, anchor);
        if (if_block7)
          if_block7.m(target, anchor);
        insert(target, t29, anchor);
        if (if_block8)
          if_block8.m(target, anchor);
        insert(target, if_block8_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPpm*/
            ctx[43]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*data*/
        16384)
          fieldview0_changes.content = /*data*/
          ctx2[14].judul;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*data*/
        16384)
          fieldview1_changes.content = /*data*/
          ctx2[14].abstrak;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*status*/
        67108864)
          fieldview2_changes.content = /*status*/
          ctx2[26];
        if (dirty[0] & /*data*/
        16384)
          fieldview2_changes.skema = /*data*/
          ctx2[14].jenis_skema;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*jenisProposal*/
        131072)
          fieldview3_changes.content = /*jenisProposal*/
          ctx2[17];
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        262144)
          fieldview4_changes.content = /*jenisKegiatan*/
          ctx2[18];
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*jenisSkema*/
        524288)
          fieldview5_changes.content = /*jenisSkema*/
          ctx2[19];
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*kelompokKeahlian*/
        1048576)
          fieldview6_changes.content = /*kelompokKeahlian*/
          ctx2[20];
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*topik*/
        2097152)
          fieldview7_changes.content = /*topik*/
          ctx2[21];
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biayaPenelitian*/
        16777216)
          fieldview8_changes.content = /*biayaPenelitian*/
          ctx2[24];
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*tanggalMulai*/
        4194304)
          fieldview9_changes.content = /*tanggalMulai*/
          ctx2[22];
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*tanggalSelesai*/
        8388608)
          fieldview10_changes.content = /*tanggalSelesai*/
          ctx2[23];
        fieldview10.$set(fieldview10_changes);
        if (dirty[0] & /*jenisSkema*/
        524288)
          show_if_3 = /*skemaEksternal*/
          ctx2[35].includes(
            /*jenisSkema*/
            ctx2[19]
          );
        if (show_if_3) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_463(ctx2);
            if_block0.c();
            if_block0.m(div9, t16);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (dirty[0] & /*jenisSkema*/
        524288)
          show_if_2 = /*skemaInternal*/
          ctx2[34].includes(
            /*jenisSkema*/
            ctx2[19]
          );
        if (show_if_2) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_453(ctx2);
            if_block1.c();
            if_block1.m(div9, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*anggotaTim*/
          ctx2[25].length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_444(ctx2);
            if_block2.c();
            if_block2.m(tbody, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (dirty[0] & /*jenisSkema*/
        524288)
          show_if_1 = /*skemaInternal*/
          ctx2[34].includes(
            /*jenisSkema*/
            ctx2[19]
          );
        if (show_if_1) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            524288) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_384(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(t25.parentNode, t25);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*role*/
          ctx2[37] !== "K.Departemen" && /*role*/
          ctx2[37] !== "reviewer"
        )
          if_block4.p(ctx2, dirty);
        if (dirty[0] & /*jenisSkema, status*/
        67633152)
          show_if = /*skemaInternal*/
          ctx2[34].includes(
            /*jenisSkema*/
            ctx2[19]
          ) && /*status*/
          ctx2[26] >= 8 || /*skemaEksternal*/
          ctx2[35].includes(
            /*jenisSkema*/
            ctx2[19]
          ) && /*status*/
          ctx2[26] >= 8 || /*skemaMandiri*/
          ctx2[36].includes(
            /*jenisSkema*/
            ctx2[19]
          ) && /*status*/
          ctx2[26] >= 8;
        if (show_if) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_204(ctx2);
            if_block5.c();
            if_block5.m(t27.parentNode, t27);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*role*/
          ctx2[37] === "K.Departemen"
        )
          if_block6.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[37] === "K.PusatKajian" || /*role*/
          ctx2[37] === "K.LPPM"
        )
          if_block7.p(ctx2, dirty);
        if (
          /*role*/
          ctx2[37] === "K.PusatKajian" || /*role*/
          ctx2[37] === "K.LPPM"
        )
          if_block8.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(if_block3);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(if_block3);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div11);
          detach(t24);
          detach(t25);
          detach(t26);
          detach(t27);
          detach(t28);
          detach(t29);
          detach(if_block8_anchor);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d(detaching);
        if (if_block4)
          if_block4.d(detaching);
        if (if_block5)
          if_block5.d(detaching);
        if (if_block6)
          if_block6.d(detaching);
        if (if_block7)
          if_block7.d(detaching);
        if (if_block8)
          if_block8.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_463(ctx) {
    let div;
    let p0;
    let t1;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File Kontrak PPM</b>`;
        t1 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download Kontrak PPM";
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div, "class", "column");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadKontrakPpmEksternal*/
            ctx[44]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_453(ctx) {
    let div1;
    let div0;
    let p0;
    let t1;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File RAB (Rencana Anggaran Biaya)</b>`;
        t1 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download RAB";
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div0, "class", "field");
        attr(div1, "class", "column");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, p0);
        append(div0, t1);
        append(div0, p1);
        append(p1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadRab*/
            ctx[42]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_444(ctx) {
    let each_1_anchor;
    let each_value_12 = ensure_array_like(
      /*anggotaTim*/
      ctx[25]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_12.length; i += 1) {
      each_blocks[i] = create_each_block_122(get_each_context_122(ctx, each_value_12, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        33554432) {
          each_value_12 = ensure_array_like(
            /*anggotaTim*/
            ctx2[25]
          );
          let i;
          for (i = 0; i < each_value_12.length; i += 1) {
            const child_ctx = get_each_context_122(ctx2, each_value_12, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_122(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_12.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_122(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*member*/
      ctx[126].role + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*member*/
      ctx[126].label + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        33554432 && t0_value !== (t0_value = /*member*/
        ctx2[126].role + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*anggotaTim*/
        33554432 && t2_value !== (t2_value = /*member*/
        ctx2[126].label + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_384(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_394, create_if_block_424];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*role*/
        ctx2[37] === "reviewer"
      )
        return 0;
      if (
        /*role*/
        ctx2[37] !== "K.Departemen"
      )
        return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx, [-1, -1, -1, -1, -1]))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(target, anchor);
        }
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (if_block)
          if_block.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d(detaching);
        }
      }
    };
  }
  function create_if_block_424(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*iPPVisible*/
      ctx[10] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*iPPVisible*/
      ctx[10] && create_if_block_434(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Penilaian Proposal\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_1*/
            ctx[61]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*iPPVisible*/
        1024 && t1_value !== (t1_value = /*iPPVisible*/
        ctx2[10] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*iPPVisible*/
          ctx2[10]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_434(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_394(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*iPPVisible*/
      ctx[10] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*iPPVisible*/
      ctx[10] && create_if_block_403(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Penilaian Proposal\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler*/
            ctx[60]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty[0] & /*iPPVisible*/
        1024) && t1_value !== (t1_value = /*iPPVisible*/
        ctx2[10] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*iPPVisible*/
          ctx2[10]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*iPPVisible*/
            1024) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_403(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_434(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let td0;
    let t6;
    let td1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        td0 = element("td");
        td0.textContent = "Penilaian Proposal PPM";
        t6 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, td0);
        append(tbody, t6);
        append(tbody, td1);
        append(td1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPenilaian*/
            ctx[45]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_403(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t6;
    let tbody;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button0;
    let t16;
    let div1;
    let p;
    let button1;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_1(ctx2, dirty) {
      if (
        /*$penilaianFile*/
        ctx2[33]?.name
      )
        return create_if_block_414;
      return create_else_block_110;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File (.xlsx)</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        td0 = element("td");
        td0.textContent = "Penilaian Proposal PPM";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block.c();
        t14 = space();
        td2 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t16 = space();
        div1 = element("div");
        p = element("p");
        button1 = element("button");
        button1.textContent = "Simpan Penilaian";
        attr(input0, "id", "filePenilaian");
        attr(input0, "class", "inputf custom-file-input svelte-nrcntm");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-nrcntm");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePenilaian");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper mb-1 svelte-nrcntm");
        attr(button0, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t6);
        append(table, tbody);
        append(tbody, td0);
        append(tbody, t8);
        append(tbody, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label);
        append(label, input1);
        append(label, t10);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label, t13);
        if_block.m(label, null);
        append(tbody, t14);
        append(tbody, td2);
        append(td2, button0);
        insert(target, t16, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*filePenilaianChange*/
              ctx[55]
            ),
            listen(
              button0,
              "click",
              /*handleDownloadPenilaian*/
              ctx[45]
            ),
            listen(
              button1,
              "click",
              /*handleSimpanPenilaian*/
              ctx[41]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(label, null);
          }
        }
        if (!current || dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
          detach(t16);
          detach(div1);
        }
        destroy_component(icon);
        if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_110(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_414(ctx) {
    let span;
    let t_value = (
      /*$penilaianFile*/
      ctx[33].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$penilaianFile*/
        4 && t_value !== (t_value = /*$penilaianFile*/
        ctx2[33].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_334(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*CRPVisible*/
      ctx[11] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*CRPVisible*/
      ctx[11] && create_if_block_344(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Informasi Revisi Proposal ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_2*/
            ctx[62]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*CRPVisible*/
        2048 && t1_value !== (t1_value = /*CRPVisible*/
        ctx2[11] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*CRPVisible*/
          ctx2[11]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_344(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_344(ctx) {
    let hr;
    let t0;
    let show_if = (
      /*cttnRevisiProposalisRequired*/
      ctx[58]()
    );
    let t1;
    let table;
    let thead;
    let t7;
    let if_block0 = show_if && create_if_block_364(ctx);
    let if_block1 = (
      /*itemsRCR*/
      ctx[15] && create_if_block_354(ctx)
    );
    return {
      c() {
        hr = element("hr");
        t0 = space();
        if (if_block0)
          if_block0.c();
        t1 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%; text-align: center">Evaluator</th> <th style="width: 15%; text-align: center">Tanggal</th></tr>`;
        t7 = space();
        if (if_block1)
          if_block1.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t1, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t7);
        if (if_block1)
          if_block1.m(table, null);
      },
      p(ctx2, dirty) {
        if (show_if)
          if_block0.p(ctx2, dirty);
        if (
          /*itemsRCR*/
          ctx2[15]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_354(ctx2);
            if_block1.c();
            if_block1.m(table, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(t1);
          detach(table);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function create_if_block_364(ctx) {
    let div0;
    let t1;
    let div1;
    let p1;
    let t3;
    let textarea;
    let t4;
    let t5;
    let hr;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[13].catatanRevisiProposal && create_if_block_374(ctx)
    );
    return {
      c() {
        div0 = element("div");
        div0.innerHTML = `<p>Berikan catatan revisi jika ingin revisi proposal</p>`;
        t1 = space();
        div1 = element("div");
        p1 = element("p");
        p1.innerHTML = `<b>Catatan Revisi</b>`;
        t3 = space();
        textarea = element("textarea");
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        hr = element("hr");
        attr(div0, "class", "notification is-warning is-light");
        attr(p1, "class", "title is-6");
        attr(textarea, "class", "textarea mb-1");
        attr(textarea, "name", "komentar");
        attr(textarea, "id", "komentar");
        attr(div1, "class", "field");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        insert(target, t1, anchor);
        insert(target, div1, anchor);
        append(div1, p1);
        append(div1, t3);
        append(div1, textarea);
        set_input_value(
          textarea,
          /*catatanRevisiProposal*/
          ctx[29]
        );
        append(div1, t4);
        if (if_block)
          if_block.m(div1, null);
        insert(target, t5, anchor);
        insert(target, hr, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[63]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*catatanRevisiProposal*/
        536870912) {
          set_input_value(
            textarea,
            /*catatanRevisiProposal*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[13].catatanRevisiProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_374(ctx2);
            if_block.c();
            if_block.m(div1, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t1);
          detach(div1);
          detach(t5);
          detach(hr);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_374(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[13].catatanRevisiProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-nrcntm");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        8192 && t_value !== (t_value = /*error*/
        ctx2[13].catatanRevisiProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_354(ctx) {
    let tbody;
    let each_value_11 = ensure_array_like(
      /*itemsRCR*/
      ctx[15]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_11.length; i += 1) {
      each_blocks[i] = create_each_block_112(get_each_context_112(ctx, each_value_11, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        32768) {
          each_value_11 = ensure_array_like(
            /*itemsRCR*/
            ctx2[15]
          );
          let i;
          for (i = 0; i < each_value_11.length; i += 1) {
            const child_ctx = get_each_context_112(ctx2, each_value_11, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_112(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_11.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_112(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[121].catatan_revisi_proposal + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[121].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[121].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        set_style(td1, "text-align", "center");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        32768 && t0_value !== (t0_value = /*item*/
        ctx2[121].catatan_revisi_proposal + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsRCR*/
        32768 && t2_value !== (t2_value = /*item*/
        ctx2[121].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsRCR*/
        32768 && t4_value !== (t4_value = /*item*/
        ctx2[121].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_204(ctx) {
    let show_if_2;
    let t0;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[34].includes(
        /*jenisSkema*/
        ctx[19]
      )
    );
    let t1;
    let div0;
    let h50;
    let t2;
    let span0;
    let t3_value = (
      /*hasilPPMVisible*/
      ctx[7] ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let show_if = !/*skemaEksternal*/
    ctx[35].includes(
      /*jenisSkema*/
      ctx[19]
    ) && !/*skemaMandiri*/
    ctx[36].includes(
      /*jenisSkema*/
      ctx[19]
    );
    let t6;
    let div1;
    let h51;
    let t7;
    let span1;
    let t8_value = (
      /*skPPMVisible*/
      ctx[9] ? "(tutup)" : "(buka)"
    );
    let t8;
    let t9;
    let mounted;
    let dispose;
    function select_block_type_2(ctx2, dirty) {
      if (dirty[0] & /*jenisSkema*/
      524288)
        show_if_2 = null;
      if (show_if_2 == null)
        show_if_2 = !!/*skemaInternal*/
        ctx2[34].includes(
          /*jenisSkema*/
          ctx2[19]
        );
      if (show_if_2)
        return create_if_block_304;
      return create_else_block10;
    }
    let current_block_type = select_block_type_2(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = show_if_1 && create_if_block_284(ctx);
    let if_block2 = (
      /*hasilPPMVisible*/
      ctx[7] && create_if_block_244(ctx)
    );
    let if_block3 = show_if && create_if_block_225(ctx);
    let if_block4 = (
      /*skPPMVisible*/
      ctx[9] && create_if_block_217(ctx)
    );
    return {
      c() {
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        div0 = element("div");
        h50 = element("h5");
        t2 = text("Laporan Hasil PPM\r\n                  ");
        span0 = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block2)
          if_block2.c();
        t5 = space();
        if (if_block3)
          if_block3.c();
        t6 = space();
        div1 = element("div");
        h51 = element("h5");
        t7 = text("File SK PPM\r\n                  ");
        span1 = element("span");
        t8 = text(t8_value);
        t9 = space();
        if (if_block4)
          if_block4.c();
        attr(span0, "class", "toggle-button svelte-nrcntm");
        attr(h50, "class", "title is-6");
        attr(div0, "class", "box");
        attr(span1, "class", "toggle-button svelte-nrcntm");
        attr(h51, "class", "title is-6");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        if_block0.m(target, anchor);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        insert(target, div0, anchor);
        append(div0, h50);
        append(h50, t2);
        append(h50, span0);
        append(span0, t3);
        append(div0, t4);
        if (if_block2)
          if_block2.m(div0, null);
        insert(target, t5, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, t6, anchor);
        insert(target, div1, anchor);
        append(div1, h51);
        append(h51, t7);
        append(h51, span1);
        append(span1, t8);
        append(div1, t9);
        if (if_block4)
          if_block4.m(div1, null);
        if (!mounted) {
          dispose = [
            listen(
              span0,
              "click",
              /*click_handler_6*/
              ctx[67]
            ),
            listen(
              span1,
              "click",
              /*click_handler_8*/
              ctx[71]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(t0.parentNode, t0);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        524288)
          show_if_1 = /*skemaInternal*/
          ctx2[34].includes(
            /*jenisSkema*/
            ctx2[19]
          );
        if (show_if_1) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_284(ctx2);
            if_block1.c();
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (dirty[0] & /*hasilPPMVisible*/
        128 && t3_value !== (t3_value = /*hasilPPMVisible*/
        ctx2[7] ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*hasilPPMVisible*/
          ctx2[7]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_244(ctx2);
            if_block2.c();
            if_block2.m(div0, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (dirty[0] & /*jenisSkema*/
        524288)
          show_if = !/*skemaEksternal*/
          ctx2[35].includes(
            /*jenisSkema*/
            ctx2[19]
          ) && !/*skemaMandiri*/
          ctx2[36].includes(
            /*jenisSkema*/
            ctx2[19]
          );
        if (show_if) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_225(ctx2);
            if_block3.c();
            if_block3.m(t6.parentNode, t6);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (dirty[0] & /*skPPMVisible*/
        512 && t8_value !== (t8_value = /*skPPMVisible*/
        ctx2[9] ? "(tutup)" : "(buka)"))
          set_data(t8, t8_value);
        if (
          /*skPPMVisible*/
          ctx2[9]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_217(ctx2);
            if_block4.c();
            if_block4.m(div1, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(div0);
          detach(t5);
          detach(t6);
          detach(div1);
        }
        if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d(detaching);
        if (if_block4)
          if_block4.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block10(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*skpVisible*/
      ctx[5] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*skpVisible*/
      ctx[5] && create_if_block_325(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Download Dokumen Pendukung\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_4*/
            ctx[65]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*skpVisible*/
        32 && t1_value !== (t1_value = /*skpVisible*/
        ctx2[5] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*skpVisible*/
          ctx2[5]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_325(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_304(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*skpVisible*/
      ctx[5] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*skpVisible*/
      ctx[5] && create_if_block_316(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Download Dokumen Pendukung\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_3*/
            ctx[64]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*skpVisible*/
        32 && t1_value !== (t1_value = /*skpVisible*/
        ctx2[5] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*skpVisible*/
          ctx2[5]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_316(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_325(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Surat Tugas";
        t6 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadSuratTugas*/
            ctx[48]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_316(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let button0;
    let t8;
    let tr2;
    let td2;
    let t10;
    let td3;
    let button1;
    let t12;
    let tr3;
    let td4;
    let t14;
    let td5;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "SK Pendanaan";
        t6 = space();
        td1 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t8 = space();
        tr2 = element("tr");
        td2 = element("td");
        td2.textContent = "Surat Kontrak PPM";
        t10 = space();
        td3 = element("td");
        button1 = element("button");
        button1.textContent = "Download";
        t12 = space();
        tr3 = element("tr");
        td4 = element("td");
        td4.textContent = "Surat Tugas";
        t14 = space();
        td5 = element("td");
        button2 = element("button");
        button2.textContent = "Download";
        attr(button0, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(button1, "class", "button is-link button is-small");
        set_style(td3, "text-align", "center");
        attr(button2, "class", "button is-link button is-small");
        set_style(td5, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, button0);
        append(tbody, t8);
        append(tbody, tr2);
        append(tr2, td2);
        append(tr2, t10);
        append(tr2, td3);
        append(td3, button1);
        append(tbody, t12);
        append(tbody, tr3);
        append(tr3, td4);
        append(tr3, t14);
        append(tr3, td5);
        append(td5, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadSkPendanaan*/
              ctx[46]
            ),
            listen(
              button1,
              "click",
              /*handleDownloadSuratKontrak*/
              ctx[47]
            ),
            listen(
              button2,
              "click",
              /*handleDownloadSuratTugas*/
              ctx[48]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_284(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*danaPPMVisible*/
      ctx[6] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*danaPPMVisible*/
      ctx[6] && create_if_block_294(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Pendanaan PPM\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_5*/
            ctx[66]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*danaPPMVisible*/
        64 && t1_value !== (t1_value = /*danaPPMVisible*/
        ctx2[6] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*danaPPMVisible*/
          ctx2[6]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_294(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_294(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let tr0;
    let th0;
    let t2;
    let th1;
    let span;
    let t3;
    let t4;
    let tbody;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        tr0 = element("tr");
        th0 = element("th");
        th0.textContent = "Status Pencairan Dana";
        t2 = space();
        th1 = element("th");
        span = element("span");
        t3 = text(
          /*statusPencairanDana*/
          ctx[28]
        );
        t4 = space();
        tbody = element("tbody");
        tbody.innerHTML = `<tr><td colspan="2"><div class="notification is-warning is-light"><p class="subtitle is-6">Untuk pengambilan dana dan penjelasan
                                       lebih lanjut terkait Pendanaan, hubungi
                                       LPPM UISI.</p></div></td></tr>`;
        set_style(th0, "width", "70%");
        attr(span, "class", "tag is-info");
        attr(th1, "class", "is-narrow");
        set_style(th1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(thead, tr0);
        append(tr0, th0);
        append(tr0, t2);
        append(tr0, th1);
        append(th1, span);
        append(span, t3);
        append(table, t4);
        append(table, tbody);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*statusPencairanDana*/
        268435456)
          set_data(
            t3,
            /*statusPencairanDana*/
            ctx2[28]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
      }
    };
  }
  function create_if_block_244(ctx) {
    let hr0;
    let t0;
    let table0;
    let thead0;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let button;
    let t8;
    let show_if = (
      /*skemaInternal*/
      ctx[34].includes(
        /*jenisSkema*/
        ctx[19]
      )
    );
    let t9;
    let hr1;
    let t10;
    let div0;
    let t12;
    let div1;
    let p1;
    let t14;
    let textarea;
    let t15;
    let t16;
    let hr2;
    let t17;
    let table1;
    let thead1;
    let t23;
    let mounted;
    let dispose;
    let if_block0 = show_if && create_if_block_274(ctx);
    let if_block1 = (
      /*error*/
      ctx[13].catatanRevisiHasilPPM && create_if_block_264(ctx)
    );
    let if_block2 = (
      /*itemsCHP*/
      ctx[16] && create_if_block_254(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Laporan Hasil PPM";
        t6 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        t8 = space();
        if (if_block0)
          if_block0.c();
        t9 = space();
        hr1 = element("hr");
        t10 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Berikan catatan revisi jika ingin revisi Hasil PPM</p>`;
        t12 = space();
        div1 = element("div");
        p1 = element("p");
        p1.innerHTML = `<b>Catatan Revisi</b>`;
        t14 = space();
        textarea = element("textarea");
        t15 = space();
        if (if_block1)
          if_block1.c();
        t16 = space();
        hr2 = element("hr");
        t17 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%; text-align: center">Evaluator</th> <th style="width: 15%; text-align: center">Tanggal</th></tr>`;
        t23 = space();
        if (if_block2)
          if_block2.c();
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "notification is-warning is-light");
        attr(p1, "class", "title is-6");
        attr(textarea, "class", "textarea mb-1");
        attr(textarea, "name", "catatanRevisiHasilPPM");
        attr(textarea, "id", "catatanRevisiHasilPPM");
        attr(div1, "class", "field");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t4);
        append(table0, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, button);
        append(tbody, t8);
        if (if_block0)
          if_block0.m(tbody, null);
        insert(target, t9, anchor);
        insert(target, hr1, anchor);
        insert(target, t10, anchor);
        insert(target, div0, anchor);
        insert(target, t12, anchor);
        insert(target, div1, anchor);
        append(div1, p1);
        append(div1, t14);
        append(div1, textarea);
        set_input_value(
          textarea,
          /*catatanRevisiHasilPPM*/
          ctx[30]
        );
        append(div1, t15);
        if (if_block1)
          if_block1.m(div1, null);
        insert(target, t16, anchor);
        insert(target, hr2, anchor);
        insert(target, t17, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t23);
        if (if_block2)
          if_block2.m(table1, null);
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*handleDownloadHasilPPM*/
              ctx[50]
            ),
            listen(
              textarea,
              "input",
              /*textarea_input_handler_1*/
              ctx[68]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisSkema*/
        524288)
          show_if = /*skemaInternal*/
          ctx2[34].includes(
            /*jenisSkema*/
            ctx2[19]
          );
        if (show_if) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_274(ctx2);
            if_block0.c();
            if_block0.m(tbody, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (dirty[0] & /*catatanRevisiHasilPPM*/
        1073741824) {
          set_input_value(
            textarea,
            /*catatanRevisiHasilPPM*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[13].catatanRevisiHasilPPM
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_264(ctx2);
            if_block1.c();
            if_block1.m(div1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*itemsCHP*/
          ctx2[16]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_254(ctx2);
            if_block2.c();
            if_block2.m(table1, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(table0);
          detach(t9);
          detach(hr1);
          detach(t10);
          detach(div0);
          detach(t12);
          detach(div1);
          detach(t16);
          detach(hr2);
          detach(t17);
          detach(table1);
        }
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_274(ctx) {
    let tr;
    let td0;
    let t1;
    let td1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        td0.textContent = "Laporan Keuangan";
        t1 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(tr, t1);
        append(tr, td1);
        append(td1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadLaporanKeuangan*/
            ctx[51]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_264(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[13].catatanRevisiHasilPPM + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-nrcntm");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        8192 && t_value !== (t_value = /*error*/
        ctx2[13].catatanRevisiHasilPPM + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_if_block_254(ctx) {
    let tbody;
    let each_value_10 = ensure_array_like(
      /*itemsCHP*/
      ctx[16]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_102(get_each_context_102(ctx, each_value_10, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsCHP*/
        65536) {
          each_value_10 = ensure_array_like(
            /*itemsCHP*/
            ctx2[16]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_102(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_102(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_10.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_102(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[121].catatan_revisi_hasil_ppm + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[121].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[121].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        set_style(td1, "text-align", "center");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsCHP*/
        65536 && t0_value !== (t0_value = /*item*/
        ctx2[121].catatan_revisi_hasil_ppm + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsCHP*/
        65536 && t2_value !== (t2_value = /*item*/
        ctx2[121].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsCHP*/
        65536 && t4_value !== (t4_value = /*item*/
        ctx2[121].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_225(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*presentasiVisible*/
      ctx[8] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*presentasiVisible*/
      ctx[8] && create_if_block_235(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Presentasi Hasil PPM\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_7*/
            ctx[69]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*presentasiVisible*/
        256 && t1_value !== (t1_value = /*presentasiVisible*/
        ctx2[8] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*presentasiVisible*/
          ctx2[8]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_235(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_235(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let input;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Kegiatan</th> <th class="is-narrow" style="text-align: center">Checkbox</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Mempresentasikan hasil PPM di seminar\r\n                                 Penelitian / Pengmas bersama UISI di bulan\r\n                                 Desember";
        t6 = space();
        td1 = element("td");
        input = element("input");
        attr(input, "type", "checkbox");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, input);
        input.checked = /*presentasiHasilPPM*/
        ctx[27];
        if (!mounted) {
          dispose = [
            listen(
              input,
              "change",
              /*input_change_handler*/
              ctx[70]
            ),
            listen(
              input,
              "change",
              /*checkboxPresentasiHasilPPM*/
              ctx[52]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*presentasiHasilPPM*/
        134217728) {
          input.checked = /*presentasiHasilPPM*/
          ctx2[27];
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_217(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "SK PPM";
        t6 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadSkPPM*/
            ctx[49]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_184(ctx) {
    let if_block_anchor;
    let if_block = (
      /*status*/
      ctx[26] === 4 && create_if_block_194(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (
          /*status*/
          ctx2[26] === 4
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_194(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_194(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Setujui";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePass*/
            ctx[40]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_164(ctx) {
    let show_if = (
      /*ShowRPButton*/
      ctx[56]()
    );
    let if_block_anchor;
    let if_block = show_if && create_if_block_174(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (show_if)
          if_block.p(ctx2, dirty);
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_174(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Setujui";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[38]
            ),
            listen(
              button1,
              "click",
              /*handlePass*/
              ctx[40]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
        if (dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_144(ctx) {
    let show_if = (
      /*ShowRDPButton*/
      ctx[57]()
    );
    let if_block_anchor;
    let if_block = show_if && create_if_block_154(ctx);
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (show_if)
          if_block.p(ctx2, dirty);
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_154(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Revisi";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Ditolak";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Setujui";
        attr(button0, "class", "button is-info is-light is-outlined");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-danger is-light is-outlined");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[4]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleRevisi*/
              ctx[38]
            ),
            listen(
              button1,
              "click",
              /*handleDitolak*/
              ctx[39]
            ),
            listen(
              button2,
              "click",
              /*handlePass*/
              ctx[40]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
        if (dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
        if (dirty[0] & /*isLoading*/
        16) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[4]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_120(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[12].length > 0 && create_if_block_218(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[12].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            4096) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_218(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_218(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[12]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block11(get_each_context11(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[12]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context11(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block11(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_317(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let fieldview13;
    let t18;
    let hr1;
    let t19;
    let h51;
    let t21;
    let table0;
    let thead0;
    let t31;
    let tbody0;
    let t32;
    let table1;
    let thead1;
    let t42;
    let tbody1;
    let t43;
    let table2;
    let thead2;
    let t53;
    let tbody2;
    let t54;
    let hr2;
    let t55;
    let h52;
    let t57;
    let table3;
    let thead3;
    let t67;
    let tbody3;
    let t68;
    let hr3;
    let t69;
    let h53;
    let t71;
    let table4;
    let thead4;
    let t81;
    let tbody4;
    let t82;
    let hr4;
    let t83;
    let h54;
    let t85;
    let table5;
    let thead5;
    let t93;
    let tbody5;
    let t94;
    let hr5;
    let t95;
    let h55;
    let t97;
    let table6;
    let thead6;
    let t107;
    let tbody6;
    let t108;
    let hr6;
    let t109;
    let h56;
    let t111;
    let table7;
    let thead7;
    let t121;
    let tbody7;
    let t122;
    let hr7;
    let t123;
    let h57;
    let t125;
    let table8;
    let thead8;
    let t135;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[91].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[91].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[91].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[91].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[91].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[91].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[91].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[91].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[91].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[91].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[91].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[91].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[91].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    fieldview13 = new Fieldview_default({ props: { title: "", content: "" } });
    let if_block0 = (
      /*user*/
      ctx[91].RPS1.length > 0 && create_if_block_125(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[91].RPS2.length > 0 && create_if_block_1110(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[91].RPS3.length > 0 && create_if_block_104(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[91].Ppenelitian.length > 0 && create_if_block_94(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[91].Ppengmas.length > 0 && create_if_block_84(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[91].Pdiseminasi.length > 0 && create_if_block_711(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[91].Ppublikasi.length > 0 && create_if_block_614(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[91].PpenulisanBuku.length > 0 && create_if_block_514(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[91].Phki.length > 0 && create_if_block_415(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        create_component(fieldview13.$$.fragment);
        t18 = space();
        hr1 = element("hr");
        t19 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t21 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t31 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t32 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t42 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t43 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t53 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t54 = space();
        hr2 = element("hr");
        t55 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t57 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t67 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t68 = space();
        hr3 = element("hr");
        t69 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t71 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t81 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t82 = space();
        hr4 = element("hr");
        t83 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t85 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t93 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t94 = space();
        hr5 = element("hr");
        t95 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan\r\n                        Proceeding)";
        t97 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                 Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t107 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t108 = space();
        hr6 = element("hr");
        t109 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t111 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t121 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t122 = space();
        hr7 = element("hr");
        t123 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t125 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t135 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        append(div7, t17);
        mount_component(fieldview13, div7, null);
        insert(target, t18, anchor);
        insert(target, hr1, anchor);
        insert(target, t19, anchor);
        insert(target, h51, anchor);
        insert(target, t21, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t31);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t32, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t42);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t43, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t53);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t54, anchor);
        insert(target, hr2, anchor);
        insert(target, t55, anchor);
        insert(target, h52, anchor);
        insert(target, t57, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t67);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t68, anchor);
        insert(target, hr3, anchor);
        insert(target, t69, anchor);
        insert(target, h53, anchor);
        insert(target, t71, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t81);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t82, anchor);
        insert(target, hr4, anchor);
        insert(target, t83, anchor);
        insert(target, h54, anchor);
        insert(target, t85, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t93);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t94, anchor);
        insert(target, hr5, anchor);
        insert(target, t95, anchor);
        insert(target, h55, anchor);
        insert(target, t97, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t107);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t108, anchor);
        insert(target, hr6, anchor);
        insert(target, t109, anchor);
        insert(target, h56, anchor);
        insert(target, t111, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t121);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t122, anchor);
        insert(target, hr7, anchor);
        insert(target, t123, anchor);
        insert(target, h57, anchor);
        insert(target, t125, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t135);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview0_changes.content = /*user*/
          ctx2[91].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview1_changes.content = /*user*/
          ctx2[91].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview2_changes.content = /*user*/
          ctx2[91].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview3_changes.content = /*user*/
          ctx2[91].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview4_changes.content = /*user*/
          ctx2[91].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview5_changes.content = /*user*/
          ctx2[91].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview6_changes.content = /*user*/
          ctx2[91].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview7_changes.content = /*user*/
          ctx2[91].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview8_changes.content = /*user*/
          ctx2[91].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview9_changes.content = /*user*/
          ctx2[91].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview10_changes.content = /*user*/
          ctx2[91].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview11_changes.content = /*user*/
          ctx2[91].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        4096)
          fieldview12_changes.content = /*user*/
          ctx2[91].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[91].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_125(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[91].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_1110(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[91].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_104(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[91].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_94(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[91].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_84(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[91].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_711(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[91].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_614(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[91].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_514(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[91].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_415(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        transition_in(fieldview13.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        transition_out(fieldview13.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t18);
          detach(hr1);
          detach(t19);
          detach(h51);
          detach(t21);
          detach(table0);
          detach(t32);
          detach(table1);
          detach(t43);
          detach(table2);
          detach(t54);
          detach(hr2);
          detach(t55);
          detach(h52);
          detach(t57);
          detach(table3);
          detach(t68);
          detach(hr3);
          detach(t69);
          detach(h53);
          detach(t71);
          detach(table4);
          detach(t82);
          detach(hr4);
          detach(t83);
          detach(h54);
          detach(t85);
          detach(table5);
          detach(t94);
          detach(hr5);
          detach(t95);
          detach(h55);
          detach(t97);
          detach(table6);
          detach(t108);
          detach(hr6);
          detach(t109);
          detach(h56);
          detach(t111);
          detach(table7);
          detach(t122);
          detach(hr7);
          detach(t123);
          detach(h57);
          detach(t125);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        destroy_component(fieldview13);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_125(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[91].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_93(get_each_context_93(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[91].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_93(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_93(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_93(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[118].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[118].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[118].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[118].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[118].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*RPS1*/
        ctx2[118].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*RPS1*/
        ctx2[118].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*RPS1*/
        ctx2[118].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*RPS1*/
        ctx2[118].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*RPS1*/
        ctx2[118].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1110(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[91].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_83(get_each_context_83(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[91].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_83(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_83(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_83(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[115].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[115].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[115].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[115].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[115].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*RPS2*/
        ctx2[115].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*RPS2*/
        ctx2[115].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*RPS2*/
        ctx2[115].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*RPS2*/
        ctx2[115].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*RPS2*/
        ctx2[115].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_104(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[91].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_73(get_each_context_73(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[91].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_73(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_73(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_73(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[112].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[112].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[112].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[112].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[112].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*RPS3*/
        ctx2[112].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*RPS3*/
        ctx2[112].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*RPS3*/
        ctx2[112].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*RPS3*/
        ctx2[112].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*RPS3*/
        ctx2[112].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_94(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[91].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_63(get_each_context_63(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[91].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_63(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_63(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_63(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[109].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[109].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[109].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[109].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[109].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*PP*/
        ctx2[109].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*PP*/
        ctx2[109].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*PP*/
        ctx2[109].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*PP*/
        ctx2[109].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*PP*/
        ctx2[109].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_84(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[91].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_53(get_each_context_53(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[91].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_53(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_53(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_53(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[106].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[106].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[106].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[106].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[106].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*PM*/
        ctx2[106].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*PM*/
        ctx2[106].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*PM*/
        ctx2[106].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*PM*/
        ctx2[106].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*PM*/
        ctx2[106].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_711(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[91].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_43(get_each_context_43(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[91].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_43(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_43(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_43(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[103].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[103].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[103].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[103].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*PD*/
        ctx2[103].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*PD*/
        ctx2[103].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*PD*/
        ctx2[103].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*PD*/
        ctx2[103].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_614(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[91].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_33(get_each_context_33(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[91].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_33(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_33(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_33(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[100].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[100].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[100].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[100].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[100].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*PPub*/
        ctx2[100].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*PPub*/
        ctx2[100].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*PPub*/
        ctx2[100].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*PPub*/
        ctx2[100].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*PPub*/
        ctx2[100].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_514(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[91].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_24(get_each_context_24(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[91].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_24(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_24(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_24(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[97].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[97].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[97].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[97].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[97].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*PPB*/
        ctx2[97].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*PPB*/
        ctx2[97].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*PPB*/
        ctx2[97].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*PPB*/
        ctx2[97].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*PPB*/
        ctx2[97].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_415(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[91].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_16(get_each_context_16(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[91].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_16(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_16(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_16(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[94].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[94].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[94].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[94].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[94].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        4096 && t0_value !== (t0_value = /*PHKI*/
        ctx2[94].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t2_value !== (t2_value = /*PHKI*/
        ctx2[94].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t4_value !== (t4_value = /*PHKI*/
        ctx2[94].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t6_value !== (t6_value = /*PHKI*/
        ctx2[94].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        4096 && t8_value !== (t8_value = /*PHKI*/
        ctx2[94].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block11(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[91].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[12][
        /*index*/
        ctx[93]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler_9() {
      return (
        /*click_handler_9*/
        ctx[72](
          /*index*/
          ctx[93]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[12][
        /*index*/
        ctx[93]
      ].profileVisible && create_if_block_317(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-nrcntm");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler_9);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        4096) && t1_value !== (t1_value = /*user*/
        ctx[91].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        4096) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[12][
          /*index*/
          ctx[93]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[12][
            /*index*/
            ctx[93]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            4096) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_317(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_411(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let t6;
    let if_block1_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[31] === true && create_if_block_135(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[32] === true && create_if_block_120(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Detail PPM";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Detail PPM</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Biodata Peneliti</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[31]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[32]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[53]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[54]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*tab1*/
        1) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[31]
          );
        }
        if (!current || dirty[1] & /*tab2*/
        2) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[32]
          );
        }
        if (
          /*tab1*/
          ctx2[31] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*tab1*/
            1) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_135(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[32] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*tab2*/
            2) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_120(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t5);
          detach(t6);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_312(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum memasukkan catatan revisi";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_213(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum mengupload file penilaian proposal";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_114(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Gagal mengunduh file. Pastikan file telah di upload atau coba unduh\r\n      beberapa saat lagi.";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot12(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berhasil menyimpan data";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment35(ctx) {
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let t2;
    let modalerror2;
    let updating_show_2;
    let t3;
    let modalchecked;
    let updating_show_3;
    let current;
    let if_block = (
      /*data*/
      ctx[14] && create_if_block16(ctx)
    );
    function modalerror0_show_binding(value) {
      ctx[73](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_312] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorRevisi*/
      ctx[1] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorRevisi*/
      ctx[1];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[74](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_213] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorPassReviewer*/
      ctx[0] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorPassReviewer*/
      ctx[0];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    function modalerror2_show_binding(value) {
      ctx[75](value);
    }
    let modalerror2_props = {
      $$slots: { default: [create_default_slot_114] },
      $$scope: { ctx }
    };
    if (
      /*ModalFileNotFound*/
      ctx[3] !== void 0
    ) {
      modalerror2_props.show = /*ModalFileNotFound*/
      ctx[3];
    }
    modalerror2 = new Modalerror_default({ props: modalerror2_props });
    binding_callbacks.push(() => bind(modalerror2, "show", modalerror2_show_binding));
    function modalchecked_show_binding(value) {
      ctx[76](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot12] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[2] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[2];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
        t2 = space();
        create_component(modalerror2.$$.fragment);
        t3 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modalerror2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*data*/
          ctx2[14]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*data*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block16(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        const modalerror0_changes = {};
        if (dirty[4] & /*$$scope*/
        32) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalErrorRevisi*/
        2) {
          updating_show = true;
          modalerror0_changes.show = /*showModalErrorRevisi*/
          ctx2[1];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[4] & /*$$scope*/
        32) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorPassReviewer*/
        1) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorPassReviewer*/
          ctx2[0];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
        const modalerror2_changes = {};
        if (dirty[4] & /*$$scope*/
        32) {
          modalerror2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[0] & /*ModalFileNotFound*/
        8) {
          updating_show_2 = true;
          modalerror2_changes.show = /*ModalFileNotFound*/
          ctx2[3];
          add_flush_callback(() => updating_show_2 = false);
        }
        modalerror2.$set(modalerror2_changes);
        const modalchecked_changes = {};
        if (dirty[4] & /*$$scope*/
        32) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[0] & /*showModalChecked*/
        4) {
          updating_show_3 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[2];
          add_flush_callback(() => updating_show_3 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(modalerror2.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(modalerror2.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
        }
        if (if_block)
          if_block.d(detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        destroy_component(modalerror2, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function isObjectEmpty2(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function formatDate2(dateString) {
    const date = new Date(dateString);
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, "0");
    const day = String(date.getUTCDate()).padStart(2, "0");
    const hours = String(date.getUTCHours()).padStart(2, "0");
    const minutes = String(date.getUTCMinutes()).padStart(2, "0");
    const seconds = String(date.getUTCSeconds()).padStart(2, "0");
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }
  function instance28($$self, $$props, $$invalidate) {
    let $penilaianFile;
    let $apiURL;
    let $route;
    component_subscribe($$self, penilaianFile, ($$value) => $$invalidate(33, $penilaianFile = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(83, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(84, $route = $$value));
    let { params } = $$props;
    const skemaInternal = [
      "Riset Kelompok Keahlian",
      "Riset Terapan",
      "Riset Kerjasama",
      "Pengabdian Masyarakat Desa Binaan",
      "Pengabdian Masyarakat UMKM Binaan"
    ];
    const skemaEksternal = ["Riset Eksternal", "Pengabdian Masyarakat Hibah Eksternal"];
    const skemaMandiri = ["Riset Mandiri", "Pengabdian Masyarakat Mandiri"];
    const namaLengkapEvl2 = localStorage.getItem("nama_lengkap");
    const role = localStorage.getItem("role");
    const id = params["1"];
    let showModalErrorPassReviewer = false;
    let showModalErrorRevisi = false;
    let showModalChecked = false;
    let ModalFileNotFound = false;
    let isLoading = false;
    let skpVisible = false;
    let danaPPMVisible = false;
    let hasilPPMVisible = false;
    let presentasiVisible = false;
    let skPPMVisible = false;
    let iPPVisible = false;
    let CRPVisible = false;
    let randomPenilaianFileName;
    let biodataAnggota = [];
    let error = {};
    let filePenilaian2;
    let data2;
    let itemsRCR;
    let itemsCHP;
    let jenisProposal, jenisKegiatan, jenisSkema, kelompokKeahlian, topik, tanggalMulai, tanggalSelesai, biayaPenelitian, anggotaTim, rab, judul, abstrak, status, ttdSuratKontrak, presentasiHasilPPM, statusPencairanDana;
    let catatanRevisiProposal;
    let catatanRevisiHasilPPM;
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      await getDetailPPM();
      const responseRCR = await fetch($apiURL + "/riwayatCatatanRevisiProposal/" + ppmId, { method: "GET", headers });
      const dataRCR = await responseRCR.json();
      if (responseRCR.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRCR.ok) {
          $$invalidate(15, itemsRCR = dataRCR.dbData.map((item) => ({ ...item, time: formatDate2(item.time) })));
        }
      }
      const responseCHP = await fetch($apiURL + "/riwayatCatatanRevisiHasilPPM/" + ppmId, { method: "GET", headers });
      const dataCHP = await responseCHP.json();
      if (responseCHP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCHP.ok) {
          $$invalidate(16, itemsCHP = dataCHP.dbData.map((item) => ({ ...item, time: formatDate2(item.time) })));
        }
      }
      let randomChar = "";
      let resultGenerateRandomChar = "";
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let i = 0; i < 10; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultGenerateRandomChar += characters.charAt(randomIndex);
      }
      randomChar = resultGenerateRandomChar;
      randomPenilaianFileName = id + "_Penilaian Proposal PPM_" + randomChar;
    });
    async function getDetailPPM() {
      const response = await fetch($apiURL + "/ppm/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(14, data2 = result);
          ppmId = data2.id;
          $$invalidate(17, jenisProposal = data2.jenis_proposal);
          $$invalidate(18, jenisKegiatan = data2.jenis_kegiatan);
          $$invalidate(19, jenisSkema = data2.jenis_skema);
          $$invalidate(20, kelompokKeahlian = data2.kelompok_keahlian);
          $$invalidate(21, topik = data2.topik);
          $$invalidate(22, tanggalMulai = data2.tanggal_mulai);
          $$invalidate(23, tanggalSelesai = data2.tanggal_selesai);
          $$invalidate(24, biayaPenelitian = data2.biaya_penelitian);
          $$invalidate(25, anggotaTim = data2.anggota_tim);
          $$invalidate(12, biodataAnggota = data2.biodata_anggota);
          rab = data2.rab;
          judul = data2.judul;
          abstrak = data2.abstrak;
          $$invalidate(26, status = data2.status);
          randomRabFileName = data2.rab_file_name;
          kontrakFileName = data2.kontrak_ppm_eksternal_file_name;
          randomPpmFileName = data2.ppm_file_name;
          randomPenilaianFileNamedb = data2.penilaian_file_name;
          ttdSuratKontrak = data2.ttd_surat_kontrak;
          $$invalidate(27, presentasiHasilPPM = data2.presentasi_hasil_ppm);
          fileSkPendanaanNameDB = data2.file_sk_pendanaan;
          fileSuratKontrakNameDB = data2.file_surat_kontrak;
          fileSuratTugasNameDB = data2.file_surat_tugas;
          fileSkPPMNameDB = data2.file_sk_ppm;
          fileHasilPPMNameDB = data2.file_hasil_ppm;
          fileLaporanKeuanganNameDB = data2.file_laporan_keuangan;
          $$invalidate(28, statusPencairanDana = data2.status_pencairan_dana || "Menunggu pencairan dana");
        } else {
          console.log(response);
        }
      }
    }
    async function handleRevisi() {
      $$invalidate(13, error = {});
      $$invalidate(4, isLoading = true);
      let payload2 = { status: Number(data2.status) - 1, id };
      let payloadCttnRevisiProposal = {
        ppmId,
        catatanRevisiProposal,
        namaLengkapEvl: namaLengkapEvl2
      };
      const payloadCttnRevisiHasilPPM = {
        ppmId,
        catatanRevisiHasilPPM,
        namaLengkapEvl: namaLengkapEvl2
      };
      if (cttnRevisiProposalisRequired()) {
        if (!payloadCttnRevisiProposal.catatanRevisiProposal) {
          $$invalidate(13, error.catatanRevisiProposal = `This field is required`, error);
        }
      }
      if (cttnRevisiHasilPPMisRequired()) {
        if (!payloadCttnRevisiHasilPPM.catatanRevisiHasilPPM) {
          $$invalidate(13, error.catatanRevisiHasilPPM = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(1, showModalErrorRevisi = true);
      } else {
        if (cttnRevisiProposalisRequired()) {
          const responseRev = await fetch($apiURL + "/riwayatCatatanRevisiProposal", {
            method: "POST",
            headers,
            body: JSON.stringify(payloadCttnRevisiProposal)
          });
          const resultRev = await responseRev.json();
          if (responseRev.status === 401) {
            location.pathname = "/tokenexpired";
          } else {
            if (!responseRev.ok) {
              console.log(responseRev);
            }
          }
        }
        if (cttnRevisiHasilPPMisRequired()) {
          const responseRevisiHasilPPM = await fetch($apiURL + "/riwayatCatatanRevisiHasilPPM", {
            method: "POST",
            headers,
            body: JSON.stringify(payloadCttnRevisiHasilPPM)
          });
          const resultRevisiHasilPPM = await responseRevisiHasilPPM.json();
          if (responseRevisiHasilPPM.status === 401) {
            location.pathname = "/tokenexpired";
          } else {
            if (!responseRevisiHasilPPM.ok) {
              console.log(responseRevisiHasilPPM);
            }
          }
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/approvalmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(4, isLoading = false);
    }
    async function handleDitolak() {
      $$invalidate(4, isLoading = true);
      const payload2 = { status: Number(data2.status) + 1, id };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload2)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/dosen/approvalmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(4, isLoading = false);
    }
    async function handlePass() {
      $$invalidate(4, isLoading = true);
      const payload2 = { status: Number(data2.status) + 2, id };
      const response = await fetch($apiURL + "/handleEvaluatorAction/pass", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload2)
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $route("/dosen/approvalmanagement");
        } else {
          console.log(response);
        }
      }
      $$invalidate(4, isLoading = false);
    }
    async function handleSimpanPenilaian() {
      $$invalidate(13, error = {});
      $$invalidate(4, isLoading = true);
      const readerPenilaian = new FileReader();
      const payload2 = {
        status: Number(data2.status),
        randomPenilaianFileName,
        id
      };
      if (isObjectEmpty2($penilaianFile)) {
        $$invalidate(13, error["filePenilaian"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(0, showModalErrorPassReviewer = true);
      } else {
        if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
          readerPenilaian.onloadend = async () => {
            const base64Data = readerPenilaian.result.split(",")[1];
            const payloadPenilaianFile = {
              filePenilaian: {
                name: filePenilaian2.name,
                type: filePenilaian2.type,
                data: base64Data
              },
              randomPenilaianFileName
            };
            try {
              const responseUpload = await fetch($apiURL + "/uploadPenilaian", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadPenilaianFile)
              });
              const resultUpload = await responseUpload.json();
              if (responseUpload.status === 401) {
                location.pathname = "/tokenexpired";
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
            }
          };
          readerPenilaian.readAsDataURL(filePenilaian2);
        }
        const response = await fetch($apiURL + "/handleEvaluatorAction", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            getDetailPPM();
            $$invalidate(2, showModalChecked = true);
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(4, isLoading = false);
    }
    async function handleDownloadRab(e) {
      let filename = "RAB_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadRab/${randomRabFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPpm(e) {
      let filename = "Proposal_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadPpm/${randomPpmFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadKontrakPpmEksternal(e) {
      let filename = "Kontrak PPM_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadKontrakPPMEksternal/${kontrakFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPenilaian(e) {
      let filename = "Penilaian Proposal_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadPenilaian/${randomPenilaianFileNamedb}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSkPendanaan(e) {
      let filename = "SK Pendanaan.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSKPendanaan/${fileSkPendanaanNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSuratKontrak() {
      let filename = "Surat Kontrak Penelitian.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSuratKontrak/${fileSuratKontrakNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSuratTugas() {
      let filename = "Surat Tugas.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSuratTugas/${fileSuratTugasNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSkPPM() {
      let filename = "SK PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSKPPM/${fileSkPPMNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadHasilPPM() {
      let filename = "Laporan Hasil PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadHasilPPM/${fileHasilPPMNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadLaporanKeuangan() {
      let filename = "Laporan Keuangan.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadLaporanKeuangan/${fileLaporanKeuanganNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(3, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function checkboxPresentasiHasilPPM(event) {
      $$invalidate(27, presentasiHasilPPM = event.target.checked ? 1 : 0);
      payload = { ppmId, presentasiHasilPPM };
      const response = await fetch($apiURL + "/checkBoxPPM/id/presentasiPPM", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(31, tab1 = true);
      $$invalidate(32, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(31, tab1 = false);
      $$invalidate(32, tab2 = true);
    }
    function filePenilaianChange(e) {
      filePenilaian2 = e.target.files[0];
      set_store_value(penilaianFile, $penilaianFile = e.target.files[0], $penilaianFile);
    }
    function ShowRPButton() {
      const StatusForInternal = [10];
      const StatusForEksternal = [10];
      const StatusForMandiri = [10];
      if (skemaInternal.includes(data2.jenis_skema) && StatusForInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && StatusForEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && StatusForMandiri.includes(data2.status)) {
        return true;
      }
    }
    function ShowRDPButton() {
      const ReviewKpkKlppmSkemaInternal = [6];
      const ReviewKpkKlppmSkemaEksternal = [6];
      const ReviewKpkKlppmSkemaMandiri = [6];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function cttnRevisiProposalisRequired() {
      const RevisiSkemaInternal = [2, 6];
      const RevisiSkemaEksternal = [2, 6];
      const RevisiSkemaMandiri = [2, 6];
      if (skemaInternal.includes(data2.jenis_skema) && RevisiSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && RevisiSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && RevisiSkemaMandiri.includes(data2.status)) {
        return true;
      }
      return false;
    }
    function cttnRevisiHasilPPMisRequired() {
      const RevisiSkemaInternal = [10];
      const RevisiSkemaEksternal = [10];
      const RevisiSkemaMandiri = [10];
      if (skemaInternal.includes(data2.jenis_skema) && RevisiSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && RevisiSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && RevisiSkemaMandiri.includes(data2.status)) {
        return true;
      }
      return false;
    }
    const click_handler = () => $$invalidate(10, iPPVisible = !iPPVisible);
    const click_handler_1 = () => $$invalidate(10, iPPVisible = !iPPVisible);
    const click_handler_2 = () => $$invalidate(11, CRPVisible = !CRPVisible);
    function textarea_input_handler() {
      catatanRevisiProposal = this.value;
      $$invalidate(29, catatanRevisiProposal);
    }
    const click_handler_3 = () => $$invalidate(5, skpVisible = !skpVisible);
    const click_handler_4 = () => $$invalidate(5, skpVisible = !skpVisible);
    const click_handler_5 = () => $$invalidate(6, danaPPMVisible = !danaPPMVisible);
    const click_handler_6 = () => $$invalidate(7, hasilPPMVisible = !hasilPPMVisible);
    function textarea_input_handler_1() {
      catatanRevisiHasilPPM = this.value;
      $$invalidate(30, catatanRevisiHasilPPM);
    }
    const click_handler_7 = () => $$invalidate(8, presentasiVisible = !presentasiVisible);
    function input_change_handler() {
      presentasiHasilPPM = this.checked;
      $$invalidate(27, presentasiHasilPPM);
    }
    const click_handler_8 = () => $$invalidate(9, skPPMVisible = !skPPMVisible);
    const click_handler_9 = (index) => $$invalidate(12, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalErrorRevisi = value;
      $$invalidate(1, showModalErrorRevisi);
    }
    function modalerror1_show_binding(value) {
      showModalErrorPassReviewer = value;
      $$invalidate(0, showModalErrorPassReviewer);
    }
    function modalerror2_show_binding(value) {
      ModalFileNotFound = value;
      $$invalidate(3, ModalFileNotFound);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(2, showModalChecked);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(59, params = $$props2.params);
    };
    return [
      showModalErrorPassReviewer,
      showModalErrorRevisi,
      showModalChecked,
      ModalFileNotFound,
      isLoading,
      skpVisible,
      danaPPMVisible,
      hasilPPMVisible,
      presentasiVisible,
      skPPMVisible,
      iPPVisible,
      CRPVisible,
      biodataAnggota,
      error,
      data2,
      itemsRCR,
      itemsCHP,
      jenisProposal,
      jenisKegiatan,
      jenisSkema,
      kelompokKeahlian,
      topik,
      tanggalMulai,
      tanggalSelesai,
      biayaPenelitian,
      anggotaTim,
      status,
      presentasiHasilPPM,
      statusPencairanDana,
      catatanRevisiProposal,
      catatanRevisiHasilPPM,
      tab1,
      tab2,
      $penilaianFile,
      skemaInternal,
      skemaEksternal,
      skemaMandiri,
      role,
      handleRevisi,
      handleDitolak,
      handlePass,
      handleSimpanPenilaian,
      handleDownloadRab,
      handleDownloadPpm,
      handleDownloadKontrakPpmEksternal,
      handleDownloadPenilaian,
      handleDownloadSkPendanaan,
      handleDownloadSuratKontrak,
      handleDownloadSuratTugas,
      handleDownloadSkPPM,
      handleDownloadHasilPPM,
      handleDownloadLaporanKeuangan,
      checkboxPresentasiHasilPPM,
      clicktab1,
      clicktab2,
      filePenilaianChange,
      ShowRPButton,
      ShowRDPButton,
      cttnRevisiProposalisRequired,
      params,
      click_handler,
      click_handler_1,
      click_handler_2,
      textarea_input_handler,
      click_handler_3,
      click_handler_4,
      click_handler_5,
      click_handler_6,
      textarea_input_handler_1,
      click_handler_7,
      input_change_handler,
      click_handler_8,
      click_handler_9,
      modalerror0_show_binding,
      modalerror1_show_binding,
      modalerror2_show_binding,
      modalchecked_show_binding
    ];
  }
  var Detailapproval = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance28, create_fragment35, safe_not_equal, { params: 59 }, null, [-1, -1, -1, -1, -1]);
    }
  };
  var detailapproval_default = Detailapproval;

  // src/pages/dosen/detailppm.svelte
  init_define_process();
  var { Boolean: Boolean_12 } = globals;
  function get_each_context12(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[113] = list[i];
    child_ctx[115] = i;
    return child_ctx;
  }
  function get_each_context_17(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[116] = list[i];
    return child_ctx;
  }
  function get_each_context_25(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[119] = list[i];
    return child_ctx;
  }
  function get_each_context_34(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[122] = list[i];
    return child_ctx;
  }
  function get_each_context_44(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[125] = list[i];
    return child_ctx;
  }
  function get_each_context_54(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[128] = list[i];
    return child_ctx;
  }
  function get_each_context_64(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[131] = list[i];
    return child_ctx;
  }
  function get_each_context_74(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[134] = list[i];
    return child_ctx;
  }
  function get_each_context_84(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[137] = list[i];
    return child_ctx;
  }
  function get_each_context_94(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[140] = list[i];
    return child_ctx;
  }
  function get_each_context_103(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[143] = list[i];
    return child_ctx;
  }
  function get_each_context_113(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[143] = list[i];
    return child_ctx;
  }
  function get_each_context_132(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[148] = list[i];
    return child_ctx;
  }
  function get_each_context_123(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[148] = list[i];
    child_ctx[150] = i;
    return child_ctx;
  }
  function create_if_block17(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_412] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*biodataAnggota, status, skPPMVisible, presentasiHasilPPM, presentasiVisible, jenisSkema, itemsCHP, hasilPPMVisible, statusPencairanDana, danaPPMVisible, ttdSuratKontrak, skpVisible, itemsRCR, view, anggotaTim, error, items, editModeKontrakPPM, editModeProposal, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, data, abstrak, judul*/
        536870911 | dirty[1] & /*tab2, isLoading, $laporanKeuanganFile, $hasilPPMFile, editModeRAB, $rabFile, $kontrakFile, $ppmFile, tab1*/
        2044 | dirty[4] & /*$$scope*/
        536870912) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_if_block_136(ctx) {
    let div0;
    let current_block_type_index;
    let if_block0;
    let t0;
    let t1;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[42].includes(
        /*jenisSkema*/
        ctx[9]
      ) && /*status*/
      ctx[18] >= 8 || /*skemaEksternal*/
      ctx[43].includes(
        /*jenisSkema*/
        ctx[9]
      ) && /*status*/
      ctx[18] >= 8 || /*skemaMandiri*/
      ctx[44].includes(
        /*jenisSkema*/
        ctx[9]
      ) && /*status*/
      ctx[18] >= 8
    );
    let t2;
    let div1;
    let t3;
    let show_if = (
      /*ShowButtonPerbaikan*/
      ctx[70]()
    );
    let current;
    const if_block_creators = [create_if_block_335, create_else_block_102];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (!/*view*/
      ctx2[3])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, [-1, -1, -1, -1, -1]);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = !/*view*/
    ctx[3] && create_if_block_318(ctx);
    let if_block2 = show_if_1 && create_if_block_165(ctx);
    let if_block3 = (
      /*status*/
      ctx[18] === 0 && create_if_block_155(ctx)
    );
    let if_block4 = show_if && create_if_block_145(ctx);
    return {
      c() {
        div0 = element("div");
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        if (if_block2)
          if_block2.c();
        t2 = space();
        div1 = element("div");
        if (if_block3)
          if_block3.c();
        t3 = space();
        if (if_block4)
          if_block4.c();
        attr(div0, "class", "box");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        if_blocks[current_block_type_index].m(div0, null);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t2, anchor);
        insert(target, div1, anchor);
        if (if_block3)
          if_block3.m(div1, null);
        append(div1, t3);
        if (if_block4)
          if_block4.m(div1, null);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(div0, null);
        }
        if (!/*view*/
        ctx2[3]) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_318(ctx2);
            if_block1.c();
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (dirty[0] & /*jenisSkema, status*/
        262656)
          show_if_1 = /*skemaInternal*/
          ctx2[42].includes(
            /*jenisSkema*/
            ctx2[9]
          ) && /*status*/
          ctx2[18] >= 8 || /*skemaEksternal*/
          ctx2[43].includes(
            /*jenisSkema*/
            ctx2[9]
          ) && /*status*/
          ctx2[18] >= 8 || /*skemaMandiri*/
          ctx2[44].includes(
            /*jenisSkema*/
            ctx2[9]
          ) && /*status*/
          ctx2[18] >= 8;
        if (show_if_1) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema, status*/
            262656) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_165(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(t2.parentNode, t2);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*status*/
          ctx2[18] === 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_155(ctx2);
            if_block3.c();
            if_block3.m(div1, t3);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (show_if)
          if_block4.p(ctx2, dirty);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t0);
          detach(t1);
          detach(t2);
          detach(div1);
        }
        if_blocks[current_block_type_index].d();
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
      }
    };
  }
  function create_else_block_102(ctx) {
    let div0;
    let fieldview0;
    let t0;
    let div1;
    let fieldview1;
    let t1;
    let div2;
    let fieldview2;
    let t2;
    let hr;
    let t3;
    let div3;
    let fieldview3;
    let t4;
    let fieldview4;
    let t5;
    let div4;
    let fieldview5;
    let t6;
    let fieldview6;
    let t7;
    let div5;
    let fieldview7;
    let t8;
    let fieldview8;
    let t9;
    let div6;
    let fieldview9;
    let t10;
    let fieldview10;
    let t11;
    let div9;
    let div8;
    let div7;
    let p0;
    let t13;
    let p1;
    let button;
    let t15;
    let show_if_1 = (
      /*skemaEksternal*/
      ctx[43].includes(
        /*jenisSkema*/
        ctx[9]
      )
    );
    let t16;
    let show_if = (
      /*skemaInternal*/
      ctx[42].includes(
        /*jenisSkema*/
        ctx[9]
      )
    );
    let t17;
    let div10;
    let p2;
    let t19;
    let table;
    let thead;
    let t23;
    let tbody;
    let current;
    let mounted;
    let dispose;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Judul",
        content: (
          /*data*/
          ctx[4].judul
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Abstrak",
        content: (
          /*data*/
          ctx[4].abstrak
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "Status",
        content: (
          /*status*/
          ctx[18]
        ),
        skema: (
          /*data*/
          ctx[4].jenis_skema
        ),
        type: "status"
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "Jenis Proposal",
        content: (
          /*jenisProposal*/
          ctx[7]
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Jenis Kegiatan",
        content: (
          /*jenisKegiatan*/
          ctx[8]
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Jenis Skema",
        content: (
          /*jenisSkema*/
          ctx[9]
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Kelompok Keahlian",
        content: (
          /*kelompokKeahlian*/
          ctx[10]
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Topik",
        content: (
          /*topik*/
          ctx[11]
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Biaya Penelitian",
        content: (
          /*biayaPenelitian*/
          ctx[14]
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Tanggal Mulai",
        content: (
          /*tanggalMulai*/
          ctx[12]
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Tanggal Selesai",
        content: (
          /*tanggalSelesai*/
          ctx[13]
        )
      }
    });
    let if_block0 = show_if_1 && create_if_block_615(ctx);
    let if_block1 = show_if && create_if_block_603(ctx);
    let if_block2 = (
      /*anggotaTim*/
      ctx[15].length > 0 && create_if_block_593(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(fieldview0.$$.fragment);
        t0 = space();
        div1 = element("div");
        create_component(fieldview1.$$.fragment);
        t1 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t2 = space();
        hr = element("hr");
        t3 = space();
        div3 = element("div");
        create_component(fieldview3.$$.fragment);
        t4 = space();
        create_component(fieldview4.$$.fragment);
        t5 = space();
        div4 = element("div");
        create_component(fieldview5.$$.fragment);
        t6 = space();
        create_component(fieldview6.$$.fragment);
        t7 = space();
        div5 = element("div");
        create_component(fieldview7.$$.fragment);
        t8 = space();
        create_component(fieldview8.$$.fragment);
        t9 = space();
        div6 = element("div");
        create_component(fieldview9.$$.fragment);
        t10 = space();
        create_component(fieldview10.$$.fragment);
        t11 = space();
        div9 = element("div");
        div8 = element("div");
        div7 = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File Proposal</b>`;
        t13 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download Proposal";
        t15 = space();
        if (if_block0)
          if_block0.c();
        t16 = space();
        if (if_block1)
          if_block1.c();
        t17 = space();
        div10 = element("div");
        p2 = element("p");
        p2.innerHTML = `<b>Anggota Tim</b>`;
        t19 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t23 = space();
        tbody = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(div0, "class", "columns is-desktop");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div7, "class", "field");
        attr(div8, "class", "column");
        attr(div9, "class", "columns is-desktop");
        attr(p2, "class", "title is-6");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div10, "class", "field");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(fieldview0, div0, null);
        insert(target, t0, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview1, div1, null);
        insert(target, t1, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        insert(target, t2, anchor);
        insert(target, hr, anchor);
        insert(target, t3, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview3, div3, null);
        append(div3, t4);
        mount_component(fieldview4, div3, null);
        insert(target, t5, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview5, div4, null);
        append(div4, t6);
        mount_component(fieldview6, div4, null);
        insert(target, t7, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview7, div5, null);
        append(div5, t8);
        mount_component(fieldview8, div5, null);
        insert(target, t9, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview9, div6, null);
        append(div6, t10);
        mount_component(fieldview10, div6, null);
        insert(target, t11, anchor);
        insert(target, div9, anchor);
        append(div9, div8);
        append(div8, div7);
        append(div7, p0);
        append(div7, t13);
        append(div7, p1);
        append(p1, button);
        append(div9, t15);
        if (if_block0)
          if_block0.m(div9, null);
        append(div9, t16);
        if (if_block1)
          if_block1.m(div9, null);
        insert(target, t17, anchor);
        insert(target, div10, anchor);
        append(div10, p2);
        append(div10, t19);
        append(div10, table);
        append(table, thead);
        append(table, t23);
        append(table, tbody);
        if (if_block2)
          if_block2.m(tbody, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadPpm*/
            ctx[54]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*data*/
        16)
          fieldview0_changes.content = /*data*/
          ctx2[4].judul;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*data*/
        16)
          fieldview1_changes.content = /*data*/
          ctx2[4].abstrak;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*status*/
        262144)
          fieldview2_changes.content = /*status*/
          ctx2[18];
        if (dirty[0] & /*data*/
        16)
          fieldview2_changes.skema = /*data*/
          ctx2[4].jenis_skema;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*jenisProposal*/
        128)
          fieldview3_changes.content = /*jenisProposal*/
          ctx2[7];
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        256)
          fieldview4_changes.content = /*jenisKegiatan*/
          ctx2[8];
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*jenisSkema*/
        512)
          fieldview5_changes.content = /*jenisSkema*/
          ctx2[9];
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*kelompokKeahlian*/
        1024)
          fieldview6_changes.content = /*kelompokKeahlian*/
          ctx2[10];
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*topik*/
        2048)
          fieldview7_changes.content = /*topik*/
          ctx2[11];
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biayaPenelitian*/
        16384)
          fieldview8_changes.content = /*biayaPenelitian*/
          ctx2[14];
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*tanggalMulai*/
        4096)
          fieldview9_changes.content = /*tanggalMulai*/
          ctx2[12];
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*tanggalSelesai*/
        8192)
          fieldview10_changes.content = /*tanggalSelesai*/
          ctx2[13];
        fieldview10.$set(fieldview10_changes);
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if_1 = /*skemaEksternal*/
          ctx2[43].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if_1) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_615(ctx2);
            if_block0.c();
            if_block0.m(div9, t16);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if = /*skemaInternal*/
          ctx2[42].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_603(ctx2);
            if_block1.c();
            if_block1.m(div9, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*anggotaTim*/
          ctx2[15].length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_593(ctx2);
            if_block2.c();
            if_block2.m(tbody, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t0);
          detach(div1);
          detach(t1);
          detach(div2);
          detach(t2);
          detach(hr);
          detach(t3);
          detach(div3);
          detach(t5);
          detach(div4);
          detach(t7);
          detach(div5);
          detach(t9);
          detach(div6);
          detach(t11);
          detach(div9);
          detach(t17);
          detach(div10);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_335(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let hr0;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let field9;
    let t10;
    let field10;
    let t11;
    let hr1;
    let t12;
    let field11;
    let t13;
    let show_if_1 = (
      /*skemaEksternal*/
      ctx[43].includes(
        /*jenisSkema*/
        ctx[9]
      )
    );
    let t14;
    let show_if = (
      /*skemaInternal*/
      ctx[42].includes(
        /*jenisSkema*/
        ctx[9]
      )
    );
    let t15;
    let hr2;
    let t16;
    let field12;
    let t17;
    let br;
    let t18;
    let table;
    let thead;
    let t23;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_193] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_183] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Status",
        $$slots: { default: [create_default_slot_173] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_163] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_153] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_143] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_133] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_124] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_115] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_103] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_93] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "File Proposal",
        $$slots: { default: [create_default_slot_84] },
        $$scope: { ctx }
      }
    });
    let if_block0 = show_if_1 && create_if_block_416(ctx);
    let if_block1 = show_if && create_if_block_375(ctx);
    field12 = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_511] },
        $$scope: { ctx }
      }
    });
    let if_block2 = (
      /*anggotaTim*/
      ctx[15].length > 0 && create_if_block_345(ctx)
    );
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        hr0 = element("hr");
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        create_component(field9.$$.fragment);
        t10 = space();
        create_component(field10.$$.fragment);
        t11 = space();
        hr1 = element("hr");
        t12 = space();
        create_component(field11.$$.fragment);
        t13 = space();
        if (if_block0)
          if_block0.c();
        t14 = space();
        if (if_block1)
          if_block1.c();
        t15 = space();
        hr2 = element("hr");
        t16 = space();
        create_component(field12.$$.fragment);
        t17 = space();
        br = element("br");
        t18 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:65px"></th> <th class="is-narrow">Role</th> <th>Nama</th></tr>`;
        t23 = space();
        tbody = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        insert(target, hr0, anchor);
        insert(target, t3, anchor);
        mount_component(field3, target, anchor);
        insert(target, t4, anchor);
        mount_component(field4, target, anchor);
        insert(target, t5, anchor);
        mount_component(field5, target, anchor);
        insert(target, t6, anchor);
        mount_component(field6, target, anchor);
        insert(target, t7, anchor);
        mount_component(field7, target, anchor);
        insert(target, t8, anchor);
        mount_component(field8, target, anchor);
        insert(target, t9, anchor);
        mount_component(field9, target, anchor);
        insert(target, t10, anchor);
        mount_component(field10, target, anchor);
        insert(target, t11, anchor);
        insert(target, hr1, anchor);
        insert(target, t12, anchor);
        mount_component(field11, target, anchor);
        insert(target, t13, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t14, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t15, anchor);
        insert(target, hr2, anchor);
        insert(target, t16, anchor);
        mount_component(field12, target, anchor);
        insert(target, t17, anchor);
        insert(target, br, anchor);
        insert(target, t18, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t23);
        append(table, tbody);
        if (if_block2)
          if_block2.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, judul*/
        65540 | dirty[4] & /*$$scope*/
        536870912) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, abstrak*/
        131076 | dirty[4] & /*$$scope*/
        536870912) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*status, data*/
        262160 | dirty[4] & /*$$scope*/
        536870912) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        132 | dirty[4] & /*$$scope*/
        536870912) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        260 | dirty[4] & /*$$scope*/
        536870912) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        772 | dirty[4] & /*$$scope*/
        536870912) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        1028 | dirty[4] & /*$$scope*/
        536870912) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, topik*/
        2052 | dirty[4] & /*$$scope*/
        536870912) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        4100 | dirty[4] & /*$$scope*/
        536870912) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        8196 | dirty[4] & /*$$scope*/
        536870912) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        16388 | dirty[4] & /*$$scope*/
        536870912) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*editModeProposal, error*/
        134217732 | dirty[1] & /*$ppmFile*/
        1024 | dirty[4] & /*$$scope*/
        536870912) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if_1 = /*skemaEksternal*/
          ctx2[43].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if_1) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            512) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_416(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t14.parentNode, t14);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if = /*skemaInternal*/
          ctx2[42].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            512) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_375(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t15.parentNode, t15);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        const field12_changes = {};
        if (dirty[0] & /*error, items, anggotaTim*/
        32774 | dirty[4] & /*$$scope*/
        536870912) {
          field12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field12.$set(field12_changes);
        if (
          /*anggotaTim*/
          ctx2[15].length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            32768) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_345(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(field12.$$.fragment, local);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(field12.$$.fragment, local);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(hr0);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(t10);
          detach(t11);
          detach(hr1);
          detach(t12);
          detach(t13);
          detach(t14);
          detach(t15);
          detach(hr2);
          detach(t16);
          detach(t17);
          detach(br);
          detach(t18);
          detach(table);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        destroy_component(field5, detaching);
        destroy_component(field6, detaching);
        destroy_component(field7, detaching);
        destroy_component(field8, detaching);
        destroy_component(field9, detaching);
        destroy_component(field10, detaching);
        destroy_component(field11, detaching);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        destroy_component(field12, detaching);
        if (if_block2)
          if_block2.d();
      }
    };
  }
  function create_if_block_615(ctx) {
    let div;
    let p0;
    let t1;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File Kontrak PPM</b>`;
        t1 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download Kontrak PPM";
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div, "class", "column");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadKontrakPpmEksternal*/
            ctx[55]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_603(ctx) {
    let div1;
    let div0;
    let p0;
    let t1;
    let p1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div1 = element("div");
        div0 = element("div");
        p0 = element("p");
        p0.innerHTML = `<b>File RAB (Rencana Anggaran Biaya)</b>`;
        t1 = space();
        p1 = element("p");
        button = element("button");
        button.textContent = "Download RAB";
        attr(p0, "class", "title is-6");
        attr(button, "class", "button is-link button is-small");
        attr(p1, "class", "subtitle is-6");
        attr(div0, "class", "field");
        attr(div1, "class", "column");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, div0);
        append(div0, p0);
        append(div0, t1);
        append(div0, p1);
        append(p1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadRab*/
            ctx[53]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_593(ctx) {
    let each_1_anchor;
    let each_value_13 = ensure_array_like(
      /*anggotaTim*/
      ctx[15]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_13.length; i += 1) {
      each_blocks[i] = create_each_block_132(get_each_context_132(ctx, each_value_13, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        32768) {
          each_value_13 = ensure_array_like(
            /*anggotaTim*/
            ctx2[15]
          );
          let i;
          for (i = 0; i < each_value_13.length; i += 1) {
            const child_ctx = get_each_context_132(ctx2, each_value_13, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_132(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_13.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_132(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*member*/
      ctx[148].role + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*member*/
      ctx[148].label + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        32768 && t0_value !== (t0_value = /*member*/
        ctx2[148].role + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*anggotaTim*/
        32768 && t2_value !== (t2_value = /*member*/
        ctx2[148].label + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_583(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_193(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].judul && create_if_block_583(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[16]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[73]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        65536 && input.value !== /*judul*/
        ctx2[16]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[16]
          );
        }
        if (
          /*error*/
          ctx2[2].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_583(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_573(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].abstrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].abstrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_183(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].abstrak && create_if_block_573(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "class", "textarea");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*abstrak*/
          ctx[17]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[74]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*abstrak*/
        131072) {
          set_input_value(
            textarea,
            /*abstrak*/
            ctx2[17]
          );
        }
        if (
          /*error*/
          ctx2[2].abstrak
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_573(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_173(ctx) {
    let status_1;
    let current;
    status_1 = new Status_default({
      props: {
        code: (
          /*status*/
          ctx[18]
        ),
        jenisSkema: (
          /*data*/
          ctx[4].jenis_skema
        )
      }
    });
    return {
      c() {
        create_component(status_1.$$.fragment);
      },
      m(target, anchor) {
        mount_component(status_1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const status_1_changes = {};
        if (dirty[0] & /*status*/
        262144)
          status_1_changes.code = /*status*/
          ctx2[18];
        if (dirty[0] & /*data*/
        16)
          status_1_changes.jenisSkema = /*data*/
          ctx2[4].jenis_skema;
        status_1.$set(status_1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(status_1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status_1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(status_1, detaching);
      }
    };
  }
  function create_if_block_563(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_163(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].jenisProposal && create_if_block_563(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.selected = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        if (
          /*jenisProposal*/
          ctx[7] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[75].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[7],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[75]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        128) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[2].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_563(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_553(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_153(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].jenisKegiatan && create_if_block_553(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*jenisKegiatan*/
          ctx[8] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[76].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[8],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[76]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        256) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[2].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_553(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_92(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat Mandiri";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option3, option3.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
        }
      }
    };
  }
  function create_if_block_543(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option3 = element("option");
        option3.textContent = "Riset Mandiri";
        option4 = element("option");
        option4.textContent = "Riset Eksternal";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
        option3.__value = "Riset Mandiri";
        set_input_value(option3, option3.__value);
        option4.__value = "Riset Eksternal";
        set_input_value(option4, option4.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
        insert(target, option4, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
          detach(option4);
        }
      }
    };
  }
  function create_if_block_534(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_143(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[8] === "Penelitian"
      )
        return create_if_block_543;
      return create_else_block_92;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[2].jenisSkema && create_if_block_534(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\r\n                        ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        if (
          /*jenisSkema*/
          ctx[9] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[77].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[9],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[77]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        512) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[2].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_534(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_524(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_133(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].kelompokKeahlian && create_if_block_524(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Kelompok Keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[78]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        1024 && input.value !== /*kelompokKeahlian*/
        ctx2[10]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[2].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_524(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_515(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_124(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].topik && create_if_block_515(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[79]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        2048 && input.value !== /*topik*/
        ctx2[11]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[2].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_515(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_503(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_115(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].tanggalMulai && create_if_block_503(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[80]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        4096) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[2].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_503(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_493(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_103(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].tanggalSelesai && create_if_block_493(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[81]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        8192) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[2].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_493(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_483(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_93(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[2].biayaPenelitian && create_if_block_483(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[14]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_5*/
              ctx[82]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[83]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        16384 && input.value !== /*biayaPenelitian*/
        ctx2[14]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[2].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_483(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_72(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_3(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[41]?.name
      )
        return create_if_block_473;
      return create_else_block_82;
    }
    let current_block_type = select_block_type_3(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[2].fileProposal && create_if_block_464(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-13e2x4u");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-13e2x4u");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light is-small");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-13e2x4u");
        attr(p, "class", "help svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*filePpmChange*/
              ctx[45]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeProposal*/
              ctx[50]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[2].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_464(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_454(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download Proposal";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button is-small");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light is-small");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadPpm*/
              ctx[54]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeProposal*/
              ctx[50]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_82(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_473(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[41].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$ppmFile*/
        1024 && t_value !== (t_value = /*$ppmFile*/
        ctx2[41].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_464(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_84(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_454, create_else_block_72];
    const if_blocks = [];
    function select_block_type_2(ctx2, dirty) {
      if (!/*editModeProposal*/
      ctx2[27])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_2(ctx, [-1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_2(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_416(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "File Kontrak PPM",
        $$slots: { default: [create_default_slot_74] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*editModeKontrakPPM, error*/
        268435460 | dirty[1] & /*$kontrakFile*/
        512 | dirty[4] & /*$$scope*/
        536870912) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block_52(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_5(ctx2, dirty) {
      if (
        /*$kontrakFile*/
        ctx2[40]?.name
      )
        return create_if_block_445;
      return create_else_block_62;
    }
    let current_block_type = select_block_type_5(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[2].fileKontrak && create_if_block_435(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "fileKontrak");
        attr(input0, "class", "inputf custom-file-input svelte-13e2x4u");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-13e2x4u");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileKontrak");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light is-small");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-13e2x4u");
        attr(p, "class", "help svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileKontrakChange*/
              ctx[46]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeKontrakPPM*/
              ctx[51]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_5(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[2].fileKontrak
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_435(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_425(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download Kontrak PPM";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button is-small");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light is-small");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadKontrakPpmEksternal*/
              ctx[55]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeKontrakPPM*/
              ctx[51]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_62(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_445(ctx) {
    let span;
    let t_value = (
      /*$kontrakFile*/
      ctx[40].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$kontrakFile*/
        512 && t_value !== (t_value = /*$kontrakFile*/
        ctx2[40].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_435(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].fileKontrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].fileKontrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_74(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_425, create_else_block_52];
    const if_blocks = [];
    function select_block_type_4(ctx2, dirty) {
      if (!/*editModeKontrakPPM*/
      ctx2[28])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_4(ctx, [-1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_4(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_375(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "File RAB",
        $$slots: { default: [create_default_slot_610] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error*/
        4 | dirty[1] & /*editModeRAB, $rabFile*/
        260 | dirty[4] & /*$$scope*/
        536870912) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block_33(ctx) {
    let span4;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let t5;
    let button;
    let span3;
    let icon1;
    let t6;
    let t7;
    let p;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_7(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[39]?.name
      )
        return create_if_block_404;
      return create_else_block_42;
    }
    let current_block_type = select_block_type_7(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    icon1 = new Icon_default({ props: { id: "cancel", src: cancelIcon } });
    let if_block1 = (
      /*error*/
      ctx[2].fileRAB && create_if_block_395(ctx)
    );
    return {
      c() {
        span4 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        button = element("button");
        span3 = element("span");
        create_component(icon1.$$.fragment);
        t6 = space();
        if (if_block1)
          if_block1.c();
        t7 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-13e2x4u");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-13e2x4u");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileRab");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "icon");
        attr(button, "class", "button is-danger is-light is-small");
        attr(button, "title", "Cancel");
        attr(span4, "class", "inputf__wrapper svelte-13e2x4u");
        attr(p, "class", "help svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, span4, anchor);
        append(span4, input0);
        append(span4, t0);
        append(span4, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon0, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span4, t5);
        append(span4, button);
        append(button, span3);
        mount_component(icon1, span3, null);
        append(span4, t6);
        if (if_block1)
          if_block1.m(span4, null);
        insert(target, t7, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileRabChange*/
              ctx[47]
            ),
            listen(
              button,
              "click",
              /*toggleEditModeRAB*/
              ctx[52]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_7(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[2].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_395(ctx2);
            if_block1.c();
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span4);
          detach(t7);
          detach(p);
        }
        destroy_component(icon0);
        if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_385(ctx) {
    let button0;
    let t1;
    let button1;
    let span;
    let icon;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "edit", src: edit } });
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Download RAB";
        t1 = space();
        button1 = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(button0, "class", "button is-link button is-small");
        attr(span, "class", "icon");
        attr(button1, "class", "button is-link is-light is-small");
        attr(button1, "title", "Change files");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, button1, anchor);
        append(button1, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadRab*/
              ctx[53]
            ),
            listen(
              button1,
              "click",
              /*toggleEditModeRAB*/
              ctx[52]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(button1);
        }
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_42(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_404(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[39]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$rabFile*/
        256 && t_value !== (t_value = /*$rabFile*/
        ctx2[39]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_395(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_610(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block_385, create_else_block_33];
    const if_blocks = [];
    function select_block_type_6(ctx2, dirty) {
      if (!/*editModeRAB*/
      ctx2[33])
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_6(ctx, [-1, -1, -1, -1, -1]);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_6(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function create_if_block_365(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[2].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-13e2x4u");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        4 && t_value !== (t_value = /*error*/
        ctx2[2].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_511(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[84](value);
    }
    let select_props = { start: "2", items: (
      /*items*/
      ctx[1]
    ) };
    if (
      /*anggotaTim*/
      ctx[15] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[15];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[2].anggotaTim && create_if_block_365(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        2)
          select_changes.items = /*items*/
          ctx2[1];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        32768) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[15];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[2].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_365(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_345(ctx) {
    let each_1_anchor;
    let current;
    let each_value_12 = ensure_array_like(
      /*anggotaTim*/
      ctx[15]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_12.length; i += 1) {
      each_blocks[i] = create_each_block_123(get_each_context_123(ctx, each_value_12, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim*/
        32768 | dirty[2] & /*deleteMember*/
        64) {
          each_value_12 = ensure_array_like(
            /*anggotaTim*/
            ctx2[15]
          );
          let i;
          for (i = 0; i < each_value_12.length; i += 1) {
            const child_ctx = get_each_context_123(ctx2, each_value_12, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_123(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_12.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_12.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_12);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_355(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[148].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[68]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        32768 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[148].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_123(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[148].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[148].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[150] > 0 && create_if_block_355(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[150] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        32768) && t1_value !== (t1_value = /*member*/
        ctx2[148].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        32768) && t3_value !== (t3_value = /*member*/
        ctx2[148].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_318(ctx) {
    let div1;
    let h5;
    let t1;
    let div0;
    let t3;
    let table;
    let thead;
    let t9;
    let if_block = (
      /*itemsRCR*/
      ctx[5] && create_if_block_326(ctx)
    );
    return {
      c() {
        div1 = element("div");
        h5 = element("h5");
        h5.textContent = "Informasi Revisi Proposal";
        t1 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Perhatikan catatan revisi dari evaluator untuk detail yang
                     akan direvisi!</p>`;
        t3 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%; text-align: center">Evaluator</th> <th style="width: 15%; text-align: center">Tanggal</th></tr>`;
        t9 = space();
        if (if_block)
          if_block.c();
        attr(h5, "class", "title is-5");
        attr(div0, "class", "notification is-warning is-light");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, h5);
        append(div1, t1);
        append(div1, div0);
        append(div1, t3);
        append(div1, table);
        append(table, thead);
        append(table, t9);
        if (if_block)
          if_block.m(table, null);
      },
      p(ctx2, dirty) {
        if (
          /*itemsRCR*/
          ctx2[5]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_326(ctx2);
            if_block.c();
            if_block.m(table, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_326(ctx) {
    let tbody;
    let each_value_11 = ensure_array_like(
      /*itemsRCR*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_11.length; i += 1) {
      each_blocks[i] = create_each_block_113(get_each_context_113(ctx, each_value_11, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        32) {
          each_value_11 = ensure_array_like(
            /*itemsRCR*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value_11.length; i += 1) {
            const child_ctx = get_each_context_113(ctx2, each_value_11, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_113(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_11.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_113(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[143].catatan_revisi_proposal + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[143].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[143].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        set_style(td1, "text-align", "center");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsRCR*/
        32 && t0_value !== (t0_value = /*item*/
        ctx2[143].catatan_revisi_proposal + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsRCR*/
        32 && t2_value !== (t2_value = /*item*/
        ctx2[143].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsRCR*/
        32 && t4_value !== (t4_value = /*item*/
        ctx2[143].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_165(ctx) {
    let show_if_2;
    let t0;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[42].includes(
        /*jenisSkema*/
        ctx[9]
      )
    );
    let t1;
    let div0;
    let h50;
    let t2;
    let span0;
    let t3_value = (
      /*hasilPPMVisible*/
      ctx[22] ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let show_if = !/*skemaEksternal*/
    ctx[43].includes(
      /*jenisSkema*/
      ctx[9]
    ) && !/*skemaMandiri*/
    ctx[44].includes(
      /*jenisSkema*/
      ctx[9]
    );
    let t6;
    let div1;
    let h51;
    let t7;
    let span1;
    let t8_value = (
      /*skPPMVisible*/
      ctx[24] ? "(tutup)" : "(buka)"
    );
    let t8;
    let t9;
    let current;
    let mounted;
    let dispose;
    function select_block_type_8(ctx2, dirty) {
      if (dirty[0] & /*jenisSkema*/
      512)
        show_if_2 = null;
      if (show_if_2 == null)
        show_if_2 = !!/*skemaInternal*/
        ctx2[42].includes(
          /*jenisSkema*/
          ctx2[9]
        );
      if (show_if_2)
        return create_if_block_285;
      return create_else_block_23;
    }
    let current_block_type = select_block_type_8(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = show_if_1 && create_if_block_265(ctx);
    let if_block2 = (
      /*hasilPPMVisible*/
      ctx[22] && create_if_block_205(ctx)
    );
    let if_block3 = show_if && create_if_block_185(ctx);
    let if_block4 = (
      /*skPPMVisible*/
      ctx[24] && create_if_block_175(ctx)
    );
    return {
      c() {
        if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        div0 = element("div");
        h50 = element("h5");
        t2 = text("Laporan Hasil PPM\r\n                  ");
        span0 = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block2)
          if_block2.c();
        t5 = space();
        if (if_block3)
          if_block3.c();
        t6 = space();
        div1 = element("div");
        h51 = element("h5");
        t7 = text("File SK PPM\r\n                  ");
        span1 = element("span");
        t8 = text(t8_value);
        t9 = space();
        if (if_block4)
          if_block4.c();
        attr(span0, "class", "toggle-button svelte-13e2x4u");
        attr(h50, "class", "title is-6");
        attr(div0, "class", "box");
        attr(span1, "class", "toggle-button svelte-13e2x4u");
        attr(h51, "class", "title is-6");
        attr(div1, "class", "box");
      },
      m(target, anchor) {
        if_block0.m(target, anchor);
        insert(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t1, anchor);
        insert(target, div0, anchor);
        append(div0, h50);
        append(h50, t2);
        append(h50, span0);
        append(span0, t3);
        append(div0, t4);
        if (if_block2)
          if_block2.m(div0, null);
        insert(target, t5, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, t6, anchor);
        insert(target, div1, anchor);
        append(div1, h51);
        append(h51, t7);
        append(h51, span1);
        append(span1, t8);
        append(div1, t9);
        if (if_block4)
          if_block4.m(div1, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              span0,
              "click",
              /*click_handler_3*/
              ctx[89]
            ),
            listen(
              span1,
              "click",
              /*click_handler_5*/
              ctx[91]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_8(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(t0.parentNode, t0);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if_1 = /*skemaInternal*/
          ctx2[42].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if_1) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_265(ctx2);
            if_block1.c();
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if ((!current || dirty[0] & /*hasilPPMVisible*/
        4194304) && t3_value !== (t3_value = /*hasilPPMVisible*/
        ctx2[22] ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*hasilPPMVisible*/
          ctx2[22]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*hasilPPMVisible*/
            4194304) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_205(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(div0, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if = !/*skemaEksternal*/
          ctx2[43].includes(
            /*jenisSkema*/
            ctx2[9]
          ) && !/*skemaMandiri*/
          ctx2[44].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_185(ctx2);
            if_block3.c();
            if_block3.m(t6.parentNode, t6);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if ((!current || dirty[0] & /*skPPMVisible*/
        16777216) && t8_value !== (t8_value = /*skPPMVisible*/
        ctx2[24] ? "(tutup)" : "(buka)"))
          set_data(t8, t8_value);
        if (
          /*skPPMVisible*/
          ctx2[24]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_175(ctx2);
            if_block4.c();
            if_block4.m(div1, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(div0);
          detach(t5);
          detach(t6);
          detach(div1);
        }
        if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d(detaching);
        if (if_block4)
          if_block4.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_23(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*skpVisible*/
      ctx[26] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*skpVisible*/
      ctx[26] && create_if_block_305(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Download Dokumen Pendukung\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-13e2x4u");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_1*/
            ctx[87]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*skpVisible*/
        67108864 && t1_value !== (t1_value = /*skpVisible*/
        ctx2[26] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*skpVisible*/
          ctx2[26]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_305(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_285(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*skpVisible*/
      ctx[26] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*skpVisible*/
      ctx[26] && create_if_block_295(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Download Dokumen Pendukung\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-13e2x4u");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler*/
            ctx[85]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*skpVisible*/
        67108864 && t1_value !== (t1_value = /*skpVisible*/
        ctx2[26] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*skpVisible*/
          ctx2[26]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_295(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_305(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Surat Tugas";
        t6 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadSuratTugas*/
            ctx[58]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_295(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t6;
    let tbody;
    let tr1;
    let td0;
    let t8;
    let td1;
    let button0;
    let t10;
    let td2;
    let t11;
    let tr2;
    let td3;
    let t13;
    let td4;
    let button1;
    let t15;
    let td5;
    let input;
    let t16;
    let tr3;
    let td6;
    let t18;
    let td7;
    let button2;
    let t20;
    let td8;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th> <th class="is-narrow">Tanda tangan</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "SK Pendanaan";
        t8 = space();
        td1 = element("td");
        button0 = element("button");
        button0.textContent = "Download";
        t10 = space();
        td2 = element("td");
        t11 = space();
        tr2 = element("tr");
        td3 = element("td");
        td3.textContent = "Surat Kontrak PPM";
        t13 = space();
        td4 = element("td");
        button1 = element("button");
        button1.textContent = "Download";
        t15 = space();
        td5 = element("td");
        input = element("input");
        t16 = space();
        tr3 = element("tr");
        td6 = element("td");
        td6.textContent = "Surat Tugas";
        t18 = space();
        td7 = element("td");
        button2 = element("button");
        button2.textContent = "Download";
        t20 = space();
        td8 = element("td");
        attr(button0, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(button1, "class", "button is-link button is-small");
        set_style(td4, "text-align", "center");
        attr(input, "type", "checkbox");
        set_style(td5, "text-align", "center");
        attr(button2, "class", "button is-link button is-small");
        set_style(td7, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t6);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t8);
        append(tr1, td1);
        append(td1, button0);
        append(tr1, t10);
        append(tr1, td2);
        append(tbody, t11);
        append(tbody, tr2);
        append(tr2, td3);
        append(tr2, t13);
        append(tr2, td4);
        append(td4, button1);
        append(tr2, t15);
        append(tr2, td5);
        append(td5, input);
        input.checked = /*ttdSuratKontrak*/
        ctx[19];
        append(tbody, t16);
        append(tbody, tr3);
        append(tr3, td6);
        append(tr3, t18);
        append(tr3, td7);
        append(td7, button2);
        append(tr3, t20);
        append(tr3, td8);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleDownloadSkPendanaan*/
              ctx[56]
            ),
            listen(
              button1,
              "click",
              /*handleDownloadSuratKontrak*/
              ctx[57]
            ),
            listen(
              input,
              "change",
              /*input_change_handler*/
              ctx[86]
            ),
            listen(
              input,
              "change",
              /*checkboxSuratKontrak*/
              ctx[69]
            ),
            listen(
              button2,
              "click",
              /*handleDownloadSuratTugas*/
              ctx[58]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*ttdSuratKontrak*/
        524288) {
          input.checked = /*ttdSuratKontrak*/
          ctx2[19];
        }
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_265(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*danaPPMVisible*/
      ctx[23] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*danaPPMVisible*/
      ctx[23] && create_if_block_275(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Pendanaan PPM\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-13e2x4u");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_2*/
            ctx[88]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*danaPPMVisible*/
        8388608 && t1_value !== (t1_value = /*danaPPMVisible*/
        ctx2[23] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*danaPPMVisible*/
          ctx2[23]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_275(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_275(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let tr0;
    let th0;
    let t2;
    let th1;
    let span;
    let t3;
    let t4;
    let tbody;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        tr0 = element("tr");
        th0 = element("th");
        th0.textContent = "Status Pencairan Dana";
        t2 = space();
        th1 = element("th");
        span = element("span");
        t3 = text(
          /*statusPencairanDana*/
          ctx[21]
        );
        t4 = space();
        tbody = element("tbody");
        tbody.innerHTML = `<tr><td colspan="2"><div class="notification is-warning is-light"><p class="subtitle is-6">Untuk pengambilan dana dan penjelasan
                                       lebih lanjut terkait Pendanaan, hubungi
                                       LPPM UISI.</p></div></td></tr>`;
        set_style(th0, "width", "70%");
        attr(span, "class", "tag is-info");
        attr(th1, "class", "is-narrow");
        set_style(th1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(thead, tr0);
        append(tr0, th0);
        append(tr0, t2);
        append(tr0, th1);
        append(th1, span);
        append(span, t3);
        append(table, t4);
        append(table, tbody);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*statusPencairanDana*/
        2097152)
          set_data(
            t3,
            /*statusPencairanDana*/
            ctx2[21]
          );
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
      }
    };
  }
  function create_if_block_205(ctx) {
    let hr0;
    let t0;
    let table0;
    let thead0;
    let t6;
    let tbody;
    let tr1;
    let td0;
    let t8;
    let td1;
    let span3;
    let input0;
    let t9;
    let div0;
    let label;
    let input1;
    let t10;
    let span2;
    let span0;
    let icon;
    let t11;
    let span1;
    let t13;
    let t14;
    let td2;
    let button;
    let t16;
    let show_if_1 = (
      /*skemaInternal*/
      ctx[42].includes(
        /*jenisSkema*/
        ctx[9]
      )
    );
    let t17;
    let show_if = (
      /*showSubmitHasilPPM_Button*/
      ctx[71]()
    );
    let t18;
    let hr1;
    let t19;
    let div1;
    let t21;
    let table1;
    let thead1;
    let t27;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_9(ctx2, dirty) {
      if (
        /*$hasilPPMFile*/
        ctx2[38]?.name
      )
        return create_if_block_255;
      return create_else_block_111;
    }
    let current_block_type = select_block_type_9(ctx, [-1, -1, -1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = show_if_1 && create_if_block_236(ctx);
    let if_block2 = show_if && create_if_block_226(ctx);
    let if_block3 = (
      /*itemsCHP*/
      ctx[6] && create_if_block_219(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Upload File (.pdf)</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t6 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Laporan Hasil PPM";
        t8 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t9 = space();
        div0 = element("div");
        label = element("label");
        input1 = element("input");
        t10 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t11 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t13 = space();
        if_block0.c();
        t14 = space();
        td2 = element("td");
        button = element("button");
        button.textContent = "Download";
        t16 = space();
        if (if_block1)
          if_block1.c();
        t17 = space();
        if (if_block2)
          if_block2.c();
        t18 = space();
        hr1 = element("hr");
        t19 = space();
        div1 = element("div");
        div1.innerHTML = `<p>Perhatikan catatan revisi dari evaluator untuk detail
                        yang akan direvisi!</p>`;
        t21 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 70%;">Riwayat Catatan Revisi</th> <th style="width: 15%; text-align: center">Evaluator</th> <th style="width: 15%; text-align: center">Tanggal</th></tr>`;
        t27 = space();
        if (if_block3)
          if_block3.c();
        attr(input0, "id", "fileHasilPPM");
        attr(input0, "class", "inputf custom-file-input svelte-13e2x4u");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-13e2x4u");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileHasilPPM");
        attr(div0, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-13e2x4u");
        attr(button, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div1, "class", "notification is-warning is-light");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t6);
        append(table0, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t8);
        append(tr1, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t9);
        append(span3, div0);
        append(div0, label);
        append(label, input1);
        append(label, t10);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t11);
        append(span2, span1);
        append(label, t13);
        if_block0.m(label, null);
        append(tr1, t14);
        append(tr1, td2);
        append(td2, button);
        append(tbody, t16);
        if (if_block1)
          if_block1.m(tbody, null);
        insert(target, t17, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t18, anchor);
        insert(target, hr1, anchor);
        insert(target, t19, anchor);
        insert(target, div1, anchor);
        insert(target, t21, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t27);
        if (if_block3)
          if_block3.m(table1, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileHasilPPMChange*/
              ctx[48]
            ),
            listen(
              button,
              "click",
              /*handleDownloadHasilPPM*/
              ctx[60]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_9(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        512)
          show_if_1 = /*skemaInternal*/
          ctx2[42].includes(
            /*jenisSkema*/
            ctx2[9]
          );
        if (show_if_1) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            512) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_236(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (show_if)
          if_block2.p(ctx2, dirty);
        if (
          /*itemsCHP*/
          ctx2[6]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_219(ctx2);
            if_block3.c();
            if_block3.m(table1, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(table0);
          detach(t17);
          detach(t18);
          detach(hr1);
          detach(t19);
          detach(div1);
          detach(t21);
          detach(table1);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_111(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_255(ctx) {
    let span;
    let t_value = (
      /*$hasilPPMFile*/
      ctx[38].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$hasilPPMFile*/
        128 && t_value !== (t_value = /*$hasilPPMFile*/
        ctx2[38].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_236(ctx) {
    let tr;
    let td0;
    let t1;
    let td1;
    let span3;
    let input0;
    let t2;
    let div;
    let label;
    let input1;
    let t3;
    let span2;
    let span0;
    let icon;
    let t4;
    let span1;
    let t6;
    let t7;
    let td2;
    let button;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_10(ctx2, dirty) {
      if (
        /*$laporanKeuanganFile*/
        ctx2[37]?.name
      )
        return create_if_block_245;
      return create_else_block11;
    }
    let current_block_type = select_block_type_10(ctx, [-1, -1, -1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        td0.textContent = "Laporan Keuangan";
        t1 = space();
        td1 = element("td");
        span3 = element("span");
        input0 = element("input");
        t2 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t3 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t4 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t6 = space();
        if_block.c();
        t7 = space();
        td2 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(input0, "id", "fileLaporanKeuangan");
        attr(input0, "class", "inputf custom-file-input svelte-13e2x4u");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-13e2x4u");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileLaporanKeuangan");
        attr(div, "class", "file has-name is-small");
        attr(span3, "class", "inputf__wrapper svelte-13e2x4u");
        attr(button, "class", "button is-link button is-small");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(tr, t1);
        append(tr, td1);
        append(td1, span3);
        append(span3, input0);
        append(span3, t2);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t3);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t4);
        append(span2, span1);
        append(label, t6);
        if_block.m(label, null);
        append(tr, t7);
        append(tr, td2);
        append(td2, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input0,
              "change",
              /*fileLaporanKeuanganChange*/
              ctx[49]
            ),
            listen(
              button,
              "click",
              /*handleDownloadLaporanKeuangan*/
              ctx[61]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_10(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(label, null);
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block11(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_245(ctx) {
    let span;
    let t_value = (
      /*$laporanKeuanganFile*/
      ctx[37].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*$laporanKeuanganFile*/
        64 && t_value !== (t_value = /*$laporanKeuanganFile*/
        ctx2[37].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_226(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Submit Hasil PPM";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[34]
        );
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleSubmitHasilPPM*/
            ctx[65]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*isLoading*/
        8) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[34]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_219(ctx) {
    let tbody;
    let each_value_10 = ensure_array_like(
      /*itemsCHP*/
      ctx[6]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_103(get_each_context_103(ctx, each_value_10, i));
    }
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsCHP*/
        64) {
          each_value_10 = ensure_array_like(
            /*itemsCHP*/
            ctx2[6]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_103(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_103(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_10.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_103(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[143].catatan_revisi_hasil_ppm + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[143].evaluator + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*item*/
      ctx[143].time + ""
    );
    let t4;
    let t5;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        set_style(td1, "text-align", "center");
        set_style(td2, "text-align", "center");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*itemsCHP*/
        64 && t0_value !== (t0_value = /*item*/
        ctx2[143].catatan_revisi_hasil_ppm + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*itemsCHP*/
        64 && t2_value !== (t2_value = /*item*/
        ctx2[143].evaluator + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*itemsCHP*/
        64 && t4_value !== (t4_value = /*item*/
        ctx2[143].time + ""))
          set_data(t4, t4_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_185(ctx) {
    let div;
    let h5;
    let t0;
    let span;
    let t1_value = (
      /*presentasiVisible*/
      ctx[25] ? "(tutup)" : "(buka)"
    );
    let t1;
    let t2;
    let mounted;
    let dispose;
    let if_block = (
      /*presentasiVisible*/
      ctx[25] && create_if_block_195(ctx)
    );
    return {
      c() {
        div = element("div");
        h5 = element("h5");
        t0 = text("Presentasi Hasil PPM\r\n                     ");
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        if (if_block)
          if_block.c();
        attr(span, "class", "toggle-button svelte-13e2x4u");
        attr(h5, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h5);
        append(h5, t0);
        append(h5, span);
        append(span, t1);
        append(div, t2);
        if (if_block)
          if_block.m(div, null);
        if (!mounted) {
          dispose = listen(
            span,
            "click",
            /*click_handler_4*/
            ctx[90]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*presentasiVisible*/
        33554432 && t1_value !== (t1_value = /*presentasiVisible*/
        ctx2[25] ? "(tutup)" : "(buka)"))
          set_data(t1, t1_value);
        if (
          /*presentasiVisible*/
          ctx2[25]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_195(ctx2);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_195(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let t7_value = (
      /*presentasiHasilPPM*/
      ctx[20] ? "\u2714" : ""
    );
    let t7;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Kegiatan</th> <th class="is-narrow" style="text-align: center">Checkbox</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "Mempresentasikan hasil PPM di seminar\r\n                                 Penelitian / Pengmas bersama UISI di bulan\r\n                                 Desember";
        t6 = space();
        td1 = element("td");
        t7 = text(t7_value);
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*presentasiHasilPPM*/
        1048576 && t7_value !== (t7_value = /*presentasiHasilPPM*/
        ctx2[20] ? "\u2714" : ""))
          set_data(t7, t7_value);
      },
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
      }
    };
  }
  function create_if_block_175(ctx) {
    let hr;
    let t0;
    let table;
    let thead;
    let t4;
    let tbody;
    let tr1;
    let td0;
    let t6;
    let td1;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        hr = element("hr");
        t0 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Nama</th> <th class="is-narrow" style="text-align: center">Download File</th></tr>`;
        t4 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        td0.textContent = "SK PPM";
        t6 = space();
        td1 = element("td");
        button = element("button");
        button.textContent = "Download";
        attr(button, "class", "button is-link button is-small");
        set_style(td1, "text-align", "center");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr, anchor);
        insert(target, t0, anchor);
        insert(target, table, anchor);
        append(table, thead);
        append(table, t4);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(tr1, t6);
        append(tr1, td1);
        append(td1, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handleDownloadSkPPM*/
            ctx[59]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(hr);
          detach(t0);
          detach(table);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_155(ctx) {
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let mounted;
    let dispose;
    return {
      c() {
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Simpan";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Submit";
        attr(button0, "class", "button is-info is-light");
        toggle_class(
          button0,
          "is-loading",
          /*isLoading*/
          ctx[34]
        );
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[34]
        );
        attr(p1, "class", "control");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        append(p0, button0);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
        append(p1, button1);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*handleSimpanProposal*/
              ctx[64]
            ),
            listen(
              button1,
              "click",
              /*handleSubmitProposal*/
              ctx[63]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*isLoading*/
        8) {
          toggle_class(
            button0,
            "is-loading",
            /*isLoading*/
            ctx2[34]
          );
        }
        if (dirty[1] & /*isLoading*/
        8) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[34]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_145(ctx) {
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        p = element("p");
        button = element("button");
        button.textContent = "Perbaikan";
        attr(button, "class", "button is-info");
        toggle_class(
          button,
          "is-loading",
          /*isLoading*/
          ctx[34]
        );
        attr(p, "class", "control");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*handlePerbaikan*/
            ctx[62]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*isLoading*/
        8) {
          toggle_class(
            button,
            "is-loading",
            /*isLoading*/
            ctx2[34]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_121(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[0].length > 0 && create_if_block_220(ctx)
    );
    return {
      c() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[0].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_220(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_220(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block12(get_each_context12(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context12(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block12(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_12);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_319(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let fieldview13;
    let t18;
    let hr1;
    let t19;
    let h51;
    let t21;
    let table0;
    let thead0;
    let t31;
    let tbody0;
    let t32;
    let table1;
    let thead1;
    let t42;
    let tbody1;
    let t43;
    let table2;
    let thead2;
    let t53;
    let tbody2;
    let t54;
    let hr2;
    let t55;
    let h52;
    let t57;
    let table3;
    let thead3;
    let t67;
    let tbody3;
    let t68;
    let hr3;
    let t69;
    let h53;
    let t71;
    let table4;
    let thead4;
    let t81;
    let tbody4;
    let t82;
    let hr4;
    let t83;
    let h54;
    let t85;
    let table5;
    let thead5;
    let t93;
    let tbody5;
    let t94;
    let hr5;
    let t95;
    let h55;
    let t97;
    let table6;
    let thead6;
    let t107;
    let tbody6;
    let t108;
    let hr6;
    let t109;
    let h56;
    let t111;
    let table7;
    let thead7;
    let t121;
    let tbody7;
    let t122;
    let hr7;
    let t123;
    let h57;
    let t125;
    let table8;
    let thead8;
    let t135;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[113].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[113].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[113].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[113].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[113].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[113].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[113].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[113].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[113].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[113].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[113].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[113].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[113].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    fieldview13 = new Fieldview_default({ props: { title: "", content: "" } });
    let if_block0 = (
      /*user*/
      ctx[113].RPS1.length > 0 && create_if_block_126(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[113].RPS2.length > 0 && create_if_block_1111(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[113].RPS3.length > 0 && create_if_block_105(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[113].Ppenelitian.length > 0 && create_if_block_95(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[113].Ppengmas.length > 0 && create_if_block_85(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[113].Pdiseminasi.length > 0 && create_if_block_712(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[113].Ppublikasi.length > 0 && create_if_block_616(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[113].PpenulisanBuku.length > 0 && create_if_block_516(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[113].Phki.length > 0 && create_if_block_417(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        create_component(fieldview13.$$.fragment);
        t18 = space();
        hr1 = element("hr");
        t19 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t21 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t31 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t32 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t42 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t43 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t53 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t54 = space();
        hr2 = element("hr");
        t55 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t57 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t67 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t68 = space();
        hr3 = element("hr");
        t69 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t71 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t81 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t82 = space();
        hr4 = element("hr");
        t83 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t85 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t93 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t94 = space();
        hr5 = element("hr");
        t95 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan\r\n                        Proceeding)";
        t97 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                 Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t107 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t108 = space();
        hr6 = element("hr");
        t109 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t111 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t121 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t122 = space();
        hr7 = element("hr");
        t123 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t125 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t135 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        append(div7, t17);
        mount_component(fieldview13, div7, null);
        insert(target, t18, anchor);
        insert(target, hr1, anchor);
        insert(target, t19, anchor);
        insert(target, h51, anchor);
        insert(target, t21, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t31);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t32, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t42);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t43, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t53);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t54, anchor);
        insert(target, hr2, anchor);
        insert(target, t55, anchor);
        insert(target, h52, anchor);
        insert(target, t57, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t67);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t68, anchor);
        insert(target, hr3, anchor);
        insert(target, t69, anchor);
        insert(target, h53, anchor);
        insert(target, t71, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t81);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t82, anchor);
        insert(target, hr4, anchor);
        insert(target, t83, anchor);
        insert(target, h54, anchor);
        insert(target, t85, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t93);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t94, anchor);
        insert(target, hr5, anchor);
        insert(target, t95, anchor);
        insert(target, h55, anchor);
        insert(target, t97, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t107);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t108, anchor);
        insert(target, hr6, anchor);
        insert(target, t109, anchor);
        insert(target, h56, anchor);
        insert(target, t111, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t121);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t122, anchor);
        insert(target, hr7, anchor);
        insert(target, t123, anchor);
        insert(target, h57, anchor);
        insert(target, t125, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t135);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview0_changes.content = /*user*/
          ctx2[113].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview1_changes.content = /*user*/
          ctx2[113].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview2_changes.content = /*user*/
          ctx2[113].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview3_changes.content = /*user*/
          ctx2[113].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview4_changes.content = /*user*/
          ctx2[113].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview5_changes.content = /*user*/
          ctx2[113].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview6_changes.content = /*user*/
          ctx2[113].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview7_changes.content = /*user*/
          ctx2[113].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview8_changes.content = /*user*/
          ctx2[113].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview9_changes.content = /*user*/
          ctx2[113].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview10_changes.content = /*user*/
          ctx2[113].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview11_changes.content = /*user*/
          ctx2[113].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        1)
          fieldview12_changes.content = /*user*/
          ctx2[113].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[113].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_126(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[113].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_1111(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[113].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_105(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[113].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_95(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[113].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_85(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[113].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_712(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[113].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_616(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[113].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_516(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[113].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_417(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        transition_in(fieldview13.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        transition_out(fieldview13.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t18);
          detach(hr1);
          detach(t19);
          detach(h51);
          detach(t21);
          detach(table0);
          detach(t32);
          detach(table1);
          detach(t43);
          detach(table2);
          detach(t54);
          detach(hr2);
          detach(t55);
          detach(h52);
          detach(t57);
          detach(table3);
          detach(t68);
          detach(hr3);
          detach(t69);
          detach(h53);
          detach(t71);
          detach(table4);
          detach(t82);
          detach(hr4);
          detach(t83);
          detach(h54);
          detach(t85);
          detach(table5);
          detach(t94);
          detach(hr5);
          detach(t95);
          detach(h55);
          detach(t97);
          detach(table6);
          detach(t108);
          detach(hr6);
          detach(t109);
          detach(h56);
          detach(t111);
          detach(table7);
          detach(t122);
          detach(hr7);
          detach(t123);
          detach(h57);
          detach(t125);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        destroy_component(fieldview13);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_126(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[113].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_94(get_each_context_94(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[113].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_94(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_94(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_94(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[140].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[140].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[140].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[140].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[140].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*RPS1*/
        ctx2[140].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*RPS1*/
        ctx2[140].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*RPS1*/
        ctx2[140].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*RPS1*/
        ctx2[140].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*RPS1*/
        ctx2[140].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1111(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[113].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_84(get_each_context_84(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[113].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_84(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_84(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_84(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[137].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[137].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[137].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[137].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[137].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*RPS2*/
        ctx2[137].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*RPS2*/
        ctx2[137].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*RPS2*/
        ctx2[137].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*RPS2*/
        ctx2[137].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*RPS2*/
        ctx2[137].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_105(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[113].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_74(get_each_context_74(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[113].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_74(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_74(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_74(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[134].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[134].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[134].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[134].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[134].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*RPS3*/
        ctx2[134].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*RPS3*/
        ctx2[134].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*RPS3*/
        ctx2[134].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*RPS3*/
        ctx2[134].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*RPS3*/
        ctx2[134].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_95(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[113].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_64(get_each_context_64(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[113].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_64(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_64(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_64(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[131].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[131].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[131].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[131].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[131].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*PP*/
        ctx2[131].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*PP*/
        ctx2[131].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*PP*/
        ctx2[131].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*PP*/
        ctx2[131].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*PP*/
        ctx2[131].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_85(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[113].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_54(get_each_context_54(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[113].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_54(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_54(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_54(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[128].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[128].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[128].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[128].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[128].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*PM*/
        ctx2[128].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*PM*/
        ctx2[128].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*PM*/
        ctx2[128].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*PM*/
        ctx2[128].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*PM*/
        ctx2[128].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_712(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[113].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_44(get_each_context_44(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[113].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_44(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_44(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_44(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[125].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[125].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[125].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[125].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*PD*/
        ctx2[125].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*PD*/
        ctx2[125].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*PD*/
        ctx2[125].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*PD*/
        ctx2[125].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_616(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[113].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_34(get_each_context_34(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[113].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_34(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_34(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_34(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[122].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[122].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[122].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[122].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[122].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*PPub*/
        ctx2[122].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*PPub*/
        ctx2[122].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*PPub*/
        ctx2[122].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*PPub*/
        ctx2[122].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*PPub*/
        ctx2[122].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_516(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[113].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_25(get_each_context_25(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[113].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_25(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_25(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_25(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[119].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[119].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[119].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[119].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[119].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*PPB*/
        ctx2[119].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*PPB*/
        ctx2[119].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*PPB*/
        ctx2[119].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*PPB*/
        ctx2[119].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*PPB*/
        ctx2[119].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_417(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[113].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_17(get_each_context_17(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[113].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_17(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_17(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_17(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[116].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[116].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[116].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[116].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[116].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        1 && t0_value !== (t0_value = /*PHKI*/
        ctx2[116].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t2_value !== (t2_value = /*PHKI*/
        ctx2[116].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t4_value !== (t4_value = /*PHKI*/
        ctx2[116].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t6_value !== (t6_value = /*PHKI*/
        ctx2[116].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        1 && t8_value !== (t8_value = /*PHKI*/
        ctx2[116].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block12(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[113].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[0][
        /*index*/
        ctx[115]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler_6() {
      return (
        /*click_handler_6*/
        ctx[92](
          /*index*/
          ctx[115]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[0][
        /*index*/
        ctx[115]
      ].profileVisible && create_if_block_319(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-13e2x4u");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler_6);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        1) && t1_value !== (t1_value = /*user*/
        ctx[113].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        1) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[0][
          /*index*/
          ctx[115]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[0][
            /*index*/
            ctx[115]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_319(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_412(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let t6;
    let if_block1_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[35] === true && create_if_block_136(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[36] === true && create_if_block_121(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Detail PPM";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Detail PPM</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Biodata Peneliti</span></a>`;
        t5 = space();
        if (if_block0)
          if_block0.c();
        t6 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[35]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[36]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        insert(target, t5, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t6, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[66]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[67]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[1] & /*tab1*/
        16) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[35]
          );
        }
        if (!current || dirty[1] & /*tab2*/
        32) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[36]
          );
        }
        if (
          /*tab1*/
          ctx2[35] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[1] & /*tab1*/
            16) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_136(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t6.parentNode, t6);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[36] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[1] & /*tab2*/
            32) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_121(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t5);
          detach(t6);
          detach(if_block1_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_313(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_214(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Gagal mengunduh file. Pastikan file telah di upload atau coba unduh\r\n      beberapa saat lagi.";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_116(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Anda belum mengupload file Laporan Hasil PPM";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot13(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berhasil menyimpan data";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment36(ctx) {
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let t2;
    let modalerror2;
    let updating_show_2;
    let t3;
    let modalchecked;
    let updating_show_3;
    let current;
    let if_block = (
      /*data*/
      ctx[4] && /*items*/
      ctx[1].length > 0 && create_if_block17(ctx)
    );
    function modalerror0_show_binding(value) {
      ctx[93](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_313] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[29] !== void 0
    ) {
      modalerror0_props.show = /*showModalError*/
      ctx[29];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[94](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot_214] },
      $$scope: { ctx }
    };
    if (
      /*ModalFileNotFound*/
      ctx[32] !== void 0
    ) {
      modalerror1_props.show = /*ModalFileNotFound*/
      ctx[32];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    function modalerror2_show_binding(value) {
      ctx[95](value);
    }
    let modalerror2_props = {
      $$slots: { default: [create_default_slot_116] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorHasilPPM*/
      ctx[30] !== void 0
    ) {
      modalerror2_props.show = /*showModalErrorHasilPPM*/
      ctx[30];
    }
    modalerror2 = new Modalerror_default({ props: modalerror2_props });
    binding_callbacks.push(() => bind(modalerror2, "show", modalerror2_show_binding));
    function modalchecked_show_binding(value) {
      ctx[96](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot13] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[31] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[31];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
        t2 = space();
        create_component(modalerror2.$$.fragment);
        t3 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modalerror2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*data*/
          ctx2[4] && /*items*/
          ctx2[1].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*data, items*/
            18) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block17(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        const modalerror0_changes = {};
        if (dirty[4] & /*$$scope*/
        536870912) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalError*/
        536870912) {
          updating_show = true;
          modalerror0_changes.show = /*showModalError*/
          ctx2[29];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[4] & /*$$scope*/
        536870912) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[1] & /*ModalFileNotFound*/
        2) {
          updating_show_1 = true;
          modalerror1_changes.show = /*ModalFileNotFound*/
          ctx2[32];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
        const modalerror2_changes = {};
        if (dirty[4] & /*$$scope*/
        536870912) {
          modalerror2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[0] & /*showModalErrorHasilPPM*/
        1073741824) {
          updating_show_2 = true;
          modalerror2_changes.show = /*showModalErrorHasilPPM*/
          ctx2[30];
          add_flush_callback(() => updating_show_2 = false);
        }
        modalerror2.$set(modalerror2_changes);
        const modalchecked_changes = {};
        if (dirty[4] & /*$$scope*/
        536870912) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[1] & /*showModalChecked*/
        1) {
          updating_show_3 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[31];
          add_flush_callback(() => updating_show_3 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        transition_in(modalerror2.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        transition_out(modalerror2.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
        }
        if (if_block)
          if_block.d(detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
        destroy_component(modalerror2, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function formatDate3(dateString) {
    const date = new Date(dateString);
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, "0");
    const day = String(date.getUTCDate()).padStart(2, "0");
    const hours = String(date.getUTCHours()).padStart(2, "0");
    const minutes = String(date.getUTCMinutes()).padStart(2, "0");
    const seconds = String(date.getUTCSeconds()).padStart(2, "0");
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
  }
  function isEdit2(code, jenisSkema) {
    let editStatus;
    switch (jenisSkema) {
      case "Riset Kelompok Keahlian":
      case "Riset Terapan":
      case "Riset Kerjasama":
      case "Pengabdian Masyarakat Desa Binaan":
      case "Pengabdian Masyarakat UMKM Binaan":
        editStatus = [0, 1, 3, 5];
        break;
      case "Riset Eksternal":
      case "Pengabdian Masyarakat Hibah Eksternal":
        editStatus = [0, 1, 3, 5];
        break;
      case "Riset Mandiri":
      case "Pengabdian Masyarakat Mandiri":
        editStatus = [0, 1, 3, 5];
        break;
      default:
        editStatus = [];
    }
    return editStatus.includes(code);
  }
  function formatRupiah3(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance29($$self, $$props, $$invalidate) {
    let $apiURL;
    let $route;
    let $laporanKeuanganFile;
    let $hasilPPMFile;
    let $rabFile;
    let $kontrakFile;
    let $ppmFile;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(103, $apiURL = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(104, $route = $$value));
    component_subscribe($$self, laporanKeuanganFile, ($$value) => $$invalidate(37, $laporanKeuanganFile = $$value));
    component_subscribe($$self, hasilPPMFile, ($$value) => $$invalidate(38, $hasilPPMFile = $$value));
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(39, $rabFile = $$value));
    component_subscribe($$self, kontrakFile, ($$value) => $$invalidate(40, $kontrakFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(41, $ppmFile = $$value));
    let { params } = $$props;
    const id = params["1"];
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let newBiodataAnggota = [];
    let biodataAnggota = [];
    let items = [];
    let error = {};
    let view;
    let data2;
    let catatanRevisiProposal;
    let itemsRCR;
    let itemsCHP;
    let fileRab;
    let filePpm;
    let fileKontrak2;
    let fileHasilPPM;
    let fileLaporanKeuangan2;
    let jenisProposal, jenisKegiatan, jenisSkema, kelompokKeahlian, topik, tanggalMulai, tanggalSelesai, biayaPenelitian, anggotaTim = [], judul, abstrak, status, ttdSuratKontrak, presentasiHasilPPM, statusPencairanDana;
    let hasilPPMVisible = false;
    let danaPPMVisible = false;
    let skPPMVisible = false;
    let presentasiVisible = false;
    let skpVisible = false;
    let editModeProposal = false;
    let editModeKontrakPPM = false;
    let showModalError = false;
    let showModalErrorHasilPPM = false;
    let showModalChecked = false;
    let ModalFileNotFound = false;
    let editModeRAB = false;
    let isLoading = false;
    const skemaInternal = [
      "Riset Kelompok Keahlian",
      "Riset Terapan",
      "Riset Kerjasama",
      "Pengabdian Masyarakat Desa Binaan",
      "Pengabdian Masyarakat UMKM Binaan"
    ];
    const skemaEksternal = ["Riset Eksternal", "Pengabdian Masyarakat Hibah Eksternal"];
    const skemaMandiri = ["Riset Mandiri", "Pengabdian Masyarakat Mandiri"];
    onMount(async () => {
      await getDetailPPM();
      const responseRCR = await fetch($apiURL + "/riwayatCatatanRevisiProposal/" + ppmId, { method: "GET", headers });
      const dataRCR = await responseRCR.json();
      if (responseRCR.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRCR.ok) {
          $$invalidate(5, itemsRCR = dataRCR.dbData.map((item) => ({ ...item, time: formatDate3(item.time) })));
        }
      }
      const responseCHP = await fetch($apiURL + "/riwayatCatatanRevisiHasilPPM/" + ppmId, { method: "GET", headers });
      const dataCHP = await responseCHP.json();
      if (responseCHP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCHP.ok) {
          $$invalidate(6, itemsCHP = dataCHP.dbData.map((item) => ({ ...item, time: formatDate3(item.time) })));
        }
      }
      const responsee = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const results = await responsee.json();
      if (responsee.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsee.ok) {
          listUser = results;
          for (const [key, value] of Object.entries(listUser)) {
            $$invalidate(1, items = [
              ...items,
              {
                value: value.uid,
                label: value.nama_lengkap
              }
            ]);
          }
        } else {
          console.log(responsee);
        }
      }
    });
    async function getDetailPPM() {
      const response = await fetch($apiURL + "/ppm/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(4, data2 = result);
          $$invalidate(3, view = !isEdit2(data2.status, data2.jenis_skema));
          ppmId = data2.id;
          $$invalidate(7, jenisProposal = data2.jenis_proposal);
          $$invalidate(8, jenisKegiatan = data2.jenis_kegiatan);
          $$invalidate(9, jenisSkema = data2.jenis_skema);
          $$invalidate(10, kelompokKeahlian = data2.kelompok_keahlian);
          $$invalidate(11, topik = data2.topik);
          $$invalidate(12, tanggalMulai = data2.tanggal_mulai);
          $$invalidate(13, tanggalSelesai = data2.tanggal_selesai);
          $$invalidate(14, biayaPenelitian = data2.biaya_penelitian);
          $$invalidate(15, anggotaTim = data2.anggota_tim);
          $$invalidate(0, biodataAnggota = data2.biodata_anggota);
          $$invalidate(16, judul = data2.judul);
          $$invalidate(17, abstrak = data2.abstrak);
          $$invalidate(18, status = data2.status);
          kdeptSelected = data2.uid_kdept;
          klppmSelected = data2.uid_klppm;
          kpkSelected = data2.uid_kpk;
          reviewerSelected = data2.uid_reviewer;
          rabFileName = data2.rab_file_name;
          ppmFileName = data2.ppm_file_name;
          kontrakFileName = data2.kontrak_ppm_eksternal_file_name;
          $$invalidate(19, ttdSuratKontrak = data2.ttd_surat_kontrak);
          $$invalidate(20, presentasiHasilPPM = data2.presentasi_hasil_ppm);
          fileSkPendanaanNameDB = data2.file_sk_pendanaan;
          fileSuratKontrakNameDB = data2.file_surat_kontrak;
          fileSuratTugasNameDB = data2.file_surat_tugas;
          fileSkPPMNameDB = data2.file_sk_ppm;
          fileHasilPPMNameDB = data2.file_hasil_ppm;
          fileLaporanKeuanganNameDB = data2.file_laporan_keuangan;
          $$invalidate(21, statusPencairanDana = data2.status_pencairan_dana || "Menunggu pencairan dana");
        } else {
          console.log(response);
        }
      }
    }
    async function getBiodataAnggota() {
      let ids = anggotaTim.map((anggota) => anggota.value);
      let promises = ids.map(async (idAnggota) => {
        try {
          const profileResponse = await fetch($apiURL + "/user/" + idAnggota, { method: "GET", headers });
          if (profileResponse.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!profileResponse.ok) {
            throw new Error(`Failed to fetch profile for ID ${idAnggota}`);
          }
          const profileResult = await profileResponse.json();
          const RPS1Response = await fetch($apiURL + "/riwayatPendidikanS1/" + idAnggota, { method: "GET", headers });
          if (RPS1Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS1Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S1 for ID ${idAnggota}`);
          }
          const RPS1Result = await RPS1Response.json();
          const RPS2Response = await fetch($apiURL + "/riwayatPendidikanS2/" + idAnggota, { method: "GET", headers });
          if (RPS2Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS2Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S2 for ID ${idAnggota}`);
          }
          const RPS2Result = await RPS2Response.json();
          const RPS3Response = await fetch($apiURL + "/riwayatPendidikanS3/" + idAnggota, { method: "GET", headers });
          if (RPS3Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS3Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const RPS3Result = await RPS3Response.json();
          const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + idAnggota, { method: "GET", headers });
          if (responsePP.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePP.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPP = await responsePP.json();
          const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + idAnggota, { method: "GET", headers });
          if (responsePM.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePM.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPM = await responsePM.json();
          const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + idAnggota, { method: "GET", headers });
          if (responsePD.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePD.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPD = await responsePD.json();
          const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + idAnggota, { method: "GET", headers });
          if (responsePPub.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPub.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPub = await responsePPub.json();
          const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idAnggota, { method: "GET", headers });
          if (responsePPB.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPB.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPB = await responsePPB.json();
          const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + idAnggota, { method: "GET", headers });
          if (responsePHKI.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePHKI.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPHKI = await responsePHKI.json();
          return {
            profile: profileResult,
            RPS1: RPS1Result.dbData,
            RPS2: RPS2Result.dbData,
            RPS3: RPS3Result.dbData,
            Ppenelitian: resultPP.dbData,
            Ppengmas: resultPM.dbData,
            Pdiseminasi: resultPD.dbData,
            Ppublikasi: resultPPub.dbData,
            PpenulisanBuku: resultPPB.dbData,
            Phki: resultPHKI.dbData
          };
        } catch (error2) {
          console.error(`Error fetching data for ID ${idAnggota}:`, error2);
          return {
            profile: null,
            RPS1: [],
            RPS2: [],
            RPS3: [],
            Ppenelitian: [],
            Ppengmas: [],
            Pdiseminasi: [],
            Ppublikasi: [],
            PpenulisanBuku: [],
            Phki: [],
            error: error2.message
          };
        }
      });
      newBiodataAnggota = await Promise.all(promises.filter(Boolean));
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileKontrakChange(e) {
      fileKontrak2 = e.target.files[0];
      set_store_value(kontrakFile, $kontrakFile = e.target.files[0], $kontrakFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function fileHasilPPMChange(e) {
      fileHasilPPM = e.target.files[0];
      set_store_value(hasilPPMFile, $hasilPPMFile = e.target.files[0], $hasilPPMFile);
    }
    function fileLaporanKeuanganChange(e) {
      fileLaporanKeuangan2 = e.target.files[0];
      set_store_value(laporanKeuanganFile, $laporanKeuanganFile = e.target.files[0], $laporanKeuanganFile);
    }
    function toggleEditModeProposal() {
      $$invalidate(27, editModeProposal = !editModeProposal);
    }
    function toggleEditModeKontrakPPM() {
      $$invalidate(28, editModeKontrakPPM = !editModeKontrakPPM);
    }
    function toggleEditModeRAB() {
      $$invalidate(33, editModeRAB = !editModeRAB);
    }
    async function handleDownloadRab(e) {
      let filename = "RAB_" + judul + ".xlsx";
      try {
        const response = await fetch($apiURL + `/uploadRab/${rabFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadPpm(e) {
      let filename = "Proposal_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadPpm/${ppmFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadKontrakPpmEksternal(e) {
      let filename = "Kontrak PPM_" + judul + ".pdf";
      try {
        const response = await fetch($apiURL + `/uploadKontrakPPMEksternal/${kontrakFileName}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSkPendanaan(e) {
      let filename = "SK Pendanaan.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSKPendanaan/${fileSkPendanaanNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSuratKontrak() {
      let filename = "Surat Kontrak PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSuratKontrak/${fileSuratKontrakNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSuratTugas() {
      let filename = "Surat Tugas.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSuratTugas/${fileSuratTugasNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadSkPPM() {
      let filename = "SK PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadSKPPM/${fileSkPPMNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadHasilPPM() {
      let filename = "Laporan Hasil PPM.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadHasilPPM/${fileHasilPPMNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handleDownloadLaporanKeuangan() {
      let filename = "Laporan Keuangan.pdf";
      try {
        const response = await fetch($apiURL + `/uploadDownloadLaporanKeuangan/${fileLaporanKeuanganNameDB}`, { method: "GET", headers });
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else if (response.ok) {
          const blob = await response.blob();
          const link = document.createElement("a");
          link.href = window.URL.createObjectURL(blob);
          link.download = filename;
          link.click();
        } else {
          $$invalidate(32, ModalFileNotFound = true);
        }
      } catch (error2) {
        console.error("Error downloading file:", error2);
      }
    }
    async function handlePerbaikan() {
      await getBiodataAnggota();
      $$invalidate(2, error = {});
      $$invalidate(34, isLoading = true);
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      const readerHasilPPM = new FileReader();
      const readerKontrakPpm = new FileReader();
      let fileHasilPPMName = id + "_Laporan Hasil PPM";
      let payload2 = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        newBiodataAnggota,
        id,
        judul,
        abstrak,
        status: Number(data2.status) + 1,
        kdeptSelected,
        klppmSelected,
        kpkSelected,
        reviewerSelected,
        rabFileName,
        ppmFileName
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!["catatanRevisiProposal"].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(2, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(29, showModalError = true);
        $$invalidate(34, isLoading = false);
      } else {
        const cekFileProposal = new Promise((resolve, reject) => {
          if (!filePpm) {
            resolve("No fileProposal selected");
            return;
          }
          readerPpm.onloadend = async () => {
            const base64Data = readerPpm.result.split(",")[1];
            const payloadPpmFile = {
              filePpm: {
                name: filePpm.name,
                type: filePpm.type,
                data: base64Data
              },
              ppmFileName
            };
            try {
              const response = await fetch($apiURL + "/uploadPpm", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadPpmFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (filePpm)
            readerPpm.readAsDataURL(filePpm);
        });
        const cekFileKontrakPPM = new Promise((resolve, reject) => {
          if (!fileKontrak2) {
            resolve("No fileKontrak selected");
            return;
          }
          readerKontrakPpm.onloadend = async () => {
            const base64Data = readerKontrakPpm.result.split(",")[1];
            const payloadKontrakPpmFile = {
              fileKontrak: {
                name: fileKontrak2.name,
                type: fileKontrak2.type,
                data: base64Data
              },
              kontrakFileName
            };
            try {
              const response = await fetch($apiURL + "/uploadKontrakPPMEksternal", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadKontrakPpmFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileKontrak2)
            readerKontrakPpm.readAsDataURL(fileKontrak2);
        });
        const cekFileRAB = new Promise((resolve, reject) => {
          if (!fileRab) {
            resolve("No fileRab selected");
            return;
          }
          readerRab.onloadend = async () => {
            const base64Data = readerRab.result.split(",")[1];
            const payloadRabFile = {
              fileRab: {
                name: fileRab.name,
                type: fileRab.type,
                data: base64Data
              },
              rabFileName
            };
            try {
              const response = await fetch($apiURL + "/uploadRab", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadRabFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileRab)
            readerRab.readAsDataURL(fileRab);
        });
        const cekFileHasilPPM = new Promise((resolve, reject) => {
          if (!fileHasilPPM) {
            resolve("No fileHasilPPM selected");
            return;
          }
          readerHasilPPM.onloadend = async () => {
            const base64Data = readerHasilPPM.result.split(",")[1];
            const payloadHasilPPMFile = {
              fileHasilPPM: {
                name: fileHasilPPM.name,
                type: fileHasilPPM.type,
                data: base64Data
              },
              fileHasilPPMName
            };
            try {
              const response = await fetch($apiURL + "/uploadDownloadHasilPPM", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadHasilPPMFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileHasilPPM)
            readerHasilPPM.readAsDataURL(fileHasilPPM);
        });
        const cekPatchDataPPM = new Promise(async (resolve, reject) => {
          const response = await fetch($apiURL + "/ppm", {
            method: "PATCH",
            headers,
            body: JSON.stringify(payload2)
          });
          const result = await response.json();
          if (response.status === 401) {
            location.pathname = "/tokenexpired";
            reject("Token expired");
          } else {
            if (response.ok) {
              resolve(result);
            } else {
              console.log(response);
              reject("Error submitting file");
            }
          }
        });
        try {
          await Promise.all([
            cekFileProposal,
            cekFileKontrakPPM,
            cekFileRAB,
            cekFileHasilPPM,
            cekPatchDataPPM
          ]);
        } finally {
          $$invalidate(34, isLoading = false);
          $route("/dosen/ppmmanagement");
        }
      }
    }
    async function handleSubmitProposal() {
      await getBiodataAnggota();
      $$invalidate(2, error = {});
      $$invalidate(34, isLoading = true);
      const readerPpm = new FileReader();
      const readerKontrakPpm = new FileReader();
      const readerRab = new FileReader();
      let payload2 = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        newBiodataAnggota,
        id,
        judul,
        abstrak,
        status: Number(data2.status) + 2,
        kdeptSelected,
        klppmSelected,
        kpkSelected,
        reviewerSelected,
        rabFileName,
        ppmFileName
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (![
          "catatanRevisiProposal",
          "status",
          "kdeptSelected",
          "klppmSelected",
          "kpkSelected",
          "reviewerSelected"
        ].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(2, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(29, showModalError = true);
        $$invalidate(34, isLoading = false);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
        readerKontrakPpm.onloadend = async () => {
          const base64Data = readerKontrakPpm.result.split(",")[1];
          const payloadKontrakPpmFile = {
            fileKontrak: {
              name: fileKontrak2.name,
              type: fileKontrak2.type,
              data: base64Data
            },
            kontrakFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadKontrakPPMEksternal", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadKontrakPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileKontrak2)
          readerKontrakPpm.readAsDataURL(fileKontrak2);
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            rabFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileRab)
          readerRab.readAsDataURL(fileRab);
        const response = await fetch($apiURL + "/ppm", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/ppmmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(34, isLoading = false);
    }
    async function handleSimpanProposal() {
      await getBiodataAnggota();
      $$invalidate(2, error = {});
      $$invalidate(34, isLoading = true);
      const readerPpm = new FileReader();
      const readerKontrakPpm = new FileReader();
      const readerRab = new FileReader();
      let payload2 = {
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        newBiodataAnggota,
        id,
        judul,
        abstrak,
        status: Number(data2.status),
        kdeptSelected,
        klppmSelected,
        kpkSelected,
        reviewerSelected,
        rabFileName,
        ppmFileName
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (![
          "catatanRevisiProposal",
          "status",
          "kdeptSelected",
          "klppmSelected",
          "kpkSelected",
          "reviewerSelected"
        ].includes(key) && !value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(2, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(29, showModalError = true);
        $$invalidate(34, isLoading = false);
      } else {
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
        readerKontrakPpm.onloadend = async () => {
          const base64Data = readerKontrakPpm.result.split(",")[1];
          const payloadKontrakPpmFile = {
            fileKontrak: {
              name: fileKontrak2.name,
              type: fileKontrak2.type,
              data: base64Data
            },
            kontrakFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadKontrakPPMEksternal", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadKontrakPpmFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileKontrak2)
          readerKontrakPpm.readAsDataURL(fileKontrak2);
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            rabFileName
          };
          try {
            const response2 = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result2 = await response2.json();
            if (response2.status === 401) {
              location.pathname = "/tokenexpired";
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        if (fileRab)
          readerRab.readAsDataURL(fileRab);
        const response = await fetch($apiURL + "/ppm", {
          method: "PATCH",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $route("/dosen/ppmmanagement");
          } else {
            console.log(response);
          }
        }
      }
      $$invalidate(34, isLoading = false);
    }
    async function handleSubmitHasilPPM() {
      $$invalidate(34, isLoading = true);
      const readerHasilPPM = new FileReader();
      const readerLaporanKeuanganPPM = new FileReader();
      let payloadFileName;
      let fileHasilPPMName = id + "_Laporan Hasil PPM";
      let fileLaporanKeuanganName = id + "_Laporan Keuangan PPM";
      if (hasilPPMisRequired()) {
        payloadFileName = {
          status: Number(data2.status) + 2,
          fileHasilPPMName,
          fileLaporanKeuanganName,
          id
        };
      } else if (hasilPPMisRevisi()) {
        payloadFileName = {
          status: Number(data2.status) + 1,
          fileHasilPPMName,
          fileLaporanKeuanganName,
          id
        };
      }
      if (skemaInternal.includes(jenisSkema) && hasilPPMisRequired() && (!fileHasilPPM || !fileLaporanKeuangan2)) {
        $$invalidate(30, showModalErrorHasilPPM = true);
        $$invalidate(34, isLoading = false);
        return;
      } else if (hasilPPMisRequired() && !fileHasilPPM) {
        $$invalidate(30, showModalErrorHasilPPM = true);
        $$invalidate(34, isLoading = false);
        return;
      } else {
        const uploadHasilPPM = new Promise((resolve, reject) => {
          if (!fileHasilPPM) {
            resolve("No file Hasil PPM selected");
            return;
          }
          readerHasilPPM.onloadend = async () => {
            const base64Data = readerHasilPPM.result.split(",")[1];
            const payloadHasilPPMFile = {
              fileHasilPPM: {
                name: fileHasilPPM.name,
                type: fileHasilPPM.type,
                data: base64Data
              },
              fileHasilPPMName
            };
            try {
              const response = await fetch($apiURL + "/uploadDownloadHasilPPM", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadHasilPPMFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileHasilPPM)
            readerHasilPPM.readAsDataURL(fileHasilPPM);
        });
        const laporanKeuanganPPM = new Promise((resolve, reject) => {
          if (!fileLaporanKeuangan2) {
            resolve("No file Hasil PPM selected");
            return;
          }
          readerLaporanKeuanganPPM.onloadend = async () => {
            const base64Data = readerLaporanKeuanganPPM.result.split(",")[1];
            const payloadLaporanKeuanganFile = {
              fileLaporanKeuangan: {
                name: fileLaporanKeuangan2.name,
                type: fileLaporanKeuangan2.type,
                data: base64Data
              },
              fileLaporanKeuanganName
            };
            try {
              const response = await fetch($apiURL + "/uploadDownloadLaporanKeuangan", {
                method: "POST",
                headers,
                body: JSON.stringify(payloadLaporanKeuanganFile)
              });
              const result = await response.json();
              if (response.status === 401) {
                location.pathname = "/tokenexpired";
                reject("Token expired");
              } else if (response.ok) {
                resolve(result);
              } else {
                reject(result);
              }
            } catch (error2) {
              console.error("Error uploading file:", error2);
              reject(error2);
            }
          };
          if (fileLaporanKeuangan2)
            readerLaporanKeuanganPPM.readAsDataURL(fileLaporanKeuangan2);
        });
        const submitFileName = new Promise(async (resolve, reject) => {
          try {
            const response = await fetch($apiURL + "/submitFilePPM/pass", {
              method: "PATCH",
              headers,
              body: JSON.stringify(payloadFileName)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              console.log(result.msg, error);
              reject("Error submitting file");
            }
          } catch (error2) {
            reject(error2);
          }
        });
        try {
          await Promise.all([uploadHasilPPM, laporanKeuanganPPM, submitFileName]);
        } finally {
          $$invalidate(34, isLoading = false);
          $$invalidate(31, showModalChecked = true);
          setTimeout(
            () => {
              window.location.reload();
            },
            500
          );
        }
      }
    }
    let tab1 = true;
    let tab2;
    function clicktab1() {
      $$invalidate(35, tab1 = true);
      $$invalidate(36, tab2 = false);
    }
    function clicktab2() {
      $$invalidate(35, tab1 = false);
      $$invalidate(36, tab2 = true);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(15, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    async function checkboxSuratKontrak(event) {
      $$invalidate(19, ttdSuratKontrak = event.target.checked ? 1 : 0);
      payload = { ppmId, ttdSuratKontrak };
      const response = await fetch($apiURL + "/checkBoxPPM/suratKontrak", {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload)
      });
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (!response.ok) {
          console.log(response);
        }
      }
    }
    function ShowButtonPerbaikan() {
      const RevisiSkemaInternal = [1, 3, 5];
      const RevisiSkemaEksternal = [1, 3, 5];
      const RevisiSkemaMandiri = [1, 3, 5];
      if (skemaInternal.includes(data2.jenis_skema) && RevisiSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && RevisiSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && RevisiSkemaMandiri.includes(data2.status)) {
        return true;
      }
      return false;
    }
    function showSubmitHasilPPM_Button() {
      const ReviewKpkKlppmSkemaInternal = [8, 9];
      const ReviewKpkKlppmSkemaEksternal = [8, 9];
      const ReviewKpkKlppmSkemaMandiri = [8, 9];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function hasilPPMisRequired() {
      const ReviewKpkKlppmSkemaInternal = [8];
      const ReviewKpkKlppmSkemaEksternal = [8];
      const ReviewKpkKlppmSkemaMandiri = [8];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function hasilPPMisRevisi() {
      const ReviewKpkKlppmSkemaInternal = [9];
      const ReviewKpkKlppmSkemaEksternal = [9];
      const ReviewKpkKlppmSkemaMandiri = [9];
      if (skemaInternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaInternal.includes(data2.status)) {
        return true;
      }
      if (skemaEksternal.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaEksternal.includes(data2.status)) {
        return true;
      }
      if (skemaMandiri.includes(data2.jenis_skema) && ReviewKpkKlppmSkemaMandiri.includes(data2.status)) {
        return true;
      }
    }
    function input_input_handler() {
      judul = this.value;
      $$invalidate(16, judul);
    }
    function textarea_input_handler() {
      abstrak = this.value;
      $$invalidate(17, abstrak);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(7, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(8, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(9, jenisSkema);
    }
    function input_input_handler_1() {
      kelompokKeahlian = this.value;
      $$invalidate(10, kelompokKeahlian);
    }
    function input_input_handler_2() {
      topik = this.value;
      $$invalidate(11, topik);
    }
    function input_input_handler_3() {
      tanggalMulai = this.value;
      $$invalidate(12, tanggalMulai);
    }
    function input_input_handler_4() {
      tanggalSelesai = this.value;
      $$invalidate(13, tanggalSelesai);
    }
    function input_input_handler_5() {
      biayaPenelitian = this.value;
      $$invalidate(14, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(14, biayaPenelitian = formatRupiah3(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(15, anggotaTim);
    }
    const click_handler = () => $$invalidate(26, skpVisible = !skpVisible);
    function input_change_handler() {
      ttdSuratKontrak = this.checked;
      $$invalidate(19, ttdSuratKontrak);
    }
    const click_handler_1 = () => $$invalidate(26, skpVisible = !skpVisible);
    const click_handler_2 = () => $$invalidate(23, danaPPMVisible = !danaPPMVisible);
    const click_handler_3 = () => $$invalidate(22, hasilPPMVisible = !hasilPPMVisible);
    const click_handler_4 = () => $$invalidate(25, presentasiVisible = !presentasiVisible);
    const click_handler_5 = () => $$invalidate(24, skPPMVisible = !skPPMVisible);
    const click_handler_6 = (index) => $$invalidate(0, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalError = value;
      $$invalidate(29, showModalError);
    }
    function modalerror1_show_binding(value) {
      ModalFileNotFound = value;
      $$invalidate(32, ModalFileNotFound);
    }
    function modalerror2_show_binding(value) {
      showModalErrorHasilPPM = value;
      $$invalidate(30, showModalErrorHasilPPM);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(31, showModalChecked);
    }
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(72, params = $$props2.params);
    };
    return [
      biodataAnggota,
      items,
      error,
      view,
      data2,
      itemsRCR,
      itemsCHP,
      jenisProposal,
      jenisKegiatan,
      jenisSkema,
      kelompokKeahlian,
      topik,
      tanggalMulai,
      tanggalSelesai,
      biayaPenelitian,
      anggotaTim,
      judul,
      abstrak,
      status,
      ttdSuratKontrak,
      presentasiHasilPPM,
      statusPencairanDana,
      hasilPPMVisible,
      danaPPMVisible,
      skPPMVisible,
      presentasiVisible,
      skpVisible,
      editModeProposal,
      editModeKontrakPPM,
      showModalError,
      showModalErrorHasilPPM,
      showModalChecked,
      ModalFileNotFound,
      editModeRAB,
      isLoading,
      tab1,
      tab2,
      $laporanKeuanganFile,
      $hasilPPMFile,
      $rabFile,
      $kontrakFile,
      $ppmFile,
      skemaInternal,
      skemaEksternal,
      skemaMandiri,
      filePpmChange,
      fileKontrakChange,
      fileRabChange,
      fileHasilPPMChange,
      fileLaporanKeuanganChange,
      toggleEditModeProposal,
      toggleEditModeKontrakPPM,
      toggleEditModeRAB,
      handleDownloadRab,
      handleDownloadPpm,
      handleDownloadKontrakPpmEksternal,
      handleDownloadSkPendanaan,
      handleDownloadSuratKontrak,
      handleDownloadSuratTugas,
      handleDownloadSkPPM,
      handleDownloadHasilPPM,
      handleDownloadLaporanKeuangan,
      handlePerbaikan,
      handleSubmitProposal,
      handleSimpanProposal,
      handleSubmitHasilPPM,
      clicktab1,
      clicktab2,
      deleteMember,
      checkboxSuratKontrak,
      ShowButtonPerbaikan,
      showSubmitHasilPPM_Button,
      params,
      input_input_handler,
      textarea_input_handler,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      keyup_handler,
      select_result_binding,
      click_handler,
      input_change_handler,
      click_handler_1,
      click_handler_2,
      click_handler_3,
      click_handler_4,
      click_handler_5,
      click_handler_6,
      modalerror0_show_binding,
      modalerror1_show_binding,
      modalerror2_show_binding,
      modalchecked_show_binding
    ];
  }
  var Detailppm2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance29, create_fragment36, safe_not_equal, { params: 72 }, null, [-1, -1, -1, -1, -1]);
    }
  };
  var detailppm_default2 = Detailppm2;

  // src/pages/dosen/home.svelte
  init_define_process();
  function get_each_context13(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[8] = list[i];
    return child_ctx;
  }
  function create_if_block18(ctx) {
    let table;
    let thead;
    let t3;
    let tbody;
    let each_value = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block13(get_each_context13(ctx, each_value, i));
    }
    return {
      c() {
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 70%;">Judul</th> <th style="width: 15%; text-align: center">Deadline</th></tr>`;
        t3 = space();
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, table, anchor);
        append(table, thead);
        append(table, t3);
        append(table, tbody);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*items*/
        1) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context13(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block13(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(tbody, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(table);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block13(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*item*/
      ctx[8].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*item*/
      ctx[8].tanggal_selesai + ""
    );
    let t2;
    let t3;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        attr(td1, "class", "isi svelte-1fu6z08");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
      },
      p(ctx2, dirty) {
        if (dirty & /*items*/
        1 && t0_value !== (t0_value = /*item*/
        ctx2[8].judul + ""))
          set_data(t0, t0_value);
        if (dirty & /*items*/
        1 && t2_value !== (t2_value = /*item*/
        ctx2[8].tanggal_selesai + ""))
          set_data(t2, t2_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_default_slot14(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div16;
    let div3;
    let div2;
    let div0;
    let icon0;
    let t3;
    let div1;
    let p0;
    let t5;
    let p1;
    let t6;
    let t7;
    let div7;
    let div6;
    let div4;
    let icon1;
    let t8;
    let div5;
    let p2;
    let t10;
    let p3;
    let t11;
    let t12;
    let div11;
    let div10;
    let div8;
    let icon2;
    let t13;
    let div9;
    let t17;
    let div15;
    let div14;
    let div12;
    let icon3;
    let t18;
    let div13;
    let t22;
    let div20;
    let div19;
    let div17;
    let t24;
    let br;
    let t25;
    let div18;
    let current;
    icon0 = new Icon_default({
      props: { id: "logo", src: penelitian, size: "2" }
    });
    icon1 = new Icon_default({
      props: { id: "logo", src: pengmas, size: "2" }
    });
    icon2 = new Icon_default({
      props: { id: "logo", src: jurnal, size: "2" }
    });
    icon3 = new Icon_default({
      props: { id: "logo", src: copyright, size: "2" }
    });
    let if_block = (
      /*items*/
      ctx[0] && create_if_block18(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Dashboard";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div16 = element("div");
        div3 = element("div");
        div2 = element("div");
        div0 = element("div");
        create_component(icon0.$$.fragment);
        t3 = space();
        div1 = element("div");
        p0 = element("p");
        p0.textContent = "Penelitian";
        t5 = space();
        p1 = element("p");
        t6 = text(
          /*penelitianCounter*/
          ctx[1]
        );
        t7 = space();
        div7 = element("div");
        div6 = element("div");
        div4 = element("div");
        create_component(icon1.$$.fragment);
        t8 = space();
        div5 = element("div");
        p2 = element("p");
        p2.textContent = "Pengmas";
        t10 = space();
        p3 = element("p");
        t11 = text(
          /*pengmasCounter*/
          ctx[2]
        );
        t12 = space();
        div11 = element("div");
        div10 = element("div");
        div8 = element("div");
        create_component(icon2.$$.fragment);
        t13 = space();
        div9 = element("div");
        div9.innerHTML = `<p class="heading">Ongoing</p> <p class="title">...</p>`;
        t17 = space();
        div15 = element("div");
        div14 = element("div");
        div12 = element("div");
        create_component(icon3.$$.fragment);
        t18 = space();
        div13 = element("div");
        div13.innerHTML = `<p class="heading">Completed</p> <p class="title">...</p>`;
        t22 = space();
        div20 = element("div");
        div19 = element("div");
        div17 = element("div");
        div17.innerHTML = `<h4 class="title is-4">Reminder</h4>`;
        t24 = space();
        br = element("br");
        t25 = space();
        div18 = element("div");
        if (if_block)
          if_block.c();
        attr(h2, "class", "title is-2");
        attr(div0, "class", "flex-item-left svelte-1fu6z08");
        attr(p0, "class", "heading");
        attr(p1, "class", "title");
        attr(div1, "class", "flex-item-right has-text-centered svelte-1fu6z08");
        attr(div2, "class", "box svelte-1fu6z08");
        attr(div3, "class", "column");
        attr(div4, "class", "flex-item-left svelte-1fu6z08");
        attr(p2, "class", "heading");
        attr(p3, "class", "title");
        attr(div5, "class", "flex-item-right has-text-centered svelte-1fu6z08");
        attr(div6, "class", "box svelte-1fu6z08");
        attr(div7, "class", "column");
        attr(div8, "class", "flex-item-left svelte-1fu6z08");
        attr(div9, "class", "flex-item-right has-text-centered svelte-1fu6z08");
        attr(div10, "class", "box svelte-1fu6z08");
        attr(div11, "class", "column");
        attr(div12, "class", "flex-item-left svelte-1fu6z08");
        attr(div13, "class", "flex-item-right has-text-centered svelte-1fu6z08");
        attr(div14, "class", "box svelte-1fu6z08");
        attr(div15, "class", "column");
        attr(div16, "class", "columns is-desktop");
        attr(div18, "class", "child svelte-1fu6z08");
        attr(div19, "class", "column");
        attr(div20, "class", "box parent svelte-1fu6z08");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div16, anchor);
        append(div16, div3);
        append(div3, div2);
        append(div2, div0);
        mount_component(icon0, div0, null);
        append(div2, t3);
        append(div2, div1);
        append(div1, p0);
        append(div1, t5);
        append(div1, p1);
        append(p1, t6);
        append(div16, t7);
        append(div16, div7);
        append(div7, div6);
        append(div6, div4);
        mount_component(icon1, div4, null);
        append(div6, t8);
        append(div6, div5);
        append(div5, p2);
        append(div5, t10);
        append(div5, p3);
        append(p3, t11);
        append(div16, t12);
        append(div16, div11);
        append(div11, div10);
        append(div10, div8);
        mount_component(icon2, div8, null);
        append(div10, t13);
        append(div10, div9);
        append(div16, t17);
        append(div16, div15);
        append(div15, div14);
        append(div14, div12);
        mount_component(icon3, div12, null);
        append(div14, t18);
        append(div14, div13);
        insert(target, t22, anchor);
        insert(target, div20, anchor);
        append(div20, div19);
        append(div19, div17);
        append(div19, t24);
        append(div19, br);
        append(div19, t25);
        append(div19, div18);
        if (if_block)
          if_block.m(div18, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (!current || dirty & /*penelitianCounter*/
        2)
          set_data(
            t6,
            /*penelitianCounter*/
            ctx2[1]
          );
        if (!current || dirty & /*pengmasCounter*/
        4)
          set_data(
            t11,
            /*pengmasCounter*/
            ctx2[2]
          );
        if (
          /*items*/
          ctx2[0]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block18(ctx2);
            if_block.c();
            if_block.m(div18, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div16);
          detach(t22);
          detach(div20);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_fragment37(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot14] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items, pengmasCounter, penelitianCounter*/
        2055) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function instance30($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(3, $apiURL = $$value));
    let items, penelitianCounter, pengmasCounter;
    let reminder;
    const id = Number(localStorage.getItem("id"));
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/ppm/all/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(0, items = result.dbData);
        } else {
          console.log(response);
        }
      }
      const responseCP = await fetch($apiURL + "/counterPenelitian/" + id, { method: "GET", headers });
      const resultCP = await responseCP.json();
      if (responseCP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCP.ok) {
          $$invalidate(1, penelitianCounter = resultCP.penelitianCounter);
        } else {
          console.log(responseCP);
        }
      }
      const responseCPM = await fetch($apiURL + "/counterPengmas/" + id, { method: "GET", headers });
      const resultCPM = await responseCPM.json();
      if (responseCPM.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseCPM.ok) {
          $$invalidate(2, pengmasCounter = resultCPM.pengmasCounter);
        } else {
          console.log(responseCPM);
        }
      }
      const responseGP = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const resultGP = await responseGP.json();
      if (responseGP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseGP.ok) {
          nama_lengkap = resultGP.nama_lengkap;
          localStorage.setItem("nama_lengkap", nama_lengkap);
        }
      }
    });
    return [items, penelitianCounter, pengmasCounter];
  }
  var Home2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance30, create_fragment37, safe_not_equal, {});
    }
  };
  var home_default2 = Home2;

  // src/pages/dosen/pendaftaran.svelte
  init_define_process();
  function get_each_context14(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[1] = list[i];
    return child_ctx;
  }
  function create_if_block_418(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Pendaftaran dibuka";
        attr(span, "class", "tag is-success");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_320(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "Pendaftaran ditutup";
        attr(span, "class", "tag is-danger is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_221(ctx) {
    let span;
    let t_value = (
      /*cardPendaftaran*/
      ctx[1].periode + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "tag is-light");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*cardPendaftaran*/
        2 && t_value !== (t_value = /*cardPendaftaran*/
        ctx2[1].periode + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_127(ctx) {
    let button;
    let t_value = (
      /*cardPendaftaran*/
      ctx[1].buttonText + ""
    );
    let t;
    let mounted;
    let dispose;
    return {
      c() {
        button = element("button");
        t = text(t_value);
        attr(button, "class", "button is-dark is-small");
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, t);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*outOfPeriod*/
            ctx[2]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*cardPendaftaran*/
        2 && t_value !== (t_value = /*cardPendaftaran*/
        ctx2[1].buttonText + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block19(ctx) {
    let button;
    let t_value = (
      /*cardPendaftaran*/
      ctx[1].buttonText + ""
    );
    let t;
    let button_href_value;
    return {
      c() {
        button = element("button");
        t = text(t_value);
        attr(button, "class", "button is-dark is-small");
        attr(button, "href", button_href_value = /*cardPendaftaran*/
        ctx[1].buttonLink);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, t);
      },
      p(ctx2, dirty) {
        if (dirty & /*cardPendaftaran*/
        2 && t_value !== (t_value = /*cardPendaftaran*/
        ctx2[1].buttonText + ""))
          set_data(t, t_value);
        if (dirty & /*cardPendaftaran*/
        2 && button_href_value !== (button_href_value = /*cardPendaftaran*/
        ctx2[1].buttonLink)) {
          attr(button, "href", button_href_value);
        }
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
      }
    };
  }
  function create_each_block14(ctx) {
    let div4;
    let div3;
    let header;
    let h4;
    let t0_value = (
      /*cardPendaftaran*/
      ctx[1].title + ""
    );
    let t0;
    let t1;
    let div0;
    let t2;
    let t3;
    let div1;
    let p;
    let t4_value = (
      /*cardPendaftaran*/
      ctx[1].description + ""
    );
    let t4;
    let t5;
    let div2;
    let t6;
    function select_block_type(ctx2, dirty) {
      if (
        /*cardPendaftaran*/
        ctx2[1].isOpen === 0
      )
        return create_if_block_320;
      if (
        /*cardPendaftaran*/
        ctx2[1].isOpen === 1
      )
        return create_if_block_418;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block0 = current_block_type && current_block_type(ctx);
    let if_block1 = (
      /*cardPendaftaran*/
      ctx[1].periode !== "" && create_if_block_221(ctx)
    );
    function select_block_type_1(ctx2, dirty) {
      if (
        /*cardPendaftaran*/
        ctx2[1].isOpen === 1
      )
        return create_if_block19;
      if (
        /*cardPendaftaran*/
        ctx2[1].isOpen === 0
      )
        return create_if_block_127;
    }
    let current_block_type_1 = select_block_type_1(ctx, -1);
    let if_block2 = current_block_type_1 && current_block_type_1(ctx);
    return {
      c() {
        div4 = element("div");
        div3 = element("div");
        header = element("header");
        h4 = element("h4");
        t0 = text(t0_value);
        t1 = space();
        div0 = element("div");
        if (if_block0)
          if_block0.c();
        t2 = space();
        if (if_block1)
          if_block1.c();
        t3 = space();
        div1 = element("div");
        p = element("p");
        t4 = text(t4_value);
        t5 = space();
        div2 = element("div");
        if (if_block2)
          if_block2.c();
        t6 = space();
        attr(h4, "class", "title is-4");
        attr(header, "class", "header svelte-1f0wm8u");
        attr(div0, "class", "card-info");
        attr(div1, "class", "card-body svelte-1f0wm8u");
        attr(div2, "class", "card-button svelte-1f0wm8u");
        attr(div3, "class", "box svelte-1f0wm8u");
        attr(div4, "class", "column");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, div3);
        append(div3, header);
        append(header, h4);
        append(h4, t0);
        append(div3, t1);
        append(div3, div0);
        if (if_block0)
          if_block0.m(div0, null);
        append(div0, t2);
        if (if_block1)
          if_block1.m(div0, null);
        append(div3, t3);
        append(div3, div1);
        append(div1, p);
        append(p, t4);
        append(div3, t5);
        append(div3, div2);
        if (if_block2)
          if_block2.m(div2, null);
        append(div4, t6);
      },
      p(ctx2, dirty) {
        if (dirty & /*cardPendaftaran*/
        2 && t0_value !== (t0_value = /*cardPendaftaran*/
        ctx2[1].title + ""))
          set_data(t0, t0_value);
        if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
          if (if_block0)
            if_block0.d(1);
          if_block0 = current_block_type && current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(div0, t2);
          }
        }
        if (
          /*cardPendaftaran*/
          ctx2[1].periode !== ""
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_221(ctx2);
            if_block1.c();
            if_block1.m(div0, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (dirty & /*cardPendaftaran*/
        2 && t4_value !== (t4_value = /*cardPendaftaran*/
        ctx2[1].description + ""))
          set_data(t4, t4_value);
        if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx2, dirty)) && if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if (if_block2)
            if_block2.d(1);
          if_block2 = current_block_type_1 && current_block_type_1(ctx2);
          if (if_block2) {
            if_block2.c();
            if_block2.m(div2, null);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
        }
        if (if_block0) {
          if_block0.d();
        }
        if (if_block1)
          if_block1.d();
        if (if_block2) {
          if_block2.d();
        }
      }
    };
  }
  function create_default_slot_117(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div3;
    let div2;
    let div0;
    let span;
    let icon;
    let t3;
    let div1;
    let t5;
    let div4;
    let current;
    icon = new Icon_default({ props: { id: "info", src: infoOutline } });
    let each_value = ensure_array_like(
      /*cardPendaftaran*/
      ctx[1]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block14(get_each_context14(ctx, each_value, i));
    }
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pendaftaran Proposal";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div3 = element("div");
        div2 = element("div");
        div0 = element("div");
        span = element("span");
        create_component(icon.$$.fragment);
        t3 = space();
        div1 = element("div");
        div1.innerHTML = `<p style="text-align: justify;">Peneliti hanya dapat mendaftarkan penelitian ataupun pengabdian
               masyarakat didalam periode pendaftaran proposal.</p>`;
        t5 = space();
        div4 = element("div");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        attr(h2, "class", "title is-2");
        attr(span, "class", "icon");
        attr(div0, "class", "media-left");
        attr(div1, "class", "media-content");
        attr(div2, "class", "media");
        attr(div3, "class", "notification is-info is-light");
        attr(div4, "class", "columns pendaftaran-container");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div3, anchor);
        append(div3, div2);
        append(div2, div0);
        append(div0, span);
        mount_component(icon, span, null);
        append(div2, t3);
        append(div2, div1);
        insert(target, t5, anchor);
        insert(target, div4, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div4, null);
          }
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cardPendaftaran, outOfPeriod*/
        6) {
          each_value = ensure_array_like(
            /*cardPendaftaran*/
            ctx2[1]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context14(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block14(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(div4, null);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div3);
          detach(t5);
          detach(div4);
        }
        destroy_component(icon);
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_default_slot15(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Pendaftaran sedang ditutup";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment38(ctx) {
    let article2;
    let t;
    let modalerror;
    let updating_show;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_117] },
        $$scope: { ctx }
      }
    });
    function modalerror_show_binding(value) {
      ctx[3](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot15] },
      $$scope: { ctx }
    };
    if (
      /*outOfPeriodModal*/
      ctx[0] !== void 0
    ) {
      modalerror_props.show = /*outOfPeriodModal*/
      ctx[0];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t = space();
        create_component(modalerror.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t, anchor);
        mount_component(modalerror, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, cardPendaftaran*/
        65538) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modalerror_changes = {};
        if (dirty & /*$$scope*/
        65536) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*outOfPeriodModal*/
        1) {
          updating_show = true;
          modalerror_changes.show = /*outOfPeriodModal*/
          ctx2[0];
          add_flush_callback(() => updating_show = false);
        }
        modalerror.$set(modalerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modalerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modalerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(article2, detaching);
        destroy_component(modalerror, detaching);
      }
    };
  }
  function instance31($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(6, $apiURL = $$value));
    const id = Number(localStorage.getItem("id"));
    const accessToken = localStorage.getItem("token");
    let cardPendaftaran = [];
    let Interval;
    let distance;
    let periodePendaftaran_PPMInternal, periodePendaftaran_PPMMandiri;
    let outOfPeriodModal = false;
    const countDownDate = (/* @__PURE__ */ new Date("July 7, 2024 18:00:00")).getTime();
    const countdownElements = [
      { id: "days", label: "Hari" },
      { id: "hours", label: "Jam" },
      { id: "minutes", label: "Menit" },
      { id: "seconds", label: "Detik" }
    ];
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const responseWP = await fetch($apiURL + "/waktuPendaftaranPPMInternal", { method: "GET", headers });
      const resultWP = await responseWP.json();
      if (responseWP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseWP.ok) {
          tanggalMulai_HibahInternal = resultWP.tanggal_mulai_hibah_internal;
          tanggalSelesai_HibahInternal = resultWP.tanggal_selesai_hibah_internal;
          tanggalMulai_PPMMandiri = resultWP.tanggal_mulai_ppm_mandiri;
          tanggalSelesai_PPMMandiri = resultWP.tanggal_selesai_ppm_mandiri;
          pendaftaranHibahInternal = resultWP.buka_pendaftaran_hibah_internal;
          pendaftaranHibahEksternal = resultWP.buka_pendaftaran_hibah_eksternal;
          pendaftaranMandiri = resultWP.buka_pendaftaran_mandiri;
          if (tanggalMulai_HibahInternal && tanggalSelesai_HibahInternal) {
            periodePendaftaran_PPMInternal = tanggalMulai_HibahInternal + " s/d " + tanggalSelesai_HibahInternal;
          } else {
            periodePendaftaran_PPMInternal = "";
          }
          if (tanggalMulai_PPMMandiri && tanggalSelesai_PPMMandiri) {
            periodePendaftaran_PPMMandiri = tanggalMulai_PPMMandiri + " s/d " + tanggalSelesai_PPMMandiri;
          } else {
            periodePendaftaran_PPMMandiri = "";
          }
        } else {
          console.log(responseWP);
        }
      }
      $$invalidate(1, cardPendaftaran = [
        {
          title: "Proposal PPM Pendanaan Hibah Internal",
          isOpen: pendaftaranHibahInternal,
          periode: periodePendaftaran_PPMInternal,
          description: "LPPM UISI membuka Hibah Internal untuk kegiatan Penelitian dan Pengabdian Masyarakat. Tujuan hibah ini, adalah untuk meningkatkan kualitas PPM dan Publikasi UISI.",
          buttonText: "Buat Proposal",
          buttonLink: "/dosen/proposalhibahinternal"
        },
        {
          title: "Proposal PPM Pendanaan Hibah Eksternal",
          isOpen: pendaftaranHibahEksternal,
          periode: "",
          description: "Penelitian dan Pengabdian Masyarakat dapat didanai oleh pihak eksternal, yang meliputi; Kementerian, Pemerintah Daerah, Industri, Lembaga Penelitian Luar dan Dalam Negeri, Perguruan Tinggi Luar dan Dalam Negeri, Yayasan, dan instansi lain.",
          buttonText: "Buat Proposal",
          buttonLink: "/dosen/proposalhibaheksternal"
        },
        {
          title: "Proposal PPM Pendanaan Mandiri",
          isOpen: pendaftaranMandiri,
          periode: periodePendaftaran_PPMMandiri,
          description: "PPM Mandiri adalah kegiatan Penelitian dan Pengabdian Masyarakat dengan skema mandiri, yang berarti sumber pendanaan kegiatan berasal dari pribadi ataupun tim pelaksana.",
          buttonText: "Buat Proposal",
          buttonLink: "/dosen/proposalmandiri"
        }
      ]);
    });
    function outOfPeriod() {
      $$invalidate(0, outOfPeriodModal = true);
    }
    function modalerror_show_binding(value) {
      outOfPeriodModal = value;
      $$invalidate(0, outOfPeriodModal);
    }
    return [outOfPeriodModal, cardPendaftaran, outOfPeriod, modalerror_show_binding];
  }
  var Pendaftaran = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance31, create_fragment38, safe_not_equal, {});
    }
  };
  var pendaftaran_default = Pendaftaran;

  // src/pages/dosen/pendaftaranproposal.svelte
  init_define_process();
  var { Boolean: Boolean_13 } = globals;
  function get_each_context15(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[55] = list[i];
    child_ctx[57] = i;
    return child_ctx;
  }
  function get_each_context_18(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[58] = list[i];
    return child_ctx;
  }
  function get_each_context_26(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[61] = list[i];
    return child_ctx;
  }
  function get_each_context_35(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[64] = list[i];
    return child_ctx;
  }
  function get_each_context_45(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[67] = list[i];
    return child_ctx;
  }
  function get_each_context_55(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[70] = list[i];
    return child_ctx;
  }
  function get_each_context_65(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[73] = list[i];
    return child_ctx;
  }
  function get_each_context_75(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[76] = list[i];
    return child_ctx;
  }
  function get_each_context_85(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[79] = list[i];
    return child_ctx;
  }
  function get_each_context_95(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[82] = list[i];
    return child_ctx;
  }
  function get_each_context_104(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[85] = list[i];
    child_ctx[87] = i;
    return child_ctx;
  }
  function create_if_block_146(ctx) {
    let div;
    let field0;
    let t0;
    let field1;
    let t1;
    let hr;
    let t2;
    let field2;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let field9;
    let t10;
    let field10;
    let t11;
    let t12;
    let t13;
    let br;
    let t14;
    let table;
    let thead;
    let t19;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_154] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_144] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_134] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_125] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_118] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_104] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_94] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_85] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_75] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_611] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_512] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*jenisSkema*/
      (ctx[10] === "Riset Kelompok Keahlian" || /*jenisSkema*/
      ctx[10] === "Riset Terapan" || /*jenisSkema*/
      ctx[10] === "Riset Kerjasama" || /*jenisSkema*/
      ctx[10] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
      ctx[10] === "Pengabdian Masyarakat UMKM Binaan") && create_if_block_196(ctx)
    );
    let if_block1 = (
      /*items*/
      ctx[15].length && create_if_block_176(ctx)
    );
    let if_block2 = (
      /*anggotaTim*/
      ctx[13].length > 0 && create_if_block_156(ctx)
    );
    return {
      c() {
        div = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        hr = element("hr");
        t2 = space();
        create_component(field2.$$.fragment);
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        create_component(field9.$$.fragment);
        t10 = space();
        create_component(field10.$$.fragment);
        t11 = space();
        if (if_block0)
          if_block0.c();
        t12 = space();
        if (if_block1)
          if_block1.c();
        t13 = space();
        br = element("br");
        t14 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t19 = space();
        tbody = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        mount_component(field0, div, null);
        append(div, t0);
        mount_component(field1, div, null);
        append(div, t1);
        append(div, hr);
        append(div, t2);
        mount_component(field2, div, null);
        append(div, t3);
        mount_component(field3, div, null);
        append(div, t4);
        mount_component(field4, div, null);
        append(div, t5);
        mount_component(field5, div, null);
        append(div, t6);
        mount_component(field6, div, null);
        append(div, t7);
        mount_component(field7, div, null);
        append(div, t8);
        mount_component(field8, div, null);
        append(div, t9);
        mount_component(field9, div, null);
        append(div, t10);
        mount_component(field10, div, null);
        append(div, t11);
        if (if_block0)
          if_block0.m(div, null);
        append(div, t12);
        if (if_block1)
          if_block1.m(div, null);
        append(div, t13);
        append(div, br);
        append(div, t14);
        append(div, table);
        append(table, thead);
        append(table, t19);
        append(table, tbody);
        if (if_block2)
          if_block2.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, judul*/
        67584 | dirty[2] & /*$$scope*/
        67108864) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, myAbstract*/
        65544 | dirty[2] & /*$$scope*/
        67108864) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        65792 | dirty[2] & /*$$scope*/
        67108864) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        65664 | dirty[2] & /*$$scope*/
        67108864) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        66688 | dirty[2] & /*$$scope*/
        67108864) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        65552 | dirty[2] & /*$$scope*/
        67108864) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, topik*/
        69632 | dirty[2] & /*$$scope*/
        67108864) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        66048 | dirty[2] & /*$$scope*/
        67108864) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        65600 | dirty[2] & /*$$scope*/
        67108864) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        65568 | dirty[2] & /*$$scope*/
        67108864) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error, $ppmFile*/
        1114112 | dirty[2] & /*$$scope*/
        67108864) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        if (
          /*jenisSkema*/
          ctx2[10] === "Riset Kelompok Keahlian" || /*jenisSkema*/
          ctx2[10] === "Riset Terapan" || /*jenisSkema*/
          ctx2[10] === "Riset Kerjasama" || /*jenisSkema*/
          ctx2[10] === "Pengabdian Masyarakat Desa Binaan" || /*jenisSkema*/
          ctx2[10] === "Pengabdian Masyarakat UMKM Binaan"
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*jenisSkema*/
            1024) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_196(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(div, t12);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*items*/
          ctx2[15].length
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*items*/
            32768) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_176(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div, t13);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*anggotaTim*/
          ctx2[13].length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            8192) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_156(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
      }
    };
  }
  function create_if_block_346(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_154(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].judul && create_if_block_346(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "judul");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[28]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        2048 && input.value !== /*judul*/
        ctx2[11]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[16].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_346(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_336(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].myAbstract + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].myAbstract + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_144(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].myAbstract && create_if_block_336(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "id", "myAbstract");
        attr(textarea, "class", "textarea");
        attr(textarea, "placeholder", "Masukkan abstrak");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*myAbstract*/
          ctx[3]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[29]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*myAbstract*/
        8) {
          set_input_value(
            textarea,
            /*myAbstract*/
            ctx2[3]
          );
        }
        if (
          /*error*/
          ctx2[16].myAbstract
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_336(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_327(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_134(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].jenisProposal && create_if_block_327(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisProposal");
        if (
          /*jenisProposal*/
          ctx[8] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[30].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[8],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[30]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        256) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_327(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3110(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_125(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].jenisKegiatan && create_if_block_3110(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisKegiatan");
        if (
          /*jenisKegiatan*/
          ctx[7] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[31].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[7],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[31]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        128) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3110(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_24(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat Mandiri";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option3, option3.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
        }
      }
    };
  }
  function create_if_block_306(ctx) {
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option3 = element("option");
        option3.textContent = "Riset Mandiri";
        option4 = element("option");
        option4.textContent = "Riset Eksternal";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
        option3.__value = "Riset Mandiri";
        set_input_value(option3, option3.__value);
        option4.__value = "Riset Eksternal";
        set_input_value(option4, option4.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
        insert(target, option3, anchor);
        insert(target, option4, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
          detach(option3);
          detach(option4);
        }
      }
    };
  }
  function create_if_block_296(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_118(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[7] === "Penelitian"
      )
        return create_if_block_306;
      return create_else_block_24;
    }
    let current_block_type = select_block_type(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[16].jenisSkema && create_if_block_296(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\r\n                  ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        attr(select, "id", "jenisSkema");
        if (
          /*jenisSkema*/
          ctx[10] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[32].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[10],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[32]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        1024) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_296(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_286(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_104(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].kelompokKeahlian && create_if_block_286(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "kelompokKeahlian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan kelompok keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[4]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[33]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        16 && input.value !== /*kelompokKeahlian*/
        ctx2[4]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[4]
          );
        }
        if (
          /*error*/
          ctx2[16].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_286(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_276(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_94(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].topik && create_if_block_276(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "topik");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[34]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        4096 && input.value !== /*topik*/
        ctx2[12]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[16].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_276(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_266(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_85(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].tanggalMulai && create_if_block_266(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalMulai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[9]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[35]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        512) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[16].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_266(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_256(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_75(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].tanggalSelesai && create_if_block_256(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalSelesai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[6]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[36]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        64) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[16].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_256(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_246(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_611(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].biayaPenelitian && create_if_block_246(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "biayaPenelitian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan biaya penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[5]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_5*/
              ctx[37]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[38]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        32 && input.value !== /*biayaPenelitian*/
        ctx2[5]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[5]
          );
        }
        if (
          /*error*/
          ctx2[16].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_246(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_112(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_237(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[20].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$ppmFile*/
        1048576 && t_value !== (t_value = /*$ppmFile*/
        ctx2[20].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_227(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_512(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_1(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[20]?.name
      )
        return create_if_block_237;
      return create_else_block_112;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[16].fileProposal && create_if_block_227(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePpmChange*/
            ctx[25]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[16].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_227(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_196(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_413] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, $rabFile*/
        589824 | dirty[2] & /*$$scope*/
        67108864) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_else_block12(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2110(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[19]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$rabFile*/
        524288 && t_value !== (t_value = /*$rabFile*/
        ctx2[19]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_206(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_413(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_2(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[19]?.name
      )
        return create_if_block_2110;
      return create_else_block12;
    }
    let current_block_type = select_block_type_2(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[16].fileRAB && create_if_block_206(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileRab");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*fileRabChange*/
            ctx[26]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[16].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_206(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_176(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_314] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, items, anggotaTim*/
        106496 | dirty[2] & /*$$scope*/
        67108864) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_186(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_314(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[39](value);
    }
    let select_props = {
      id: "anggotaTim",
      start: "2",
      items: (
        /*items*/
        ctx[15]
      )
    };
    if (
      /*anggotaTim*/
      ctx[13] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[13];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[16].anggotaTim && create_if_block_186(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        32768)
          select_changes.items = /*items*/
          ctx2[15];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        8192) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[13];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[16].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_186(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_156(ctx) {
    let each_1_anchor;
    let current;
    let each_value_10 = ensure_array_like(
      /*anggotaTim*/
      ctx[13]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_104(get_each_context_104(ctx, each_value_10, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim, deleteMember*/
        134225920) {
          each_value_10 = ensure_array_like(
            /*anggotaTim*/
            ctx2[13]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_104(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_104(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_10.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_10.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_13);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_166(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[85].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[27]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        8192 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[85].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_104(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[85].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[85].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[87] > 0 && create_if_block_166(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[87] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        8192) && t1_value !== (t1_value = /*member*/
        ctx2[85].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        8192) && t3_value !== (t3_value = /*member*/
        ctx2[85].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_228(ctx) {
    let div;
    let t1;
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[14].length > 0 && create_if_block_321(ctx)
    );
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Pastikan data yang digunakan merupakan data terbaru.</p>`;
        t1 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        insert(target, t1, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[14].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_321(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_321(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[14]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block15(get_each_context15(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[14]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context15(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block15(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_13);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_419(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let hr1;
    let t18;
    let h51;
    let t20;
    let table0;
    let thead0;
    let t30;
    let tbody0;
    let t31;
    let table1;
    let thead1;
    let t41;
    let tbody1;
    let t42;
    let table2;
    let thead2;
    let t52;
    let tbody2;
    let t53;
    let hr2;
    let t54;
    let h52;
    let t56;
    let table3;
    let thead3;
    let t66;
    let tbody3;
    let t67;
    let hr3;
    let t68;
    let h53;
    let t70;
    let table4;
    let thead4;
    let t80;
    let tbody4;
    let t81;
    let hr4;
    let t82;
    let h54;
    let t84;
    let table5;
    let thead5;
    let t92;
    let tbody5;
    let t93;
    let hr5;
    let t94;
    let h55;
    let t96;
    let table6;
    let thead6;
    let t106;
    let tbody6;
    let t107;
    let hr6;
    let t108;
    let h56;
    let t110;
    let table7;
    let thead7;
    let t120;
    let tbody7;
    let t121;
    let hr7;
    let t122;
    let h57;
    let t124;
    let table8;
    let thead8;
    let t134;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[55].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[55].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[55].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[55].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[55].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[55].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[55].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[55].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[55].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[55].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[55].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[55].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[55].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    let if_block0 = (
      /*user*/
      ctx[55].RPS1.length > 0 && create_if_block_137(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[55].RPS2.length > 0 && create_if_block_128(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[55].RPS3.length > 0 && create_if_block_1112(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[55].Ppenelitian.length > 0 && create_if_block_106(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[55].Ppengmas.length > 0 && create_if_block_96(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[55].Pdiseminasi.length > 0 && create_if_block_86(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[55].Ppublikasi.length > 0 && create_if_block_713(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[55].PpenulisanBuku.length > 0 && create_if_block_617(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[55].Phki.length > 0 && create_if_block_517(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        hr1 = element("hr");
        t18 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t20 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t30 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t31 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t41 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t42 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t52 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t53 = space();
        hr2 = element("hr");
        t54 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t56 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t66 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t67 = space();
        hr3 = element("hr");
        t68 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t80 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t81 = space();
        hr4 = element("hr");
        t82 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t84 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t92 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t93 = space();
        hr5 = element("hr");
        t94 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)";
        t96 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t106 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t107 = space();
        hr6 = element("hr");
        t108 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t110 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t120 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t121 = space();
        hr7 = element("hr");
        t122 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t124 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t134 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        insert(target, t17, anchor);
        insert(target, hr1, anchor);
        insert(target, t18, anchor);
        insert(target, h51, anchor);
        insert(target, t20, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t30);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t31, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t41);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t42, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t52);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t53, anchor);
        insert(target, hr2, anchor);
        insert(target, t54, anchor);
        insert(target, h52, anchor);
        insert(target, t56, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t66);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t67, anchor);
        insert(target, hr3, anchor);
        insert(target, t68, anchor);
        insert(target, h53, anchor);
        insert(target, t70, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t80);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t81, anchor);
        insert(target, hr4, anchor);
        insert(target, t82, anchor);
        insert(target, h54, anchor);
        insert(target, t84, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t92);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t93, anchor);
        insert(target, hr5, anchor);
        insert(target, t94, anchor);
        insert(target, h55, anchor);
        insert(target, t96, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t106);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t107, anchor);
        insert(target, hr6, anchor);
        insert(target, t108, anchor);
        insert(target, h56, anchor);
        insert(target, t110, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t120);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t121, anchor);
        insert(target, hr7, anchor);
        insert(target, t122, anchor);
        insert(target, h57, anchor);
        insert(target, t124, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t134);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview0_changes.content = /*user*/
          ctx2[55].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview1_changes.content = /*user*/
          ctx2[55].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview2_changes.content = /*user*/
          ctx2[55].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview3_changes.content = /*user*/
          ctx2[55].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview4_changes.content = /*user*/
          ctx2[55].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview5_changes.content = /*user*/
          ctx2[55].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview6_changes.content = /*user*/
          ctx2[55].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview7_changes.content = /*user*/
          ctx2[55].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview8_changes.content = /*user*/
          ctx2[55].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview9_changes.content = /*user*/
          ctx2[55].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview10_changes.content = /*user*/
          ctx2[55].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview11_changes.content = /*user*/
          ctx2[55].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview12_changes.content = /*user*/
          ctx2[55].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[55].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_137(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[55].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_128(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[55].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_1112(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[55].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_106(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[55].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_96(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[55].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_86(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[55].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_713(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[55].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_617(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[55].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_517(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t17);
          detach(hr1);
          detach(t18);
          detach(h51);
          detach(t20);
          detach(table0);
          detach(t31);
          detach(table1);
          detach(t42);
          detach(table2);
          detach(t53);
          detach(hr2);
          detach(t54);
          detach(h52);
          detach(t56);
          detach(table3);
          detach(t67);
          detach(hr3);
          detach(t68);
          detach(h53);
          detach(t70);
          detach(table4);
          detach(t81);
          detach(hr4);
          detach(t82);
          detach(h54);
          detach(t84);
          detach(table5);
          detach(t93);
          detach(hr5);
          detach(t94);
          detach(h55);
          detach(t96);
          detach(table6);
          detach(t107);
          detach(hr6);
          detach(t108);
          detach(h56);
          detach(t110);
          detach(table7);
          detach(t121);
          detach(hr7);
          detach(t122);
          detach(h57);
          detach(t124);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_137(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[55].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_95(get_each_context_95(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[55].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_95(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_95(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_95(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[82].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[82].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[82].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[82].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[82].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS1*/
        ctx2[82].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS1*/
        ctx2[82].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS1*/
        ctx2[82].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS1*/
        ctx2[82].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS1*/
        ctx2[82].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_128(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[55].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_85(get_each_context_85(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[55].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_85(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_85(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_85(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[79].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[79].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[79].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[79].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[79].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS2*/
        ctx2[79].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS2*/
        ctx2[79].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS2*/
        ctx2[79].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS2*/
        ctx2[79].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS2*/
        ctx2[79].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1112(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[55].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_75(get_each_context_75(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[55].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_75(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_75(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_75(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[76].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[76].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[76].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[76].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[76].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS3*/
        ctx2[76].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS3*/
        ctx2[76].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS3*/
        ctx2[76].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS3*/
        ctx2[76].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS3*/
        ctx2[76].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_106(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[55].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_65(get_each_context_65(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[55].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_65(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_65(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_65(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[73].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[73].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[73].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[73].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[73].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PP*/
        ctx2[73].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PP*/
        ctx2[73].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PP*/
        ctx2[73].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PP*/
        ctx2[73].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PP*/
        ctx2[73].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_96(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[55].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_55(get_each_context_55(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[55].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_55(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_55(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_55(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[70].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[70].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[70].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[70].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[70].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PM*/
        ctx2[70].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PM*/
        ctx2[70].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PM*/
        ctx2[70].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PM*/
        ctx2[70].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PM*/
        ctx2[70].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_86(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[55].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_45(get_each_context_45(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[55].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_45(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_45(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_45(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[67].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[67].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[67].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[67].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PD*/
        ctx2[67].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PD*/
        ctx2[67].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PD*/
        ctx2[67].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PD*/
        ctx2[67].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_713(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[55].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_35(get_each_context_35(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[55].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_35(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_35(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_35(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[64].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[64].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[64].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[64].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[64].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PPub*/
        ctx2[64].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PPub*/
        ctx2[64].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PPub*/
        ctx2[64].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PPub*/
        ctx2[64].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PPub*/
        ctx2[64].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_617(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[55].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_26(get_each_context_26(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[55].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_26(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_26(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_26(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[61].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[61].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[61].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[61].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[61].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PPB*/
        ctx2[61].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PPB*/
        ctx2[61].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PPB*/
        ctx2[61].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PPB*/
        ctx2[61].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PPB*/
        ctx2[61].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_517(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[55].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_18(get_each_context_18(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[55].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_18(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_18(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_18(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[58].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[58].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[58].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[58].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[58].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PHKI*/
        ctx2[58].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PHKI*/
        ctx2[58].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PHKI*/
        ctx2[58].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PHKI*/
        ctx2[58].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PHKI*/
        ctx2[58].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block15(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[55].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[14][
        /*index*/
        ctx[57]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler() {
      return (
        /*click_handler*/
        ctx[40](
          /*index*/
          ctx[57]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[14][
        /*index*/
        ctx[57]
      ].profileVisible && create_if_block_419(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-1iurio9");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        16384) && t1_value !== (t1_value = /*user*/
        ctx[55].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        16384) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[14][
          /*index*/
          ctx[57]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[14][
            /*index*/
            ctx[57]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_419(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_129(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Next";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*clicktab2*/
            ctx[24]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block20(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Back";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Simpan";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Submit";
        attr(button0, "class", "button");
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info is-light");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clicktab1*/
              ctx[23]
            ),
            listen(
              button1,
              "click",
              /*simpanProposal*/
              ctx[21]
            ),
            listen(
              button2,
              "click",
              /*submitProposal*/
              ctx[22]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_215(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div2;
    let ul;
    let li0;
    let span1;
    let span0;
    let icon0;
    let t3;
    let div0;
    let t7;
    let li1;
    let span3;
    let span2;
    let icon1;
    let t8;
    let div1;
    let t12;
    let t13;
    let t14;
    let t15;
    let if_block3_anchor;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: penelitian } });
    icon1 = new Icon_default({
      props: { id: "accountEdit", src: accountEdit }
    });
    let if_block0 = (
      /*tab1*/
      ctx[17] === true && create_if_block_146(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[18] === true && create_if_block_228(ctx)
    );
    let if_block2 = (
      /*tab1*/
      ctx[17] === true && create_if_block_129(ctx)
    );
    let if_block3 = (
      /*tab2*/
      ctx[18] === true && create_if_block20(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pendaftaran Proposal";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div2 = element("div");
        ul = element("ul");
        li0 = element("li");
        span1 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        div0 = element("div");
        div0.innerHTML = `<p class="is-size-5"><b>Step 1</b></p> <p class="is-size-6">Proposal</p>`;
        t7 = space();
        li1 = element("li");
        span3 = element("span");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t8 = space();
        div1 = element("div");
        div1.innerHTML = `<p class="is-size-5"><b>Step 2</b></p> <p class="is-size-6">Biodata Peneliti</p>`;
        t12 = space();
        if (if_block0)
          if_block0.c();
        t13 = space();
        if (if_block1)
          if_block1.c();
        t14 = space();
        if (if_block2)
          if_block2.c();
        t15 = space();
        if (if_block3)
          if_block3.c();
        if_block3_anchor = empty();
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(span1, "class", "steps-marker");
        attr(div0, "class", "steps-content");
        attr(li0, "data-step", "1");
        attr(li0, "class", "steps-segment");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[17]
        );
        attr(span2, "class", "icon");
        attr(span3, "class", "steps-marker");
        attr(div1, "class", "steps-content");
        attr(li1, "data-step", "2");
        attr(li1, "class", "steps-segment");
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[18]
        );
        attr(ul, "class", "steps is-medium has-content-centered svelte-1iurio9");
        attr(div2, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div2, anchor);
        append(div2, ul);
        append(ul, li0);
        append(li0, span1);
        append(span1, span0);
        mount_component(icon0, span0, null);
        append(li0, t3);
        append(li0, div0);
        append(ul, t7);
        append(ul, li1);
        append(li1, span3);
        append(span3, span2);
        mount_component(icon1, span2, null);
        append(li1, t8);
        append(li1, div1);
        insert(target, t12, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t13, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t14, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t15, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, if_block3_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[23]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[24]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*tab1*/
        131072) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[17]
          );
        }
        if (!current || dirty[0] & /*tab2*/
        262144) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[18]
          );
        }
        if (
          /*tab1*/
          ctx2[17] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*tab1*/
            131072) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_146(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t13.parentNode, t13);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[18] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*tab2*/
            262144) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_228(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t14.parentNode, t14);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab1*/
          ctx2[17] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_129(ctx2);
            if_block2.c();
            if_block2.m(t15.parentNode, t15);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*tab2*/
          ctx2[18] === true
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block20(ctx2);
            if_block3.c();
            if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div2);
          detach(t12);
          detach(t13);
          detach(t14);
          detach(t15);
          detach(if_block3_anchor);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_119(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form proposal untuk ke step selanjutnya!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot16(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Pastikan untuk melengkapi Identitas Diri semua anggota";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment39(ctx) {
    let article2;
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_215] },
        $$scope: { ctx }
      }
    });
    function modalerror0_show_binding(value) {
      ctx[41](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_119] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorProposal*/
      ctx[1] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorProposal*/
      ctx[1];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[42](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot16] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorIdentitas*/
      ctx[0] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorIdentitas*/
      ctx[0];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*isLoading, tab2, tab1, biodataAnggota, anggotaTim, error, items, $rabFile, jenisSkema, $ppmFile, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, myAbstract, judul*/
        2097148 | dirty[2] & /*$$scope*/
        67108864) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modalerror0_changes = {};
        if (dirty[2] & /*$$scope*/
        67108864) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalErrorProposal*/
        2) {
          updating_show = true;
          modalerror0_changes.show = /*showModalErrorProposal*/
          ctx2[1];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[2] & /*$$scope*/
        67108864) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorIdentitas*/
        1) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorIdentitas*/
          ctx2[0];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        destroy_component(article2, detaching);
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
      }
    };
  }
  function formatRupiah4(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance32($$self, $$props, $$invalidate) {
    let $rabFile;
    let $ppmFile;
    let $route;
    let $apiURL;
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(19, $rabFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(20, $ppmFile = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(47, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(48, $apiURL = $$value));
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    const localStorage_id = localStorage.getItem("id");
    const accessToken = localStorage.getItem("token");
    const id = Number(localStorage.getItem("id"));
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let showModalErrorIdentitas = false;
    let showModalErrorProposal = false;
    let isLoading = false;
    let myAbstract;
    let fileRab;
    let filePpm;
    let randomRabFileName2 = "";
    let randomPpmFileName2 = "";
    let kelompokKeahlian = "";
    let biayaPenelitian = "";
    let tanggalSelesai = "";
    let jenisKegiatan = "";
    let jenisProposal = "";
    let tanggalMulai = "";
    let jenisSkema = "";
    let judul = "";
    let topik = "";
    let anggotaTim = [
      {
        value: localStorage_id,
        label: localStorage_namaLengkap,
        role: "Ketua"
      }
    ];
    let biodataAnggota = [];
    let items = [];
    let error = {};
    onMount(async () => {
      $$invalidate(2, isLoading = false);
      const response = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          listUser = result;
          $$invalidate(15, items = []);
          for (const [key, value] of Object.entries(listUser)) {
            items.push({
              value: value.uid,
              label: value.nama_lengkap
            });
          }
        } else {
          console.log(response);
        }
      }
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      let resultPpmChar = "";
      for (let i = 0; i < 30; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultPpmChar += characters.charAt(randomIndex);
      }
      randomPpmFileName2 = resultPpmChar;
      let resultRabChar = "";
      for (let i = 0; i < 30; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultRabChar += characters.charAt(randomIndex);
      }
      randomRabFileName2 = resultRabChar;
    });
    async function getBiodataAnggota() {
      let ids = anggotaTim.map((anggota) => anggota.value);
      let promises = ids.map(async (idAnggota) => {
        try {
          const profileResponse = await fetch($apiURL + "/user/" + idAnggota, { method: "GET", headers });
          if (profileResponse.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!profileResponse.ok) {
            throw new Error(`Failed to fetch profile for ID ${idAnggota}`);
          }
          const profileResult = await profileResponse.json();
          const RPS1Response = await fetch($apiURL + "/riwayatPendidikanS1/" + idAnggota, { method: "GET", headers });
          if (RPS1Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS1Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S1 for ID ${idAnggota}`);
          }
          const RPS1Result = await RPS1Response.json();
          const RPS2Response = await fetch($apiURL + "/riwayatPendidikanS2/" + idAnggota, { method: "GET", headers });
          if (RPS2Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS2Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S2 for ID ${idAnggota}`);
          }
          const RPS2Result = await RPS2Response.json();
          const RPS3Response = await fetch($apiURL + "/riwayatPendidikanS3/" + idAnggota, { method: "GET", headers });
          if (RPS3Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS3Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const RPS3Result = await RPS3Response.json();
          const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + idAnggota, { method: "GET", headers });
          if (responsePP.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePP.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPP = await responsePP.json();
          const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + idAnggota, { method: "GET", headers });
          if (responsePM.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePM.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPM = await responsePM.json();
          const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + idAnggota, { method: "GET", headers });
          if (responsePD.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePD.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPD = await responsePD.json();
          const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + idAnggota, { method: "GET", headers });
          if (responsePPub.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPub.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPub = await responsePPub.json();
          const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idAnggota, { method: "GET", headers });
          if (responsePPB.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPB.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPB = await responsePPB.json();
          const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + idAnggota, { method: "GET", headers });
          if (responsePHKI.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePHKI.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPHKI = await responsePHKI.json();
          return {
            profile: profileResult,
            RPS1: RPS1Result.dbData,
            RPS2: RPS2Result.dbData,
            RPS3: RPS3Result.dbData,
            Ppenelitian: resultPP.dbData,
            Ppengmas: resultPM.dbData,
            Pdiseminasi: resultPD.dbData,
            Ppublikasi: resultPPub.dbData,
            PpenulisanBuku: resultPPB.dbData,
            Phki: resultPHKI.dbData
          };
        } catch (error2) {
          console.error(`Error fetching data for ID ${idAnggota}:`, error2);
          return {
            profile: null,
            RPS1: [],
            RPS2: [],
            RPS3: [],
            Ppenelitian: [],
            Ppengmas: [],
            Pdiseminasi: [],
            Ppublikasi: [],
            PpenulisanBuku: [],
            Phki: [],
            error: error2.message
          };
        }
      });
      $$invalidate(14, biodataAnggota = await Promise.all(promises.filter(Boolean)));
    }
    async function simpanProposal() {
      $$invalidate(16, error = {});
      $$invalidate(2, isLoading = true);
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 0,
        randomRabFileName: randomRabFileName2,
        randomPpmFileName: randomPpmFileName2
      };
      readerPpm.onloadend = async () => {
        const base64Data = readerPpm.result.split(",")[1];
        const payloadPpmFile = {
          filePpm: {
            name: filePpm.name,
            type: filePpm.type,
            data: base64Data
          },
          randomPpmFileName: randomPpmFileName2
        };
        try {
          const response = await fetch($apiURL + "/uploadPpm", {
            method: "POST",
            headers,
            body: JSON.stringify(payloadPpmFile)
          });
          const result = await response.json();
        } catch (error2) {
          console.error("Error uploading file:", error2);
        }
      };
      readerPpm.readAsDataURL(filePpm);
      if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            randomRabFileName: randomRabFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result = await response.json();
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        readerRab.readAsDataURL(fileRab);
      }
      const responseProposal = await fetch($apiURL + "/ppm", {
        method: "POST",
        headers,
        body: JSON.stringify(payloadProposal)
      });
      const resultProposal = await responseProposal.json();
      if (responseProposal.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseProposal.ok) {
          $route("/dosen/ppmmanagement");
        } else {
          console.log(responseProposal.msg, error);
        }
      }
      $$invalidate(2, isLoading = false);
    }
    async function submitProposal() {
      $$invalidate(16, error = {});
      $$invalidate(2, isLoading = true);
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const readerRab = new FileReader();
      const readerPpm = new FileReader();
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 2,
        randomRabFileName: randomRabFileName2,
        randomPpmFileName: randomPpmFileName2
      };
      readerPpm.onloadend = async () => {
        const base64Data = readerPpm.result.split(",")[1];
        const payloadPpmFile = {
          filePpm: {
            name: filePpm.name,
            type: filePpm.type,
            data: base64Data
          },
          randomPpmFileName: randomPpmFileName2
        };
        try {
          const response = await fetch($apiURL + "/uploadPpm", {
            method: "POST",
            headers,
            body: JSON.stringify(payloadPpmFile)
          });
          const result = await response.json();
        } catch (error2) {
          console.error("Error uploading file:", error2);
        }
      };
      readerPpm.readAsDataURL(filePpm);
      if (jenisSkema === "Riset Kelompok Keahlian" || jenisSkema === "Riset Terapan" || jenisSkema === "Riset Kerjasama" || jenisSkema === "Pengabdian Masyarakat Desa Binaan" || jenisSkema === "Pengabdian Masyarakat UMKM Binaan") {
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            randomRabFileName: randomRabFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result = await response.json();
          } catch (error2) {
            console.error("Error uploading file:", error2);
          }
        };
        readerRab.readAsDataURL(fileRab);
      }
      const responseProposal = await fetch($apiURL + "/ppm", {
        method: "POST",
        headers,
        body: JSON.stringify(payloadProposal)
      });
      const resultProposal = await responseProposal.json();
      if (responseProposal.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseProposal.ok) {
          $route("/dosen/ppmmanagement");
        } else {
          console.log(responseProposal.msg, error);
        }
      }
      $$invalidate(2, isLoading = false);
    }
    let tab1 = true;
    let tab2 = false;
    async function clicktab1() {
      if (!tab1) {
        $$invalidate(17, tab1 = true);
        $$invalidate(18, tab2 = false);
      }
    }
    async function clicktab2() {
      if (!tab2) {
        await getBiodataAnggota();
        $$invalidate(17, tab1 = false);
        $$invalidate(18, tab2 = true);
      }
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(13, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    function input_input_handler() {
      judul = this.value;
      $$invalidate(11, judul);
    }
    function textarea_input_handler() {
      myAbstract = this.value;
      $$invalidate(3, myAbstract);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(8, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(7, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(10, jenisSkema);
    }
    function input_input_handler_1() {
      kelompokKeahlian = this.value;
      $$invalidate(4, kelompokKeahlian);
    }
    function input_input_handler_2() {
      topik = this.value;
      $$invalidate(12, topik);
    }
    function input_input_handler_3() {
      tanggalMulai = this.value;
      $$invalidate(9, tanggalMulai);
    }
    function input_input_handler_4() {
      tanggalSelesai = this.value;
      $$invalidate(6, tanggalSelesai);
    }
    function input_input_handler_5() {
      biayaPenelitian = this.value;
      $$invalidate(5, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(5, biayaPenelitian = formatRupiah4(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(13, anggotaTim);
    }
    const click_handler = (index) => $$invalidate(14, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalErrorProposal = value;
      $$invalidate(1, showModalErrorProposal);
    }
    function modalerror1_show_binding(value) {
      showModalErrorIdentitas = value;
      $$invalidate(0, showModalErrorIdentitas);
    }
    return [
      showModalErrorIdentitas,
      showModalErrorProposal,
      isLoading,
      myAbstract,
      kelompokKeahlian,
      biayaPenelitian,
      tanggalSelesai,
      jenisKegiatan,
      jenisProposal,
      tanggalMulai,
      jenisSkema,
      judul,
      topik,
      anggotaTim,
      biodataAnggota,
      items,
      error,
      tab1,
      tab2,
      $rabFile,
      $ppmFile,
      simpanProposal,
      submitProposal,
      clicktab1,
      clicktab2,
      filePpmChange,
      fileRabChange,
      deleteMember,
      input_input_handler,
      textarea_input_handler,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      keyup_handler,
      select_result_binding,
      click_handler,
      modalerror0_show_binding,
      modalerror1_show_binding
    ];
  }
  var Pendaftaranproposal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance32, create_fragment39, safe_not_equal, {}, null, [-1, -1, -1]);
    }
  };
  var pendaftaranproposal_default = Pendaftaranproposal;

  // src/pages/dosen/ppmmanagement.svelte
  init_define_process();

  // src/libs/Modalroute.svelte
  init_define_process();
  function create_fragment40(ctx) {
    let b;
    let div1;
    let div0;
    let p;
    let t0;
    let button;
    let current;
    let mounted;
    let dispose;
    const default_slot_template = (
      /*#slots*/
      ctx[4].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    return {
      c() {
        b = element("b");
        div1 = element("div");
        div0 = element("div");
        p = element("p");
        if (default_slot)
          default_slot.c();
        t0 = space();
        button = element("button");
        button.textContent = "OK";
        attr(p, "class", "svelte-5cn8hs");
        attr(button, "class", "button is-info svelte-5cn8hs");
        attr(div0, "class", "cookiesContent svelte-5cn8hs");
        attr(b, "class", "svelte-5cn8hs");
        toggle_class(
          b,
          "show",
          /*show*/
          ctx[0]
        );
      },
      m(target, anchor) {
        insert(target, b, anchor);
        append(b, div1);
        append(div1, div0);
        append(div0, p);
        if (default_slot) {
          default_slot.m(p, null);
        }
        append(div0, t0);
        append(div0, button);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button,
              "click",
              /*clickX*/
              ctx[2]
            ),
            listen(
              b,
              "click",
              /*handleClick*/
              ctx[1]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*show*/
        1) {
          toggle_class(
            b,
            "show",
            /*show*/
            ctx2[0]
          );
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(b);
        }
        if (default_slot)
          default_slot.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function instance33($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    let { show = false } = $$props;
    function handleClick(e) {
      if (e.target === e.currentTarget) {
        $$invalidate(0, show = false);
      }
    }
    function clickX() {
      $$invalidate(0, show = false);
    }
    $$self.$$set = ($$props2) => {
      if ("show" in $$props2)
        $$invalidate(0, show = $$props2.show);
      if ("$$scope" in $$props2)
        $$invalidate(3, $$scope = $$props2.$$scope);
    };
    return [show, handleClick, clickX, $$scope, slots];
  }
  var Modalroute = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance33, create_fragment40, safe_not_equal, { show: 0 });
    }
  };
  var Modalroute_default = Modalroute;

  // src/pages/dosen/ppmmanagement.svelte
  function get_each_context16(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[13] = list[i];
    return child_ctx;
  }
  function create_if_block21(ctx) {
    let tbody;
    let current;
    let each_value = ensure_array_like(
      /*items*/
      ctx[1].filter(
        /*func*/
        ctx[8]
      )
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block16(get_each_context16(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        tbody = element("tbody");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
      },
      m(target, anchor) {
        insert(target, tbody, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(tbody, null);
          }
        }
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema, detail*/
        30) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[1].filter(
              /*func*/
              ctx2[8]
            )
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context16(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block16(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(tbody, null);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tbody);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block16(ctx) {
    let tr;
    let td0;
    let p0;
    let t0_value = (
      /*item*/
      ctx[13].judul + ""
    );
    let t0;
    let t1;
    let td1;
    let p1;
    let t2_value = (
      /*item*/
      ctx[13].jenis_kegiatan + ""
    );
    let t2;
    let t3;
    let td2;
    let p2;
    let t4_value = (
      /*item*/
      ctx[13].jenis_skema + ""
    );
    let t4;
    let t5;
    let td3;
    let status;
    let td3_pid_value;
    let t6;
    let td4;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t7;
    let current;
    let mounted;
    let dispose;
    status = new Status_default({
      props: {
        code: (
          /*item*/
          ctx[13].status
        ),
        jenisSkema: (
          /*item*/
          ctx[13].jenis_skema
        )
      }
    });
    icon = new Icon_default({ props: { id: "info", src: infoOutline } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        p0 = element("p");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        p1 = element("p");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        p2 = element("p");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        create_component(status.$$.fragment);
        t6 = space();
        td4 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t7 = space();
        attr(td0, "class", "judul svelte-xyvxfs");
        attr(td1, "class", "kegiatan svelte-xyvxfs");
        attr(td2, "class", "skema svelte-xyvxfs");
        attr(td3, "class", "status svelte-xyvxfs");
        attr(td3, "pid", td3_pid_value = /*item*/
        ctx[13].id);
        attr(span, "class", "icon");
        attr(button, "class", "button is-info is-small");
        attr(button, "pid", button_pid_value = /*item*/
        ctx[13].id);
        attr(td4, "class", "review svelte-xyvxfs");
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, p0);
        append(p0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, p1);
        append(p1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, p2);
        append(p2, t4);
        append(tr, t5);
        append(tr, td3);
        mount_component(status, td3, null);
        append(tr, t6);
        append(tr, td4);
        append(td4, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t7);
        current = true;
        if (!mounted) {
          dispose = listen(button, "click", detail);
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30) && t0_value !== (t0_value = /*item*/
        ctx2[13].judul + ""))
          set_data(t0, t0_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30) && t2_value !== (t2_value = /*item*/
        ctx2[13].jenis_kegiatan + ""))
          set_data(t2, t2_value);
        if ((!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30) && t4_value !== (t4_value = /*item*/
        ctx2[13].jenis_skema + ""))
          set_data(t4, t4_value);
        const status_changes = {};
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30)
          status_changes.code = /*item*/
          ctx2[13].status;
        if (dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30)
          status_changes.jenisSkema = /*item*/
          ctx2[13].jenis_skema;
        status.$set(status_changes);
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30 && td3_pid_value !== (td3_pid_value = /*item*/
        ctx2[13].id)) {
          attr(td3, "pid", td3_pid_value);
        }
        if (!current || dirty & /*items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        30 && button_pid_value !== (button_pid_value = /*item*/
        ctx2[13].id)) {
          attr(button, "pid", button_pid_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(status.$$.fragment, local);
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(status.$$.fragment, local);
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(status);
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_120(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div9;
    let div2;
    let div1;
    let div0;
    let select0;
    let option0;
    let option1;
    let option2;
    let t6;
    let div5;
    let div4;
    let div3;
    let select1;
    let option3;
    let optgroup0;
    let option4;
    let option5;
    let option6;
    let option7;
    let option8;
    let optgroup1;
    let option9;
    let option10;
    let option11;
    let option12;
    let t17;
    let div8;
    let div7;
    let div6;
    let input;
    let t18;
    let span;
    let icon;
    let t19;
    let div11;
    let div10;
    let table;
    let thead;
    let t29;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "searchIcon", src: searchIcon }
    });
    let if_block = (
      /*items*/
      ctx[1] && create_if_block21(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "PPM Management";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div9 = element("div");
        div2 = element("div");
        div1 = element("div");
        div0 = element("div");
        select0 = element("select");
        option0 = element("option");
        option0.textContent = "Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t6 = space();
        div5 = element("div");
        div4 = element("div");
        div3 = element("div");
        select1 = element("select");
        option3 = element("option");
        option3.textContent = "Jenis Skema";
        optgroup0 = element("optgroup");
        option4 = element("option");
        option4.textContent = "Riset Kelompok Keahlian";
        option5 = element("option");
        option5.textContent = "Riset Terapan";
        option6 = element("option");
        option6.textContent = "Riset Kerjasama";
        option7 = element("option");
        option7.textContent = "Riset Eksternal";
        option8 = element("option");
        option8.textContent = "Riset Mandiri";
        optgroup1 = element("optgroup");
        option9 = element("option");
        option9.textContent = "Pengabdian Masyarakat Desa Binaan";
        option10 = element("option");
        option10.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option11 = element("option");
        option11.textContent = "Pengabdian Masyarakat Hibah Eksternal";
        option12 = element("option");
        option12.textContent = "Pengabdian Masyarakat Mandiri";
        t17 = space();
        div8 = element("div");
        div7 = element("div");
        div6 = element("div");
        input = element("input");
        t18 = space();
        span = element("span");
        create_component(icon.$$.fragment);
        t19 = space();
        div11 = element("div");
        div10 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th style="width: 50%;">Judul</th> <th style="width: 10%; text-align: center" class="is-narrow">Jenis Kegiatan</th> <th style="width: auto; text-align: center" class="is-narrow">Jenis Skema</th> <th style="width: 15%; text-align: center">Status</th> <th style="width: 5%;" colspan="2">Action</th></tr>`;
        t29 = space();
        if (if_block)
          if_block.c();
        attr(h2, "class", "title is-2");
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        if (
          /*filterJenisKegiatan*/
          ctx[3] === void 0
        )
          add_render_callback(() => (
            /*select0_change_handler*/
            ctx[5].call(select0)
          ));
        attr(div0, "class", "select is-fullwidth");
        attr(div1, "class", "field");
        attr(div2, "class", "column is-narrow");
        option3.__value = "";
        set_input_value(option3, option3.__value);
        option3.selected = true;
        option3.disabled = true;
        option3.hidden = true;
        option4.__value = "Riset Kelompok Keahlian";
        set_input_value(option4, option4.__value);
        option5.__value = "Riset Terapan";
        set_input_value(option5, option5.__value);
        option6.__value = "Riset Kerjasama";
        set_input_value(option6, option6.__value);
        option7.__value = "Riset Eksternal";
        set_input_value(option7, option7.__value);
        option8.__value = "Riset Mandiri";
        set_input_value(option8, option8.__value);
        attr(optgroup0, "label", "Penelitian");
        option9.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option9, option9.__value);
        option10.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option10, option10.__value);
        option11.__value = "Pengabdian Masyarakat Hibah Eksternal";
        set_input_value(option11, option11.__value);
        option12.__value = "Pengabdian Masyarakat Mandiri";
        set_input_value(option12, option12.__value);
        attr(optgroup1, "label", "Pengabdian Masyarakat");
        if (
          /*filterJenisSkema*/
          ctx[4] === void 0
        )
          add_render_callback(() => (
            /*select1_change_handler*/
            ctx[6].call(select1)
          ));
        attr(div3, "class", "select is-fullwidth");
        attr(div4, "class", "field");
        attr(div5, "class", "column is-narrow");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Search judul");
        attr(span, "class", "icon is-left");
        attr(div6, "class", "control has-icons-left");
        attr(div7, "class", "field");
        attr(div8, "class", "column");
        attr(div9, "class", "columns");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable");
        attr(div10, "class", "child svelte-xyvxfs");
        attr(div11, "class", "box parent svelte-xyvxfs");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div9, anchor);
        append(div9, div2);
        append(div2, div1);
        append(div1, div0);
        append(div0, select0);
        append(select0, option0);
        append(select0, option1);
        append(select0, option2);
        select_option(
          select0,
          /*filterJenisKegiatan*/
          ctx[3],
          true
        );
        append(div9, t6);
        append(div9, div5);
        append(div5, div4);
        append(div4, div3);
        append(div3, select1);
        append(select1, option3);
        append(select1, optgroup0);
        append(optgroup0, option4);
        append(optgroup0, option5);
        append(optgroup0, option6);
        append(optgroup0, option7);
        append(optgroup0, option8);
        append(select1, optgroup1);
        append(optgroup1, option9);
        append(optgroup1, option10);
        append(optgroup1, option11);
        append(optgroup1, option12);
        select_option(
          select1,
          /*filterJenisSkema*/
          ctx[4],
          true
        );
        append(div9, t17);
        append(div9, div8);
        append(div8, div7);
        append(div7, div6);
        append(div6, input);
        set_input_value(
          input,
          /*filterJudul*/
          ctx[2]
        );
        append(div6, t18);
        append(div6, span);
        mount_component(icon, span, null);
        insert(target, t19, anchor);
        insert(target, div11, anchor);
        append(div11, div10);
        append(div10, table);
        append(table, thead);
        append(table, t29);
        if (if_block)
          if_block.m(table, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              select0,
              "change",
              /*select0_change_handler*/
              ctx[5]
            ),
            listen(
              select1,
              "change",
              /*select1_change_handler*/
              ctx[6]
            ),
            listen(
              input,
              "input",
              /*input_input_handler*/
              ctx[7]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty & /*filterJenisKegiatan*/
        8) {
          select_option(
            select0,
            /*filterJenisKegiatan*/
            ctx2[3]
          );
        }
        if (dirty & /*filterJenisSkema*/
        16) {
          select_option(
            select1,
            /*filterJenisSkema*/
            ctx2[4]
          );
        }
        if (dirty & /*filterJudul*/
        4 && input.value !== /*filterJudul*/
        ctx2[2]) {
          set_input_value(
            input,
            /*filterJudul*/
            ctx2[2]
          );
        }
        if (
          /*items*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*items*/
            2) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block21(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(table, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div9);
          detach(t19);
          detach(div11);
        }
        destroy_component(icon);
        if (if_block)
          if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot17(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi profile anda terlebih dahulu";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment41(ctx) {
    let article2;
    let t;
    let modalroute;
    let updating_show;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_120] },
        $$scope: { ctx }
      }
    });
    function modalroute_show_binding(value) {
      ctx[9](value);
    }
    let modalroute_props = {
      $$slots: { default: [create_default_slot17] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[0] !== void 0
    ) {
      modalroute_props.show = /*showModalError*/
      ctx[0];
    }
    modalroute = new Modalroute_default({ props: modalroute_props });
    binding_callbacks.push(() => bind(modalroute, "show", modalroute_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t = space();
        create_component(modalroute.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t, anchor);
        mount_component(modalroute, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope, items, filterJudul, filterJenisKegiatan, filterJenisSkema*/
        65566) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modalroute_changes = {};
        if (dirty & /*$$scope*/
        65536) {
          modalroute_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalError*/
        1) {
          updating_show = true;
          modalroute_changes.show = /*showModalError*/
          ctx2[0];
          add_flush_callback(() => updating_show = false);
        }
        modalroute.$set(modalroute_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modalroute.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modalroute.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
        }
        destroy_component(article2, detaching);
        destroy_component(modalroute, detaching);
      }
    };
  }
  function detail(ev) {
    let propId = ev.target.getAttribute("pid");
    location.href = "/dosen/detailppm/" + propId;
  }
  function daysUntil(targetDate) {
    const today = /* @__PURE__ */ new Date();
    const target = new Date(targetDate);
    const difference = target.getTime() - today.getTime();
    const positiveDifference = Math.abs(difference);
    const days = Math.floor(positiveDifference / (1e3 * 3600 * 24));
    const weeks = Math.floor(days / 7);
    const months = Math.floor(days / 30);
    const remainingWeeks = weeks % 4;
    const remainingDays = days % 30;
    return { months, remainingWeeks, remainingDays };
  }
  function instance34($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(10, $apiURL = $$value));
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    const id = localStorage.id;
    let showModalError = false;
    let items;
    let filterJudul = "";
    let filterJenisKegiatan = "";
    let filterJenisSkema = "";
    onMount(async () => {
      const accessToken = localStorage.getItem("token");
      const headers = {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json"
      };
      const response = await fetch($apiURL + "/ppm/all/" + id, { method: "GET", headers });
      const result = await response.json();
      const reminder = [];
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          $$invalidate(1, items = result.dbData);
          for (const item of items) {
            reminder.push({
              judul: item.judul,
              selesai: item.tanggal_selesai,
              tersisa: `${daysUntil(item.tanggal_selesai).months} bulan, ${daysUntil(item.tanggal_selesai).remainingWeeks} minggu dan ${daysUntil(item.tanggal_selesai).remainingDays} hari.`
            });
          }
        } else {
          console.log(response);
        }
      }
    });
    function select0_change_handler() {
      filterJenisKegiatan = select_value(this);
      $$invalidate(3, filterJenisKegiatan);
    }
    function select1_change_handler() {
      filterJenisSkema = select_value(this);
      $$invalidate(4, filterJenisSkema);
    }
    function input_input_handler() {
      filterJudul = this.value;
      $$invalidate(2, filterJudul);
    }
    const func = (item) => item.judul.toLowerCase().includes(filterJudul.toLowerCase()) && (filterJenisKegiatan === "" || item.jenis_kegiatan === filterJenisKegiatan) && (filterJenisSkema === "" || item.jenis_skema === filterJenisSkema);
    function modalroute_show_binding(value) {
      showModalError = value;
      $$invalidate(0, showModalError);
    }
    return [
      showModalError,
      items,
      filterJudul,
      filterJenisKegiatan,
      filterJenisSkema,
      select0_change_handler,
      select1_change_handler,
      input_input_handler,
      func,
      modalroute_show_binding
    ];
  }
  var Ppmmanagement2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance34, create_fragment41, safe_not_equal, {});
    }
  };
  var ppmmanagement_default2 = Ppmmanagement2;

  // src/pages/dosen/profile.svelte
  init_define_process();
  function get_each_context17(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[200] = list[i];
    return child_ctx;
  }
  function get_each_context_19(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[203] = list[i];
    return child_ctx;
  }
  function get_each_context_27(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[206] = list[i];
    return child_ctx;
  }
  function get_each_context_36(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[209] = list[i];
    return child_ctx;
  }
  function get_each_context_46(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[212] = list[i];
    return child_ctx;
  }
  function get_each_context_56(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[215] = list[i];
    return child_ctx;
  }
  function get_each_context_66(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[218] = list[i];
    return child_ctx;
  }
  function get_each_context_76(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[221] = list[i];
    return child_ctx;
  }
  function get_each_context_86(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[224] = list[i];
    return child_ctx;
  }
  function get_each_context_96(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[227] = list[i];
    return child_ctx;
  }
  function create_if_block_554(ctx) {
    let div0;
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let field5;
    let t5;
    let field6;
    let t6;
    let field7;
    let t7;
    let field8;
    let t8;
    let field9;
    let t9;
    let field10;
    let t10;
    let field11;
    let t11;
    let field12;
    let t12;
    let table;
    let thead;
    let t15;
    let tbody;
    let t16;
    let div1;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Lengkap",
        $$slots: { default: [create_default_slot_682] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Jabatan Fungsional",
        $$slots: { default: [create_default_slot_672] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "NIP",
        $$slots: { default: [create_default_slot_662] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "NIDN",
        $$slots: { default: [create_default_slot_652] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Tempat Lahir",
        $$slots: { default: [create_default_slot_642] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Tanggal Lahir",
        $$slots: { default: [create_default_slot_632] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Alamat Rumah",
        $$slots: { default: [create_default_slot_623] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Telp/Fax Rumah",
        $$slots: { default: [create_default_slot_612] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Nomor Handphone",
        $$slots: { default: [create_default_slot_602] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Alamat Kantor",
        $$slots: { default: [create_default_slot_592] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Telp/Fax Kantor",
        $$slots: { default: [create_default_slot_582] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        class: "input",
        name: "Email",
        $$slots: { default: [create_default_slot_572] },
        $$scope: { ctx }
      }
    });
    field12 = new Field_default({
      props: {
        name: "Mata Kuliah",
        $$slots: { default: [create_default_slot_562] },
        $$scope: { ctx }
      }
    });
    let if_block = (
      /*mataKuliah*/
      ctx[67] && /*mataKuliah*/
      ctx[67].length > 0 && create_if_block_564(ctx)
    );
    return {
      c() {
        div0 = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        create_component(field5.$$.fragment);
        t5 = space();
        create_component(field6.$$.fragment);
        t6 = space();
        create_component(field7.$$.fragment);
        t7 = space();
        create_component(field8.$$.fragment);
        t8 = space();
        create_component(field9.$$.fragment);
        t9 = space();
        create_component(field10.$$.fragment);
        t10 = space();
        create_component(field11.$$.fragment);
        t11 = space();
        create_component(field12.$$.fragment);
        t12 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow"></th> <th>Mata Kuliah yang diampu</th></tr>`;
        t15 = space();
        tbody = element("tbody");
        if (if_block)
          if_block.c();
        t16 = space();
        div1 = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(table, "class", "table mt-4 is-fullwidth is-striped is-hoverable is-bordered");
        attr(div0, "class", "box");
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div1, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div0, anchor);
        mount_component(field0, div0, null);
        append(div0, t0);
        mount_component(field1, div0, null);
        append(div0, t1);
        mount_component(field2, div0, null);
        append(div0, t2);
        mount_component(field3, div0, null);
        append(div0, t3);
        mount_component(field4, div0, null);
        append(div0, t4);
        mount_component(field5, div0, null);
        append(div0, t5);
        mount_component(field6, div0, null);
        append(div0, t6);
        mount_component(field7, div0, null);
        append(div0, t7);
        mount_component(field8, div0, null);
        append(div0, t8);
        mount_component(field9, div0, null);
        append(div0, t9);
        mount_component(field10, div0, null);
        append(div0, t10);
        mount_component(field11, div0, null);
        append(div0, t11);
        mount_component(field12, div0, null);
        append(div0, t12);
        append(div0, table);
        append(table, thead);
        append(table, t15);
        append(table, tbody);
        if (if_block)
          if_block.m(tbody, null);
        insert(target, t16, anchor);
        insert(target, div1, anchor);
        append(div1, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanIdentitas*/
            ctx[91]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaLengkap*/
        16777216 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jabatanFungsional*/
        33554432 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nip*/
        67108864 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*nidn*/
        134217728 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tempatLahir*/
        268435456 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tanggalLahir*/
        536870912 | dirty[7] & /*$$scope*/
        8192) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*alamatRumah*/
        1073741824 | dirty[7] & /*$$scope*/
        8192) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*telpFaxRumah*/
        1 | dirty[7] & /*$$scope*/
        8192) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*nomorHandphone*/
        2 | dirty[7] & /*$$scope*/
        8192) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*alamatKantor*/
        4 | dirty[7] & /*$$scope*/
        8192) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*telpFaxKantor*/
        8 | dirty[7] & /*$$scope*/
        8192) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[2] & /*email*/
        16 | dirty[7] & /*$$scope*/
        8192) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        const field12_changes = {};
        if (dirty[0] & /*vmataKuliah, error*/
        3 | dirty[7] & /*$$scope*/
        8192) {
          field12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field12.$set(field12_changes);
        if (
          /*mataKuliah*/
          ctx2[67] && /*mataKuliah*/
          ctx2[67].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[2] & /*mataKuliah*/
            32) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_564(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(tbody, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(field12.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(field12.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div0);
          detach(t16);
          detach(div1);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        destroy_component(field12);
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_693(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaLengkap + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaLengkap + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_682(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaLengkap && create_if_block_693(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan nama lengkap dengan gelar");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaLengkap*/
          ctx[55]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[115]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaLengkap*/
        16777216 && input.value !== /*namaLengkap*/
        ctx2[55]) {
          set_input_value(
            input,
            /*namaLengkap*/
            ctx2[55]
          );
        }
        if (
          /*error*/
          ctx2[1].namaLengkap
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_693(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_683(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].jabatanFungsional + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jabatanFungsional + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_672(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let option3;
    let option4;
    let t5;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jabatanFungsional && create_if_block_683(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jabatan Fungsional";
        option1 = element("option");
        option1.textContent = "Asisten Ahli";
        option2 = element("option");
        option2.textContent = "Lektor";
        option3 = element("option");
        option3.textContent = "Lektor Kepala";
        option4 = element("option");
        option4.textContent = "Profesor";
        t5 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Asisten Ahli";
        set_input_value(option1, option1.__value);
        option2.__value = "Lektor";
        set_input_value(option2, option2.__value);
        option3.__value = "Lektor Kepala";
        set_input_value(option3, option3.__value);
        option4.__value = "Profesor";
        set_input_value(option4, option4.__value);
        if (
          /*jabatanFungsional*/
          ctx[56] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[116].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        append(select, option3);
        append(select, option4);
        select_option(
          select,
          /*jabatanFungsional*/
          ctx[56],
          true
        );
        insert(target, t5, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[116]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jabatanFungsional*/
        33554432) {
          select_option(
            select,
            /*jabatanFungsional*/
            ctx2[56]
          );
        }
        if (
          /*error*/
          ctx2[1].jabatanFungsional
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_683(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t5);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_673(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nip + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nip + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_662(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nip && create_if_block_673(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nip*/
          ctx[57]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[117]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nip*/
        67108864 && to_number(input.value) !== /*nip*/
        ctx2[57]) {
          set_input_value(
            input,
            /*nip*/
            ctx2[57]
          );
        }
        if (
          /*error*/
          ctx2[1].nip
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_673(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_663(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nidn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nidn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_652(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nidn && create_if_block_663(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nidn*/
          ctx[58]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[118]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*nidn*/
        134217728 && to_number(input.value) !== /*nidn*/
        ctx2[58]) {
          set_input_value(
            input,
            /*nidn*/
            ctx2[58]
          );
        }
        if (
          /*error*/
          ctx2[1].nidn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_663(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_653(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tempatLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tempatLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_642(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tempatLahir && create_if_block_653(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tempatLahir*/
          ctx[59]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[119]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tempatLahir*/
        268435456 && input.value !== /*tempatLahir*/
        ctx2[59]) {
          set_input_value(
            input,
            /*tempatLahir*/
            ctx2[59]
          );
        }
        if (
          /*error*/
          ctx2[1].tempatLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_653(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_643(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tanggalLahir + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tanggalLahir + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_632(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tanggalLahir && create_if_block_643(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalLahir*/
          ctx[60]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[120]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tanggalLahir*/
        536870912) {
          set_input_value(
            input,
            /*tanggalLahir*/
            ctx2[60]
          );
        }
        if (
          /*error*/
          ctx2[1].tanggalLahir
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_643(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_633(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_623(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatRumah && create_if_block_633(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatRumah*/
          ctx[61]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_5*/
            ctx[121]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*alamatRumah*/
        1073741824 && input.value !== /*alamatRumah*/
        ctx2[61]) {
          set_input_value(
            input,
            /*alamatRumah*/
            ctx2[61]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_633(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_624(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxRumah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxRumah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_612(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxRumah && create_if_block_624(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxRumah*/
          ctx[62]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_6*/
            ctx[122]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*telpFaxRumah*/
        1 && to_number(input.value) !== /*telpFaxRumah*/
        ctx2[62]) {
          set_input_value(
            input,
            /*telpFaxRumah*/
            ctx2[62]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxRumah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_624(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_618(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nomorHandphone + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nomorHandphone + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_602(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nomorHandphone && create_if_block_618(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nomorHandphone*/
          ctx[63]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_7*/
            ctx[123]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*nomorHandphone*/
        2 && to_number(input.value) !== /*nomorHandphone*/
        ctx2[63]) {
          set_input_value(
            input,
            /*nomorHandphone*/
            ctx2[63]
          );
        }
        if (
          /*error*/
          ctx2[1].nomorHandphone
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_618(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_604(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].alamatKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].alamatKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_592(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].alamatKantor && create_if_block_604(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*alamatKantor*/
          ctx[64]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_8*/
            ctx[124]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*alamatKantor*/
        4 && input.value !== /*alamatKantor*/
        ctx2[64]) {
          set_input_value(
            input,
            /*alamatKantor*/
            ctx2[64]
          );
        }
        if (
          /*error*/
          ctx2[1].alamatKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_604(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_594(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].telpFaxKantor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].telpFaxKantor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_582(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].telpFaxKantor && create_if_block_594(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*telpFaxKantor*/
          ctx[65]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_9*/
            ctx[125]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*telpFaxKantor*/
        8 && to_number(input.value) !== /*telpFaxKantor*/
        ctx2[65]) {
          set_input_value(
            input,
            /*telpFaxKantor*/
            ctx2[65]
          );
        }
        if (
          /*error*/
          ctx2[1].telpFaxKantor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_594(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_584(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].email + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].email + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_572(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].email && create_if_block_584(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*email*/
          ctx[66]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_10*/
            ctx[126]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*email*/
        16 && input.value !== /*email*/
        ctx2[66]) {
          set_input_value(
            input,
            /*email*/
            ctx2[66]
          );
        }
        if (
          /*error*/
          ctx2[1].email
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_584(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_574(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].mataKuliah + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].mataKuliah + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_562(ctx) {
    let div;
    let p0;
    let input;
    let t0;
    let t1;
    let p1;
    let button;
    let span0;
    let icon;
    let t2;
    let span1;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].mataKuliah && create_if_block_574(ctx)
    );
    icon = new Icon_default({ props: { id: "orang", src: add } });
    return {
      c() {
        div = element("div");
        p0 = element("p");
        input = element("input");
        t0 = space();
        if (if_block)
          if_block.c();
        t1 = space();
        p1 = element("p");
        button = element("button");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Tambahkan mata kuliah yang diampu");
        attr(p0, "class", "control is-expanded");
        attr(span0, "class", "icon");
        attr(button, "class", "button is-info");
        button.disabled = button_disabled_value = /*vmataKuliah*/
        ctx[0] ? false : true;
        attr(p1, "class", "control");
        attr(div, "class", "field is-grouped");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, input);
        set_input_value(
          input,
          /*vmataKuliah*/
          ctx[0]
        );
        append(p0, t0);
        if (if_block)
          if_block.m(p0, null);
        append(div, t1);
        append(div, p1);
        append(p1, button);
        append(button, span0);
        mount_component(icon, span0, null);
        append(button, t2);
        append(button, span1);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_11*/
              ctx[127]
            ),
            listen(
              button,
              "click",
              /*addMatkul*/
              ctx[104]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*vmataKuliah*/
        1 && input.value !== /*vmataKuliah*/
        ctx2[0]) {
          set_input_value(
            input,
            /*vmataKuliah*/
            ctx2[0]
          );
        }
        if (
          /*error*/
          ctx2[1].mataKuliah
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_574(ctx2);
            if_block.c();
            if_block.m(p0, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (!current || dirty[0] & /*vmataKuliah*/
        1 && button_disabled_value !== (button_disabled_value = /*vmataKuliah*/
        ctx2[0] ? false : true)) {
          button.disabled = button_disabled_value;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        destroy_component(icon);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_564(ctx) {
    let each_1_anchor;
    let current;
    let each_value_9 = ensure_array_like(
      /*mataKuliah*/
      ctx[67]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_96(get_each_context_96(ctx, each_value_9, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[2] & /*mataKuliah*/
        32 | dirty[3] & /*deleteMatkul*/
        2097152) {
          each_value_9 = ensure_array_like(
            /*mataKuliah*/
            ctx2[67]
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_96(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_96(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_9.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_9.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_96(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let t0;
    let td1;
    let t1_value = (
      /*matkul*/
      ctx[227].label + ""
    );
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*matkul*/
        ctx[227].label);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMatkul*/
            ctx[114]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*mataKuliah*/
        32 && button_data_value_value !== (button_data_value_value = /*matkul*/
        ctx2[227].label)) {
          attr(button, "data-value", button_data_value_value);
        }
        if ((!current || dirty[2] & /*mataKuliah*/
        32) && t1_value !== (t1_value = /*matkul*/
        ctx2[227].label + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_518(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let div9;
    let nav1;
    let div6;
    let t18;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t19;
    let span3;
    let t21;
    let table1;
    let thead1;
    let t32;
    let tbody1;
    let t33;
    let div14;
    let nav2;
    let div11;
    let t35;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t36;
    let span5;
    let t38;
    let table2;
    let thead2;
    let t49;
    let tbody2;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "add", src: add } });
    let if_block0 = (
      /*dataRPS1*/
      ctx[2] && create_if_block_544(ctx)
    );
    icon1 = new Icon_default({ props: { id: "add", src: add } });
    let if_block1 = (
      /*dataRPS2*/
      ctx[3] && create_if_block_535(ctx)
    );
    icon2 = new Icon_default({ props: { id: "add", src: add } });
    let if_block2 = (
      /*dataRPS3*/
      ctx[4] && create_if_block_525(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Riwayat Pendidikan S1</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th></th> <th style="width: 25%;">Nama Perguruan Tinggi</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Riwayat Pendidikan S2</h6></div>`;
        t18 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t19 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t21 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th></th> <th style="width: 25%;">Nama Perguruan Tinggi</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t32 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t33 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Riwayat Pendidikan S3</h6></div>`;
        t35 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t36 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t38 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th></th> <th style="width: 25%;">Nama Perguruan Tinggi</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t49 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div14, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t18);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t19);
        append(button1, span3);
        append(div9, t21);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t32);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t33, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t35);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t36);
        append(button2, span5);
        append(div14, t38);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t49);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*modalInputRiwayatPendidikanS1*/
              ctx[82]
            ),
            listen(
              button1,
              "click",
              /*modalInputRiwayatPendidikanS2*/
              ctx[83]
            ),
            listen(
              button2,
              "click",
              /*modalInputRiwayatPendidikanS3*/
              ctx[84]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataRPS1*/
          ctx2[2]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*dataRPS1*/
            4) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_544(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataRPS2*/
          ctx2[3]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*dataRPS2*/
            8) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_535(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataRPS3*/
          ctx2[4]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*dataRPS3*/
            16) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_525(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(div9);
          detach(t33);
          detach(div14);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_544(ctx) {
    let each_1_anchor;
    let current;
    let each_value_8 = ensure_array_like(
      /*dataRPS1*/
      ctx[2]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_86(get_each_context_86(ctx, each_value_8, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataRPS1*/
        4 | dirty[3] & /*delrowRPS1*/
        4096) {
          each_value_8 = ensure_array_like(
            /*dataRPS1*/
            ctx2[2]
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_86(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_86(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_8.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_8.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_86(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*RPS1*/
      ctx[224].nama_perguruan_tinggi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*RPS1*/
      ctx[224].bidang_ilmu + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*RPS1*/
      ctx[224].tahun_masuk + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*RPS1*/
      ctx[224].tahun_lulus + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*RPS1*/
      ctx[224].judul_skripsi + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*RPS1*/
        ctx[224].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowRPS1*/
            ctx[105]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataRPS1*/
        4 && button_pid_value !== (button_pid_value = /*RPS1*/
        ctx2[224].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t1_value !== (t1_value = /*RPS1*/
        ctx2[224].nama_perguruan_tinggi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t3_value !== (t3_value = /*RPS1*/
        ctx2[224].bidang_ilmu + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t5_value !== (t5_value = /*RPS1*/
        ctx2[224].tahun_masuk + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t7_value !== (t7_value = /*RPS1*/
        ctx2[224].tahun_lulus + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataRPS1*/
        4) && t9_value !== (t9_value = /*RPS1*/
        ctx2[224].judul_skripsi + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_535(ctx) {
    let each_1_anchor;
    let current;
    let each_value_7 = ensure_array_like(
      /*dataRPS2*/
      ctx[3]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_76(get_each_context_76(ctx, each_value_7, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataRPS2*/
        8 | dirty[3] & /*delrowRPS2*/
        8192) {
          each_value_7 = ensure_array_like(
            /*dataRPS2*/
            ctx2[3]
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_76(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_76(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_7.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_7.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_76(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*RPS2*/
      ctx[221].nama_perguruan_tinggi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*RPS2*/
      ctx[221].bidang_ilmu + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*RPS2*/
      ctx[221].tahun_masuk + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*RPS2*/
      ctx[221].tahun_lulus + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*RPS2*/
      ctx[221].judul_tesis + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*RPS2*/
        ctx[221].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowRPS2*/
            ctx[106]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataRPS2*/
        8 && button_pid_value !== (button_pid_value = /*RPS2*/
        ctx2[221].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t1_value !== (t1_value = /*RPS2*/
        ctx2[221].nama_perguruan_tinggi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t3_value !== (t3_value = /*RPS2*/
        ctx2[221].bidang_ilmu + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t5_value !== (t5_value = /*RPS2*/
        ctx2[221].tahun_masuk + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t7_value !== (t7_value = /*RPS2*/
        ctx2[221].tahun_lulus + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataRPS2*/
        8) && t9_value !== (t9_value = /*RPS2*/
        ctx2[221].judul_tesis + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_525(ctx) {
    let each_1_anchor;
    let current;
    let each_value_6 = ensure_array_like(
      /*dataRPS3*/
      ctx[4]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_66(get_each_context_66(ctx, each_value_6, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataRPS3*/
        16 | dirty[3] & /*delrowRPS3*/
        16384) {
          each_value_6 = ensure_array_like(
            /*dataRPS3*/
            ctx2[4]
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_66(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_66(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_6.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_6.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_66(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*RPS3*/
      ctx[218].nama_perguruan_tinggi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*RPS3*/
      ctx[218].bidang_ilmu + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*RPS3*/
      ctx[218].tahun_masuk + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*RPS3*/
      ctx[218].tahun_lulus + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*RPS3*/
      ctx[218].judul_disertasi + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*RPS3*/
        ctx[218].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowRPS3*/
            ctx[107]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataRPS3*/
        16 && button_pid_value !== (button_pid_value = /*RPS3*/
        ctx2[218].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t1_value !== (t1_value = /*RPS3*/
        ctx2[218].nama_perguruan_tinggi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t3_value !== (t3_value = /*RPS3*/
        ctx2[218].bidang_ilmu + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t5_value !== (t5_value = /*RPS3*/
        ctx2[218].tahun_masuk + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t7_value !== (t7_value = /*RPS3*/
        ctx2[218].tahun_lulus + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataRPS3*/
        16) && t9_value !== (t9_value = /*RPS3*/
        ctx2[218].judul_disertasi + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_446(ctx) {
    let div4;
    let nav0;
    let div1;
    let t1;
    let div3;
    let div2;
    let button0;
    let span0;
    let icon0;
    let t2;
    let span1;
    let t4;
    let table0;
    let thead0;
    let t15;
    let tbody0;
    let t16;
    let div9;
    let nav1;
    let div6;
    let t18;
    let div8;
    let div7;
    let button1;
    let span2;
    let icon1;
    let t19;
    let span3;
    let t21;
    let table1;
    let thead1;
    let t32;
    let tbody1;
    let t33;
    let div14;
    let nav2;
    let div11;
    let t35;
    let div13;
    let div12;
    let button2;
    let span4;
    let icon2;
    let t36;
    let span5;
    let t38;
    let table2;
    let thead2;
    let t47;
    let tbody2;
    let t48;
    let div19;
    let nav3;
    let div16;
    let t50;
    let div18;
    let div17;
    let button3;
    let span6;
    let icon3;
    let t51;
    let span7;
    let t53;
    let table3;
    let thead3;
    let t64;
    let tbody3;
    let t65;
    let div24;
    let nav4;
    let div21;
    let t67;
    let div23;
    let div22;
    let button4;
    let span8;
    let icon4;
    let t68;
    let span9;
    let t70;
    let table4;
    let thead4;
    let t81;
    let tbody4;
    let t82;
    let div29;
    let nav5;
    let div26;
    let t84;
    let div28;
    let div27;
    let button5;
    let span10;
    let icon5;
    let t85;
    let span11;
    let t87;
    let table5;
    let thead5;
    let t98;
    let tbody5;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block0 = (
      /*dataPP*/
      ctx[20] && create_if_block_504(ctx)
    );
    icon1 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block1 = (
      /*dataPM*/
      ctx[21] && create_if_block_494(ctx)
    );
    icon2 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block2 = (
      /*dataPD*/
      ctx[22] && create_if_block_484(ctx)
    );
    icon3 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block3 = (
      /*dataPPub*/
      ctx[23] && create_if_block_474(ctx)
    );
    icon4 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block4 = (
      /*dataPPB*/
      ctx[24] && create_if_block_465(ctx)
    );
    icon5 = new Icon_default({ props: { id: "orang", src: add } });
    let if_block5 = (
      /*dataPHKI*/
      ctx[25] && create_if_block_455(ctx)
    );
    return {
      c() {
        div4 = element("div");
        nav0 = element("nav");
        div1 = element("div");
        div1.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penelitian</h6></div>`;
        t1 = space();
        div3 = element("div");
        div2 = element("div");
        button0 = element("button");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.innerHTML = `<a>Tambah</a>`;
        t4 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t15 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t16 = space();
        div9 = element("div");
        nav1 = element("nav");
        div6 = element("div");
        div6.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Pengabdian Masyarakat</h6></div>`;
        t18 = space();
        div8 = element("div");
        div7 = element("div");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t19 = space();
        span3 = element("span");
        span3.innerHTML = `<a>Tambah</a>`;
        t21 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t32 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t33 = space();
        div14 = element("div");
        nav2 = element("nav");
        div11 = element("div");
        div11.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran</h6></div>`;
        t35 = space();
        div13 = element("div");
        div12 = element("div");
        button2 = element("button");
        span4 = element("span");
        create_component(icon2.$$.fragment);
        t36 = space();
        span5 = element("span");
        span5.innerHTML = `<a>Tambah</a>`;
        t38 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t47 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t48 = space();
        div19 = element("div");
        nav3 = element("nav");
        div16 = element("div");
        div16.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Publikasi Ilmiah dalam Jurnal (bukan Proceeding)</h6></div>`;
        t50 = space();
        div18 = element("div");
        div17 = element("div");
        button3 = element("button");
        span6 = element("span");
        create_component(icon3.$$.fragment);
        t51 = space();
        span7 = element("span");
        span7.innerHTML = `<a>Tambah</a>`;
        t53 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel, Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t64 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t65 = space();
        div24 = element("div");
        nav4 = element("nav");
        div21 = element("div");
        div21.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Penulisan Buku</h6></div>`;
        t67 = space();
        div23 = element("div");
        div22 = element("div");
        button4 = element("button");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t68 = space();
        span9 = element("span");
        span9.innerHTML = `<a>Tambah</a>`;
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t81 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t82 = space();
        div29 = element("div");
        nav5 = element("nav");
        div26 = element("div");
        div26.innerHTML = `<div class="level-item"><h6 class="title is-6">Pengalaman Hak Kekayaan Intelektual</h6></div>`;
        t84 = space();
        div28 = element("div");
        div27 = element("div");
        button5 = element("button");
        span10 = element("span");
        create_component(icon5.$$.fragment);
        t85 = space();
        span11 = element("span");
        span11.innerHTML = `<a>Tambah</a>`;
        t87 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow"></th> <th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t98 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        attr(div1, "class", "level-left");
        attr(span0, "class", "icon");
        attr(button0, "class", "button is-info");
        attr(div2, "class", "level-item");
        attr(div3, "class", "level-right");
        attr(nav0, "class", "level");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div4, "class", "box");
        attr(div6, "class", "level-left");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-info");
        attr(div7, "class", "level-item");
        attr(div8, "class", "level-right");
        attr(nav1, "class", "level");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div9, "class", "box");
        attr(div11, "class", "level-left");
        attr(span4, "class", "icon");
        attr(button2, "class", "button is-info");
        attr(div12, "class", "level-item");
        attr(div13, "class", "level-right");
        attr(nav2, "class", "level");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div14, "class", "box");
        attr(div16, "class", "level-left");
        attr(span6, "class", "icon");
        attr(button3, "class", "button is-info");
        attr(div17, "class", "level-item");
        attr(div18, "class", "level-right");
        attr(nav3, "class", "level");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div19, "class", "box");
        attr(div21, "class", "level-left");
        attr(span8, "class", "icon");
        attr(button4, "class", "button is-info");
        attr(div22, "class", "level-item");
        attr(div23, "class", "level-right");
        attr(nav4, "class", "level");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div24, "class", "box");
        attr(div26, "class", "level-left");
        attr(span10, "class", "icon");
        attr(button5, "class", "button is-info");
        attr(div27, "class", "level-item");
        attr(div28, "class", "level-right");
        attr(nav5, "class", "level");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div29, "class", "box");
      },
      m(target, anchor) {
        insert(target, div4, anchor);
        append(div4, nav0);
        append(nav0, div1);
        append(nav0, t1);
        append(nav0, div3);
        append(div3, div2);
        append(div2, button0);
        append(button0, span0);
        mount_component(icon0, span0, null);
        append(button0, t2);
        append(button0, span1);
        append(div4, t4);
        append(div4, table0);
        append(table0, thead0);
        append(table0, t15);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t16, anchor);
        insert(target, div9, anchor);
        append(div9, nav1);
        append(nav1, div6);
        append(nav1, t18);
        append(nav1, div8);
        append(div8, div7);
        append(div7, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(button1, t19);
        append(button1, span3);
        append(div9, t21);
        append(div9, table1);
        append(table1, thead1);
        append(table1, t32);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t33, anchor);
        insert(target, div14, anchor);
        append(div14, nav2);
        append(nav2, div11);
        append(nav2, t35);
        append(nav2, div13);
        append(div13, div12);
        append(div12, button2);
        append(button2, span4);
        mount_component(icon2, span4, null);
        append(button2, t36);
        append(button2, span5);
        append(div14, t38);
        append(div14, table2);
        append(table2, thead2);
        append(table2, t47);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t48, anchor);
        insert(target, div19, anchor);
        append(div19, nav3);
        append(nav3, div16);
        append(nav3, t50);
        append(nav3, div18);
        append(div18, div17);
        append(div17, button3);
        append(button3, span6);
        mount_component(icon3, span6, null);
        append(button3, t51);
        append(button3, span7);
        append(div19, t53);
        append(div19, table3);
        append(table3, thead3);
        append(table3, t64);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t65, anchor);
        insert(target, div24, anchor);
        append(div24, nav4);
        append(nav4, div21);
        append(nav4, t67);
        append(nav4, div23);
        append(div23, div22);
        append(div22, button4);
        append(button4, span8);
        mount_component(icon4, span8, null);
        append(button4, t68);
        append(button4, span9);
        append(div24, t70);
        append(div24, table4);
        append(table4, thead4);
        append(table4, t81);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t82, anchor);
        insert(target, div29, anchor);
        append(div29, nav5);
        append(nav5, div26);
        append(nav5, t84);
        append(nav5, div28);
        append(div28, div27);
        append(div27, button5);
        append(button5, span10);
        mount_component(icon5, span10, null);
        append(button5, t85);
        append(button5, span11);
        append(div29, t87);
        append(div29, table5);
        append(table5, thead5);
        append(table5, t98);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clickModalPenelitian*/
              ctx[85]
            ),
            listen(
              button1,
              "click",
              /*clickModalPengmas*/
              ctx[86]
            ),
            listen(
              button2,
              "click",
              /*clickModalDiseminasi*/
              ctx[87]
            ),
            listen(
              button3,
              "click",
              /*clickModalPublikasi*/
              ctx[88]
            ),
            listen(
              button4,
              "click",
              /*clickModalPenulisanBuku*/
              ctx[89]
            ),
            listen(
              button5,
              "click",
              /*clickModalHKI*/
              ctx[90]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (
          /*dataPP*/
          ctx2[20]
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*dataPP*/
            1048576) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_504(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*dataPM*/
          ctx2[21]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*dataPM*/
            2097152) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_494(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*dataPD*/
          ctx2[22]
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[0] & /*dataPD*/
            4194304) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_484(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
        if (
          /*dataPPub*/
          ctx2[23]
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
            if (dirty[0] & /*dataPPub*/
            8388608) {
              transition_in(if_block3, 1);
            }
          } else {
            if_block3 = create_if_block_474(ctx2);
            if_block3.c();
            transition_in(if_block3, 1);
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          group_outros();
          transition_out(if_block3, 1, 1, () => {
            if_block3 = null;
          });
          check_outros();
        }
        if (
          /*dataPPB*/
          ctx2[24]
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
            if (dirty[0] & /*dataPPB*/
            16777216) {
              transition_in(if_block4, 1);
            }
          } else {
            if_block4 = create_if_block_465(ctx2);
            if_block4.c();
            transition_in(if_block4, 1);
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          group_outros();
          transition_out(if_block4, 1, 1, () => {
            if_block4 = null;
          });
          check_outros();
        }
        if (
          /*dataPHKI*/
          ctx2[25]
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
            if (dirty[0] & /*dataPHKI*/
            33554432) {
              transition_in(if_block5, 1);
            }
          } else {
            if_block5 = create_if_block_455(ctx2);
            if_block5.c();
            transition_in(if_block5, 1);
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          group_outros();
          transition_out(if_block5, 1, 1, () => {
            if_block5 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(if_block0);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block1);
        transition_in(icon2.$$.fragment, local);
        transition_in(if_block2);
        transition_in(icon3.$$.fragment, local);
        transition_in(if_block3);
        transition_in(icon4.$$.fragment, local);
        transition_in(if_block4);
        transition_in(icon5.$$.fragment, local);
        transition_in(if_block5);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(if_block0);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block1);
        transition_out(icon2.$$.fragment, local);
        transition_out(if_block2);
        transition_out(icon3.$$.fragment, local);
        transition_out(if_block3);
        transition_out(icon4.$$.fragment, local);
        transition_out(if_block4);
        transition_out(icon5.$$.fragment, local);
        transition_out(if_block5);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div4);
          detach(t16);
          detach(div9);
          detach(t33);
          detach(div14);
          detach(t48);
          detach(div19);
          detach(t65);
          detach(div24);
          detach(t82);
          detach(div29);
        }
        destroy_component(icon0);
        if (if_block0)
          if_block0.d();
        destroy_component(icon1);
        if (if_block1)
          if_block1.d();
        destroy_component(icon2);
        if (if_block2)
          if_block2.d();
        destroy_component(icon3);
        if (if_block3)
          if_block3.d();
        destroy_component(icon4);
        if (if_block4)
          if_block4.d();
        destroy_component(icon5);
        if (if_block5)
          if_block5.d();
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_504(ctx) {
    let each_1_anchor;
    let current;
    let each_value_5 = ensure_array_like(
      /*dataPP*/
      ctx[20]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_56(get_each_context_56(ctx, each_value_5, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPP*/
        1048576 | dirty[3] & /*delrowPP*/
        32768) {
          each_value_5 = ensure_array_like(
            /*dataPP*/
            ctx2[20]
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_56(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_56(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_5.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_5.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_56(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PP*/
      ctx[215].tahun_penelitian + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PP*/
      ctx[215].judul_penelitian + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PP*/
      ctx[215].role_penelitian + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PP*/
      ctx[215].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PP*/
      ctx[215].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PP*/
        ctx[215].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPP*/
            ctx[108]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPP*/
        1048576 && button_pid_value !== (button_pid_value = /*PP*/
        ctx2[215].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t1_value !== (t1_value = /*PP*/
        ctx2[215].tahun_penelitian + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t3_value !== (t3_value = /*PP*/
        ctx2[215].judul_penelitian + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t5_value !== (t5_value = /*PP*/
        ctx2[215].role_penelitian + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t7_value !== (t7_value = /*PP*/
        ctx2[215].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPP*/
        1048576) && t9_value !== (t9_value = /*PP*/
        ctx2[215].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_494(ctx) {
    let each_1_anchor;
    let current;
    let each_value_4 = ensure_array_like(
      /*dataPM*/
      ctx[21]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_46(get_each_context_46(ctx, each_value_4, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPM*/
        2097152 | dirty[3] & /*delrowPM*/
        65536) {
          each_value_4 = ensure_array_like(
            /*dataPM*/
            ctx2[21]
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_46(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_46(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_4.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_4.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_46(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PM*/
      ctx[212].tahun_pengmas + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PM*/
      ctx[212].judul_pengmas + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PM*/
      ctx[212].role_pengmas + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PM*/
      ctx[212].sumber_dana + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PM*/
      ctx[212].jumlah + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PM*/
        ctx[212].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPM*/
            ctx[109]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPM*/
        2097152 && button_pid_value !== (button_pid_value = /*PM*/
        ctx2[212].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t1_value !== (t1_value = /*PM*/
        ctx2[212].tahun_pengmas + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t3_value !== (t3_value = /*PM*/
        ctx2[212].judul_pengmas + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t5_value !== (t5_value = /*PM*/
        ctx2[212].role_pengmas + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t7_value !== (t7_value = /*PM*/
        ctx2[212].sumber_dana + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPM*/
        2097152) && t9_value !== (t9_value = /*PM*/
        ctx2[212].jumlah + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_484(ctx) {
    let each_1_anchor;
    let current;
    let each_value_3 = ensure_array_like(
      /*dataPD*/
      ctx[22]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_36(get_each_context_36(ctx, each_value_3, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPD*/
        4194304 | dirty[3] & /*delrowPD*/
        131072) {
          each_value_3 = ensure_array_like(
            /*dataPD*/
            ctx2[22]
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_36(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_36(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_3.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_3.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_36(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PD*/
      ctx[209].tahun_diseminasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PD*/
      ctx[209].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PD*/
      ctx[209].nama_pemakalah + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PD*/
      ctx[209].nama_pertemuan + ""
    );
    let t7;
    let t8;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PD*/
        ctx[209].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPD*/
            ctx[110]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPD*/
        4194304 && button_pid_value !== (button_pid_value = /*PD*/
        ctx2[209].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t1_value !== (t1_value = /*PD*/
        ctx2[209].tahun_diseminasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t3_value !== (t3_value = /*PD*/
        ctx2[209].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t5_value !== (t5_value = /*PD*/
        ctx2[209].nama_pemakalah + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPD*/
        4194304) && t7_value !== (t7_value = /*PD*/
        ctx2[209].nama_pertemuan + ""))
          set_data(t7, t7_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_474(ctx) {
    let each_1_anchor;
    let current;
    let each_value_2 = ensure_array_like(
      /*dataPPub*/
      ctx[23]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_27(get_each_context_27(ctx, each_value_2, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPub*/
        8388608 | dirty[3] & /*delrowPPub*/
        262144) {
          each_value_2 = ensure_array_like(
            /*dataPPub*/
            ctx2[23]
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_27(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_27(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_27(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPub*/
      ctx[206].tahun_publikasi + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPub*/
      ctx[206].judul_artikel + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPub*/
      ctx[206].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPub*/
      ctx[206].nama_jurnal + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPub*/
      ctx[206].impact + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPub*/
        ctx[206].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPub*/
            ctx[111]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPub*/
        8388608 && button_pid_value !== (button_pid_value = /*PPub*/
        ctx2[206].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t1_value !== (t1_value = /*PPub*/
        ctx2[206].tahun_publikasi + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t3_value !== (t3_value = /*PPub*/
        ctx2[206].judul_artikel + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t5_value !== (t5_value = /*PPub*/
        ctx2[206].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t7_value !== (t7_value = /*PPub*/
        ctx2[206].nama_jurnal + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPub*/
        8388608) && t9_value !== (t9_value = /*PPub*/
        ctx2[206].impact + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_465(ctx) {
    let each_1_anchor;
    let current;
    let each_value_1 = ensure_array_like(
      /*dataPPB*/
      ctx[24]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_19(get_each_context_19(ctx, each_value_1, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPPB*/
        16777216 | dirty[3] & /*delrowPPB*/
        524288) {
          each_value_1 = ensure_array_like(
            /*dataPPB*/
            ctx2[24]
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_19(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_19(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_19(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PPB*/
      ctx[203].tahun_buku + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PPB*/
      ctx[203].judul_buku + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PPB*/
      ctx[203].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PPB*/
      ctx[203].penerbit + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PPB*/
      ctx[203].isbn + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PPB*/
        ctx[203].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPPB*/
            ctx[112]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPPB*/
        16777216 && button_pid_value !== (button_pid_value = /*PPB*/
        ctx2[203].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t1_value !== (t1_value = /*PPB*/
        ctx2[203].tahun_buku + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t3_value !== (t3_value = /*PPB*/
        ctx2[203].judul_buku + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t5_value !== (t5_value = /*PPB*/
        ctx2[203].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t7_value !== (t7_value = /*PPB*/
        ctx2[203].penerbit + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPPB*/
        16777216) && t9_value !== (t9_value = /*PPB*/
        ctx2[203].isbn + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_455(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*dataPHKI*/
      ctx[25]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block17(get_each_context17(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*dataPHKI*/
        33554432 | dirty[3] & /*delrowPHKI*/
        1048576) {
          each_value = ensure_array_like(
            /*dataPHKI*/
            ctx2[25]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context17(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block17(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block17(ctx) {
    let tr;
    let td0;
    let button;
    let span;
    let icon;
    let button_pid_value;
    let t0;
    let td1;
    let t1_value = (
      /*PHKI*/
      ctx[200].tahun_hki + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*PHKI*/
      ctx[200].judul_hki + ""
    );
    let t3;
    let t4;
    let td3;
    let t5_value = (
      /*PHKI*/
      ctx[200].nama_penulis + ""
    );
    let t5;
    let t6;
    let td4;
    let t7_value = (
      /*PHKI*/
      ctx[200].jenis_hki + ""
    );
    let t7;
    let t8;
    let td5;
    let t9_value = (
      /*PHKI*/
      ctx[200].no_hki + ""
    );
    let t9;
    let t10;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
        td3 = element("td");
        t5 = text(t5_value);
        t6 = space();
        td4 = element("td");
        t7 = text(t7_value);
        t8 = space();
        td5 = element("td");
        t9 = text(t9_value);
        t10 = space();
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "pid", button_pid_value = /*PHKI*/
        ctx[200].id);
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, button);
        append(button, span);
        mount_component(icon, span, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        append(tr, td3);
        append(td3, t5);
        append(tr, t6);
        append(tr, td4);
        append(td4, t7);
        append(tr, t8);
        append(tr, td5);
        append(td5, t9);
        append(tr, t10);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*delrowPHKI*/
            ctx[113]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*dataPHKI*/
        33554432 && button_pid_value !== (button_pid_value = /*PHKI*/
        ctx2[200].id)) {
          attr(button, "pid", button_pid_value);
        }
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t1_value !== (t1_value = /*PHKI*/
        ctx2[200].tahun_hki + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t3_value !== (t3_value = /*PHKI*/
        ctx2[200].judul_hki + ""))
          set_data(t3, t3_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t5_value !== (t5_value = /*PHKI*/
        ctx2[200].nama_penulis + ""))
          set_data(t5, t5_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t7_value !== (t7_value = /*PHKI*/
        ctx2[200].jenis_hki + ""))
          set_data(t7, t7_value);
        if ((!current || dirty[0] & /*dataPHKI*/
        33554432) && t9_value !== (t9_value = /*PHKI*/
        ctx2[200].no_hki + ""))
          set_data(t9, t9_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_552(ctx) {
    let h2;
    let t1;
    let div;
    let ul;
    let li0;
    let t3;
    let li1;
    let t5;
    let li2;
    let t7;
    let t8;
    let t9;
    let if_block2_anchor;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*tab1*/
      ctx[79] === true && create_if_block_554(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[80] === true && create_if_block_518(ctx)
    );
    let if_block2 = (
      /*tab3*/
      ctx[81] === true && create_if_block_446(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Profile";
        t1 = space();
        div = element("div");
        ul = element("ul");
        li0 = element("li");
        li0.innerHTML = `<a><span>Identitas</span></a>`;
        t3 = space();
        li1 = element("li");
        li1.innerHTML = `<a><span>Riwayat Pendidikan</span></a>`;
        t5 = space();
        li2 = element("li");
        li2.innerHTML = `<a><span>Pengalaman</span></a>`;
        t7 = space();
        if (if_block0)
          if_block0.c();
        t8 = space();
        if (if_block1)
          if_block1.c();
        t9 = space();
        if (if_block2)
          if_block2.c();
        if_block2_anchor = empty();
        attr(h2, "class", "title is-2");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[79]
        );
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[80]
        );
        toggle_class(
          li2,
          "is-active",
          /*tab3*/
          ctx[81]
        );
        attr(div, "class", "tabs is-boxed");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, div, anchor);
        append(div, ul);
        append(ul, li0);
        append(ul, t3);
        append(ul, li1);
        append(ul, t5);
        append(ul, li2);
        insert(target, t7, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t8, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t9, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, if_block2_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[101]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[102]
            ),
            listen(
              li2,
              "click",
              /*clicktab3*/
              ctx[103]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[2] & /*tab1*/
        131072) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[79]
          );
        }
        if (!current || dirty[2] & /*tab2*/
        262144) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[80]
          );
        }
        if (!current || dirty[2] & /*tab3*/
        524288) {
          toggle_class(
            li2,
            "is-active",
            /*tab3*/
            ctx2[81]
          );
        }
        if (
          /*tab1*/
          ctx2[79] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[2] & /*tab1*/
            131072) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_554(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t8.parentNode, t8);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[80] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[2] & /*tab2*/
            262144) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_518(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t9.parentNode, t9);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab3*/
          ctx2[81] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
            if (dirty[2] & /*tab3*/
            524288) {
              transition_in(if_block2, 1);
            }
          } else {
            if_block2 = create_if_block_446(ctx2);
            if_block2.c();
            transition_in(if_block2, 1);
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
          }
        } else if (if_block2) {
          group_outros();
          transition_out(if_block2, 1, 1, () => {
            if_block2 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(div);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_if_block_436(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nama_pertiS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nama_pertiS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_542(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nama_pertiS1 && create_if_block_436(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nama_pertiS1*/
          ctx[5]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_12*/
            ctx[128]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nama_pertiS1*/
        32 && input.value !== /*nama_pertiS1*/
        ctx2[5]) {
          set_input_value(
            input,
            /*nama_pertiS1*/
            ctx2[5]
          );
        }
        if (
          /*error*/
          ctx2[1].nama_pertiS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_436(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_426(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].bidang_ilmuS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].bidang_ilmuS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_532(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].bidang_ilmuS1 && create_if_block_426(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*bidang_ilmuS1*/
          ctx[6]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_13*/
            ctx[129]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*bidang_ilmuS1*/
        64 && input.value !== /*bidang_ilmuS1*/
        ctx2[6]) {
          set_input_value(
            input,
            /*bidang_ilmuS1*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[1].bidang_ilmuS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_426(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_4110(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunMasukS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunMasukS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_523(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunMasukS1 && create_if_block_4110(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunMasukS1*/
          ctx[7]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_14*/
            ctx[130]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunMasukS1*/
        128 && to_number(input.value) !== /*tahunMasukS1*/
        ctx2[7]) {
          set_input_value(
            input,
            /*tahunMasukS1*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunMasukS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_4110(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_405(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunLulusS1 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunLulusS1 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_513(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunLulusS1 && create_if_block_405(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunLulusS1*/
          ctx[8]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_15*/
            ctx[131]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunLulusS1*/
        256 && to_number(input.value) !== /*tahunLulusS1*/
        ctx2[8]) {
          set_input_value(
            input,
            /*tahunLulusS1*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunLulusS1
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_405(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_396(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulSkripsi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulSkripsi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_502(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulSkripsi && create_if_block_396(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulSkripsi*/
          ctx[9]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_16*/
            ctx[132]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulSkripsi*/
        512 && input.value !== /*judulSkripsi*/
        ctx2[9]) {
          set_input_value(
            input,
            /*judulSkripsi*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[1].judulSkripsi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_396(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_492(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Perguruan Tinggi",
        $$slots: { default: [create_default_slot_542] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Bidang Ilmu",
        $$slots: { default: [create_default_slot_532] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Tahun Masuk",
        $$slots: { default: [create_default_slot_523] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Tahun Lulus",
        $$slots: { default: [create_default_slot_513] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Judul Skripsi",
        $$slots: { default: [create_default_slot_502] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanRP_S1*/
            ctx[92]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, nama_pertiS1*/
        34 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, bidang_ilmuS1*/
        66 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, tahunMasukS1*/
        130 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, tahunLulusS1*/
        258 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, judulSkripsi*/
        514 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_82(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Riwayat Pendidikan S1";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_386(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nama_pertiS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nama_pertiS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_482(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nama_pertiS2 && create_if_block_386(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nama_pertiS2*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_17*/
            ctx[134]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nama_pertiS2*/
        1024 && input.value !== /*nama_pertiS2*/
        ctx2[10]) {
          set_input_value(
            input,
            /*nama_pertiS2*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[1].nama_pertiS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_386(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_376(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].bidang_ilmuS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].bidang_ilmuS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_472(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].bidang_ilmuS2 && create_if_block_376(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*bidang_ilmuS2*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_18*/
            ctx[135]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*bidang_ilmuS2*/
        2048 && input.value !== /*bidang_ilmuS2*/
        ctx2[11]) {
          set_input_value(
            input,
            /*bidang_ilmuS2*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[1].bidang_ilmuS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_376(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_366(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunMasukS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunMasukS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_462(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunMasukS2 && create_if_block_366(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunMasukS2*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_19*/
            ctx[136]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunMasukS2*/
        4096 && to_number(input.value) !== /*tahunMasukS2*/
        ctx2[12]) {
          set_input_value(
            input,
            /*tahunMasukS2*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunMasukS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_366(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_356(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunLulusS2 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunLulusS2 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_452(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunLulusS2 && create_if_block_356(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunLulusS2*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_20*/
            ctx[137]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunLulusS2*/
        8192 && to_number(input.value) !== /*tahunLulusS2*/
        ctx2[13]) {
          set_input_value(
            input,
            /*tahunLulusS2*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunLulusS2
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_356(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_347(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulTesis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulTesis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_442(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulTesis && create_if_block_347(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulTesis*/
          ctx[14]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_21*/
            ctx[138]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulTesis*/
        16384 && input.value !== /*judulTesis*/
        ctx2[14]) {
          set_input_value(
            input,
            /*judulTesis*/
            ctx2[14]
          );
        }
        if (
          /*error*/
          ctx2[1].judulTesis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_347(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_432(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Perguruan Tinggi",
        $$slots: { default: [create_default_slot_482] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Bidang Ilmu",
        $$slots: { default: [create_default_slot_472] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Tahun Masuk",
        $$slots: { default: [create_default_slot_462] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Tahun Lulus",
        $$slots: { default: [create_default_slot_452] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Judul Tesis",
        $$slots: { default: [create_default_slot_442] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanRP_S2*/
            ctx[93]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, nama_pertiS2*/
        1026 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, bidang_ilmuS2*/
        2050 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, tahunMasukS2*/
        4098 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, tahunLulusS2*/
        8194 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, judulTesis*/
        16386 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_72(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Riwayat Pendidikan S2";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_337(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].nama_pertiS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].nama_pertiS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_423(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].nama_pertiS3 && create_if_block_337(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*nama_pertiS3*/
          ctx[15]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_22*/
            ctx[140]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*nama_pertiS3*/
        32768 && input.value !== /*nama_pertiS3*/
        ctx2[15]) {
          set_input_value(
            input,
            /*nama_pertiS3*/
            ctx2[15]
          );
        }
        if (
          /*error*/
          ctx2[1].nama_pertiS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_337(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_328(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].bidang_ilmuS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].bidang_ilmuS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_414(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].bidang_ilmuS3 && create_if_block_328(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*bidang_ilmuS3*/
          ctx[16]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_23*/
            ctx[141]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*bidang_ilmuS3*/
        65536 && input.value !== /*bidang_ilmuS3*/
        ctx2[16]) {
          set_input_value(
            input,
            /*bidang_ilmuS3*/
            ctx2[16]
          );
        }
        if (
          /*error*/
          ctx2[1].bidang_ilmuS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_328(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3111(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunMasukS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunMasukS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_402(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunMasukS3 && create_if_block_3111(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunMasukS3*/
          ctx[17]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_24*/
            ctx[142]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunMasukS3*/
        131072 && to_number(input.value) !== /*tahunMasukS3*/
        ctx2[17]) {
          set_input_value(
            input,
            /*tahunMasukS3*/
            ctx2[17]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunMasukS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3111(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_307(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunLulusS3 + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunLulusS3 + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_392(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunLulusS3 && create_if_block_307(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunLulusS3*/
          ctx[18]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_25*/
            ctx[143]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunLulusS3*/
        262144 && to_number(input.value) !== /*tahunLulusS3*/
        ctx2[18]) {
          set_input_value(
            input,
            /*tahunLulusS3*/
            ctx2[18]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunLulusS3
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_307(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_297(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulDisertasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulDisertasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_382(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulDisertasi && create_if_block_297(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDisertasi*/
          ctx[19]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_26*/
            ctx[144]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulDisertasi*/
        524288 && input.value !== /*judulDisertasi*/
        ctx2[19]) {
          set_input_value(
            input,
            /*judulDisertasi*/
            ctx2[19]
          );
        }
        if (
          /*error*/
          ctx2[1].judulDisertasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_297(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_372(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Nama Perguruan Tinggi",
        $$slots: { default: [create_default_slot_423] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Bidang Ilmu",
        $$slots: { default: [create_default_slot_414] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Tahun Masuk",
        $$slots: { default: [create_default_slot_402] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Tahun Lulus",
        $$slots: { default: [create_default_slot_392] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Judul Disertasi",
        $$slots: { default: [create_default_slot_382] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanRP_S3*/
            ctx[94]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, nama_pertiS3*/
        32770 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, bidang_ilmuS3*/
        65538 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, tahunMasukS3*/
        131074 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, tahunLulusS3*/
        262146 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, judulDisertasi*/
        524290 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_62(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Riwayat Pendidikan S3";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_287(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_362(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPenelitian && create_if_block_287(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPenelitian*/
          ctx[27]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_27*/
            ctx[146]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tahunPenelitian*/
        134217728 && to_number(input.value) !== /*tahunPenelitian*/
        ctx2[27]) {
          set_input_value(
            input,
            /*tahunPenelitian*/
            ctx2[27]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_287(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_277(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_352(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPenelitian && create_if_block_277(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPenelitian*/
          ctx[28]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_28*/
            ctx[147]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judulPenelitian*/
        268435456 && input.value !== /*judulPenelitian*/
        ctx2[28]) {
          set_input_value(
            input,
            /*judulPenelitian*/
            ctx2[28]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_277(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_267(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_342(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePenelitian && create_if_block_267(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePenelitian*/
          ctx[29] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[148].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePenelitian*/
          ctx[29],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[148]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*rolePenelitian*/
        536870912) {
          select_option(
            select,
            /*rolePenelitian*/
            ctx2[29]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_267(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_257(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_332(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPenelitian && create_if_block_257(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPenelitian*/
          ctx[30]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_29*/
            ctx[149]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*sumberDanaPenelitian*/
        1073741824 && input.value !== /*sumberDanaPenelitian*/
        ctx2[30]) {
          set_input_value(
            input,
            /*sumberDanaPenelitian*/
            ctx2[30]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_257(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_247(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPP + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPP + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_323(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPP && create_if_block_247(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPP*/
          ctx[26]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_30*/
              ctx[150]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[151]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPP*/
        67108864 && input.value !== /*biayaPP*/
        ctx2[26]) {
          set_input_value(
            input,
            /*biayaPP*/
            ctx2[26]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPP
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_247(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_315(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_362] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Penelitian",
        $$slots: { default: [create_default_slot_352] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_342] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_332] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_323] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPP*/
            ctx[95]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, tahunPenelitian*/
        134217730 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, judulPenelitian*/
        268435458 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, rolePenelitian*/
        536870914 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, sumberDanaPenelitian*/
        1073741826 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, biayaPP*/
        67108866 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_52(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penelitian";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_238(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_302(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPengmas && create_if_block_238(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPengmas*/
          ctx[32]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_31*/
            ctx[153]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunPengmas*/
        2 && to_number(input.value) !== /*tahunPengmas*/
        ctx2[32]) {
          set_input_value(
            input,
            /*tahunPengmas*/
            ctx2[32]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_238(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_229(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_292(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPengmas && create_if_block_229(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPengmas*/
          ctx[33]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_32*/
            ctx[154]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulPengmas*/
        4 && input.value !== /*judulPengmas*/
        ctx2[33]) {
          set_input_value(
            input,
            /*judulPengmas*/
            ctx2[33]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_229(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2111(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].rolePengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].rolePengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_282(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].rolePengmas && create_if_block_2111(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih peran dalam kegiatan";
        option1 = element("option");
        option1.textContent = "Ketua";
        option2 = element("option");
        option2.textContent = "Anggota";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.disabled = true;
        option0.selected = true;
        option0.hidden = true;
        option1.__value = "Ketua";
        set_input_value(option1, option1.__value);
        option2.__value = "Anggota";
        set_input_value(option2, option2.__value);
        if (
          /*rolePengmas*/
          ctx[34] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[155].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*rolePengmas*/
          ctx[34],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[155]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*rolePengmas*/
        8) {
          select_option(
            select,
            /*rolePengmas*/
            ctx2[34]
          );
        }
        if (
          /*error*/
          ctx2[1].rolePengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2111(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_207(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].sumberDanaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].sumberDanaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_272(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].sumberDanaPengmas && create_if_block_207(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*sumberDanaPengmas*/
          ctx[35]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_33*/
            ctx[156]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*sumberDanaPengmas*/
        16 && input.value !== /*sumberDanaPengmas*/
        ctx2[35]) {
          set_input_value(
            input,
            /*sumberDanaPengmas*/
            ctx2[35]
          );
        }
        if (
          /*error*/
          ctx2[1].sumberDanaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_207(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_197(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].biayaPengmas + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].biayaPengmas + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_262(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].biayaPengmas && create_if_block_197(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan Biaya Pengmas");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPengmas*/
          ctx[31]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_34*/
              ctx[157]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler_1*/
              ctx[158]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*biayaPengmas*/
        1 && input.value !== /*biayaPengmas*/
        ctx2[31]) {
          set_input_value(
            input,
            /*biayaPengmas*/
            ctx2[31]
          );
        }
        if (
          /*error*/
          ctx2[1].biayaPengmas
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_197(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_252(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_302] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Pengmas",
        $$slots: { default: [create_default_slot_292] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Role",
        $$slots: { default: [create_default_slot_282] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Sumber Dana",
        $$slots: { default: [create_default_slot_272] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jumlah Rp.",
        $$slots: { default: [create_default_slot_262] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPM*/
            ctx[96]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunPengmas*/
        2 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*judulPengmas*/
        4 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*rolePengmas*/
        8 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*sumberDanaPengmas*/
        16 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*biayaPengmas*/
        1 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_42(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Pengabdian Masyarakat";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_187(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_242(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunDiseminasi && create_if_block_187(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunDiseminasi*/
          ctx[36]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_35*/
            ctx[160]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunDiseminasi*/
        32 && to_number(input.value) !== /*tahunDiseminasi*/
        ctx2[36]) {
          set_input_value(
            input,
            /*tahunDiseminasi*/
            ctx2[36]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_187(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_177(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_233(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulDiseminasi && create_if_block_177(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulDiseminasi*/
          ctx[37]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_36*/
            ctx[161]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulDiseminasi*/
        64 && input.value !== /*judulDiseminasi*/
        ctx2[37]) {
          set_input_value(
            input,
            /*judulDiseminasi*/
            ctx2[37]
          );
        }
        if (
          /*error*/
          ctx2[1].judulDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_177(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_167(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPemakalahDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_224(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPemakalahDiseminasi && create_if_block_167(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPemakalahDiseminasi*/
          ctx[38]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_37*/
            ctx[162]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPemakalahDiseminasi*/
        128 && input.value !== /*namaPemakalahDiseminasi*/
        ctx2[38]) {
          set_input_value(
            input,
            /*namaPemakalahDiseminasi*/
            ctx2[38]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPemakalahDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_167(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_157(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPertemuanDiseminasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_216(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPertemuanDiseminasi && create_if_block_157(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPertemuanDiseminasi*/
          ctx[39]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_38*/
            ctx[163]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPertemuanDiseminasi*/
        256 && input.value !== /*namaPertemuanDiseminasi*/
        ctx2[39]) {
          set_input_value(
            input,
            /*namaPertemuanDiseminasi*/
            ctx2[39]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPertemuanDiseminasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_157(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_203(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let hr;
    let t4;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_242] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_233] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Pemakalah",
        $$slots: { default: [create_default_slot_224] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Pertemuan Ilmiah/Pameran",
        $$slots: { default: [create_default_slot_216] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        hr = element("hr");
        t4 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        insert(target, hr, anchor);
        insert(target, t4, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPD*/
            ctx[97]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunDiseminasi*/
        32 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*judulDiseminasi*/
        64 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPemakalahDiseminasi*/
        128 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPertemuanDiseminasi*/
        256 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(hr);
          detach(t4);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_32(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Diseminasi Ilmiah dalam<br/>Pertemuan / Pameran`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_147(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_194(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunPublikasi && create_if_block_147(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunPublikasi*/
          ctx[40]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_39*/
            ctx[165]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunPublikasi*/
        512 && to_number(input.value) !== /*tahunPublikasi*/
        ctx2[40]) {
          set_input_value(
            input,
            /*tahunPublikasi*/
            ctx2[40]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_147(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_138(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].judulPublikasi + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].judulPublikasi + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_184(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].judulPublikasi && create_if_block_138(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judulPublikasi*/
          ctx[41]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_40*/
            ctx[166]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*judulPublikasi*/
        1024 && input.value !== /*judulPublikasi*/
        ctx2[41]) {
          set_input_value(
            input,
            /*judulPublikasi*/
            ctx2[41]
          );
        }
        if (
          /*error*/
          ctx2[1].judulPublikasi
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_138(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_1210(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulis + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulis + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_174(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulis && create_if_block_1210(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulis*/
          ctx[42]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_41*/
            ctx[167]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulis*/
        2048 && input.value !== /*namaPenulis*/
        ctx2[42]) {
          set_input_value(
            input,
            /*namaPenulis*/
            ctx2[42]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulis
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_1210(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_1113(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaJurnal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaJurnal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_164(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaJurnal && create_if_block_1113(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaJurnal*/
          ctx[43]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_42*/
            ctx[168]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaJurnal*/
        4096 && input.value !== /*namaJurnal*/
        ctx2[43]) {
          set_input_value(
            input,
            /*namaJurnal*/
            ctx2[43]
          );
        }
        if (
          /*error*/
          ctx2[1].namaJurnal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_1113(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_107(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].impactFactor + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].impactFactor + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_155(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].impactFactor && create_if_block_107(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*impactFactor*/
          ctx[44]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_43*/
            ctx[169]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*impactFactor*/
        8192 && input.value !== /*impactFactor*/
        ctx2[44]) {
          set_input_value(
            input,
            /*impactFactor*/
            ctx2[44]
          );
        }
        if (
          /*error*/
          ctx2[1].impactFactor
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_107(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_145(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_194] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Artikel",
        $$slots: { default: [create_default_slot_184] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_174] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Nama Jurnal, Vol., No Issue/No Artikel, Halaman",
        $$slots: { default: [create_default_slot_164] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Impact Factor/Scopus Quarter/Akreditasi",
        $$slots: { default: [create_default_slot_155] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPublikasi*/
            ctx[98]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunPublikasi*/
        512 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*judulPublikasi*/
        1024 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulis*/
        2048 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaJurnal*/
        4096 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*impactFactor*/
        8192 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_22(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.innerHTML = `Pengalaman Publikasi Ilmiah <br/> dalam Jurnal (bukan Proceeding)`;
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_97(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_135(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunBuku && create_if_block_97(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunBuku*/
          ctx[45]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_44*/
            ctx[171]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunBuku*/
        16384 && to_number(input.value) !== /*tahunBuku*/
        ctx2[45]) {
          set_input_value(
            input,
            /*tahunBuku*/
            ctx2[45]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_97(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_87(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_126(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulBuku && create_if_block_87(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulBuku*/
          ctx[46]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_45*/
            ctx[172]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*JudulBuku*/
        32768 && input.value !== /*JudulBuku*/
        ctx2[46]) {
          set_input_value(
            input,
            /*JudulBuku*/
            ctx2[46]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_87(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_714(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_1110(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisBuku && create_if_block_714(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisBuku*/
          ctx[47]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_46*/
            ctx[173]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulisBuku*/
        65536 && input.value !== /*namaPenulisBuku*/
        ctx2[47]) {
          set_input_value(
            input,
            /*namaPenulisBuku*/
            ctx2[47]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_714(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_619(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].PenerbitBuku + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].PenerbitBuku + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_105(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].PenerbitBuku && create_if_block_619(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*PenerbitBuku*/
          ctx[48]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_47*/
            ctx[174]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*PenerbitBuku*/
        131072 && input.value !== /*PenerbitBuku*/
        ctx2[48]) {
          set_input_value(
            input,
            /*PenerbitBuku*/
            ctx2[48]
          );
        }
        if (
          /*error*/
          ctx2[1].PenerbitBuku
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_619(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_519(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].Isbn + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].Isbn + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_95(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].Isbn && create_if_block_519(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*Isbn*/
          ctx[49]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_48*/
            ctx[175]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*Isbn*/
        262144 && input.value !== /*Isbn*/
        ctx2[49]) {
          set_input_value(
            input,
            /*Isbn*/
            ctx2[49]
          );
        }
        if (
          /*error*/
          ctx2[1].Isbn
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_519(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_86(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_135] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul Buku",
        $$slots: { default: [create_default_slot_126] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_1110] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Penerbit",
        $$slots: { default: [create_default_slot_105] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "ISBN",
        $$slots: { default: [create_default_slot_95] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPPB*/
            ctx[99]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunBuku*/
        16384 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*JudulBuku*/
        32768 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulisBuku*/
        65536 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*PenerbitBuku*/
        131072 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*Isbn*/
        262144 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot_12(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Penulisan Buku";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_if_block_420(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].tahunHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].tahunHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_76(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].tahunHKI && create_if_block_420(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "number");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tahunHKI*/
          ctx[50]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_49*/
            ctx[177]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*tahunHKI*/
        524288 && to_number(input.value) !== /*tahunHKI*/
        ctx2[50]) {
          set_input_value(
            input,
            /*tahunHKI*/
            ctx2[50]
          );
        }
        if (
          /*error*/
          ctx2[1].tahunHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_420(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_329(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].JudulHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].JudulHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_613(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].JudulHKI && create_if_block_329(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*JudulHKI*/
          ctx[51]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_50*/
            ctx[178]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*JudulHKI*/
        1048576 && input.value !== /*JudulHKI*/
        ctx2[51]) {
          set_input_value(
            input,
            /*JudulHKI*/
            ctx2[51]
          );
        }
        if (
          /*error*/
          ctx2[1].JudulHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_329(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_230(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].namaPenulisHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].namaPenulisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_514(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].namaPenulisHKI && create_if_block_230(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*namaPenulisHKI*/
          ctx[52]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_51*/
            ctx[179]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*namaPenulisHKI*/
        2097152 && input.value !== /*namaPenulisHKI*/
        ctx2[52]) {
          set_input_value(
            input,
            /*namaPenulisHKI*/
            ctx2[52]
          );
        }
        if (
          /*error*/
          ctx2[1].namaPenulisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_230(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_130(ctx) {
    let span;
    let t_value = (
      /*error*/
      ctx[1].jenisHKI + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].jenisHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_default_slot_415(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].jenisHKI && create_if_block_130(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*jenisHKI*/
          ctx[53]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_52*/
            ctx[180]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*jenisHKI*/
        4194304 && input.value !== /*jenisHKI*/
        ctx2[53]) {
          set_input_value(
            input,
            /*jenisHKI*/
            ctx2[53]
          );
        }
        if (
          /*error*/
          ctx2[1].jenisHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_130(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block22(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[1].noHKI + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1lhj3n7");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        2 && t_value !== (t_value = /*error*/
        ctx2[1].noHKI + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_316(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[1].noHKI && create_if_block22(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "class", "input");
        attr(input, "type", "text");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*noHKI*/
          ctx[54]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_53*/
            ctx[181]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[1] & /*noHKI*/
        8388608 && input.value !== /*noHKI*/
        ctx2[54]) {
          set_input_value(
            input,
            /*noHKI*/
            ctx2[54]
          );
        }
        if (
          /*error*/
          ctx2[1].noHKI
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block22(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_default_slot_217(ctx) {
    let field0;
    let t0;
    let field1;
    let t1;
    let field2;
    let t2;
    let field3;
    let t3;
    let field4;
    let t4;
    let hr;
    let t5;
    let div;
    let p;
    let button;
    let current;
    let mounted;
    let dispose;
    field0 = new Field_default({
      props: {
        name: "Tahun",
        $$slots: { default: [create_default_slot_76] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Judul HKI",
        $$slots: { default: [create_default_slot_613] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Nama Penulis",
        $$slots: { default: [create_default_slot_514] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis HKI",
        $$slots: { default: [create_default_slot_415] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "No HKI",
        $$slots: { default: [create_default_slot_316] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        create_component(field2.$$.fragment);
        t2 = space();
        create_component(field3.$$.fragment);
        t3 = space();
        create_component(field4.$$.fragment);
        t4 = space();
        hr = element("hr");
        t5 = space();
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Simpan";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        mount_component(field0, target, anchor);
        insert(target, t0, anchor);
        mount_component(field1, target, anchor);
        insert(target, t1, anchor);
        mount_component(field2, target, anchor);
        insert(target, t2, anchor);
        mount_component(field3, target, anchor);
        insert(target, t3, anchor);
        mount_component(field4, target, anchor);
        insert(target, t4, anchor);
        insert(target, hr, anchor);
        insert(target, t5, anchor);
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*simpanPHKI*/
            ctx[100]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*tahunHKI*/
        524288 | dirty[7] & /*$$scope*/
        8192) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*JudulHKI*/
        1048576 | dirty[7] & /*$$scope*/
        8192) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPenulisHKI*/
        2097152 | dirty[7] & /*$$scope*/
        8192) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*jenisHKI*/
        4194304 | dirty[7] & /*$$scope*/
        8192) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI*/
        8388608 | dirty[7] & /*$$scope*/
        8192) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(hr);
          detach(t5);
          detach(div);
        }
        destroy_component(field0, detaching);
        destroy_component(field1, detaching);
        destroy_component(field2, detaching);
        destroy_component(field3, detaching);
        destroy_component(field4, detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_header_slot3(ctx) {
    let h4;
    return {
      c() {
        h4 = element("h4");
        h4.textContent = "Pengalaman Hak Kekayaan Intelektual";
        attr(h4, "class", "title is-4");
        attr(h4, "slot", "header");
      },
      m(target, anchor) {
        insert(target, h4, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(h4);
        }
      }
    };
  }
  function create_default_slot_121(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form sebelum disimpan";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot18(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Berhasil menyimpan data";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment42(ctx) {
    let article2;
    let t0;
    let modal0;
    let updating_show;
    let t1;
    let modal1;
    let updating_show_1;
    let t2;
    let modal2;
    let updating_show_2;
    let t3;
    let modal3;
    let updating_show_3;
    let t4;
    let modal4;
    let updating_show_4;
    let t5;
    let modal5;
    let updating_show_5;
    let t6;
    let modal6;
    let updating_show_6;
    let t7;
    let modal7;
    let updating_show_7;
    let t8;
    let modal8;
    let updating_show_8;
    let t9;
    let modalerror;
    let updating_show_9;
    let t10;
    let modalchecked;
    let updating_show_10;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_552] },
        $$scope: { ctx }
      }
    });
    function modal0_show_binding(value) {
      ctx[133](value);
    }
    let modal0_props = {
      $$slots: {
        header: [create_header_slot_82],
        default: [create_default_slot_492]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalRiwayatPendidikanS1*/
      ctx[68] !== void 0
    ) {
      modal0_props.show = /*showModalRiwayatPendidikanS1*/
      ctx[68];
    }
    modal0 = new Modal_default({ props: modal0_props });
    binding_callbacks.push(() => bind(modal0, "show", modal0_show_binding));
    function modal1_show_binding(value) {
      ctx[139](value);
    }
    let modal1_props = {
      $$slots: {
        header: [create_header_slot_72],
        default: [create_default_slot_432]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalRiwayatPendidikanS2*/
      ctx[69] !== void 0
    ) {
      modal1_props.show = /*showModalRiwayatPendidikanS2*/
      ctx[69];
    }
    modal1 = new Modal_default({ props: modal1_props });
    binding_callbacks.push(() => bind(modal1, "show", modal1_show_binding));
    function modal2_show_binding(value) {
      ctx[145](value);
    }
    let modal2_props = {
      $$slots: {
        header: [create_header_slot_62],
        default: [create_default_slot_372]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalRiwayatPendidikanS3*/
      ctx[70] !== void 0
    ) {
      modal2_props.show = /*showModalRiwayatPendidikanS3*/
      ctx[70];
    }
    modal2 = new Modal_default({ props: modal2_props });
    binding_callbacks.push(() => bind(modal2, "show", modal2_show_binding));
    function modal3_show_binding(value) {
      ctx[152](value);
    }
    let modal3_props = {
      $$slots: {
        header: [create_header_slot_52],
        default: [create_default_slot_315]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenelitian*/
      ctx[71] !== void 0
    ) {
      modal3_props.show = /*showModalPenelitian*/
      ctx[71];
    }
    modal3 = new Modal_default({ props: modal3_props });
    binding_callbacks.push(() => bind(modal3, "show", modal3_show_binding));
    function modal4_show_binding(value) {
      ctx[159](value);
    }
    let modal4_props = {
      $$slots: {
        header: [create_header_slot_42],
        default: [create_default_slot_252]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPengmas*/
      ctx[72] !== void 0
    ) {
      modal4_props.show = /*showModalPengmas*/
      ctx[72];
    }
    modal4 = new Modal_default({ props: modal4_props });
    binding_callbacks.push(() => bind(modal4, "show", modal4_show_binding));
    function modal5_show_binding(value) {
      ctx[164](value);
    }
    let modal5_props = {
      $$slots: {
        header: [create_header_slot_32],
        default: [create_default_slot_203]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalDiseminasi*/
      ctx[73] !== void 0
    ) {
      modal5_props.show = /*showModalDiseminasi*/
      ctx[73];
    }
    modal5 = new Modal_default({ props: modal5_props });
    binding_callbacks.push(() => bind(modal5, "show", modal5_show_binding));
    function modal6_show_binding(value) {
      ctx[170](value);
    }
    let modal6_props = {
      $$slots: {
        header: [create_header_slot_22],
        default: [create_default_slot_145]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPublikasi*/
      ctx[74] !== void 0
    ) {
      modal6_props.show = /*showModalPublikasi*/
      ctx[74];
    }
    modal6 = new Modal_default({ props: modal6_props });
    binding_callbacks.push(() => bind(modal6, "show", modal6_show_binding));
    function modal7_show_binding(value) {
      ctx[176](value);
    }
    let modal7_props = {
      $$slots: {
        header: [create_header_slot_12],
        default: [create_default_slot_86]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalPenulisanBuku*/
      ctx[75] !== void 0
    ) {
      modal7_props.show = /*showModalPenulisanBuku*/
      ctx[75];
    }
    modal7 = new Modal_default({ props: modal7_props });
    binding_callbacks.push(() => bind(modal7, "show", modal7_show_binding));
    function modal8_show_binding(value) {
      ctx[182](value);
    }
    let modal8_props = {
      $$slots: {
        header: [create_header_slot3],
        default: [create_default_slot_217]
      },
      $$scope: { ctx }
    };
    if (
      /*showModalHKI*/
      ctx[76] !== void 0
    ) {
      modal8_props.show = /*showModalHKI*/
      ctx[76];
    }
    modal8 = new Modal_default({ props: modal8_props });
    binding_callbacks.push(() => bind(modal8, "show", modal8_show_binding));
    function modalerror_show_binding(value) {
      ctx[183](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot_121] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorForm*/
      ctx[77] !== void 0
    ) {
      modalerror_props.show = /*showModalErrorForm*/
      ctx[77];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    function modalchecked_show_binding(value) {
      ctx[184](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot18] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[78] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[78];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t0 = space();
        create_component(modal0.$$.fragment);
        t1 = space();
        create_component(modal1.$$.fragment);
        t2 = space();
        create_component(modal2.$$.fragment);
        t3 = space();
        create_component(modal3.$$.fragment);
        t4 = space();
        create_component(modal4.$$.fragment);
        t5 = space();
        create_component(modal5.$$.fragment);
        t6 = space();
        create_component(modal6.$$.fragment);
        t7 = space();
        create_component(modal7.$$.fragment);
        t8 = space();
        create_component(modal8.$$.fragment);
        t9 = space();
        create_component(modalerror.$$.fragment);
        t10 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t0, anchor);
        mount_component(modal0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modal1, target, anchor);
        insert(target, t2, anchor);
        mount_component(modal2, target, anchor);
        insert(target, t3, anchor);
        mount_component(modal3, target, anchor);
        insert(target, t4, anchor);
        mount_component(modal4, target, anchor);
        insert(target, t5, anchor);
        mount_component(modal5, target, anchor);
        insert(target, t6, anchor);
        mount_component(modal6, target, anchor);
        insert(target, t7, anchor);
        mount_component(modal7, target, anchor);
        insert(target, t8, anchor);
        mount_component(modal8, target, anchor);
        insert(target, t9, anchor);
        mount_component(modalerror, target, anchor);
        insert(target, t10, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*dataPHKI, dataPPB, dataPPub, dataPD, dataPM, dataPP, dataRPS3, dataRPS2, dataRPS1, vmataKuliah, error*/
        66060319 | dirty[1] & /*alamatRumah, tanggalLahir, tempatLahir, nidn, nip, jabatanFungsional, namaLengkap*/
        2130706432 | dirty[2] & /*tab3, tab2, mataKuliah, email, telpFaxKantor, alamatKantor, nomorHandphone, telpFaxRumah, tab1*/
        917567 | dirty[7] & /*$$scope*/
        8192) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modal0_changes = {};
        if (dirty[0] & /*error, judulSkripsi, tahunLulusS1, tahunMasukS1, bidang_ilmuS1, nama_pertiS1*/
        994 | dirty[7] & /*$$scope*/
        8192) {
          modal0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[2] & /*showModalRiwayatPendidikanS1*/
        64) {
          updating_show = true;
          modal0_changes.show = /*showModalRiwayatPendidikanS1*/
          ctx2[68];
          add_flush_callback(() => updating_show = false);
        }
        modal0.$set(modal0_changes);
        const modal1_changes = {};
        if (dirty[0] & /*error, judulTesis, tahunLulusS2, tahunMasukS2, bidang_ilmuS2, nama_pertiS2*/
        31746 | dirty[7] & /*$$scope*/
        8192) {
          modal1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[2] & /*showModalRiwayatPendidikanS2*/
        128) {
          updating_show_1 = true;
          modal1_changes.show = /*showModalRiwayatPendidikanS2*/
          ctx2[69];
          add_flush_callback(() => updating_show_1 = false);
        }
        modal1.$set(modal1_changes);
        const modal2_changes = {};
        if (dirty[0] & /*error, judulDisertasi, tahunLulusS3, tahunMasukS3, bidang_ilmuS3, nama_pertiS3*/
        1015810 | dirty[7] & /*$$scope*/
        8192) {
          modal2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_2 && dirty[2] & /*showModalRiwayatPendidikanS3*/
        256) {
          updating_show_2 = true;
          modal2_changes.show = /*showModalRiwayatPendidikanS3*/
          ctx2[70];
          add_flush_callback(() => updating_show_2 = false);
        }
        modal2.$set(modal2_changes);
        const modal3_changes = {};
        if (dirty[0] & /*error, biayaPP, sumberDanaPenelitian, rolePenelitian, judulPenelitian, tahunPenelitian*/
        2080374786 | dirty[7] & /*$$scope*/
        8192) {
          modal3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_3 && dirty[2] & /*showModalPenelitian*/
        512) {
          updating_show_3 = true;
          modal3_changes.show = /*showModalPenelitian*/
          ctx2[71];
          add_flush_callback(() => updating_show_3 = false);
        }
        modal3.$set(modal3_changes);
        const modal4_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*biayaPengmas, sumberDanaPengmas, rolePengmas, judulPengmas, tahunPengmas*/
        31 | dirty[7] & /*$$scope*/
        8192) {
          modal4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_4 && dirty[2] & /*showModalPengmas*/
        1024) {
          updating_show_4 = true;
          modal4_changes.show = /*showModalPengmas*/
          ctx2[72];
          add_flush_callback(() => updating_show_4 = false);
        }
        modal4.$set(modal4_changes);
        const modal5_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*namaPertemuanDiseminasi, namaPemakalahDiseminasi, judulDiseminasi, tahunDiseminasi*/
        480 | dirty[7] & /*$$scope*/
        8192) {
          modal5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_5 && dirty[2] & /*showModalDiseminasi*/
        2048) {
          updating_show_5 = true;
          modal5_changes.show = /*showModalDiseminasi*/
          ctx2[73];
          add_flush_callback(() => updating_show_5 = false);
        }
        modal5.$set(modal5_changes);
        const modal6_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*impactFactor, namaJurnal, namaPenulis, judulPublikasi, tahunPublikasi*/
        15872 | dirty[7] & /*$$scope*/
        8192) {
          modal6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_6 && dirty[2] & /*showModalPublikasi*/
        4096) {
          updating_show_6 = true;
          modal6_changes.show = /*showModalPublikasi*/
          ctx2[74];
          add_flush_callback(() => updating_show_6 = false);
        }
        modal6.$set(modal6_changes);
        const modal7_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*Isbn, PenerbitBuku, namaPenulisBuku, JudulBuku, tahunBuku*/
        507904 | dirty[7] & /*$$scope*/
        8192) {
          modal7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_7 && dirty[2] & /*showModalPenulisanBuku*/
        8192) {
          updating_show_7 = true;
          modal7_changes.show = /*showModalPenulisanBuku*/
          ctx2[75];
          add_flush_callback(() => updating_show_7 = false);
        }
        modal7.$set(modal7_changes);
        const modal8_changes = {};
        if (dirty[0] & /*error*/
        2 | dirty[1] & /*noHKI, jenisHKI, namaPenulisHKI, JudulHKI, tahunHKI*/
        16252928 | dirty[7] & /*$$scope*/
        8192) {
          modal8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_8 && dirty[2] & /*showModalHKI*/
        16384) {
          updating_show_8 = true;
          modal8_changes.show = /*showModalHKI*/
          ctx2[76];
          add_flush_callback(() => updating_show_8 = false);
        }
        modal8.$set(modal8_changes);
        const modalerror_changes = {};
        if (dirty[7] & /*$$scope*/
        8192) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_9 && dirty[2] & /*showModalErrorForm*/
        32768) {
          updating_show_9 = true;
          modalerror_changes.show = /*showModalErrorForm*/
          ctx2[77];
          add_flush_callback(() => updating_show_9 = false);
        }
        modalerror.$set(modalerror_changes);
        const modalchecked_changes = {};
        if (dirty[7] & /*$$scope*/
        8192) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_10 && dirty[2] & /*showModalChecked*/
        65536) {
          updating_show_10 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[78];
          add_flush_callback(() => updating_show_10 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modal0.$$.fragment, local);
        transition_in(modal1.$$.fragment, local);
        transition_in(modal2.$$.fragment, local);
        transition_in(modal3.$$.fragment, local);
        transition_in(modal4.$$.fragment, local);
        transition_in(modal5.$$.fragment, local);
        transition_in(modal6.$$.fragment, local);
        transition_in(modal7.$$.fragment, local);
        transition_in(modal8.$$.fragment, local);
        transition_in(modalerror.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modal0.$$.fragment, local);
        transition_out(modal1.$$.fragment, local);
        transition_out(modal2.$$.fragment, local);
        transition_out(modal3.$$.fragment, local);
        transition_out(modal4.$$.fragment, local);
        transition_out(modal5.$$.fragment, local);
        transition_out(modal6.$$.fragment, local);
        transition_out(modal7.$$.fragment, local);
        transition_out(modal8.$$.fragment, local);
        transition_out(modalerror.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(t2);
          detach(t3);
          detach(t4);
          detach(t5);
          detach(t6);
          detach(t7);
          detach(t8);
          detach(t9);
          detach(t10);
        }
        destroy_component(article2, detaching);
        destroy_component(modal0, detaching);
        destroy_component(modal1, detaching);
        destroy_component(modal2, detaching);
        destroy_component(modal3, detaching);
        destroy_component(modal4, detaching);
        destroy_component(modal5, detaching);
        destroy_component(modal6, detaching);
        destroy_component(modal7, detaching);
        destroy_component(modal8, detaching);
        destroy_component(modalerror, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function formatRupiah5(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance35($$self, $$props, $$invalidate) {
    let $apiURL;
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(187, $apiURL = $$value));
    const id = localStorage.getItem("id");
    let vmataKuliah;
    let error = {};
    let dataRPS1, dataRPS2, dataRPS3;
    let nama_pertiS1, bidang_ilmuS1, tahunMasukS1, tahunLulusS1, judulSkripsi;
    let nama_pertiS2, bidang_ilmuS2, tahunMasukS2, tahunLulusS2, judulTesis;
    let nama_pertiS3, bidang_ilmuS3, tahunMasukS3, tahunLulusS3, judulDisertasi;
    let data2, dataPP, dataPM, dataPD, dataPPub, dataPPB, dataPHKI;
    let biayaPP, tahunPenelitian, judulPenelitian, rolePenelitian, sumberDanaPenelitian;
    let biayaPengmas, tahunPengmas, judulPengmas, rolePengmas, sumberDanaPengmas;
    let tahunDiseminasi, judulDiseminasi, namaPemakalahDiseminasi, namaPertemuanDiseminasi;
    let tahunPublikasi, judulPublikasi, namaPenulis, namaJurnal, impactFactor;
    let tahunBuku, JudulBuku, namaPenulisBuku, PenerbitBuku, Isbn;
    let tahunHKI, JudulHKI, namaPenulisHKI, jenisHKI, noHKI;
    let idProfile, namaLengkap, jabatanFungsional, nip, nidn, tempatLahir, tanggalLahir, alamatRumah, telpFaxRumah, nomorHandphone, alamatKantor, telpFaxKantor, email2, mataKuliah = [];
    let showModalRiwayatPendidikanS1 = false;
    let showModalRiwayatPendidikanS2 = false;
    let showModalRiwayatPendidikanS3 = false;
    let showModalPenelitian = false;
    let showModalPengmas = false;
    let showModalDiseminasi = false;
    let showModalPublikasi = false;
    let showModalPenulisanBuku = false;
    let showModalHKI = false;
    let showModalErrorForm = false;
    let showModalChecked = false;
    async function modalInputRiwayatPendidikanS1() {
      $$invalidate(68, showModalRiwayatPendidikanS1 = true);
    }
    async function modalInputRiwayatPendidikanS2() {
      $$invalidate(69, showModalRiwayatPendidikanS2 = true);
    }
    async function modalInputRiwayatPendidikanS3() {
      $$invalidate(70, showModalRiwayatPendidikanS3 = true);
    }
    async function clickModalPenelitian() {
      $$invalidate(71, showModalPenelitian = true);
    }
    async function clickModalPengmas() {
      $$invalidate(72, showModalPengmas = true);
    }
    async function clickModalDiseminasi() {
      $$invalidate(73, showModalDiseminasi = true);
    }
    async function clickModalPublikasi() {
      $$invalidate(74, showModalPublikasi = true);
    }
    async function clickModalPenulisanBuku() {
      $$invalidate(75, showModalPenulisanBuku = true);
    }
    async function clickModalHKI() {
      $$invalidate(76, showModalHKI = true);
    }
    const accessToken = localStorage.getItem("token");
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    onMount(async () => {
      const response = await fetch($apiURL + "/user/" + id, { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          data2 = result;
          idProfile = data2.id;
          idUser = data2.uid;
          $$invalidate(55, namaLengkap = data2.nama_lengkap);
          $$invalidate(56, jabatanFungsional = data2.jabatan_fungsional);
          $$invalidate(57, nip = data2.nip);
          $$invalidate(58, nidn = data2.nidn);
          $$invalidate(59, tempatLahir = data2.tempat_lahir);
          $$invalidate(60, tanggalLahir = data2.tanggal_lahir);
          $$invalidate(61, alamatRumah = data2.alamat_rumah);
          $$invalidate(62, telpFaxRumah = data2.telp_fax_rumah);
          $$invalidate(63, nomorHandphone = data2.nomor_handphone);
          $$invalidate(64, alamatKantor = data2.alamat_kantor);
          $$invalidate(65, telpFaxKantor = data2.telp_fax_kantor);
          $$invalidate(66, email2 = data2.email);
          $$invalidate(67, mataKuliah = typeof data2.mata_kuliah === "string" ? JSON.parse(data2.mata_kuliah) : data2.mata_kuliah || []);
        }
      }
      getRiwayatPendidikanS1();
      getRiwayatPendidikanS2();
      getRiwayatPendidikanS3();
      getPengalamanPenelitian();
      getPengalamanPengmas();
      getPengalamanDiseminasi();
      getPengalamanPublikasi();
      getPengalamanPenulisanBuku();
      getPengalamanHKI();
    });
    async function getRiwayatPendidikanS1() {
      const responseRPS1 = await fetch($apiURL + "/riwayatPendidikanS1/" + id, { method: "GET", headers });
      const resultRPS1 = await responseRPS1.json();
      if (responseRPS1.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRPS1.ok) {
          $$invalidate(2, dataRPS1 = resultRPS1.dbData);
        } else {
          console.log(responseRPS1);
        }
      }
    }
    async function getRiwayatPendidikanS2() {
      const responseRPS2 = await fetch($apiURL + "/riwayatPendidikanS2/" + id, { method: "GET", headers });
      const resultRPS2 = await responseRPS2.json();
      if (responseRPS2.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRPS2.ok) {
          $$invalidate(3, dataRPS2 = resultRPS2.dbData);
        } else {
          console.log(responseRPS2);
        }
      }
    }
    async function getRiwayatPendidikanS3() {
      const responseRPS3 = await fetch($apiURL + "/riwayatPendidikanS3/" + id, { method: "GET", headers });
      const resultRPS3 = await responseRPS3.json();
      if (responseRPS3.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseRPS3.ok) {
          $$invalidate(4, dataRPS3 = resultRPS3.dbData);
        } else {
          console.log(responseRPS3);
        }
      }
    }
    async function getPengalamanPenelitian() {
      const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + id, { method: "GET", headers });
      const resultPP = await responsePP.json();
      if (responsePP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePP.ok) {
          $$invalidate(20, dataPP = resultPP.dbData);
        } else {
          console.log(responsePP);
        }
      }
    }
    async function getPengalamanPengmas() {
      const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + id, { method: "GET", headers });
      const resultPM = await responsePM.json();
      if (responsePM.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePM.ok) {
          $$invalidate(21, dataPM = resultPM.dbData);
        } else {
          console.log(responsePM);
        }
      }
    }
    async function getPengalamanDiseminasi() {
      const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + id, { method: "GET", headers });
      const resultPD = await responsePD.json();
      if (responsePD.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePD.ok) {
          $$invalidate(22, dataPD = resultPD.dbData);
        } else {
          console.log(responsePD);
        }
      }
    }
    async function getPengalamanPublikasi() {
      const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + id, { method: "GET", headers });
      const resultPPub = await responsePPub.json();
      if (responsePPub.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPub.ok) {
          $$invalidate(23, dataPPub = resultPPub.dbData);
        } else {
          console.log(responsePPub);
        }
      }
    }
    async function getPengalamanPenulisanBuku() {
      const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + id, { method: "GET", headers });
      const resultPPB = await responsePPB.json();
      if (responsePPB.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePPB.ok) {
          $$invalidate(24, dataPPB = resultPPB.dbData);
        } else {
          console.log(responsePPB);
        }
      }
    }
    async function getPengalamanHKI() {
      const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + id, { method: "GET", headers });
      const resultPHKI = await responsePHKI.json();
      if (responsePHKI.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responsePHKI.ok) {
          $$invalidate(25, dataPHKI = resultPHKI.dbData);
        } else {
          console.log(responsePHKI);
        }
      }
    }
    async function simpanIdentitas() {
      $$invalidate(1, error = {});
      let payload2 = {
        idProfile,
        namaLengkap,
        jabatanFungsional,
        nip,
        nidn,
        tempatLahir,
        tanggalLahir,
        alamatRumah,
        telpFaxRumah,
        nomorHandphone,
        alamatKantor,
        telpFaxKantor,
        email: email2,
        mataKuliah
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/userprofile", {
          method: "PATCH",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(78, showModalChecked = true);
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRP_S1() {
      $$invalidate(1, error = {});
      let payload2 = {
        nama_pertiS1,
        bidang_ilmuS1,
        tahunMasukS1,
        tahunLulusS1,
        judulSkripsi,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/riwayatPendidikanS1", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(68, showModalRiwayatPendidikanS1 = false);
            $$invalidate(5, nama_pertiS1 = "");
            $$invalidate(6, bidang_ilmuS1 = "");
            $$invalidate(7, tahunMasukS1 = "");
            $$invalidate(8, tahunLulusS1 = "");
            $$invalidate(9, judulSkripsi = "");
            getRiwayatPendidikanS1();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRP_S2() {
      $$invalidate(1, error = {});
      let payload2 = {
        nama_pertiS2,
        bidang_ilmuS2,
        tahunMasukS2,
        tahunLulusS2,
        judulTesis,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/riwayatPendidikanS2", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(69, showModalRiwayatPendidikanS2 = false);
            $$invalidate(10, nama_pertiS2 = "");
            $$invalidate(11, bidang_ilmuS2 = "");
            $$invalidate(12, tahunMasukS2 = "");
            $$invalidate(13, tahunLulusS2 = "");
            $$invalidate(14, judulTesis = "");
            getRiwayatPendidikanS2();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanRP_S3() {
      $$invalidate(1, error = {});
      let payload2 = {
        nama_pertiS3,
        bidang_ilmuS3,
        tahunMasukS3,
        tahunLulusS3,
        judulDisertasi,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/riwayatPendidikanS3", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(70, showModalRiwayatPendidikanS3 = false);
            $$invalidate(15, nama_pertiS3 = "");
            $$invalidate(16, bidang_ilmuS3 = "");
            $$invalidate(17, tahunMasukS3 = "");
            $$invalidate(18, tahunLulusS3 = "");
            $$invalidate(19, judulDisertasi = "");
            getRiwayatPendidikanS3();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPP() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunPenelitian,
        judulPenelitian,
        rolePenelitian,
        sumberDanaPenelitian,
        biayaPP,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenelitian", {
          method: "POST",
          headers,
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(71, showModalPenelitian = false);
            $$invalidate(27, tahunPenelitian = "");
            $$invalidate(28, judulPenelitian = "");
            $$invalidate(29, rolePenelitian = "");
            $$invalidate(30, sumberDanaPenelitian = "");
            $$invalidate(26, biayaPP = "");
            getPengalamanPenelitian();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPM() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunPengmas,
        judulPengmas,
        rolePengmas,
        sumberDanaPengmas,
        biayaPengmas,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPengmas", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(72, showModalPengmas = false);
            $$invalidate(32, tahunPengmas = "");
            $$invalidate(33, judulPengmas = "");
            $$invalidate(34, rolePengmas = "");
            $$invalidate(35, sumberDanaPengmas = "");
            $$invalidate(31, biayaPengmas = "");
            getPengalamanPengmas();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPD() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunDiseminasi,
        judulDiseminasi,
        namaPemakalahDiseminasi,
        namaPertemuanDiseminasi,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanDiseminasi", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(73, showModalDiseminasi = false);
            $$invalidate(36, tahunDiseminasi = "");
            $$invalidate(37, judulDiseminasi = "");
            $$invalidate(38, namaPemakalahDiseminasi = "");
            $$invalidate(39, namaPertemuanDiseminasi = "");
            getPengalamanDiseminasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPublikasi() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunPublikasi,
        judulPublikasi,
        namaPenulis,
        namaJurnal,
        impactFactor,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPublikasi", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(74, showModalPublikasi = false);
            $$invalidate(40, tahunPublikasi = "");
            $$invalidate(41, judulPublikasi = "");
            $$invalidate(42, namaPenulis = "");
            $$invalidate(43, namaJurnal = "");
            $$invalidate(44, impactFactor = "");
            getPengalamanPublikasi();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPPB() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunBuku,
        JudulBuku,
        namaPenulisBuku,
        PenerbitBuku,
        Isbn,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanPenulisanBuku", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(75, showModalPenulisanBuku = false);
            $$invalidate(45, tahunBuku = "");
            $$invalidate(46, JudulBuku = "");
            $$invalidate(47, namaPenulisBuku = "");
            $$invalidate(48, PenerbitBuku = "");
            $$invalidate(49, Isbn = "");
            getPengalamanPenulisanBuku();
          } else {
            console.log(response);
          }
        }
      }
    }
    async function simpanPHKI() {
      $$invalidate(1, error = {});
      let payload2 = {
        tahunHKI,
        JudulHKI,
        namaPenulisHKI,
        jenisHKI,
        noHKI,
        id
      };
      for (const [key, value] of Object.entries(payload2)) {
        if (!payload2[key]) {
          $$invalidate(1, error[key] = `This field is required`, error);
        }
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(77, showModalErrorForm = true);
      } else {
        const response = await fetch($apiURL + "/pengalamanHKI", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload2)
        });
        const result = await response.json();
        if (response.status === 401) {
          location.pathname = "/tokenexpired";
        } else {
          if (response.ok) {
            $$invalidate(76, showModalHKI = false);
            $$invalidate(50, tahunHKI = "");
            $$invalidate(51, JudulHKI = "");
            $$invalidate(52, namaPenulisHKI = "");
            $$invalidate(53, jenisHKI = "");
            $$invalidate(54, noHKI = "");
            getPengalamanHKI();
          } else {
            console.log(response);
          }
        }
      }
    }
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      $$invalidate(79, tab1 = true);
      $$invalidate(80, tab2 = false);
      $$invalidate(81, tab3 = false);
    }
    function clicktab2() {
      $$invalidate(79, tab1 = false);
      $$invalidate(80, tab2 = true);
      $$invalidate(81, tab3 = false);
    }
    function clicktab3() {
      $$invalidate(79, tab1 = false);
      $$invalidate(80, tab2 = false);
      $$invalidate(81, tab3 = true);
    }
    function addMatkul() {
      let addVmatkul = { label: vmataKuliah };
      $$invalidate(67, mataKuliah = [...mataKuliah, addVmatkul]);
      $$invalidate(0, vmataKuliah = "");
    }
    async function delrowRPS1(ev) {
      let idRPS1 = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/riwayatPendidikanS1/" + idRPS1, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getRiwayatPendidikanS1();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowRPS2(ev) {
      let idRPS2 = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/riwayatPendidikanS2/" + idRPS2, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getRiwayatPendidikanS2();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowRPS3(ev) {
      let idRPS3 = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/riwayatPendidikanS3/" + idRPS3, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getRiwayatPendidikanS3();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPP(ev) {
      let idPP = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenelitian/" + idPP, { method: "DELETE", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenelitian();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPM(ev) {
      let idPM = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPengmas/" + idPM, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPengmas();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPD(ev) {
      let idPD = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanDiseminasi/" + idPD, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanDiseminasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPub(ev) {
      let idPPub = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPublikasi/" + idPPub, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPublikasi();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPPB(ev) {
      let idPPB = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idPPB, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanPenulisanBuku();
        } else {
          console.log(response);
        }
      }
    }
    async function delrowPHKI(ev) {
      let idPHKI = ev.target.getAttribute("pid");
      const response = await fetch($apiURL + "/pengalamanHKI/" + idPHKI, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json"
        }
      });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          getPengalamanHKI();
        } else {
          console.log(response);
        }
      }
    }
    function deleteMatkul(e) {
      let delMatkul = e.target.getAttribute("data-value");
      $$invalidate(67, mataKuliah = mataKuliah.filter((matkul) => {
        return matkul.label !== delMatkul;
      }));
    }
    function input_input_handler() {
      namaLengkap = this.value;
      $$invalidate(55, namaLengkap);
    }
    function select_change_handler() {
      jabatanFungsional = select_value(this);
      $$invalidate(56, jabatanFungsional);
    }
    function input_input_handler_1() {
      nip = to_number(this.value);
      $$invalidate(57, nip);
    }
    function input_input_handler_2() {
      nidn = to_number(this.value);
      $$invalidate(58, nidn);
    }
    function input_input_handler_3() {
      tempatLahir = this.value;
      $$invalidate(59, tempatLahir);
    }
    function input_input_handler_4() {
      tanggalLahir = this.value;
      $$invalidate(60, tanggalLahir);
    }
    function input_input_handler_5() {
      alamatRumah = this.value;
      $$invalidate(61, alamatRumah);
    }
    function input_input_handler_6() {
      telpFaxRumah = to_number(this.value);
      $$invalidate(62, telpFaxRumah);
    }
    function input_input_handler_7() {
      nomorHandphone = to_number(this.value);
      $$invalidate(63, nomorHandphone);
    }
    function input_input_handler_8() {
      alamatKantor = this.value;
      $$invalidate(64, alamatKantor);
    }
    function input_input_handler_9() {
      telpFaxKantor = to_number(this.value);
      $$invalidate(65, telpFaxKantor);
    }
    function input_input_handler_10() {
      email2 = this.value;
      $$invalidate(66, email2);
    }
    function input_input_handler_11() {
      vmataKuliah = this.value;
      $$invalidate(0, vmataKuliah);
    }
    function input_input_handler_12() {
      nama_pertiS1 = this.value;
      $$invalidate(5, nama_pertiS1);
    }
    function input_input_handler_13() {
      bidang_ilmuS1 = this.value;
      $$invalidate(6, bidang_ilmuS1);
    }
    function input_input_handler_14() {
      tahunMasukS1 = to_number(this.value);
      $$invalidate(7, tahunMasukS1);
    }
    function input_input_handler_15() {
      tahunLulusS1 = to_number(this.value);
      $$invalidate(8, tahunLulusS1);
    }
    function input_input_handler_16() {
      judulSkripsi = this.value;
      $$invalidate(9, judulSkripsi);
    }
    function modal0_show_binding(value) {
      showModalRiwayatPendidikanS1 = value;
      $$invalidate(68, showModalRiwayatPendidikanS1);
    }
    function input_input_handler_17() {
      nama_pertiS2 = this.value;
      $$invalidate(10, nama_pertiS2);
    }
    function input_input_handler_18() {
      bidang_ilmuS2 = this.value;
      $$invalidate(11, bidang_ilmuS2);
    }
    function input_input_handler_19() {
      tahunMasukS2 = to_number(this.value);
      $$invalidate(12, tahunMasukS2);
    }
    function input_input_handler_20() {
      tahunLulusS2 = to_number(this.value);
      $$invalidate(13, tahunLulusS2);
    }
    function input_input_handler_21() {
      judulTesis = this.value;
      $$invalidate(14, judulTesis);
    }
    function modal1_show_binding(value) {
      showModalRiwayatPendidikanS2 = value;
      $$invalidate(69, showModalRiwayatPendidikanS2);
    }
    function input_input_handler_22() {
      nama_pertiS3 = this.value;
      $$invalidate(15, nama_pertiS3);
    }
    function input_input_handler_23() {
      bidang_ilmuS3 = this.value;
      $$invalidate(16, bidang_ilmuS3);
    }
    function input_input_handler_24() {
      tahunMasukS3 = to_number(this.value);
      $$invalidate(17, tahunMasukS3);
    }
    function input_input_handler_25() {
      tahunLulusS3 = to_number(this.value);
      $$invalidate(18, tahunLulusS3);
    }
    function input_input_handler_26() {
      judulDisertasi = this.value;
      $$invalidate(19, judulDisertasi);
    }
    function modal2_show_binding(value) {
      showModalRiwayatPendidikanS3 = value;
      $$invalidate(70, showModalRiwayatPendidikanS3);
    }
    function input_input_handler_27() {
      tahunPenelitian = to_number(this.value);
      $$invalidate(27, tahunPenelitian);
    }
    function input_input_handler_28() {
      judulPenelitian = this.value;
      $$invalidate(28, judulPenelitian);
    }
    function select_change_handler_1() {
      rolePenelitian = select_value(this);
      $$invalidate(29, rolePenelitian);
    }
    function input_input_handler_29() {
      sumberDanaPenelitian = this.value;
      $$invalidate(30, sumberDanaPenelitian);
    }
    function input_input_handler_30() {
      biayaPP = this.value;
      $$invalidate(26, biayaPP);
    }
    const keyup_handler = () => $$invalidate(26, biayaPP = formatRupiah5(biayaPP, "Rp. "));
    function modal3_show_binding(value) {
      showModalPenelitian = value;
      $$invalidate(71, showModalPenelitian);
    }
    function input_input_handler_31() {
      tahunPengmas = to_number(this.value);
      $$invalidate(32, tahunPengmas);
    }
    function input_input_handler_32() {
      judulPengmas = this.value;
      $$invalidate(33, judulPengmas);
    }
    function select_change_handler_2() {
      rolePengmas = select_value(this);
      $$invalidate(34, rolePengmas);
    }
    function input_input_handler_33() {
      sumberDanaPengmas = this.value;
      $$invalidate(35, sumberDanaPengmas);
    }
    function input_input_handler_34() {
      biayaPengmas = this.value;
      $$invalidate(31, biayaPengmas);
    }
    const keyup_handler_1 = () => $$invalidate(31, biayaPengmas = formatRupiah5(biayaPengmas, "Rp. "));
    function modal4_show_binding(value) {
      showModalPengmas = value;
      $$invalidate(72, showModalPengmas);
    }
    function input_input_handler_35() {
      tahunDiseminasi = to_number(this.value);
      $$invalidate(36, tahunDiseminasi);
    }
    function input_input_handler_36() {
      judulDiseminasi = this.value;
      $$invalidate(37, judulDiseminasi);
    }
    function input_input_handler_37() {
      namaPemakalahDiseminasi = this.value;
      $$invalidate(38, namaPemakalahDiseminasi);
    }
    function input_input_handler_38() {
      namaPertemuanDiseminasi = this.value;
      $$invalidate(39, namaPertemuanDiseminasi);
    }
    function modal5_show_binding(value) {
      showModalDiseminasi = value;
      $$invalidate(73, showModalDiseminasi);
    }
    function input_input_handler_39() {
      tahunPublikasi = to_number(this.value);
      $$invalidate(40, tahunPublikasi);
    }
    function input_input_handler_40() {
      judulPublikasi = this.value;
      $$invalidate(41, judulPublikasi);
    }
    function input_input_handler_41() {
      namaPenulis = this.value;
      $$invalidate(42, namaPenulis);
    }
    function input_input_handler_42() {
      namaJurnal = this.value;
      $$invalidate(43, namaJurnal);
    }
    function input_input_handler_43() {
      impactFactor = this.value;
      $$invalidate(44, impactFactor);
    }
    function modal6_show_binding(value) {
      showModalPublikasi = value;
      $$invalidate(74, showModalPublikasi);
    }
    function input_input_handler_44() {
      tahunBuku = to_number(this.value);
      $$invalidate(45, tahunBuku);
    }
    function input_input_handler_45() {
      JudulBuku = this.value;
      $$invalidate(46, JudulBuku);
    }
    function input_input_handler_46() {
      namaPenulisBuku = this.value;
      $$invalidate(47, namaPenulisBuku);
    }
    function input_input_handler_47() {
      PenerbitBuku = this.value;
      $$invalidate(48, PenerbitBuku);
    }
    function input_input_handler_48() {
      Isbn = this.value;
      $$invalidate(49, Isbn);
    }
    function modal7_show_binding(value) {
      showModalPenulisanBuku = value;
      $$invalidate(75, showModalPenulisanBuku);
    }
    function input_input_handler_49() {
      tahunHKI = to_number(this.value);
      $$invalidate(50, tahunHKI);
    }
    function input_input_handler_50() {
      JudulHKI = this.value;
      $$invalidate(51, JudulHKI);
    }
    function input_input_handler_51() {
      namaPenulisHKI = this.value;
      $$invalidate(52, namaPenulisHKI);
    }
    function input_input_handler_52() {
      jenisHKI = this.value;
      $$invalidate(53, jenisHKI);
    }
    function input_input_handler_53() {
      noHKI = this.value;
      $$invalidate(54, noHKI);
    }
    function modal8_show_binding(value) {
      showModalHKI = value;
      $$invalidate(76, showModalHKI);
    }
    function modalerror_show_binding(value) {
      showModalErrorForm = value;
      $$invalidate(77, showModalErrorForm);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(78, showModalChecked);
    }
    return [
      vmataKuliah,
      error,
      dataRPS1,
      dataRPS2,
      dataRPS3,
      nama_pertiS1,
      bidang_ilmuS1,
      tahunMasukS1,
      tahunLulusS1,
      judulSkripsi,
      nama_pertiS2,
      bidang_ilmuS2,
      tahunMasukS2,
      tahunLulusS2,
      judulTesis,
      nama_pertiS3,
      bidang_ilmuS3,
      tahunMasukS3,
      tahunLulusS3,
      judulDisertasi,
      dataPP,
      dataPM,
      dataPD,
      dataPPub,
      dataPPB,
      dataPHKI,
      biayaPP,
      tahunPenelitian,
      judulPenelitian,
      rolePenelitian,
      sumberDanaPenelitian,
      biayaPengmas,
      tahunPengmas,
      judulPengmas,
      rolePengmas,
      sumberDanaPengmas,
      tahunDiseminasi,
      judulDiseminasi,
      namaPemakalahDiseminasi,
      namaPertemuanDiseminasi,
      tahunPublikasi,
      judulPublikasi,
      namaPenulis,
      namaJurnal,
      impactFactor,
      tahunBuku,
      JudulBuku,
      namaPenulisBuku,
      PenerbitBuku,
      Isbn,
      tahunHKI,
      JudulHKI,
      namaPenulisHKI,
      jenisHKI,
      noHKI,
      namaLengkap,
      jabatanFungsional,
      nip,
      nidn,
      tempatLahir,
      tanggalLahir,
      alamatRumah,
      telpFaxRumah,
      nomorHandphone,
      alamatKantor,
      telpFaxKantor,
      email2,
      mataKuliah,
      showModalRiwayatPendidikanS1,
      showModalRiwayatPendidikanS2,
      showModalRiwayatPendidikanS3,
      showModalPenelitian,
      showModalPengmas,
      showModalDiseminasi,
      showModalPublikasi,
      showModalPenulisanBuku,
      showModalHKI,
      showModalErrorForm,
      showModalChecked,
      tab1,
      tab2,
      tab3,
      modalInputRiwayatPendidikanS1,
      modalInputRiwayatPendidikanS2,
      modalInputRiwayatPendidikanS3,
      clickModalPenelitian,
      clickModalPengmas,
      clickModalDiseminasi,
      clickModalPublikasi,
      clickModalPenulisanBuku,
      clickModalHKI,
      simpanIdentitas,
      simpanRP_S1,
      simpanRP_S2,
      simpanRP_S3,
      simpanPP,
      simpanPM,
      simpanPD,
      simpanPPublikasi,
      simpanPPB,
      simpanPHKI,
      clicktab1,
      clicktab2,
      clicktab3,
      addMatkul,
      delrowRPS1,
      delrowRPS2,
      delrowRPS3,
      delrowPP,
      delrowPM,
      delrowPD,
      delrowPPub,
      delrowPPB,
      delrowPHKI,
      deleteMatkul,
      input_input_handler,
      select_change_handler,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      input_input_handler_6,
      input_input_handler_7,
      input_input_handler_8,
      input_input_handler_9,
      input_input_handler_10,
      input_input_handler_11,
      input_input_handler_12,
      input_input_handler_13,
      input_input_handler_14,
      input_input_handler_15,
      input_input_handler_16,
      modal0_show_binding,
      input_input_handler_17,
      input_input_handler_18,
      input_input_handler_19,
      input_input_handler_20,
      input_input_handler_21,
      modal1_show_binding,
      input_input_handler_22,
      input_input_handler_23,
      input_input_handler_24,
      input_input_handler_25,
      input_input_handler_26,
      modal2_show_binding,
      input_input_handler_27,
      input_input_handler_28,
      select_change_handler_1,
      input_input_handler_29,
      input_input_handler_30,
      keyup_handler,
      modal3_show_binding,
      input_input_handler_31,
      input_input_handler_32,
      select_change_handler_2,
      input_input_handler_33,
      input_input_handler_34,
      keyup_handler_1,
      modal4_show_binding,
      input_input_handler_35,
      input_input_handler_36,
      input_input_handler_37,
      input_input_handler_38,
      modal5_show_binding,
      input_input_handler_39,
      input_input_handler_40,
      input_input_handler_41,
      input_input_handler_42,
      input_input_handler_43,
      modal6_show_binding,
      input_input_handler_44,
      input_input_handler_45,
      input_input_handler_46,
      input_input_handler_47,
      input_input_handler_48,
      modal7_show_binding,
      input_input_handler_49,
      input_input_handler_50,
      input_input_handler_51,
      input_input_handler_52,
      input_input_handler_53,
      modal8_show_binding,
      modalerror_show_binding,
      modalchecked_show_binding
    ];
  }
  var Profile2 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance35, create_fragment42, safe_not_equal, {}, null, [-1, -1, -1, -1, -1, -1, -1, -1]);
    }
  };
  var profile_default2 = Profile2;

  // src/pages/dosen/proposalhibaheksternal.svelte
  init_define_process();

  // src/libs/ArticleError.svelte
  init_define_process();
  function create_fragment43(ctx) {
    let article2;
    let article_intro;
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[1].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[0],
      null
    );
    return {
      c() {
        article2 = element("article");
        if (default_slot)
          default_slot.c();
        attr(article2, "class", "svelte-1okqpjj");
      },
      m(target, anchor) {
        insert(target, article2, anchor);
        if (default_slot) {
          default_slot.m(article2, null);
        }
        current = true;
      },
      p(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          1)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[0],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[0]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[0],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        if (local) {
          if (!article_intro) {
            add_render_callback(() => {
              article_intro = create_in_transition(article2, fade, {});
              article_intro.start();
            });
          }
        }
        current = true;
      },
      o(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(article2);
        }
        if (default_slot)
          default_slot.d(detaching);
      }
    };
  }
  function instance36($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    $$self.$$set = ($$props2) => {
      if ("$$scope" in $$props2)
        $$invalidate(0, $$scope = $$props2.$$scope);
    };
    return [$$scope, slots];
  }
  var ArticleError = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance36, create_fragment43, safe_not_equal, {});
    }
  };
  var ArticleError_default = ArticleError;

  // src/pages/dosen/proposalhibaheksternal.svelte
  var { Boolean: Boolean_14 } = globals;
  function get_each_context18(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[55] = list[i];
    child_ctx[57] = i;
    return child_ctx;
  }
  function get_each_context_110(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[58] = list[i];
    return child_ctx;
  }
  function get_each_context_28(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[61] = list[i];
    return child_ctx;
  }
  function get_each_context_37(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[64] = list[i];
    return child_ctx;
  }
  function get_each_context_47(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[67] = list[i];
    return child_ctx;
  }
  function get_each_context_57(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[70] = list[i];
    return child_ctx;
  }
  function get_each_context_67(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[73] = list[i];
    return child_ctx;
  }
  function get_each_context_77(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[76] = list[i];
    return child_ctx;
  }
  function get_each_context_87(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[79] = list[i];
    return child_ctx;
  }
  function get_each_context_97(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[82] = list[i];
    return child_ctx;
  }
  function get_each_context_105(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[85] = list[i];
    child_ctx[87] = i;
    return child_ctx;
  }
  function create_if_block_357(ctx) {
    let articleerror;
    let current;
    articleerror = new ArticleError_default({
      props: {
        $$slots: { default: [create_default_slot_165] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(articleerror.$$.fragment);
      },
      m(target, anchor) {
        mount_component(articleerror, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const articleerror_changes = {};
        if (dirty[2] & /*$$scope*/
        67108864) {
          articleerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        articleerror.$set(articleerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(articleerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(articleerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(articleerror, detaching);
      }
    };
  }
  function create_if_block23(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_218] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*isLoading, tab2, tab1, biodataAnggota, anggotaTim, error, items, $kontrakFile, $ppmFile, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, myAbstract, judul*/
        2097132 | dirty[2] & /*$$scope*/
        67108864) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_default_slot_165(ctx) {
    let p0;
    let t1;
    let p1;
    return {
      c() {
        p0 = element("p");
        p0.textContent = "Pendaftaran Sedang Ditutup";
        t1 = space();
        p1 = element("p");
        p1.textContent = "Pendaftaran Proposal Hibah Eksternal sedang ditutup tunggu periode\n         selanjutnya dibuka atau hubungi LPPM UISI untuk informasi lebih lanjut.";
        attr(p0, "class", "title is-3");
        attr(p1, "class", "subtitle is-6");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
      }
    };
  }
  function create_if_block_158(ctx) {
    let div;
    let field0;
    let t0;
    let field1;
    let t1;
    let hr;
    let t2;
    let field2;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let field9;
    let t10;
    let field10;
    let t11;
    let field11;
    let t12;
    let t13;
    let br;
    let t14;
    let table;
    let thead;
    let t19;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_156] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_146] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_136] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_127] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_1111] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_106] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_96] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_87] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_77] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_614] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_515] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "File Kontrak",
        $$slots: { default: [create_default_slot_416] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*items*/
      ctx[15].length && create_if_block_188(ctx)
    );
    let if_block1 = (
      /*anggotaTim*/
      ctx[13].length > 0 && create_if_block_168(ctx)
    );
    return {
      c() {
        div = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        hr = element("hr");
        t2 = space();
        create_component(field2.$$.fragment);
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        create_component(field9.$$.fragment);
        t10 = space();
        create_component(field10.$$.fragment);
        t11 = space();
        create_component(field11.$$.fragment);
        t12 = space();
        if (if_block0)
          if_block0.c();
        t13 = space();
        br = element("br");
        t14 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t19 = space();
        tbody = element("tbody");
        if (if_block1)
          if_block1.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        mount_component(field0, div, null);
        append(div, t0);
        mount_component(field1, div, null);
        append(div, t1);
        append(div, hr);
        append(div, t2);
        mount_component(field2, div, null);
        append(div, t3);
        mount_component(field3, div, null);
        append(div, t4);
        mount_component(field4, div, null);
        append(div, t5);
        mount_component(field5, div, null);
        append(div, t6);
        mount_component(field6, div, null);
        append(div, t7);
        mount_component(field7, div, null);
        append(div, t8);
        mount_component(field8, div, null);
        append(div, t9);
        mount_component(field9, div, null);
        append(div, t10);
        mount_component(field10, div, null);
        append(div, t11);
        mount_component(field11, div, null);
        append(div, t12);
        if (if_block0)
          if_block0.m(div, null);
        append(div, t13);
        append(div, br);
        append(div, t14);
        append(div, table);
        append(table, thead);
        append(table, t19);
        append(table, tbody);
        if (if_block1)
          if_block1.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, judul*/
        67584 | dirty[2] & /*$$scope*/
        67108864) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, myAbstract*/
        65544 | dirty[2] & /*$$scope*/
        67108864) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        66048 | dirty[2] & /*$$scope*/
        67108864) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        65792 | dirty[2] & /*$$scope*/
        67108864) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        256 | dirty[2] & /*$$scope*/
        67108864) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        65568 | dirty[2] & /*$$scope*/
        67108864) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, topik*/
        69632 | dirty[2] & /*$$scope*/
        67108864) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        66560 | dirty[2] & /*$$scope*/
        67108864) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        65664 | dirty[2] & /*$$scope*/
        67108864) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        65600 | dirty[2] & /*$$scope*/
        67108864) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error, $ppmFile*/
        1114112 | dirty[2] & /*$$scope*/
        67108864) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error, $kontrakFile*/
        589824 | dirty[2] & /*$$scope*/
        67108864) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*items*/
          ctx2[15].length
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*items*/
            32768) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_188(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(div, t13);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*anggotaTim*/
          ctx2[13].length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            8192) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_168(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function create_if_block_348(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_156(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].judul && create_if_block_348(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "judul");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[28]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        2048 && input.value !== /*judul*/
        ctx2[11]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[16].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_348(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_338(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].myAbstract + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].myAbstract + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_146(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].myAbstract && create_if_block_338(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "id", "myAbstract");
        attr(textarea, "class", "textarea");
        attr(textarea, "placeholder", "Masukkan abstrak");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*myAbstract*/
          ctx[3]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[29]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*myAbstract*/
        8) {
          set_input_value(
            textarea,
            /*myAbstract*/
            ctx2[3]
          );
        }
        if (
          /*error*/
          ctx2[16].myAbstract
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_338(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3210(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_136(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].jenisProposal && create_if_block_3210(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisProposal");
        if (
          /*jenisProposal*/
          ctx[9] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[30].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[9],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[30]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        512) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3210(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3112(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_127(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].jenisKegiatan && create_if_block_3112(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisKegiatan");
        if (
          /*jenisKegiatan*/
          ctx[8] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[31].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[8],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[31]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        256) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3112(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_25(ctx) {
    let input;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        input.disabled = true;
      },
      m(target, anchor) {
        insert(target, input, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
      }
    };
  }
  function create_if_block_308(ctx) {
    let input;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Pengabdian Masyarakat Hibah Eksternal");
        input.disabled = true;
      },
      m(target, anchor) {
        insert(target, input, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
      }
    };
  }
  function create_if_block_298(ctx) {
    let input;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Riset Eksternal");
        input.disabled = true;
      },
      m(target, anchor) {
        insert(target, input, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
      }
    };
  }
  function create_default_slot_1111(ctx) {
    let if_block_anchor;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[8] === "Penelitian"
      )
        return create_if_block_298;
      if (
        /*jenisKegiatan*/
        ctx2[8] === "Pengabdian Masyarakat"
      )
        return create_if_block_308;
      return create_else_block_25;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function create_if_block_288(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_106(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].kelompokKeahlian && create_if_block_288(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "kelompokKeahlian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan kelompok keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[5]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[32]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        32 && input.value !== /*kelompokKeahlian*/
        ctx2[5]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[5]
          );
        }
        if (
          /*error*/
          ctx2[16].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_288(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_278(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_96(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].topik && create_if_block_278(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "topik");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[33]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        4096 && input.value !== /*topik*/
        ctx2[12]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[16].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_278(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_268(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_87(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].tanggalMulai && create_if_block_268(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalMulai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[34]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        1024) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[16].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_268(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_258(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_77(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].tanggalSelesai && create_if_block_258(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalSelesai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[7]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[35]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        128) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[16].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_258(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_248(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_614(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].biayaPenelitian && create_if_block_248(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "biayaPenelitian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan biaya penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[6]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_5*/
              ctx[36]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[37]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        64 && input.value !== /*biayaPenelitian*/
        ctx2[6]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[16].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_248(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_113(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_239(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[20].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$ppmFile*/
        1048576 && t_value !== (t_value = /*$ppmFile*/
        ctx2[20].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2210(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_515(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_2(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[20]?.name
      )
        return create_if_block_239;
      return create_else_block_113;
    }
    let current_block_type = select_block_type_2(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[16].fileProposal && create_if_block_2210(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePpmChange*/
            ctx[25]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[16].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_2210(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block13(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2112(ctx) {
    let span;
    let t_value = (
      /*$kontrakFile*/
      ctx[19].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$kontrakFile*/
        524288 && t_value !== (t_value = /*$kontrakFile*/
        ctx2[19].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_208(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].fileKontrak + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].fileKontrak + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_416(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_3(ctx2, dirty) {
      if (
        /*$kontrakFile*/
        ctx2[19]?.name
      )
        return create_if_block_2112;
      return create_else_block13;
    }
    let current_block_type = select_block_type_3(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[16].fileKontrak && create_if_block_208(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "fileKontrak");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileKontrak");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*fileKontrakChange*/
            ctx[26]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[16].fileKontrak
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_208(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_188(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_317] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, items, anggotaTim*/
        106496 | dirty[2] & /*$$scope*/
        67108864) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_198(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_317(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[38](value);
    }
    let select_props = {
      id: "anggotaTim",
      start: "2",
      items: (
        /*items*/
        ctx[15]
      )
    };
    if (
      /*anggotaTim*/
      ctx[13] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[13];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[16].anggotaTim && create_if_block_198(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        32768)
          select_changes.items = /*items*/
          ctx2[15];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        8192) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[13];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[16].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_198(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_168(ctx) {
    let each_1_anchor;
    let current;
    let each_value_10 = ensure_array_like(
      /*anggotaTim*/
      ctx[13]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_105(get_each_context_105(ctx, each_value_10, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim, deleteMember*/
        134225920) {
          each_value_10 = ensure_array_like(
            /*anggotaTim*/
            ctx2[13]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_105(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_105(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_10.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_10.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_14);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_178(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[85].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[27]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        8192 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[85].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_105(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[85].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[85].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[87] > 0 && create_if_block_178(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[87] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        8192) && t1_value !== (t1_value = /*member*/
        ctx2[85].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        8192) && t3_value !== (t3_value = /*member*/
        ctx2[85].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_330(ctx) {
    let div;
    let t1;
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[14].length > 0 && create_if_block_421(ctx)
    );
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Pastikan data yang digunakan merupakan data terbaru.</p>`;
        t1 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        insert(target, t1, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[14].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_421(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_421(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[14]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block18(get_each_context18(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[14]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context18(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block18(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_14);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_520(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let hr1;
    let t18;
    let h51;
    let t20;
    let table0;
    let thead0;
    let t30;
    let tbody0;
    let t31;
    let table1;
    let thead1;
    let t41;
    let tbody1;
    let t42;
    let table2;
    let thead2;
    let t52;
    let tbody2;
    let t53;
    let hr2;
    let t54;
    let h52;
    let t56;
    let table3;
    let thead3;
    let t66;
    let tbody3;
    let t67;
    let hr3;
    let t68;
    let h53;
    let t70;
    let table4;
    let thead4;
    let t80;
    let tbody4;
    let t81;
    let hr4;
    let t82;
    let h54;
    let t84;
    let table5;
    let thead5;
    let t92;
    let tbody5;
    let t93;
    let hr5;
    let t94;
    let h55;
    let t96;
    let table6;
    let thead6;
    let t106;
    let tbody6;
    let t107;
    let hr6;
    let t108;
    let h56;
    let t110;
    let table7;
    let thead7;
    let t120;
    let tbody7;
    let t121;
    let hr7;
    let t122;
    let h57;
    let t124;
    let table8;
    let thead8;
    let t134;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[55].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[55].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[55].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[55].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[55].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[55].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[55].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[55].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[55].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[55].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[55].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[55].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[55].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    let if_block0 = (
      /*user*/
      ctx[55].RPS1.length > 0 && create_if_block_148(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[55].RPS2.length > 0 && create_if_block_139(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[55].RPS3.length > 0 && create_if_block_1211(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[55].Ppenelitian.length > 0 && create_if_block_1114(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[55].Ppengmas.length > 0 && create_if_block_108(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[55].Pdiseminasi.length > 0 && create_if_block_98(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[55].Ppublikasi.length > 0 && create_if_block_88(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[55].PpenulisanBuku.length > 0 && create_if_block_715(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[55].Phki.length > 0 && create_if_block_620(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        hr1 = element("hr");
        t18 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t20 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t30 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t31 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t41 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t42 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t52 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t53 = space();
        hr2 = element("hr");
        t54 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t56 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t66 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t67 = space();
        hr3 = element("hr");
        t68 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t80 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t81 = space();
        hr4 = element("hr");
        t82 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t84 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t92 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t93 = space();
        hr5 = element("hr");
        t94 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan\n                        Proceeding)";
        t96 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                 Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t106 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t107 = space();
        hr6 = element("hr");
        t108 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t110 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t120 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t121 = space();
        hr7 = element("hr");
        t122 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t124 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t134 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        insert(target, t17, anchor);
        insert(target, hr1, anchor);
        insert(target, t18, anchor);
        insert(target, h51, anchor);
        insert(target, t20, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t30);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t31, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t41);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t42, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t52);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t53, anchor);
        insert(target, hr2, anchor);
        insert(target, t54, anchor);
        insert(target, h52, anchor);
        insert(target, t56, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t66);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t67, anchor);
        insert(target, hr3, anchor);
        insert(target, t68, anchor);
        insert(target, h53, anchor);
        insert(target, t70, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t80);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t81, anchor);
        insert(target, hr4, anchor);
        insert(target, t82, anchor);
        insert(target, h54, anchor);
        insert(target, t84, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t92);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t93, anchor);
        insert(target, hr5, anchor);
        insert(target, t94, anchor);
        insert(target, h55, anchor);
        insert(target, t96, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t106);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t107, anchor);
        insert(target, hr6, anchor);
        insert(target, t108, anchor);
        insert(target, h56, anchor);
        insert(target, t110, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t120);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t121, anchor);
        insert(target, hr7, anchor);
        insert(target, t122, anchor);
        insert(target, h57, anchor);
        insert(target, t124, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t134);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview0_changes.content = /*user*/
          ctx2[55].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview1_changes.content = /*user*/
          ctx2[55].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview2_changes.content = /*user*/
          ctx2[55].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview3_changes.content = /*user*/
          ctx2[55].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview4_changes.content = /*user*/
          ctx2[55].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview5_changes.content = /*user*/
          ctx2[55].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview6_changes.content = /*user*/
          ctx2[55].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview7_changes.content = /*user*/
          ctx2[55].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview8_changes.content = /*user*/
          ctx2[55].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview9_changes.content = /*user*/
          ctx2[55].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview10_changes.content = /*user*/
          ctx2[55].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview11_changes.content = /*user*/
          ctx2[55].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview12_changes.content = /*user*/
          ctx2[55].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[55].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_148(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[55].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_139(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[55].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_1211(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[55].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_1114(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[55].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_108(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[55].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_98(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[55].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_88(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[55].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_715(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[55].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_620(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t17);
          detach(hr1);
          detach(t18);
          detach(h51);
          detach(t20);
          detach(table0);
          detach(t31);
          detach(table1);
          detach(t42);
          detach(table2);
          detach(t53);
          detach(hr2);
          detach(t54);
          detach(h52);
          detach(t56);
          detach(table3);
          detach(t67);
          detach(hr3);
          detach(t68);
          detach(h53);
          detach(t70);
          detach(table4);
          detach(t81);
          detach(hr4);
          detach(t82);
          detach(h54);
          detach(t84);
          detach(table5);
          detach(t93);
          detach(hr5);
          detach(t94);
          detach(h55);
          detach(t96);
          detach(table6);
          detach(t107);
          detach(hr6);
          detach(t108);
          detach(h56);
          detach(t110);
          detach(table7);
          detach(t121);
          detach(hr7);
          detach(t122);
          detach(h57);
          detach(t124);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_148(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[55].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_97(get_each_context_97(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[55].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_97(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_97(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_97(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[82].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[82].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[82].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[82].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[82].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS1*/
        ctx2[82].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS1*/
        ctx2[82].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS1*/
        ctx2[82].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS1*/
        ctx2[82].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS1*/
        ctx2[82].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_139(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[55].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_87(get_each_context_87(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[55].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_87(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_87(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_87(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[79].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[79].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[79].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[79].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[79].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS2*/
        ctx2[79].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS2*/
        ctx2[79].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS2*/
        ctx2[79].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS2*/
        ctx2[79].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS2*/
        ctx2[79].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1211(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[55].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_77(get_each_context_77(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[55].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_77(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_77(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_77(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[76].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[76].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[76].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[76].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[76].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS3*/
        ctx2[76].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS3*/
        ctx2[76].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS3*/
        ctx2[76].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS3*/
        ctx2[76].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS3*/
        ctx2[76].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1114(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[55].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_67(get_each_context_67(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[55].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_67(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_67(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_67(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[73].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[73].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[73].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[73].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[73].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PP*/
        ctx2[73].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PP*/
        ctx2[73].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PP*/
        ctx2[73].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PP*/
        ctx2[73].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PP*/
        ctx2[73].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_108(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[55].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_57(get_each_context_57(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[55].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_57(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_57(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_57(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[70].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[70].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[70].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[70].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[70].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PM*/
        ctx2[70].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PM*/
        ctx2[70].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PM*/
        ctx2[70].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PM*/
        ctx2[70].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PM*/
        ctx2[70].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_98(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[55].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_47(get_each_context_47(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[55].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_47(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_47(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_47(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[67].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[67].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[67].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[67].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PD*/
        ctx2[67].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PD*/
        ctx2[67].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PD*/
        ctx2[67].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PD*/
        ctx2[67].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_88(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[55].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_37(get_each_context_37(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[55].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_37(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_37(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_37(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[64].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[64].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[64].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[64].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[64].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PPub*/
        ctx2[64].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PPub*/
        ctx2[64].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PPub*/
        ctx2[64].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PPub*/
        ctx2[64].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PPub*/
        ctx2[64].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_715(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[55].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_28(get_each_context_28(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[55].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_28(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_28(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_28(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[61].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[61].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[61].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[61].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[61].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PPB*/
        ctx2[61].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PPB*/
        ctx2[61].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PPB*/
        ctx2[61].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PPB*/
        ctx2[61].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PPB*/
        ctx2[61].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_620(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[55].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_110(get_each_context_110(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[55].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_110(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_110(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_110(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[58].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[58].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[58].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[58].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[58].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PHKI*/
        ctx2[58].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PHKI*/
        ctx2[58].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PHKI*/
        ctx2[58].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PHKI*/
        ctx2[58].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PHKI*/
        ctx2[58].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block18(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[55].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[14][
        /*index*/
        ctx[57]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler() {
      return (
        /*click_handler*/
        ctx[39](
          /*index*/
          ctx[57]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[14][
        /*index*/
        ctx[57]
      ].profileVisible && create_if_block_520(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-1iurio9");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        16384) && t1_value !== (t1_value = /*user*/
        ctx[55].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        16384) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[14][
          /*index*/
          ctx[57]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[14][
            /*index*/
            ctx[57]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_520(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_231(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Next";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*clicktab2*/
            ctx[24]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_131(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Back";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Simpan";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Submit";
        attr(button0, "class", "button");
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info is-light");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clicktab1*/
              ctx[23]
            ),
            listen(
              button1,
              "click",
              /*simpanProposal*/
              ctx[21]
            ),
            listen(
              button2,
              "click",
              /*submitProposal*/
              ctx[22]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_218(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div2;
    let ul;
    let li0;
    let span1;
    let span0;
    let icon0;
    let t3;
    let div0;
    let t7;
    let li1;
    let span3;
    let span2;
    let icon1;
    let t8;
    let div1;
    let t12;
    let t13;
    let t14;
    let t15;
    let if_block3_anchor;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: penelitian } });
    icon1 = new Icon_default({
      props: { id: "accountEdit", src: accountEdit }
    });
    let if_block0 = (
      /*tab1*/
      ctx[17] === true && create_if_block_158(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[18] === true && create_if_block_330(ctx)
    );
    let if_block2 = (
      /*tab1*/
      ctx[17] === true && create_if_block_231(ctx)
    );
    let if_block3 = (
      /*tab2*/
      ctx[18] === true && create_if_block_131(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Proposal PPM Hibah Eksternal";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div2 = element("div");
        ul = element("ul");
        li0 = element("li");
        span1 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        div0 = element("div");
        div0.innerHTML = `<p class="is-size-5"><b>Step 1</b></p> <p class="is-size-6">Proposal</p>`;
        t7 = space();
        li1 = element("li");
        span3 = element("span");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t8 = space();
        div1 = element("div");
        div1.innerHTML = `<p class="is-size-5"><b>Step 2</b></p> <p class="is-size-6">Biodata Peneliti</p>`;
        t12 = space();
        if (if_block0)
          if_block0.c();
        t13 = space();
        if (if_block1)
          if_block1.c();
        t14 = space();
        if (if_block2)
          if_block2.c();
        t15 = space();
        if (if_block3)
          if_block3.c();
        if_block3_anchor = empty();
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(span1, "class", "steps-marker");
        attr(div0, "class", "steps-content");
        attr(li0, "data-step", "1");
        attr(li0, "class", "steps-segment");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[17]
        );
        attr(span2, "class", "icon");
        attr(span3, "class", "steps-marker");
        attr(div1, "class", "steps-content");
        attr(li1, "data-step", "2");
        attr(li1, "class", "steps-segment");
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[18]
        );
        attr(ul, "class", "steps is-medium has-content-centered svelte-1iurio9");
        attr(div2, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div2, anchor);
        append(div2, ul);
        append(ul, li0);
        append(li0, span1);
        append(span1, span0);
        mount_component(icon0, span0, null);
        append(li0, t3);
        append(li0, div0);
        append(ul, t7);
        append(ul, li1);
        append(li1, span3);
        append(span3, span2);
        mount_component(icon1, span2, null);
        append(li1, t8);
        append(li1, div1);
        insert(target, t12, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t13, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t14, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t15, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, if_block3_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[23]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[24]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*tab1*/
        131072) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[17]
          );
        }
        if (!current || dirty[0] & /*tab2*/
        262144) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[18]
          );
        }
        if (
          /*tab1*/
          ctx2[17] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*tab1*/
            131072) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_158(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t13.parentNode, t13);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[18] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*tab2*/
            262144) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_330(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t14.parentNode, t14);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab1*/
          ctx2[17] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_231(ctx2);
            if_block2.c();
            if_block2.m(t15.parentNode, t15);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*tab2*/
          ctx2[18] === true
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_131(ctx2);
            if_block3.c();
            if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div2);
          detach(t12);
          detach(t13);
          detach(t14);
          detach(t15);
          detach(if_block3_anchor);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_128(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form proposal untuk ke step selanjutnya!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot19(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Pastikan untuk melengkapi Identitas Diri semua anggota";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment44(ctx) {
    let current_block_type_index;
    let if_block;
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let current;
    const if_block_creators = [create_if_block23, create_if_block_357];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*pendaftaranHibahEksternal*/
        ctx2[4] === 1
      )
        return 0;
      if (
        /*pendaftaranHibahEksternal*/
        ctx2[4] === 0
      )
        return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx, [-1, -1, -1]))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    function modalerror0_show_binding(value) {
      ctx[40](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_128] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorProposal*/
      ctx[1] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorProposal*/
      ctx[1];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[41](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot19] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorIdentitas*/
      ctx[0] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorIdentitas*/
      ctx[0];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
      },
      m(target, anchor) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(target, anchor);
        }
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx2, dirty);
          }
        } else {
          if (if_block) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index];
            if (!if_block) {
              if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block.c();
            } else {
              if_block.p(ctx2, dirty);
            }
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          } else {
            if_block = null;
          }
        }
        const modalerror0_changes = {};
        if (dirty[2] & /*$$scope*/
        67108864) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalErrorProposal*/
        2) {
          updating_show = true;
          modalerror0_changes.show = /*showModalErrorProposal*/
          ctx2[1];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[2] & /*$$scope*/
        67108864) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorIdentitas*/
        1) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorIdentitas*/
          ctx2[0];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d(detaching);
        }
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
      }
    };
  }
  function isObjectEmpty3(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function formatRupiah6(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance37($$self, $$props, $$invalidate) {
    let $kontrakFile;
    let $ppmFile;
    let $route;
    let $apiURL;
    component_subscribe($$self, kontrakFile, ($$value) => $$invalidate(19, $kontrakFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(20, $ppmFile = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(47, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(48, $apiURL = $$value));
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    const localStorage_id = localStorage.getItem("id");
    const accessToken = localStorage.getItem("token");
    const id = Number(localStorage.getItem("id"));
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let showModalErrorIdentitas = false;
    let showModalErrorProposal = false;
    let isLoading = false;
    let myAbstract;
    let filePpm;
    let ppmFileName2;
    let rabFileName2;
    let kontrakFileName2;
    let pendaftaranHibahEksternal2;
    let kelompokKeahlian = "";
    let biayaPenelitian = "";
    let tanggalSelesai = "";
    let jenisKegiatan = "";
    let jenisProposal = "";
    let tanggalMulai = "";
    let jenisSkema = "";
    let judul = "";
    let topik = "";
    let anggotaTim = [
      {
        value: localStorage_id,
        label: localStorage_namaLengkap,
        role: "Ketua"
      }
    ];
    let biodataAnggota = [];
    let items = [];
    let error = {};
    onMount(async () => {
      $$invalidate(2, isLoading = false);
      let randomChar = "";
      let resultGenerateRandomChar = "";
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let i = 0; i < 10; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultGenerateRandomChar += characters.charAt(randomIndex);
      }
      randomChar = resultGenerateRandomChar;
      ppmFileName2 = id + "_Proposal PPM_" + randomChar;
      rabFileName2 = id + "_RAB PPM_" + randomChar;
      kontrakFileName2 = id + "_Kontrak PPM Eksternal_" + randomChar;
      const response = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          listUser = result;
          $$invalidate(15, items = []);
          for (const [key, value] of Object.entries(listUser)) {
            items.push({
              value: value.uid,
              label: value.nama_lengkap
            });
          }
        } else {
          console.log(response);
        }
      }
      const responseWP = await fetch($apiURL + "/waktuPendaftaranPPMInternal", { method: "GET", headers });
      const resultWP = await responseWP.json();
      if (responseWP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseWP.ok) {
          $$invalidate(4, pendaftaranHibahEksternal2 = resultWP.buka_pendaftaran_hibah_eksternal);
        } else {
          console.log(responseWP);
        }
      }
    });
    async function getBiodataAnggota() {
      let ids = anggotaTim.map((anggota) => anggota.value);
      let promises = ids.map(async (idAnggota) => {
        try {
          const profileResponse = await fetch($apiURL + "/user/" + idAnggota, { method: "GET", headers });
          if (profileResponse.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!profileResponse.ok) {
            throw new Error(`Failed to fetch profile for ID ${idAnggota}`);
          }
          const profileResult = await profileResponse.json();
          const RPS1Response = await fetch($apiURL + "/riwayatPendidikanS1/" + idAnggota, { method: "GET", headers });
          if (RPS1Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS1Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S1 for ID ${idAnggota}`);
          }
          const RPS1Result = await RPS1Response.json();
          const RPS2Response = await fetch($apiURL + "/riwayatPendidikanS2/" + idAnggota, { method: "GET", headers });
          if (RPS2Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS2Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S2 for ID ${idAnggota}`);
          }
          const RPS2Result = await RPS2Response.json();
          const RPS3Response = await fetch($apiURL + "/riwayatPendidikanS3/" + idAnggota, { method: "GET", headers });
          if (RPS3Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS3Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const RPS3Result = await RPS3Response.json();
          const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + idAnggota, { method: "GET", headers });
          if (responsePP.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePP.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPP = await responsePP.json();
          const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + idAnggota, { method: "GET", headers });
          if (responsePM.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePM.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPM = await responsePM.json();
          const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + idAnggota, { method: "GET", headers });
          if (responsePD.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePD.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPD = await responsePD.json();
          const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + idAnggota, { method: "GET", headers });
          if (responsePPub.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPub.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPub = await responsePPub.json();
          const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idAnggota, { method: "GET", headers });
          if (responsePPB.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPB.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPB = await responsePPB.json();
          const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + idAnggota, { method: "GET", headers });
          if (responsePHKI.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePHKI.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPHKI = await responsePHKI.json();
          return {
            profile: profileResult,
            RPS1: RPS1Result.dbData,
            RPS2: RPS2Result.dbData,
            RPS3: RPS3Result.dbData,
            Ppenelitian: resultPP.dbData,
            Ppengmas: resultPM.dbData,
            Pdiseminasi: resultPD.dbData,
            Ppublikasi: resultPPub.dbData,
            PpenulisanBuku: resultPPB.dbData,
            Phki: resultPHKI.dbData
          };
        } catch (error2) {
          console.error(`Error fetching data for ID ${idAnggota}:`, error2);
          return {
            profile: null,
            RPS1: [],
            RPS2: [],
            RPS3: [],
            Ppenelitian: [],
            Ppengmas: [],
            Pdiseminasi: [],
            Ppublikasi: [],
            PpenulisanBuku: [],
            Phki: [],
            error: error2.message
          };
        }
      });
      $$invalidate(14, biodataAnggota = await Promise.all(promises.filter(Boolean)));
    }
    async function simpanProposal() {
      $$invalidate(16, error = {});
      $$invalidate(2, isLoading = true);
      const readerPpm = new FileReader();
      const readerKontrakPpm = new FileReader();
      if (jenisKegiatan === "Penelitian") {
        jenisSkema = "Riset Eksternal";
      } else if (jenisKegiatan === "Pengabdian Masyarakat") {
        jenisSkema = "Pengabdian Masyarakat Hibah Eksternal";
      }
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 0,
        rabFileName: rabFileName2,
        ppmFileName: ppmFileName2,
        kontrakFileName: kontrakFileName2
      };
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const cekFileProposal = new Promise((resolve, reject) => {
        if (!filePpm) {
          resolve("No fileProposal selected");
          return;
        }
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName: ppmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
      });
      const cekFileKontrakPPM = new Promise((resolve, reject) => {
        if (!fileKontrak) {
          resolve("No fileKontrak selected");
          return;
        }
        readerKontrakPpm.onloadend = async () => {
          const base64Data = readerKontrakPpm.result.split(",")[1];
          const payloadKontrakPpmFile = {
            fileKontrak: {
              name: fileKontrak.name,
              type: fileKontrak.type,
              data: base64Data
            },
            kontrakFileName: kontrakFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadKontrakPPMEksternal", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadKontrakPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerKontrakPpm.readAsDataURL(fileKontrak);
      });
      const cekDataProposalPPM = new Promise(async (resolve, reject) => {
        const responseProposal = await fetch($apiURL + "/pendaftaranPPMEksternal", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (responseProposal.status === 401) {
          location.pathname = "/tokenexpired";
          reject("Token expired");
        } else {
          if (responseProposal.ok) {
            resolve(resultProposal);
          } else {
            console.log(responseProposal.msg, error);
            reject("Error Submitting Data Proposal PPM");
          }
        }
      });
      try {
        await Promise.all([cekFileProposal, cekFileKontrakPPM, cekDataProposalPPM]);
      } finally {
        $$invalidate(2, isLoading = false);
        $route("/dosen/pendaftaran");
      }
    }
    async function submitProposal() {
      $$invalidate(16, error = {});
      $$invalidate(2, isLoading = true);
      const readerPpm = new FileReader();
      const readerKontrakPpm = new FileReader();
      if (jenisKegiatan === "Penelitian") {
        jenisSkema = "Riset Eksternal";
      } else if (jenisKegiatan === "Pengabdian Masyarakat") {
        jenisSkema = "Pengabdian Masyarakat Hibah Eksternal";
      }
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 2,
        ppmFileName: ppmFileName2,
        rabFileName: rabFileName2,
        kontrakFileName: kontrakFileName2
      };
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const cekFileProposal = new Promise((resolve, reject) => {
        if (!filePpm) {
          resolve("No fileProposal selected");
          return;
        }
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName: ppmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        if (filePpm)
          readerPpm.readAsDataURL(filePpm);
      });
      const cekFileKontrakPPM = new Promise((resolve, reject) => {
        if (!fileKontrak) {
          resolve("No fileKontrak selected");
          return;
        }
        readerKontrakPpm.onloadend = async () => {
          const base64Data = readerKontrakPpm.result.split(",")[1];
          const payloadKontrakPpmFile = {
            fileKontrak: {
              name: fileKontrak.name,
              type: fileKontrak.type,
              data: base64Data
            },
            kontrakFileName: kontrakFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadKontrakPPMEksternal", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadKontrakPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerKontrakPpm.readAsDataURL(fileKontrak);
      });
      const cekDataProposalPPM = new Promise(async (resolve, reject) => {
        const responseProposal = await fetch($apiURL + "/pendaftaranPPMEksternal", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (responseProposal.status === 401) {
          location.pathname = "/tokenexpired";
          reject("Token expired");
        } else {
          if (responseProposal.ok) {
            resolve(resultProposal);
          } else {
            console.log(responseProposal.msg, error);
            reject("Error Submitting Data Proposal PPM");
          }
        }
      });
      try {
        await Promise.all([cekFileProposal, cekFileKontrakPPM, cekDataProposalPPM]);
      } finally {
        $$invalidate(2, isLoading = false);
        $route("/dosen/pendaftaran");
      }
    }
    let tab1 = true;
    let tab2 = false;
    async function clicktab1() {
      if (!tab1) {
        $$invalidate(17, tab1 = true);
        $$invalidate(18, tab2 = false);
      }
    }
    async function clicktab2() {
      $$invalidate(16, error = {});
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        judul,
        myAbstract,
        ppmFileName: ppmFileName2,
        kontrakFileName: kontrakFileName2
      };
      for (const [key, value] of Object.entries(payloadProposal)) {
        if (!value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(16, error[key] = `This field is required`, error);
        }
      }
      if (isObjectEmpty3($kontrakFile)) {
        $$invalidate(16, error["fileKontrak"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(1, showModalErrorProposal = true);
      } else {
        if (!tab2) {
          await getBiodataAnggota();
          $$invalidate(17, tab1 = false);
          $$invalidate(18, tab2 = true);
        }
      }
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileKontrakChange(e) {
      fileKontrak = e.target.files[0];
      set_store_value(kontrakFile, $kontrakFile = e.target.files[0], $kontrakFile);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(13, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    function input_input_handler() {
      judul = this.value;
      $$invalidate(11, judul);
    }
    function textarea_input_handler() {
      myAbstract = this.value;
      $$invalidate(3, myAbstract);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(9, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(8, jenisKegiatan);
    }
    function input_input_handler_1() {
      kelompokKeahlian = this.value;
      $$invalidate(5, kelompokKeahlian);
    }
    function input_input_handler_2() {
      topik = this.value;
      $$invalidate(12, topik);
    }
    function input_input_handler_3() {
      tanggalMulai = this.value;
      $$invalidate(10, tanggalMulai);
    }
    function input_input_handler_4() {
      tanggalSelesai = this.value;
      $$invalidate(7, tanggalSelesai);
    }
    function input_input_handler_5() {
      biayaPenelitian = this.value;
      $$invalidate(6, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(6, biayaPenelitian = formatRupiah6(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(13, anggotaTim);
    }
    const click_handler = (index) => $$invalidate(14, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalErrorProposal = value;
      $$invalidate(1, showModalErrorProposal);
    }
    function modalerror1_show_binding(value) {
      showModalErrorIdentitas = value;
      $$invalidate(0, showModalErrorIdentitas);
    }
    return [
      showModalErrorIdentitas,
      showModalErrorProposal,
      isLoading,
      myAbstract,
      pendaftaranHibahEksternal2,
      kelompokKeahlian,
      biayaPenelitian,
      tanggalSelesai,
      jenisKegiatan,
      jenisProposal,
      tanggalMulai,
      judul,
      topik,
      anggotaTim,
      biodataAnggota,
      items,
      error,
      tab1,
      tab2,
      $kontrakFile,
      $ppmFile,
      simpanProposal,
      submitProposal,
      clicktab1,
      clicktab2,
      filePpmChange,
      fileKontrakChange,
      deleteMember,
      input_input_handler,
      textarea_input_handler,
      select_change_handler,
      select_change_handler_1,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      keyup_handler,
      select_result_binding,
      click_handler,
      modalerror0_show_binding,
      modalerror1_show_binding
    ];
  }
  var Proposalhibaheksternal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance37, create_fragment44, safe_not_equal, {}, null, [-1, -1, -1]);
    }
  };
  var proposalhibaheksternal_default = Proposalhibaheksternal;

  // src/pages/dosen/proposalhibahinternal.svelte
  init_define_process();
  var { Boolean: Boolean_15 } = globals;
  function get_each_context19(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[56] = list[i];
    child_ctx[58] = i;
    return child_ctx;
  }
  function get_each_context_111(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[59] = list[i];
    return child_ctx;
  }
  function get_each_context_29(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[62] = list[i];
    return child_ctx;
  }
  function get_each_context_38(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[65] = list[i];
    return child_ctx;
  }
  function get_each_context_48(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[68] = list[i];
    return child_ctx;
  }
  function get_each_context_58(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[71] = list[i];
    return child_ctx;
  }
  function get_each_context_68(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[74] = list[i];
    return child_ctx;
  }
  function get_each_context_78(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[77] = list[i];
    return child_ctx;
  }
  function get_each_context_88(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[80] = list[i];
    return child_ctx;
  }
  function get_each_context_98(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[83] = list[i];
    return child_ctx;
  }
  function get_each_context_106(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[86] = list[i];
    child_ctx[88] = i;
    return child_ctx;
  }
  function create_if_block_358(ctx) {
    let articleerror;
    let current;
    articleerror = new ArticleError_default({
      props: {
        $$slots: { default: [create_default_slot_166] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(articleerror.$$.fragment);
      },
      m(target, anchor) {
        mount_component(articleerror, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const articleerror_changes = {};
        if (dirty[2] & /*$$scope*/
        134217728) {
          articleerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        articleerror.$set(articleerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(articleerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(articleerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(articleerror, detaching);
      }
    };
  }
  function create_if_block24(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_219] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*isLoading, tab2, tab1, biodataAnggota, anggotaTim, error, items, $rabFile, $ppmFile, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisSkema, jenisKegiatan, jenisProposal, myAbstract, judul*/
        4194284 | dirty[2] & /*$$scope*/
        134217728) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_default_slot_166(ctx) {
    let p0;
    let t1;
    let p1;
    return {
      c() {
        p0 = element("p");
        p0.textContent = "Pendaftaran Sedang Ditutup";
        t1 = space();
        p1 = element("p");
        p1.textContent = "Pendaftaran Proposal Hibah Internal UISI sedang ditutup tunggu periode\n         selanjutnya dibuka atau hubungi LPPM UISI untuk informasi lebih lanjut.";
        attr(p0, "class", "title is-3");
        attr(p1, "class", "subtitle is-6");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
      }
    };
  }
  function create_if_block_159(ctx) {
    let div;
    let field0;
    let t0;
    let field1;
    let t1;
    let hr;
    let t2;
    let field2;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let field9;
    let t10;
    let field10;
    let t11;
    let field11;
    let t12;
    let t13;
    let br;
    let t14;
    let table;
    let thead;
    let t19;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_157] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_147] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_137] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_129] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_1112] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_107] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_97] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_88] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_78] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_615] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_516] },
        $$scope: { ctx }
      }
    });
    field11 = new Field_default({
      props: {
        name: "Rencana Anggaran Biaya",
        $$slots: { default: [create_default_slot_417] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*items*/
      ctx[16].length && create_if_block_189(ctx)
    );
    let if_block1 = (
      /*anggotaTim*/
      ctx[14].length > 0 && create_if_block_169(ctx)
    );
    return {
      c() {
        div = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        hr = element("hr");
        t2 = space();
        create_component(field2.$$.fragment);
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        create_component(field9.$$.fragment);
        t10 = space();
        create_component(field10.$$.fragment);
        t11 = space();
        create_component(field11.$$.fragment);
        t12 = space();
        if (if_block0)
          if_block0.c();
        t13 = space();
        br = element("br");
        t14 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t19 = space();
        tbody = element("tbody");
        if (if_block1)
          if_block1.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        mount_component(field0, div, null);
        append(div, t0);
        mount_component(field1, div, null);
        append(div, t1);
        append(div, hr);
        append(div, t2);
        mount_component(field2, div, null);
        append(div, t3);
        mount_component(field3, div, null);
        append(div, t4);
        mount_component(field4, div, null);
        append(div, t5);
        mount_component(field5, div, null);
        append(div, t6);
        mount_component(field6, div, null);
        append(div, t7);
        mount_component(field7, div, null);
        append(div, t8);
        mount_component(field8, div, null);
        append(div, t9);
        mount_component(field9, div, null);
        append(div, t10);
        mount_component(field10, div, null);
        append(div, t11);
        mount_component(field11, div, null);
        append(div, t12);
        if (if_block0)
          if_block0.m(div, null);
        append(div, t13);
        append(div, br);
        append(div, t14);
        append(div, table);
        append(table, thead);
        append(table, t19);
        append(table, tbody);
        if (if_block1)
          if_block1.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, judul*/
        135168 | dirty[2] & /*$$scope*/
        134217728) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, myAbstract*/
        131080 | dirty[2] & /*$$scope*/
        134217728) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        131584 | dirty[2] & /*$$scope*/
        134217728) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        131328 | dirty[2] & /*$$scope*/
        134217728) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*error, jenisSkema, jenisKegiatan*/
        133376 | dirty[2] & /*$$scope*/
        134217728) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        131104 | dirty[2] & /*$$scope*/
        134217728) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, topik*/
        139264 | dirty[2] & /*$$scope*/
        134217728) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        132096 | dirty[2] & /*$$scope*/
        134217728) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        131200 | dirty[2] & /*$$scope*/
        134217728) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        131136 | dirty[2] & /*$$scope*/
        134217728) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error, $ppmFile*/
        2228224 | dirty[2] & /*$$scope*/
        134217728) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        const field11_changes = {};
        if (dirty[0] & /*error, $rabFile*/
        1179648 | dirty[2] & /*$$scope*/
        134217728) {
          field11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field11.$set(field11_changes);
        if (
          /*items*/
          ctx2[16].length
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*items*/
            65536) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_189(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(div, t13);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*anggotaTim*/
          ctx2[14].length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            16384) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_169(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(field11.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(field11.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        destroy_component(field11);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function create_if_block_349(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_157(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].judul && create_if_block_349(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "judul");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[29]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        4096 && input.value !== /*judul*/
        ctx2[12]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[17].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_349(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_339(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].myAbstract + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].myAbstract + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_147(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].myAbstract && create_if_block_339(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "id", "myAbstract");
        attr(textarea, "class", "textarea");
        attr(textarea, "placeholder", "Masukkan abstrak");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*myAbstract*/
          ctx[3]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[30]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*myAbstract*/
        8) {
          set_input_value(
            textarea,
            /*myAbstract*/
            ctx2[3]
          );
        }
        if (
          /*error*/
          ctx2[17].myAbstract
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_339(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3211(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_137(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].jenisProposal && create_if_block_3211(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisProposal");
        if (
          /*jenisProposal*/
          ctx[9] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[31].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[9],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[31]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        512) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[17].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3211(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3113(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_129(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].jenisKegiatan && create_if_block_3113(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisKegiatan");
        if (
          /*jenisKegiatan*/
          ctx[8] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[32].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[8],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[32]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        256) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[17].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3113(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_26(ctx) {
    let option0;
    let option1;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Pengabdian Masyarakat Desa Binaan";
        option1 = element("option");
        option1.textContent = "Pengabdian Masyarakat UMKM Binaan";
        option0.__value = "Pengabdian Masyarakat Desa Binaan";
        set_input_value(option0, option0.__value);
        option1.__value = "Pengabdian Masyarakat UMKM Binaan";
        set_input_value(option1, option1.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
        }
      }
    };
  }
  function create_if_block_309(ctx) {
    let option0;
    let option1;
    let option2;
    return {
      c() {
        option0 = element("option");
        option0.textContent = "Riset Kelompok Keahlian";
        option1 = element("option");
        option1.textContent = "Riset Terapan";
        option2 = element("option");
        option2.textContent = "Riset Kerjasama";
        option0.__value = "Riset Kelompok Keahlian";
        set_input_value(option0, option0.__value);
        option1.__value = "Riset Terapan";
        set_input_value(option1, option1.__value);
        option2.__value = "Riset Kerjasama";
        set_input_value(option2, option2.__value);
      },
      m(target, anchor) {
        insert(target, option0, anchor);
        insert(target, option1, anchor);
        insert(target, option2, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(option0);
          detach(option1);
          detach(option2);
        }
      }
    };
  }
  function create_if_block_299(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].jenisSkema + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].jenisSkema + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_1112(ctx) {
    let div;
    let select;
    let option;
    let t1;
    let if_block1_anchor;
    let mounted;
    let dispose;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[8] === "Penelitian"
      )
        return create_if_block_309;
      return create_else_block_26;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[17].jenisSkema && create_if_block_299(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option = element("option");
        option.textContent = "Pilih Jenis Skema\n                     ";
        if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
        option.__value = "";
        set_input_value(option, option.__value);
        option.selected = true;
        option.disabled = true;
        option.hidden = true;
        attr(select, "id", "jenisSkema");
        if (
          /*jenisSkema*/
          ctx[11] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_2*/
            ctx[33].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option);
        if_block0.m(select, null);
        select_option(
          select,
          /*jenisSkema*/
          ctx[11],
          true
        );
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_2*/
            ctx[33]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(select, null);
          }
        }
        if (dirty[0] & /*jenisSkema*/
        2048) {
          select_option(
            select,
            /*jenisSkema*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[17].jenisSkema
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_299(ctx2);
            if_block1.c();
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block1_anchor);
        }
        if_block0.d();
        if (if_block1)
          if_block1.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_289(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_107(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].kelompokKeahlian && create_if_block_289(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "kelompokKeahlian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan kelompok keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[5]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[34]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        32 && input.value !== /*kelompokKeahlian*/
        ctx2[5]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[5]
          );
        }
        if (
          /*error*/
          ctx2[17].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_289(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_279(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_97(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].topik && create_if_block_279(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "topik");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[13]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[35]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        8192 && input.value !== /*topik*/
        ctx2[13]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[13]
          );
        }
        if (
          /*error*/
          ctx2[17].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_279(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_269(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_88(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].tanggalMulai && create_if_block_269(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalMulai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[36]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        1024) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[17].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_269(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_259(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_78(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].tanggalSelesai && create_if_block_259(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalSelesai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[7]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[37]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        128) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[17].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_259(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_249(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_615(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[17].biayaPenelitian && create_if_block_249(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "biayaPenelitian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan biaya penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[6]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_5*/
              ctx[38]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[39]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        64 && input.value !== /*biayaPenelitian*/
        ctx2[6]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[17].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_249(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block_114(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2310(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[21].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$ppmFile*/
        2097152 && t_value !== (t_value = /*$ppmFile*/
        ctx2[21].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2211(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_516(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_2(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[21]?.name
      )
        return create_if_block_2310;
      return create_else_block_114;
    }
    let current_block_type = select_block_type_2(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[17].fileProposal && create_if_block_2211(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePpmChange*/
            ctx[26]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[17].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_2211(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block14(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2113(ctx) {
    let span;
    let t_value = (
      /*$rabFile*/
      ctx[20]?.name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$rabFile*/
        1048576 && t_value !== (t_value = /*$rabFile*/
        ctx2[20]?.name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_209(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].fileRAB + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].fileRAB + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_417(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_3(ctx2, dirty) {
      if (
        /*$rabFile*/
        ctx2[20]?.name
      )
        return create_if_block_2113;
      return create_else_block14;
    }
    let current_block_type = select_block_type_3(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[17].fileRAB && create_if_block_209(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: xlsx";
        attr(input0, "id", "fileRab");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", ".xlsx");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "fileRab");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*fileRabChange*/
            ctx[27]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[17].fileRAB
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_209(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_189(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_318] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, items, anggotaTim*/
        212992 | dirty[2] & /*$$scope*/
        134217728) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_199(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[17].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        131072 && t_value !== (t_value = /*error*/
        ctx2[17].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_318(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[40](value);
    }
    let select_props = {
      id: "anggotaTim",
      start: "2",
      items: (
        /*items*/
        ctx[16]
      )
    };
    if (
      /*anggotaTim*/
      ctx[14] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[14];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[17].anggotaTim && create_if_block_199(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        65536)
          select_changes.items = /*items*/
          ctx2[16];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        16384) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[14];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[17].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_199(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_169(ctx) {
    let each_1_anchor;
    let current;
    let each_value_10 = ensure_array_like(
      /*anggotaTim*/
      ctx[14]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_106(get_each_context_106(ctx, each_value_10, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim, deleteMember*/
        268451840) {
          each_value_10 = ensure_array_like(
            /*anggotaTim*/
            ctx2[14]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_106(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_106(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_10.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_10.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_15);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_179(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[86].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[28]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        16384 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[86].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_106(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[86].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[86].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[88] > 0 && create_if_block_179(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[88] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        16384) && t1_value !== (t1_value = /*member*/
        ctx2[86].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        16384) && t3_value !== (t3_value = /*member*/
        ctx2[86].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_331(ctx) {
    let div;
    let t1;
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[15].length > 0 && create_if_block_427(ctx)
    );
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Pastikan data yang digunakan merupakan data terbaru.</p>`;
        t1 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        insert(target, t1, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[15].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            32768) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_427(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_427(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[15]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block19(get_each_context19(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[15]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context19(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block19(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_15);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_521(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let hr1;
    let t18;
    let h51;
    let t20;
    let table0;
    let thead0;
    let t30;
    let tbody0;
    let t31;
    let table1;
    let thead1;
    let t41;
    let tbody1;
    let t42;
    let table2;
    let thead2;
    let t52;
    let tbody2;
    let t53;
    let hr2;
    let t54;
    let h52;
    let t56;
    let table3;
    let thead3;
    let t66;
    let tbody3;
    let t67;
    let hr3;
    let t68;
    let h53;
    let t70;
    let table4;
    let thead4;
    let t80;
    let tbody4;
    let t81;
    let hr4;
    let t82;
    let h54;
    let t84;
    let table5;
    let thead5;
    let t92;
    let tbody5;
    let t93;
    let hr5;
    let t94;
    let h55;
    let t96;
    let table6;
    let thead6;
    let t106;
    let tbody6;
    let t107;
    let hr6;
    let t108;
    let h56;
    let t110;
    let table7;
    let thead7;
    let t120;
    let tbody7;
    let t121;
    let hr7;
    let t122;
    let h57;
    let t124;
    let table8;
    let thead8;
    let t134;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[56].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[56].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[56].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[56].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[56].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[56].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[56].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[56].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[56].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[56].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[56].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[56].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[56].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    let if_block0 = (
      /*user*/
      ctx[56].RPS1.length > 0 && create_if_block_149(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[56].RPS2.length > 0 && create_if_block_1310(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[56].RPS3.length > 0 && create_if_block_1212(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[56].Ppenelitian.length > 0 && create_if_block_1115(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[56].Ppengmas.length > 0 && create_if_block_109(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[56].Pdiseminasi.length > 0 && create_if_block_99(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[56].Ppublikasi.length > 0 && create_if_block_89(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[56].PpenulisanBuku.length > 0 && create_if_block_716(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[56].Phki.length > 0 && create_if_block_621(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        hr1 = element("hr");
        t18 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t20 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t30 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t31 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t41 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t42 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t52 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t53 = space();
        hr2 = element("hr");
        t54 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t56 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t66 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t67 = space();
        hr3 = element("hr");
        t68 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t80 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t81 = space();
        hr4 = element("hr");
        t82 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t84 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t92 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t93 = space();
        hr5 = element("hr");
        t94 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan\n                        Proceeding)";
        t96 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                 Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t106 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t107 = space();
        hr6 = element("hr");
        t108 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t110 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t120 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t121 = space();
        hr7 = element("hr");
        t122 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t124 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t134 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        insert(target, t17, anchor);
        insert(target, hr1, anchor);
        insert(target, t18, anchor);
        insert(target, h51, anchor);
        insert(target, t20, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t30);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t31, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t41);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t42, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t52);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t53, anchor);
        insert(target, hr2, anchor);
        insert(target, t54, anchor);
        insert(target, h52, anchor);
        insert(target, t56, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t66);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t67, anchor);
        insert(target, hr3, anchor);
        insert(target, t68, anchor);
        insert(target, h53, anchor);
        insert(target, t70, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t80);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t81, anchor);
        insert(target, hr4, anchor);
        insert(target, t82, anchor);
        insert(target, h54, anchor);
        insert(target, t84, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t92);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t93, anchor);
        insert(target, hr5, anchor);
        insert(target, t94, anchor);
        insert(target, h55, anchor);
        insert(target, t96, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t106);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t107, anchor);
        insert(target, hr6, anchor);
        insert(target, t108, anchor);
        insert(target, h56, anchor);
        insert(target, t110, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t120);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t121, anchor);
        insert(target, hr7, anchor);
        insert(target, t122, anchor);
        insert(target, h57, anchor);
        insert(target, t124, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t134);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview0_changes.content = /*user*/
          ctx2[56].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview1_changes.content = /*user*/
          ctx2[56].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview2_changes.content = /*user*/
          ctx2[56].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview3_changes.content = /*user*/
          ctx2[56].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview4_changes.content = /*user*/
          ctx2[56].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview5_changes.content = /*user*/
          ctx2[56].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview6_changes.content = /*user*/
          ctx2[56].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview7_changes.content = /*user*/
          ctx2[56].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview8_changes.content = /*user*/
          ctx2[56].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview9_changes.content = /*user*/
          ctx2[56].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview10_changes.content = /*user*/
          ctx2[56].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview11_changes.content = /*user*/
          ctx2[56].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        32768)
          fieldview12_changes.content = /*user*/
          ctx2[56].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[56].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_149(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[56].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_1310(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[56].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_1212(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[56].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_1115(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[56].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_109(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[56].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_99(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[56].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_89(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[56].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_716(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[56].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_621(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t17);
          detach(hr1);
          detach(t18);
          detach(h51);
          detach(t20);
          detach(table0);
          detach(t31);
          detach(table1);
          detach(t42);
          detach(table2);
          detach(t53);
          detach(hr2);
          detach(t54);
          detach(h52);
          detach(t56);
          detach(table3);
          detach(t67);
          detach(hr3);
          detach(t68);
          detach(h53);
          detach(t70);
          detach(table4);
          detach(t81);
          detach(hr4);
          detach(t82);
          detach(h54);
          detach(t84);
          detach(table5);
          detach(t93);
          detach(hr5);
          detach(t94);
          detach(h55);
          detach(t96);
          detach(table6);
          detach(t107);
          detach(hr6);
          detach(t108);
          detach(h56);
          detach(t110);
          detach(table7);
          detach(t121);
          detach(hr7);
          detach(t122);
          detach(h57);
          detach(t124);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_149(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[56].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_98(get_each_context_98(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[56].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_98(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_98(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_98(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[83].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[83].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[83].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[83].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[83].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*RPS1*/
        ctx2[83].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*RPS1*/
        ctx2[83].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*RPS1*/
        ctx2[83].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*RPS1*/
        ctx2[83].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*RPS1*/
        ctx2[83].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1310(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[56].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_88(get_each_context_88(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[56].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_88(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_88(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_88(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[80].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[80].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[80].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[80].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[80].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*RPS2*/
        ctx2[80].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*RPS2*/
        ctx2[80].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*RPS2*/
        ctx2[80].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*RPS2*/
        ctx2[80].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*RPS2*/
        ctx2[80].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1212(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[56].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_78(get_each_context_78(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[56].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_78(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_78(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_78(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[77].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[77].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[77].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[77].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[77].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*RPS3*/
        ctx2[77].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*RPS3*/
        ctx2[77].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*RPS3*/
        ctx2[77].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*RPS3*/
        ctx2[77].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*RPS3*/
        ctx2[77].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1115(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[56].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_68(get_each_context_68(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[56].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_68(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_68(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_68(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[74].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[74].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[74].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[74].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[74].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*PP*/
        ctx2[74].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*PP*/
        ctx2[74].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*PP*/
        ctx2[74].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*PP*/
        ctx2[74].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*PP*/
        ctx2[74].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_109(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[56].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_58(get_each_context_58(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[56].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_58(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_58(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_58(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[71].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[71].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[71].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[71].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[71].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*PM*/
        ctx2[71].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*PM*/
        ctx2[71].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*PM*/
        ctx2[71].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*PM*/
        ctx2[71].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*PM*/
        ctx2[71].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_99(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[56].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_48(get_each_context_48(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[56].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_48(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_48(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_48(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[68].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[68].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[68].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[68].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*PD*/
        ctx2[68].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*PD*/
        ctx2[68].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*PD*/
        ctx2[68].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*PD*/
        ctx2[68].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_89(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[56].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_38(get_each_context_38(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[56].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_38(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_38(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_38(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[65].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[65].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[65].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[65].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[65].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*PPub*/
        ctx2[65].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*PPub*/
        ctx2[65].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*PPub*/
        ctx2[65].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*PPub*/
        ctx2[65].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*PPub*/
        ctx2[65].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_716(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[56].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_29(get_each_context_29(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[56].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_29(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_29(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_29(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[62].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[62].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[62].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[62].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[62].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*PPB*/
        ctx2[62].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*PPB*/
        ctx2[62].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*PPB*/
        ctx2[62].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*PPB*/
        ctx2[62].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*PPB*/
        ctx2[62].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_621(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[56].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_111(get_each_context_111(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[56].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_111(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_111(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_111(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[59].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[59].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[59].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[59].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[59].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        32768 && t0_value !== (t0_value = /*PHKI*/
        ctx2[59].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t2_value !== (t2_value = /*PHKI*/
        ctx2[59].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t4_value !== (t4_value = /*PHKI*/
        ctx2[59].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t6_value !== (t6_value = /*PHKI*/
        ctx2[59].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        32768 && t8_value !== (t8_value = /*PHKI*/
        ctx2[59].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block19(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[56].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[15][
        /*index*/
        ctx[58]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler() {
      return (
        /*click_handler*/
        ctx[41](
          /*index*/
          ctx[58]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[15][
        /*index*/
        ctx[58]
      ].profileVisible && create_if_block_521(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-1iurio9");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        32768) && t1_value !== (t1_value = /*user*/
        ctx[56].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        32768) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[15][
          /*index*/
          ctx[58]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[15][
            /*index*/
            ctx[58]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            32768) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_521(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_240(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Next";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*clicktab2*/
            ctx[25]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_140(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Back";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Simpan";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Submit";
        attr(button0, "class", "button");
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info is-light");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clicktab1*/
              ctx[24]
            ),
            listen(
              button1,
              "click",
              /*simpanProposal*/
              ctx[22]
            ),
            listen(
              button2,
              "click",
              /*submitProposal*/
              ctx[23]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_219(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div2;
    let ul;
    let li0;
    let span1;
    let span0;
    let icon0;
    let t3;
    let div0;
    let t7;
    let li1;
    let span3;
    let span2;
    let icon1;
    let t8;
    let div1;
    let t12;
    let t13;
    let t14;
    let t15;
    let if_block3_anchor;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: penelitian } });
    icon1 = new Icon_default({
      props: { id: "accountEdit", src: accountEdit }
    });
    let if_block0 = (
      /*tab1*/
      ctx[18] === true && create_if_block_159(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[19] === true && create_if_block_331(ctx)
    );
    let if_block2 = (
      /*tab1*/
      ctx[18] === true && create_if_block_240(ctx)
    );
    let if_block3 = (
      /*tab2*/
      ctx[19] === true && create_if_block_140(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Proposal PPM Hibah Internal UISI";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div2 = element("div");
        ul = element("ul");
        li0 = element("li");
        span1 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        div0 = element("div");
        div0.innerHTML = `<p class="is-size-5"><b>Step 1</b></p> <p class="is-size-6">Proposal</p>`;
        t7 = space();
        li1 = element("li");
        span3 = element("span");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t8 = space();
        div1 = element("div");
        div1.innerHTML = `<p class="is-size-5"><b>Step 2</b></p> <p class="is-size-6">Biodata Peneliti</p>`;
        t12 = space();
        if (if_block0)
          if_block0.c();
        t13 = space();
        if (if_block1)
          if_block1.c();
        t14 = space();
        if (if_block2)
          if_block2.c();
        t15 = space();
        if (if_block3)
          if_block3.c();
        if_block3_anchor = empty();
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(span1, "class", "steps-marker");
        attr(div0, "class", "steps-content");
        attr(li0, "data-step", "1");
        attr(li0, "class", "steps-segment");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[18]
        );
        attr(span2, "class", "icon");
        attr(span3, "class", "steps-marker");
        attr(div1, "class", "steps-content");
        attr(li1, "data-step", "2");
        attr(li1, "class", "steps-segment");
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[19]
        );
        attr(ul, "class", "steps is-medium has-content-centered svelte-1iurio9");
        attr(div2, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div2, anchor);
        append(div2, ul);
        append(ul, li0);
        append(li0, span1);
        append(span1, span0);
        mount_component(icon0, span0, null);
        append(li0, t3);
        append(li0, div0);
        append(ul, t7);
        append(ul, li1);
        append(li1, span3);
        append(span3, span2);
        mount_component(icon1, span2, null);
        append(li1, t8);
        append(li1, div1);
        insert(target, t12, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t13, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t14, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t15, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, if_block3_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[24]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[25]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*tab1*/
        262144) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[18]
          );
        }
        if (!current || dirty[0] & /*tab2*/
        524288) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[19]
          );
        }
        if (
          /*tab1*/
          ctx2[18] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*tab1*/
            262144) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_159(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t13.parentNode, t13);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[19] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*tab2*/
            524288) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_331(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t14.parentNode, t14);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab1*/
          ctx2[18] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_240(ctx2);
            if_block2.c();
            if_block2.m(t15.parentNode, t15);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*tab2*/
          ctx2[19] === true
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_140(ctx2);
            if_block3.c();
            if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div2);
          detach(t12);
          detach(t13);
          detach(t14);
          detach(t15);
          detach(if_block3_anchor);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_130(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form proposal untuk ke step selanjutnya!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot20(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Pastikan untuk melengkapi Identitas Diri semua anggota";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment45(ctx) {
    let current_block_type_index;
    let if_block;
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let current;
    const if_block_creators = [create_if_block24, create_if_block_358];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*pendaftaranHibahInternal*/
        ctx2[4] === 1
      )
        return 0;
      if (
        /*pendaftaranHibahInternal*/
        ctx2[4] === 0
      )
        return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx, [-1, -1, -1]))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    function modalerror0_show_binding(value) {
      ctx[42](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_130] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorProposal*/
      ctx[1] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorProposal*/
      ctx[1];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[43](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot20] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorIdentitas*/
      ctx[0] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorIdentitas*/
      ctx[0];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
      },
      m(target, anchor) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(target, anchor);
        }
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx2, dirty);
          }
        } else {
          if (if_block) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index];
            if (!if_block) {
              if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block.c();
            } else {
              if_block.p(ctx2, dirty);
            }
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          } else {
            if_block = null;
          }
        }
        const modalerror0_changes = {};
        if (dirty[2] & /*$$scope*/
        134217728) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalErrorProposal*/
        2) {
          updating_show = true;
          modalerror0_changes.show = /*showModalErrorProposal*/
          ctx2[1];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[2] & /*$$scope*/
        134217728) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorIdentitas*/
        1) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorIdentitas*/
          ctx2[0];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d(detaching);
        }
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
      }
    };
  }
  function isObjectEmpty4(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function formatRupiah7(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance38($$self, $$props, $$invalidate) {
    let $rabFile;
    let $ppmFile;
    let $route;
    let $apiURL;
    component_subscribe($$self, rabFile, ($$value) => $$invalidate(20, $rabFile = $$value));
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(21, $ppmFile = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(48, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(49, $apiURL = $$value));
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    const localStorage_id = localStorage.getItem("id");
    const accessToken = localStorage.getItem("token");
    const id = Number(localStorage.getItem("id"));
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let showModalErrorIdentitas = false;
    let showModalErrorProposal = false;
    let isLoading = false;
    let myAbstract;
    let fileRab;
    let filePpm;
    let ppmFileName2;
    let rabFileName2;
    let pendaftaranHibahInternal2;
    let kelompokKeahlian = "";
    let biayaPenelitian = "";
    let tanggalSelesai = "";
    let jenisKegiatan = "";
    let jenisProposal = "";
    let tanggalMulai = "";
    let jenisSkema = "";
    let judul = "";
    let topik = "";
    let anggotaTim = [
      {
        value: localStorage_id,
        label: localStorage_namaLengkap,
        role: "Ketua"
      }
    ];
    let biodataAnggota = [];
    let items = [];
    let error = {};
    onMount(async () => {
      $$invalidate(2, isLoading = false);
      let randomChar = "";
      let resultGenerateRandomChar = "";
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let i = 0; i < 10; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultGenerateRandomChar += characters.charAt(randomIndex);
      }
      randomChar = resultGenerateRandomChar;
      ppmFileName2 = id + "_Proposal PPM_" + randomChar;
      rabFileName2 = id + "_RAB PPM_" + randomChar;
      const response = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          listUser = result;
          $$invalidate(16, items = []);
          for (const [key, value] of Object.entries(listUser)) {
            items.push({
              value: value.uid,
              label: value.nama_lengkap
            });
          }
        } else {
          console.log(response);
        }
      }
      const responseWP = await fetch($apiURL + "/waktuPendaftaranPPMInternal", { method: "GET", headers });
      const resultWP = await responseWP.json();
      if (responseWP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseWP.ok) {
          $$invalidate(4, pendaftaranHibahInternal2 = resultWP.buka_pendaftaran_hibah_internal);
        } else {
          console.log(responseWP);
        }
      }
    });
    async function getBiodataAnggota() {
      let ids = anggotaTim.map((anggota) => anggota.value);
      let promises = ids.map(async (idAnggota) => {
        try {
          const profileResponse = await fetch($apiURL + "/user/" + idAnggota, { method: "GET", headers });
          if (profileResponse.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!profileResponse.ok) {
            throw new Error(`Failed to fetch profile for ID ${idAnggota}`);
          }
          const profileResult = await profileResponse.json();
          const RPS1Response = await fetch($apiURL + "/riwayatPendidikanS1/" + idAnggota, { method: "GET", headers });
          if (RPS1Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS1Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S1 for ID ${idAnggota}`);
          }
          const RPS1Result = await RPS1Response.json();
          const RPS2Response = await fetch($apiURL + "/riwayatPendidikanS2/" + idAnggota, { method: "GET", headers });
          if (RPS2Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS2Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S2 for ID ${idAnggota}`);
          }
          const RPS2Result = await RPS2Response.json();
          const RPS3Response = await fetch($apiURL + "/riwayatPendidikanS3/" + idAnggota, { method: "GET", headers });
          if (RPS3Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS3Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const RPS3Result = await RPS3Response.json();
          const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + idAnggota, { method: "GET", headers });
          if (responsePP.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePP.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPP = await responsePP.json();
          const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + idAnggota, { method: "GET", headers });
          if (responsePM.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePM.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPM = await responsePM.json();
          const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + idAnggota, { method: "GET", headers });
          if (responsePD.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePD.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPD = await responsePD.json();
          const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + idAnggota, { method: "GET", headers });
          if (responsePPub.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPub.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPub = await responsePPub.json();
          const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idAnggota, { method: "GET", headers });
          if (responsePPB.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPB.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPB = await responsePPB.json();
          const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + idAnggota, { method: "GET", headers });
          if (responsePHKI.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePHKI.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPHKI = await responsePHKI.json();
          return {
            profile: profileResult,
            RPS1: RPS1Result.dbData,
            RPS2: RPS2Result.dbData,
            RPS3: RPS3Result.dbData,
            Ppenelitian: resultPP.dbData,
            Ppengmas: resultPM.dbData,
            Pdiseminasi: resultPD.dbData,
            Ppublikasi: resultPPub.dbData,
            PpenulisanBuku: resultPPB.dbData,
            Phki: resultPHKI.dbData
          };
        } catch (error2) {
          console.error(`Error fetching data for ID ${idAnggota}:`, error2);
          return {
            profile: null,
            RPS1: [],
            RPS2: [],
            RPS3: [],
            Ppenelitian: [],
            Ppengmas: [],
            Pdiseminasi: [],
            Ppublikasi: [],
            PpenulisanBuku: [],
            Phki: [],
            error: error2.message
          };
        }
      });
      $$invalidate(15, biodataAnggota = await Promise.all(promises.filter(Boolean)));
    }
    async function simpanProposal() {
      $$invalidate(17, error = {});
      $$invalidate(2, isLoading = true);
      const readerPpm = new FileReader();
      const readerRab = new FileReader();
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 0,
        rabFileName: rabFileName2,
        ppmFileName: ppmFileName2
      };
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const cekFileProposal = new Promise((resolve, reject) => {
        if (!filePpm) {
          resolve("No fileProposal selected");
          return;
        }
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName: ppmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerPpm.readAsDataURL(filePpm);
      });
      const cekFileRAB = new Promise((resolve, reject) => {
        if (!fileRab) {
          resolve("No fileRab selected");
          return;
        }
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            rabFileName: rabFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerRab.readAsDataURL(fileRab);
      });
      const cekDataProposalPPM = new Promise(async (resolve, reject) => {
        const responseProposal = await fetch($apiURL + "/ppm", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (responseProposal.status === 401) {
          location.pathname = "/tokenexpired";
          reject("Token expired");
        } else {
          if (responseProposal.ok) {
            resolve(resultProposal);
          } else {
            console.log(responseProposal.msg, error);
            reject("Error Submitting Data Proposal PPM");
          }
        }
      });
      try {
        await Promise.all([cekFileProposal, cekFileRAB, cekDataProposalPPM]);
      } finally {
        $$invalidate(2, isLoading = false);
        $route("/dosen/pendaftaran");
      }
    }
    async function submitProposal() {
      $$invalidate(17, error = {});
      $$invalidate(2, isLoading = true);
      const readerRab = new FileReader();
      const readerPpm = new FileReader();
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 2,
        ppmFileName: ppmFileName2,
        rabFileName: rabFileName2
      };
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const cekFileProposal = new Promise((resolve, reject) => {
        if (!filePpm) {
          resolve("No fileProposal selected");
          return;
        }
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName: ppmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerPpm.readAsDataURL(filePpm);
      });
      const cekFileRAB = new Promise((resolve, reject) => {
        if (!fileRab) {
          resolve("No fileRab selected");
          return;
        }
        readerRab.onloadend = async () => {
          const base64Data = readerRab.result.split(",")[1];
          const payloadRabFile = {
            fileRab: {
              name: fileRab.name,
              type: fileRab.type,
              data: base64Data
            },
            rabFileName: rabFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadRab", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadRabFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerRab.readAsDataURL(fileRab);
      });
      const cekDataProposalPPM = new Promise(async (resolve, reject) => {
        const responseProposal = await fetch($apiURL + "/ppm", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (responseProposal.status === 401) {
          location.pathname = "/tokenexpired";
          reject("Token expired");
        } else {
          if (responseProposal.ok) {
            resolve(resultProposal);
          } else {
            console.log(responseProposal.msg, error);
            reject("Error Submitting Data Proposal PPM");
          }
        }
      });
      try {
        await Promise.all([cekFileProposal, cekFileRAB, cekDataProposalPPM]);
      } finally {
        $$invalidate(2, isLoading = false);
        $route("/dosen/pendaftaran");
      }
    }
    let tab1 = true;
    let tab2 = false;
    async function clicktab1() {
      if (!tab1) {
        $$invalidate(18, tab1 = true);
        $$invalidate(19, tab2 = false);
      }
    }
    async function clicktab2() {
      $$invalidate(17, error = {});
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        judul,
        myAbstract,
        rabFileName: rabFileName2,
        ppmFileName: ppmFileName2
      };
      for (const [key, value] of Object.entries(payloadProposal)) {
        if (!value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(17, error[key] = `This field is required`, error);
        }
      }
      if (isObjectEmpty4($ppmFile)) {
        $$invalidate(17, error["fileProposal"] = `*`, error);
      }
      if (isObjectEmpty4($rabFile)) {
        $$invalidate(17, error["fileRAB"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(1, showModalErrorProposal = true);
      } else {
        if (!tab2) {
          await getBiodataAnggota();
          $$invalidate(18, tab1 = false);
          $$invalidate(19, tab2 = true);
        }
      }
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function fileRabChange(e) {
      fileRab = e.target.files[0];
      set_store_value(rabFile, $rabFile = e.target.files[0], $rabFile);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(14, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    function input_input_handler() {
      judul = this.value;
      $$invalidate(12, judul);
    }
    function textarea_input_handler() {
      myAbstract = this.value;
      $$invalidate(3, myAbstract);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(9, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(8, jenisKegiatan);
    }
    function select_change_handler_2() {
      jenisSkema = select_value(this);
      $$invalidate(11, jenisSkema);
    }
    function input_input_handler_1() {
      kelompokKeahlian = this.value;
      $$invalidate(5, kelompokKeahlian);
    }
    function input_input_handler_2() {
      topik = this.value;
      $$invalidate(13, topik);
    }
    function input_input_handler_3() {
      tanggalMulai = this.value;
      $$invalidate(10, tanggalMulai);
    }
    function input_input_handler_4() {
      tanggalSelesai = this.value;
      $$invalidate(7, tanggalSelesai);
    }
    function input_input_handler_5() {
      biayaPenelitian = this.value;
      $$invalidate(6, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(6, biayaPenelitian = formatRupiah7(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(14, anggotaTim);
    }
    const click_handler = (index) => $$invalidate(15, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalErrorProposal = value;
      $$invalidate(1, showModalErrorProposal);
    }
    function modalerror1_show_binding(value) {
      showModalErrorIdentitas = value;
      $$invalidate(0, showModalErrorIdentitas);
    }
    return [
      showModalErrorIdentitas,
      showModalErrorProposal,
      isLoading,
      myAbstract,
      pendaftaranHibahInternal2,
      kelompokKeahlian,
      biayaPenelitian,
      tanggalSelesai,
      jenisKegiatan,
      jenisProposal,
      tanggalMulai,
      jenisSkema,
      judul,
      topik,
      anggotaTim,
      biodataAnggota,
      items,
      error,
      tab1,
      tab2,
      $rabFile,
      $ppmFile,
      simpanProposal,
      submitProposal,
      clicktab1,
      clicktab2,
      filePpmChange,
      fileRabChange,
      deleteMember,
      input_input_handler,
      textarea_input_handler,
      select_change_handler,
      select_change_handler_1,
      select_change_handler_2,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      keyup_handler,
      select_result_binding,
      click_handler,
      modalerror0_show_binding,
      modalerror1_show_binding
    ];
  }
  var Proposalhibahinternal = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance38, create_fragment45, safe_not_equal, {}, null, [-1, -1, -1]);
    }
  };
  var proposalhibahinternal_default = Proposalhibahinternal;

  // src/pages/dosen/proposalmandiri.svelte
  init_define_process();
  var { Boolean: Boolean_16 } = globals;
  function get_each_context20(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[52] = list[i];
    child_ctx[54] = i;
    return child_ctx;
  }
  function get_each_context_114(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[55] = list[i];
    return child_ctx;
  }
  function get_each_context_210(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[58] = list[i];
    return child_ctx;
  }
  function get_each_context_39(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[61] = list[i];
    return child_ctx;
  }
  function get_each_context_49(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[64] = list[i];
    return child_ctx;
  }
  function get_each_context_59(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[67] = list[i];
    return child_ctx;
  }
  function get_each_context_69(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[70] = list[i];
    return child_ctx;
  }
  function get_each_context_79(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[73] = list[i];
    return child_ctx;
  }
  function get_each_context_89(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[76] = list[i];
    return child_ctx;
  }
  function get_each_context_99(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[79] = list[i];
    return child_ctx;
  }
  function get_each_context_107(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[82] = list[i];
    child_ctx[84] = i;
    return child_ctx;
  }
  function create_if_block_3310(ctx) {
    let articleerror;
    let current;
    articleerror = new ArticleError_default({
      props: {
        $$slots: { default: [create_default_slot_158] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(articleerror.$$.fragment);
      },
      m(target, anchor) {
        mount_component(articleerror, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const articleerror_changes = {};
        if (dirty[2] & /*$$scope*/
        8388608) {
          articleerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        articleerror.$set(articleerror_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(articleerror.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(articleerror.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(articleerror, detaching);
      }
    };
  }
  function create_if_block25(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_220] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const article_changes = {};
        if (dirty[0] & /*isLoading, tab2, tab1, biodataAnggota, anggotaTim, error, items, $ppmFile, biayaPenelitian, tanggalSelesai, tanggalMulai, topik, kelompokKeahlian, jenisKegiatan, jenisProposal, myAbstract, judul*/
        1048556 | dirty[2] & /*$$scope*/
        8388608) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  function create_default_slot_158(ctx) {
    let p0;
    let t1;
    let p1;
    return {
      c() {
        p0 = element("p");
        p0.textContent = "Pendaftaran Sedang Ditutup";
        t1 = space();
        p1 = element("p");
        p1.textContent = "Pendaftaran Proposal Mandiri sedang ditutup tunggu periode selanjutnya\n         dibuka atau hubungi LPPM UISI untuk informasi lebih lanjut.";
        attr(p0, "class", "title is-3");
        attr(p1, "class", "subtitle is-6");
      },
      m(target, anchor) {
        insert(target, p0, anchor);
        insert(target, t1, anchor);
        insert(target, p1, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p0);
          detach(t1);
          detach(p1);
        }
      }
    };
  }
  function create_if_block_1510(ctx) {
    let div;
    let field0;
    let t0;
    let field1;
    let t1;
    let hr;
    let t2;
    let field2;
    let t3;
    let field3;
    let t4;
    let field4;
    let t5;
    let field5;
    let t6;
    let field6;
    let t7;
    let field7;
    let t8;
    let field8;
    let t9;
    let field9;
    let t10;
    let field10;
    let t11;
    let t12;
    let br;
    let t13;
    let table;
    let thead;
    let t18;
    let tbody;
    let current;
    field0 = new Field_default({
      props: {
        name: "Judul",
        $$slots: { default: [create_default_slot_148] },
        $$scope: { ctx }
      }
    });
    field1 = new Field_default({
      props: {
        name: "Abstrak",
        $$slots: { default: [create_default_slot_138] },
        $$scope: { ctx }
      }
    });
    field2 = new Field_default({
      props: {
        name: "Jenis Proposal",
        $$slots: { default: [create_default_slot_1210] },
        $$scope: { ctx }
      }
    });
    field3 = new Field_default({
      props: {
        name: "Jenis Kegiatan",
        $$slots: { default: [create_default_slot_1113] },
        $$scope: { ctx }
      }
    });
    field4 = new Field_default({
      props: {
        name: "Jenis Skema",
        $$slots: { default: [create_default_slot_108] },
        $$scope: { ctx }
      }
    });
    field5 = new Field_default({
      props: {
        name: "Kelompok Keahlian",
        $$slots: { default: [create_default_slot_98] },
        $$scope: { ctx }
      }
    });
    field6 = new Field_default({
      props: {
        name: "Topik",
        $$slots: { default: [create_default_slot_89] },
        $$scope: { ctx }
      }
    });
    field7 = new Field_default({
      props: {
        name: "Tanggal Mulai",
        $$slots: { default: [create_default_slot_79] },
        $$scope: { ctx }
      }
    });
    field8 = new Field_default({
      props: {
        name: "Tanggal Selesai",
        $$slots: { default: [create_default_slot_616] },
        $$scope: { ctx }
      }
    });
    field9 = new Field_default({
      props: {
        name: "Biaya Penelitian",
        $$slots: { default: [create_default_slot_517] },
        $$scope: { ctx }
      }
    });
    field10 = new Field_default({
      props: {
        name: "Proposal",
        $$slots: { default: [create_default_slot_418] },
        $$scope: { ctx }
      }
    });
    let if_block0 = (
      /*items*/
      ctx[15].length && create_if_block_1810(ctx)
    );
    let if_block1 = (
      /*anggotaTim*/
      ctx[13].length > 0 && create_if_block_1610(ctx)
    );
    return {
      c() {
        div = element("div");
        create_component(field0.$$.fragment);
        t0 = space();
        create_component(field1.$$.fragment);
        t1 = space();
        hr = element("hr");
        t2 = space();
        create_component(field2.$$.fragment);
        t3 = space();
        create_component(field3.$$.fragment);
        t4 = space();
        create_component(field4.$$.fragment);
        t5 = space();
        create_component(field5.$$.fragment);
        t6 = space();
        create_component(field6.$$.fragment);
        t7 = space();
        create_component(field7.$$.fragment);
        t8 = space();
        create_component(field8.$$.fragment);
        t9 = space();
        create_component(field9.$$.fragment);
        t10 = space();
        create_component(field10.$$.fragment);
        t11 = space();
        if (if_block0)
          if_block0.c();
        t12 = space();
        br = element("br");
        t13 = space();
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t18 = space();
        tbody = element("tbody");
        if (if_block1)
          if_block1.c();
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        mount_component(field0, div, null);
        append(div, t0);
        mount_component(field1, div, null);
        append(div, t1);
        append(div, hr);
        append(div, t2);
        mount_component(field2, div, null);
        append(div, t3);
        mount_component(field3, div, null);
        append(div, t4);
        mount_component(field4, div, null);
        append(div, t5);
        mount_component(field5, div, null);
        append(div, t6);
        mount_component(field6, div, null);
        append(div, t7);
        mount_component(field7, div, null);
        append(div, t8);
        mount_component(field8, div, null);
        append(div, t9);
        mount_component(field9, div, null);
        append(div, t10);
        mount_component(field10, div, null);
        append(div, t11);
        if (if_block0)
          if_block0.m(div, null);
        append(div, t12);
        append(div, br);
        append(div, t13);
        append(div, table);
        append(table, thead);
        append(table, t18);
        append(table, tbody);
        if (if_block1)
          if_block1.m(tbody, null);
        current = true;
      },
      p(ctx2, dirty) {
        const field0_changes = {};
        if (dirty[0] & /*error, judul*/
        67584 | dirty[2] & /*$$scope*/
        8388608) {
          field0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field0.$set(field0_changes);
        const field1_changes = {};
        if (dirty[0] & /*error, myAbstract*/
        65544 | dirty[2] & /*$$scope*/
        8388608) {
          field1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field1.$set(field1_changes);
        const field2_changes = {};
        if (dirty[0] & /*error, jenisProposal*/
        66048 | dirty[2] & /*$$scope*/
        8388608) {
          field2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field2.$set(field2_changes);
        const field3_changes = {};
        if (dirty[0] & /*error, jenisKegiatan*/
        65792 | dirty[2] & /*$$scope*/
        8388608) {
          field3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field3.$set(field3_changes);
        const field4_changes = {};
        if (dirty[0] & /*jenisKegiatan*/
        256 | dirty[2] & /*$$scope*/
        8388608) {
          field4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field4.$set(field4_changes);
        const field5_changes = {};
        if (dirty[0] & /*error, kelompokKeahlian*/
        65568 | dirty[2] & /*$$scope*/
        8388608) {
          field5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field5.$set(field5_changes);
        const field6_changes = {};
        if (dirty[0] & /*error, topik*/
        69632 | dirty[2] & /*$$scope*/
        8388608) {
          field6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field6.$set(field6_changes);
        const field7_changes = {};
        if (dirty[0] & /*error, tanggalMulai*/
        66560 | dirty[2] & /*$$scope*/
        8388608) {
          field7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field7.$set(field7_changes);
        const field8_changes = {};
        if (dirty[0] & /*error, tanggalSelesai*/
        65664 | dirty[2] & /*$$scope*/
        8388608) {
          field8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field8.$set(field8_changes);
        const field9_changes = {};
        if (dirty[0] & /*error, biayaPenelitian*/
        65600 | dirty[2] & /*$$scope*/
        8388608) {
          field9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field9.$set(field9_changes);
        const field10_changes = {};
        if (dirty[0] & /*error, $ppmFile*/
        589824 | dirty[2] & /*$$scope*/
        8388608) {
          field10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field10.$set(field10_changes);
        if (
          /*items*/
          ctx2[15].length
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*items*/
            32768) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_1810(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(div, t12);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*anggotaTim*/
          ctx2[13].length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*anggotaTim*/
            8192) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_1610(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(tbody, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(field0.$$.fragment, local);
        transition_in(field1.$$.fragment, local);
        transition_in(field2.$$.fragment, local);
        transition_in(field3.$$.fragment, local);
        transition_in(field4.$$.fragment, local);
        transition_in(field5.$$.fragment, local);
        transition_in(field6.$$.fragment, local);
        transition_in(field7.$$.fragment, local);
        transition_in(field8.$$.fragment, local);
        transition_in(field9.$$.fragment, local);
        transition_in(field10.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(field0.$$.fragment, local);
        transition_out(field1.$$.fragment, local);
        transition_out(field2.$$.fragment, local);
        transition_out(field3.$$.fragment, local);
        transition_out(field4.$$.fragment, local);
        transition_out(field5.$$.fragment, local);
        transition_out(field6.$$.fragment, local);
        transition_out(field7.$$.fragment, local);
        transition_out(field8.$$.fragment, local);
        transition_out(field9.$$.fragment, local);
        transition_out(field10.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        destroy_component(field0);
        destroy_component(field1);
        destroy_component(field2);
        destroy_component(field3);
        destroy_component(field4);
        destroy_component(field5);
        destroy_component(field6);
        destroy_component(field7);
        destroy_component(field8);
        destroy_component(field9);
        destroy_component(field10);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function create_if_block_3212(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].judul + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].judul + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_148(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].judul && create_if_block_3212(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "judul");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan judul");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*judul*/
          ctx[11]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[26]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*judul*/
        2048 && input.value !== /*judul*/
        ctx2[11]) {
          set_input_value(
            input,
            /*judul*/
            ctx2[11]
          );
        }
        if (
          /*error*/
          ctx2[16].judul
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3212(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3114(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].myAbstract + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].myAbstract + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_138(ctx) {
    let textarea;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].myAbstract && create_if_block_3114(ctx)
    );
    return {
      c() {
        textarea = element("textarea");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(textarea, "id", "myAbstract");
        attr(textarea, "class", "textarea");
        attr(textarea, "placeholder", "Masukkan abstrak");
      },
      m(target, anchor) {
        insert(target, textarea, anchor);
        set_input_value(
          textarea,
          /*myAbstract*/
          ctx[3]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[27]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*myAbstract*/
        8) {
          set_input_value(
            textarea,
            /*myAbstract*/
            ctx2[3]
          );
        }
        if (
          /*error*/
          ctx2[16].myAbstract
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3114(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(textarea);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_3010(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_1210(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].jenisProposal && create_if_block_3010(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Proposal";
        option1 = element("option");
        option1.textContent = "Proposal Awal";
        option2 = element("option");
        option2.textContent = "Proposal Lanjutan";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Proposal Awal";
        set_input_value(option1, option1.__value);
        option2.__value = "Proposal Lanjutan";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisProposal");
        if (
          /*jenisProposal*/
          ctx[9] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler*/
            ctx[28].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisProposal*/
          ctx[9],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler*/
            ctx[28]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisProposal*/
        512) {
          select_option(
            select,
            /*jenisProposal*/
            ctx2[9]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisProposal
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_3010(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2910(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].jenisKegiatan + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].jenisKegiatan + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_1113(ctx) {
    let div;
    let select;
    let option0;
    let option1;
    let option2;
    let t3;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].jenisKegiatan && create_if_block_2910(ctx)
    );
    return {
      c() {
        div = element("div");
        select = element("select");
        option0 = element("option");
        option0.textContent = "Pilih Jenis Kegiatan";
        option1 = element("option");
        option1.textContent = "Penelitian";
        option2 = element("option");
        option2.textContent = "Pengabdian Masyarakat";
        t3 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        option0.__value = "";
        set_input_value(option0, option0.__value);
        option0.selected = true;
        option0.disabled = true;
        option0.hidden = true;
        option1.__value = "Penelitian";
        set_input_value(option1, option1.__value);
        option2.__value = "Pengabdian Masyarakat";
        set_input_value(option2, option2.__value);
        attr(select, "id", "jenisKegiatan");
        if (
          /*jenisKegiatan*/
          ctx[8] === void 0
        )
          add_render_callback(() => (
            /*select_change_handler_1*/
            ctx[29].call(select)
          ));
        attr(div, "class", "select is-fullwidth");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, select);
        append(select, option0);
        append(select, option1);
        append(select, option2);
        select_option(
          select,
          /*jenisKegiatan*/
          ctx[8],
          true
        );
        insert(target, t3, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            select,
            "change",
            /*select_change_handler_1*/
            ctx[29]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*jenisKegiatan*/
        256) {
          select_option(
            select,
            /*jenisKegiatan*/
            ctx2[8]
          );
        }
        if (
          /*error*/
          ctx2[16].jenisKegiatan
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2910(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t3);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_else_block_115(ctx) {
    let input;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        input.disabled = true;
      },
      m(target, anchor) {
        insert(target, input, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
      }
    };
  }
  function create_if_block_2810(ctx) {
    let input;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Pengabdian Masyarakat Mandiri");
        input.disabled = true;
      },
      m(target, anchor) {
        insert(target, input, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
      }
    };
  }
  function create_if_block_2710(ctx) {
    let input;
    return {
      c() {
        input = element("input");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Riset Mandiri");
        input.disabled = true;
      },
      m(target, anchor) {
        insert(target, input, anchor);
      },
      d(detaching) {
        if (detaching) {
          detach(input);
        }
      }
    };
  }
  function create_default_slot_108(ctx) {
    let if_block_anchor;
    function select_block_type_1(ctx2, dirty) {
      if (
        /*jenisKegiatan*/
        ctx2[8] === "Penelitian"
      )
        return create_if_block_2710;
      if (
        /*jenisKegiatan*/
        ctx2[8] === "Pengabdian Masyarakat"
      )
        return create_if_block_2810;
      return create_else_block_115;
    }
    let current_block_type = select_block_type_1(ctx, [-1, -1, -1]);
    let if_block = current_block_type(ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (current_block_type !== (current_block_type = select_block_type_1(ctx2, dirty))) {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_block.d(detaching);
      }
    };
  }
  function create_if_block_2610(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].kelompokKeahlian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].kelompokKeahlian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_98(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].kelompokKeahlian && create_if_block_2610(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "kelompokKeahlian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan kelompok keahlian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*kelompokKeahlian*/
          ctx[5]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_1*/
            ctx[30]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*kelompokKeahlian*/
        32 && input.value !== /*kelompokKeahlian*/
        ctx2[5]) {
          set_input_value(
            input,
            /*kelompokKeahlian*/
            ctx2[5]
          );
        }
        if (
          /*error*/
          ctx2[16].kelompokKeahlian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2610(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2510(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].topik + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].topik + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_89(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].topik && create_if_block_2510(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "topik");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan topik");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*topik*/
          ctx[12]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_2*/
            ctx[31]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*topik*/
        4096 && input.value !== /*topik*/
        ctx2[12]) {
          set_input_value(
            input,
            /*topik*/
            ctx2[12]
          );
        }
        if (
          /*error*/
          ctx2[16].topik
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2510(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2410(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].tanggalMulai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].tanggalMulai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_79(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].tanggalMulai && create_if_block_2410(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalMulai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalMulai*/
          ctx[10]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_3*/
            ctx[32]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalMulai*/
        1024) {
          set_input_value(
            input,
            /*tanggalMulai*/
            ctx2[10]
          );
        }
        if (
          /*error*/
          ctx2[16].tanggalMulai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2410(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2311(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].tanggalSelesai + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].tanggalSelesai + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_616(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].tanggalSelesai && create_if_block_2311(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "tanggalSelesai");
        attr(input, "class", "input");
        attr(input, "type", "date");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*tanggalSelesai*/
          ctx[7]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = listen(
            input,
            "input",
            /*input_input_handler_4*/
            ctx[33]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*tanggalSelesai*/
        128) {
          set_input_value(
            input,
            /*tanggalSelesai*/
            ctx2[7]
          );
        }
        if (
          /*error*/
          ctx2[16].tanggalSelesai
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2311(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_2212(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].biayaPenelitian + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].biayaPenelitian + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_517(ctx) {
    let input;
    let t;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[16].biayaPenelitian && create_if_block_2212(ctx)
    );
    return {
      c() {
        input = element("input");
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(input, "id", "biayaPenelitian");
        attr(input, "class", "input");
        attr(input, "type", "text");
        attr(input, "placeholder", "Masukkan biaya penelitian");
      },
      m(target, anchor) {
        insert(target, input, anchor);
        set_input_value(
          input,
          /*biayaPenelitian*/
          ctx[6]
        );
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen(
              input,
              "input",
              /*input_input_handler_5*/
              ctx[34]
            ),
            listen(
              input,
              "keyup",
              /*keyup_handler*/
              ctx[35]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biayaPenelitian*/
        64 && input.value !== /*biayaPenelitian*/
        ctx2[6]) {
          set_input_value(
            input,
            /*biayaPenelitian*/
            ctx2[6]
          );
        }
        if (
          /*error*/
          ctx2[16].biayaPenelitian
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_2212(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(input);
          detach(t);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_else_block15(ctx) {
    let span;
    return {
      c() {
        span = element("span");
        span.textContent = "No file chosen";
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2114(ctx) {
    let span;
    let t_value = (
      /*$ppmFile*/
      ctx[19].name + ""
    );
    let t;
    return {
      c() {
        span = element("span");
        t = text(t_value);
        attr(span, "class", "file-name");
      },
      m(target, anchor) {
        insert(target, span, anchor);
        append(span, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*$ppmFile*/
        524288 && t_value !== (t_value = /*$ppmFile*/
        ctx2[19].name + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(span);
        }
      }
    };
  }
  function create_if_block_2010(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].fileProposal + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "error has-text-danger");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].fileProposal + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_418(ctx) {
    let span3;
    let input0;
    let t0;
    let div;
    let label;
    let input1;
    let t1;
    let span2;
    let span0;
    let icon;
    let t2;
    let span1;
    let t4;
    let t5;
    let t6;
    let p;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    function select_block_type_2(ctx2, dirty) {
      if (
        /*$ppmFile*/
        ctx2[19]?.name
      )
        return create_if_block_2114;
      return create_else_block15;
    }
    let current_block_type = select_block_type_2(ctx, [-1, -1, -1]);
    let if_block0 = current_block_type(ctx);
    let if_block1 = (
      /*error*/
      ctx[16].fileProposal && create_if_block_2010(ctx)
    );
    return {
      c() {
        span3 = element("span");
        input0 = element("input");
        t0 = space();
        div = element("div");
        label = element("label");
        input1 = element("input");
        t1 = space();
        span2 = element("span");
        span0 = element("span");
        create_component(icon.$$.fragment);
        t2 = space();
        span1 = element("span");
        span1.textContent = "Choose a file";
        t4 = space();
        if_block0.c();
        t5 = space();
        if (if_block1)
          if_block1.c();
        t6 = space();
        p = element("p");
        p.textContent = "File Type: pdf";
        attr(input0, "id", "filePpm");
        attr(input0, "class", "inputf custom-file-input svelte-1iurio9");
        attr(input0, "accept", "application/pdf");
        attr(input0, "type", "file");
        attr(input1, "class", "file-input svelte-1iurio9");
        attr(input1, "type", "file");
        attr(input1, "name", "resume");
        attr(span0, "class", "file-icon");
        attr(span1, "class", "file-label");
        attr(span2, "class", "file-cta");
        attr(label, "class", "file-label");
        attr(label, "for", "filePpm");
        attr(div, "class", "file has-name is-success is-small");
        attr(span3, "class", "inputf__wrapper svelte-1iurio9");
        attr(p, "class", "help svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, span3, anchor);
        append(span3, input0);
        append(span3, t0);
        append(span3, div);
        append(div, label);
        append(label, input1);
        append(label, t1);
        append(label, span2);
        append(span2, span0);
        mount_component(icon, span0, null);
        append(span2, t2);
        append(span2, span1);
        append(label, t4);
        if_block0.m(label, null);
        append(span3, t5);
        if (if_block1)
          if_block1.m(span3, null);
        insert(target, t6, anchor);
        insert(target, p, anchor);
        current = true;
        if (!mounted) {
          dispose = listen(
            input0,
            "change",
            /*filePpmChange*/
            ctx[24]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx2);
          if (if_block0) {
            if_block0.c();
            if_block0.m(label, null);
          }
        }
        if (
          /*error*/
          ctx2[16].fileProposal
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_2010(ctx2);
            if_block1.c();
            if_block1.m(span3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(span3);
          detach(t6);
          detach(p);
        }
        destroy_component(icon);
        if_block0.d();
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_1810(ctx) {
    let field;
    let current;
    field = new Field_default({
      props: {
        name: "Anggota Tim",
        $$slots: { default: [create_default_slot_319] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(field.$$.fragment);
      },
      m(target, anchor) {
        mount_component(field, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const field_changes = {};
        if (dirty[0] & /*error, items, anggotaTim*/
        106496 | dirty[2] & /*$$scope*/
        8388608) {
          field_changes.$$scope = { dirty, ctx: ctx2 };
        }
        field.$set(field_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(field.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(field.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(field, detaching);
      }
    };
  }
  function create_if_block_1910(ctx) {
    let p;
    let t_value = (
      /*error*/
      ctx[16].anggotaTim + ""
    );
    let t;
    return {
      c() {
        p = element("p");
        t = text(t_value);
        attr(p, "class", "help error is-danger svelte-1iurio9");
      },
      m(target, anchor) {
        insert(target, p, anchor);
        append(p, t);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*error*/
        65536 && t_value !== (t_value = /*error*/
        ctx2[16].anggotaTim + ""))
          set_data(t, t_value);
      },
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot_319(ctx) {
    let select;
    let updating_result;
    let t;
    let if_block_anchor;
    let current;
    function select_result_binding(value) {
      ctx[36](value);
    }
    let select_props = {
      id: "anggotaTim",
      start: "2",
      items: (
        /*items*/
        ctx[15]
      )
    };
    if (
      /*anggotaTim*/
      ctx[13] !== void 0
    ) {
      select_props.result = /*anggotaTim*/
      ctx[13];
    }
    select = new Select_default({ props: select_props });
    binding_callbacks.push(() => bind(select, "result", select_result_binding));
    let if_block = (
      /*error*/
      ctx[16].anggotaTim && create_if_block_1910(ctx)
    );
    return {
      c() {
        create_component(select.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        mount_component(select, target, anchor);
        insert(target, t, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        const select_changes = {};
        if (dirty[0] & /*items*/
        32768)
          select_changes.items = /*items*/
          ctx2[15];
        if (!updating_result && dirty[0] & /*anggotaTim*/
        8192) {
          updating_result = true;
          select_changes.result = /*anggotaTim*/
          ctx2[13];
          add_flush_callback(() => updating_result = false);
        }
        select.$set(select_changes);
        if (
          /*error*/
          ctx2[16].anggotaTim
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block_1910(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(select.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(select.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t);
          detach(if_block_anchor);
        }
        destroy_component(select, detaching);
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_1610(ctx) {
    let each_1_anchor;
    let current;
    let each_value_10 = ensure_array_like(
      /*anggotaTim*/
      ctx[13]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_10.length; i += 1) {
      each_blocks[i] = create_each_block_107(get_each_context_107(ctx, each_value_10, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*anggotaTim, deleteMember*/
        33562624) {
          each_value_10 = ensure_array_like(
            /*anggotaTim*/
            ctx2[13]
          );
          let i;
          for (i = 0; i < each_value_10.length; i += 1) {
            const child_ctx = get_each_context_107(ctx2, each_value_10, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block_107(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value_10.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value_10.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_16);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_1710(ctx) {
    let button;
    let span;
    let icon;
    let button_data_value_value;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    return {
      c() {
        button = element("button");
        span = element("span");
        create_component(icon.$$.fragment);
        attr(span, "class", "icon");
        attr(button, "class", "button is-danger is-small");
        attr(button, "data-value", button_data_value_value = /*member*/
        ctx[82].value);
      },
      m(target, anchor) {
        insert(target, button, anchor);
        append(button, span);
        mount_component(icon, span, null);
        current = true;
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*deleteMember*/
            ctx[25]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*anggotaTim*/
        8192 && button_data_value_value !== (button_data_value_value = /*member*/
        ctx2[82].value)) {
          attr(button, "data-value", button_data_value_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(button);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_each_block_107(ctx) {
    let tr;
    let td0;
    let t0;
    let td1;
    let t1_value = (
      /*member*/
      ctx[82].role + ""
    );
    let t1;
    let t2;
    let td2;
    let t3_value = (
      /*member*/
      ctx[82].label + ""
    );
    let t3;
    let t4;
    let current;
    let if_block = (
      /*idx*/
      ctx[84] > 0 && create_if_block_1710(ctx)
    );
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        if (if_block)
          if_block.c();
        t0 = space();
        td1 = element("td");
        t1 = text(t1_value);
        t2 = space();
        td2 = element("td");
        t3 = text(t3_value);
        t4 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        if (if_block)
          if_block.m(td0, null);
        append(tr, t0);
        append(tr, td1);
        append(td1, t1);
        append(tr, t2);
        append(tr, td2);
        append(td2, t3);
        append(tr, t4);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*idx*/
          ctx2[84] > 0
        )
          if_block.p(ctx2, dirty);
        if ((!current || dirty[0] & /*anggotaTim*/
        8192) && t1_value !== (t1_value = /*member*/
        ctx2[82].role + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*anggotaTim*/
        8192) && t3_value !== (t3_value = /*member*/
        ctx2[82].label + ""))
          set_data(t3, t3_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
        if (if_block)
          if_block.d();
      }
    };
  }
  function create_if_block_340(ctx) {
    let div;
    let t1;
    let if_block_anchor;
    let current;
    let if_block = (
      /*biodataAnggota*/
      ctx[14].length > 0 && create_if_block_428(ctx)
    );
    return {
      c() {
        div = element("div");
        div.innerHTML = `<p>Pastikan data yang digunakan merupakan data terbaru.</p>`;
        t1 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        attr(div, "class", "notification is-warning is-light");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        insert(target, t1, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (
          /*biodataAnggota*/
          ctx2[14].length > 0
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty[0] & /*biodataAnggota*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_428(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
          detach(t1);
          detach(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
  }
  function create_if_block_428(ctx) {
    let each_1_anchor;
    let current;
    let each_value = ensure_array_like(
      /*biodataAnggota*/
      ctx[14]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block20(get_each_context20(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value = ensure_array_like(
            /*biodataAnggota*/
            ctx2[14]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context20(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block20(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean_16);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_if_block_526(ctx) {
    let hr0;
    let t0;
    let h50;
    let t2;
    let div0;
    let t4;
    let div1;
    let fieldview0;
    let t5;
    let fieldview1;
    let t6;
    let div2;
    let fieldview2;
    let t7;
    let fieldview3;
    let t8;
    let div3;
    let fieldview4;
    let t9;
    let fieldview5;
    let t10;
    let div4;
    let fieldview6;
    let t11;
    let fieldview7;
    let t12;
    let div5;
    let fieldview8;
    let t13;
    let fieldview9;
    let t14;
    let div6;
    let fieldview10;
    let t15;
    let fieldview11;
    let t16;
    let div7;
    let fieldview12;
    let t17;
    let hr1;
    let t18;
    let h51;
    let t20;
    let table0;
    let thead0;
    let t30;
    let tbody0;
    let t31;
    let table1;
    let thead1;
    let t41;
    let tbody1;
    let t42;
    let table2;
    let thead2;
    let t52;
    let tbody2;
    let t53;
    let hr2;
    let t54;
    let h52;
    let t56;
    let table3;
    let thead3;
    let t66;
    let tbody3;
    let t67;
    let hr3;
    let t68;
    let h53;
    let t70;
    let table4;
    let thead4;
    let t80;
    let tbody4;
    let t81;
    let hr4;
    let t82;
    let h54;
    let t84;
    let table5;
    let thead5;
    let t92;
    let tbody5;
    let t93;
    let hr5;
    let t94;
    let h55;
    let t96;
    let table6;
    let thead6;
    let t106;
    let tbody6;
    let t107;
    let hr6;
    let t108;
    let h56;
    let t110;
    let table7;
    let thead7;
    let t120;
    let tbody7;
    let t121;
    let hr7;
    let t122;
    let h57;
    let t124;
    let table8;
    let thead8;
    let t134;
    let tbody8;
    let current;
    fieldview0 = new Fieldview_default({
      props: {
        title: "Nama Lengkap",
        content: (
          /*user*/
          ctx[52].profile.nama_lengkap
        )
      }
    });
    fieldview1 = new Fieldview_default({
      props: {
        title: "Jabatan Fungsional",
        content: (
          /*user*/
          ctx[52].profile.jabatan_fungsional
        )
      }
    });
    fieldview2 = new Fieldview_default({
      props: {
        title: "NIP",
        content: (
          /*user*/
          ctx[52].profile.nip
        )
      }
    });
    fieldview3 = new Fieldview_default({
      props: {
        title: "NIDN",
        content: (
          /*user*/
          ctx[52].profile.nidn
        )
      }
    });
    fieldview4 = new Fieldview_default({
      props: {
        title: "Email",
        content: (
          /*user*/
          ctx[52].profile.email
        )
      }
    });
    fieldview5 = new Fieldview_default({
      props: {
        title: "Nomor Handphone",
        content: (
          /*user*/
          ctx[52].profile.nomor_handphone
        )
      }
    });
    fieldview6 = new Fieldview_default({
      props: {
        title: "Tempat Lahir",
        content: (
          /*user*/
          ctx[52].profile.tempat_lahir
        )
      }
    });
    fieldview7 = new Fieldview_default({
      props: {
        title: "Tanggal Lahir",
        content: (
          /*user*/
          ctx[52].profile.tanggal_lahir
        )
      }
    });
    fieldview8 = new Fieldview_default({
      props: {
        title: "Alamat Rumah",
        content: (
          /*user*/
          ctx[52].profile.alamat_rumah
        )
      }
    });
    fieldview9 = new Fieldview_default({
      props: {
        title: "Telp/Fax Rumah",
        content: (
          /*user*/
          ctx[52].profile.telp_fax_rumah
        )
      }
    });
    fieldview10 = new Fieldview_default({
      props: {
        title: "Alamat Kantor",
        content: (
          /*user*/
          ctx[52].profile.alamat_kantor
        )
      }
    });
    fieldview11 = new Fieldview_default({
      props: {
        title: "Telp/Fax Kantor",
        content: (
          /*user*/
          ctx[52].profile.telp_fax_kantor
        )
      }
    });
    fieldview12 = new Fieldview_default({
      props: {
        title: "Mata Kuliah yang diampu",
        content: (
          /*user*/
          ctx[52].profile.mata_kuliah
        ),
        type: "list"
      }
    });
    let if_block0 = (
      /*user*/
      ctx[52].RPS1.length > 0 && create_if_block_1410(ctx)
    );
    let if_block1 = (
      /*user*/
      ctx[52].RPS2.length > 0 && create_if_block_1311(ctx)
    );
    let if_block2 = (
      /*user*/
      ctx[52].RPS3.length > 0 && create_if_block_1213(ctx)
    );
    let if_block3 = (
      /*user*/
      ctx[52].Ppenelitian.length > 0 && create_if_block_1116(ctx)
    );
    let if_block4 = (
      /*user*/
      ctx[52].Ppengmas.length > 0 && create_if_block_1010(ctx)
    );
    let if_block5 = (
      /*user*/
      ctx[52].Pdiseminasi.length > 0 && create_if_block_910(ctx)
    );
    let if_block6 = (
      /*user*/
      ctx[52].Ppublikasi.length > 0 && create_if_block_810(ctx)
    );
    let if_block7 = (
      /*user*/
      ctx[52].PpenulisanBuku.length > 0 && create_if_block_717(ctx)
    );
    let if_block8 = (
      /*user*/
      ctx[52].Phki.length > 0 && create_if_block_625(ctx)
    );
    return {
      c() {
        hr0 = element("hr");
        t0 = space();
        h50 = element("h5");
        h50.textContent = "Identitas Diri";
        t2 = space();
        div0 = element("div");
        div0.innerHTML = `<p>Pastikan untuk melengkapi Identitas Diri.</p>`;
        t4 = space();
        div1 = element("div");
        create_component(fieldview0.$$.fragment);
        t5 = space();
        create_component(fieldview1.$$.fragment);
        t6 = space();
        div2 = element("div");
        create_component(fieldview2.$$.fragment);
        t7 = space();
        create_component(fieldview3.$$.fragment);
        t8 = space();
        div3 = element("div");
        create_component(fieldview4.$$.fragment);
        t9 = space();
        create_component(fieldview5.$$.fragment);
        t10 = space();
        div4 = element("div");
        create_component(fieldview6.$$.fragment);
        t11 = space();
        create_component(fieldview7.$$.fragment);
        t12 = space();
        div5 = element("div");
        create_component(fieldview8.$$.fragment);
        t13 = space();
        create_component(fieldview9.$$.fragment);
        t14 = space();
        div6 = element("div");
        create_component(fieldview10.$$.fragment);
        t15 = space();
        create_component(fieldview11.$$.fragment);
        t16 = space();
        div7 = element("div");
        create_component(fieldview12.$$.fragment);
        t17 = space();
        hr1 = element("hr");
        t18 = space();
        h51 = element("h5");
        h51.textContent = "Riwayat Pendidikan";
        t20 = space();
        table0 = element("table");
        thead0 = element("thead");
        thead0.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S1)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Skripsi</th></tr>`;
        t30 = space();
        tbody0 = element("tbody");
        if (if_block0)
          if_block0.c();
        t31 = space();
        table1 = element("table");
        thead1 = element("thead");
        thead1.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S2)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Tesis</th></tr>`;
        t41 = space();
        tbody1 = element("tbody");
        if (if_block1)
          if_block1.c();
        t42 = space();
        table2 = element("table");
        thead2 = element("thead");
        thead2.innerHTML = `<tr><th style="width: 25%;">Nama Perguruan Tinggi (S3)</th> <th style="width: 20%;">Bidang Ilmu</th> <th style="width: 10%;">Tahun Masuk</th> <th style="width: 10%;">Tahun Lulus</th> <th style="width: 35%;">Judul Disertasi</th></tr>`;
        t52 = space();
        tbody2 = element("tbody");
        if (if_block2)
          if_block2.c();
        t53 = space();
        hr2 = element("hr");
        t54 = space();
        h52 = element("h5");
        h52.textContent = "Pengalaman Penelitian";
        t56 = space();
        table3 = element("table");
        thead3 = element("thead");
        thead3.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Penelitian</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t66 = space();
        tbody3 = element("tbody");
        if (if_block3)
          if_block3.c();
        t67 = space();
        hr3 = element("hr");
        t68 = space();
        h53 = element("h5");
        h53.textContent = "Pengalaman Pengabdian Masyarakat";
        t70 = space();
        table4 = element("table");
        thead4 = element("thead");
        thead4.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Pengabdian Masyarakat</th> <th class="is-narrow">Role</th> <th class="is-narrow">Sumber Dana</th> <th>Jumlah Rp.</th></tr>`;
        t80 = space();
        tbody4 = element("tbody");
        if (if_block4)
          if_block4.c();
        t81 = space();
        hr4 = element("hr");
        t82 = space();
        h54 = element("h5");
        h54.textContent = "Pengalaman Diseminasi Ilmiah dalam Pertemuan / Pameran";
        t84 = space();
        table5 = element("table");
        thead5 = element("thead");
        thead5.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Pemakalah</th> <th class="is-narrow">Nama Pertemuan Ilmiah / Pameran</th></tr>`;
        t92 = space();
        tbody5 = element("tbody");
        if (if_block5)
          if_block5.c();
        t93 = space();
        hr5 = element("hr");
        t94 = space();
        h55 = element("h5");
        h55.textContent = "Pengalaman Publikasi Ilmiah dalam Jurnal (bukan\n                        Proceeding)";
        t96 = space();
        table6 = element("table");
        thead6 = element("thead");
        thead6.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Artikel</th> <th>Nama Penulis</th> <th>Nama Jurnal, Vol., No Issue/No Artikel,
                                 Halaman</th> <th>Impact Factor/Scopus Quarter/Akreditasi</th></tr>`;
        t106 = space();
        tbody6 = element("tbody");
        if (if_block6)
          if_block6.c();
        t107 = space();
        hr6 = element("hr");
        t108 = space();
        h56 = element("h5");
        h56.textContent = "Pengalaman Penulisan Buku";
        t110 = space();
        table7 = element("table");
        thead7 = element("thead");
        thead7.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul Buku</th> <th>Nama Penulis</th> <th>Penerbit</th> <th>ISBN</th></tr>`;
        t120 = space();
        tbody7 = element("tbody");
        if (if_block7)
          if_block7.c();
        t121 = space();
        hr7 = element("hr");
        t122 = space();
        h57 = element("h5");
        h57.textContent = "Pengalaman Hak Kekayaan Intelektual";
        t124 = space();
        table8 = element("table");
        thead8 = element("thead");
        thead8.innerHTML = `<tr><th class="is-narrow">Tahun</th> <th>Judul HKI</th> <th>Nama Penulis</th> <th>Jenis HKI</th> <th>No HKI</th></tr>`;
        t134 = space();
        tbody8 = element("tbody");
        if (if_block8)
          if_block8.c();
        attr(hr0, "class", "has-background-grey-light");
        attr(h50, "class", "title is-5");
        attr(div0, "class", "notification is-info is-light");
        attr(div1, "class", "columns is-desktop");
        attr(div2, "class", "columns is-desktop");
        attr(div3, "class", "columns is-desktop");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "columns is-desktop");
        attr(div6, "class", "columns is-desktop");
        attr(div7, "class", "columns is-desktop");
        attr(hr1, "class", "has-background-grey-light");
        attr(h51, "class", "title is-5");
        attr(table0, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table1, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(table2, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h52, "class", "title is-5");
        attr(table3, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h53, "class", "title is-5");
        attr(table4, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h54, "class", "title is-5");
        attr(table5, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h55, "class", "title is-5");
        attr(table6, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h56, "class", "title is-5");
        attr(table7, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(h57, "class", "title is-5");
        attr(table8, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
      },
      m(target, anchor) {
        insert(target, hr0, anchor);
        insert(target, t0, anchor);
        insert(target, h50, anchor);
        insert(target, t2, anchor);
        insert(target, div0, anchor);
        insert(target, t4, anchor);
        insert(target, div1, anchor);
        mount_component(fieldview0, div1, null);
        append(div1, t5);
        mount_component(fieldview1, div1, null);
        insert(target, t6, anchor);
        insert(target, div2, anchor);
        mount_component(fieldview2, div2, null);
        append(div2, t7);
        mount_component(fieldview3, div2, null);
        insert(target, t8, anchor);
        insert(target, div3, anchor);
        mount_component(fieldview4, div3, null);
        append(div3, t9);
        mount_component(fieldview5, div3, null);
        insert(target, t10, anchor);
        insert(target, div4, anchor);
        mount_component(fieldview6, div4, null);
        append(div4, t11);
        mount_component(fieldview7, div4, null);
        insert(target, t12, anchor);
        insert(target, div5, anchor);
        mount_component(fieldview8, div5, null);
        append(div5, t13);
        mount_component(fieldview9, div5, null);
        insert(target, t14, anchor);
        insert(target, div6, anchor);
        mount_component(fieldview10, div6, null);
        append(div6, t15);
        mount_component(fieldview11, div6, null);
        insert(target, t16, anchor);
        insert(target, div7, anchor);
        mount_component(fieldview12, div7, null);
        insert(target, t17, anchor);
        insert(target, hr1, anchor);
        insert(target, t18, anchor);
        insert(target, h51, anchor);
        insert(target, t20, anchor);
        insert(target, table0, anchor);
        append(table0, thead0);
        append(table0, t30);
        append(table0, tbody0);
        if (if_block0)
          if_block0.m(tbody0, null);
        insert(target, t31, anchor);
        insert(target, table1, anchor);
        append(table1, thead1);
        append(table1, t41);
        append(table1, tbody1);
        if (if_block1)
          if_block1.m(tbody1, null);
        insert(target, t42, anchor);
        insert(target, table2, anchor);
        append(table2, thead2);
        append(table2, t52);
        append(table2, tbody2);
        if (if_block2)
          if_block2.m(tbody2, null);
        insert(target, t53, anchor);
        insert(target, hr2, anchor);
        insert(target, t54, anchor);
        insert(target, h52, anchor);
        insert(target, t56, anchor);
        insert(target, table3, anchor);
        append(table3, thead3);
        append(table3, t66);
        append(table3, tbody3);
        if (if_block3)
          if_block3.m(tbody3, null);
        insert(target, t67, anchor);
        insert(target, hr3, anchor);
        insert(target, t68, anchor);
        insert(target, h53, anchor);
        insert(target, t70, anchor);
        insert(target, table4, anchor);
        append(table4, thead4);
        append(table4, t80);
        append(table4, tbody4);
        if (if_block4)
          if_block4.m(tbody4, null);
        insert(target, t81, anchor);
        insert(target, hr4, anchor);
        insert(target, t82, anchor);
        insert(target, h54, anchor);
        insert(target, t84, anchor);
        insert(target, table5, anchor);
        append(table5, thead5);
        append(table5, t92);
        append(table5, tbody5);
        if (if_block5)
          if_block5.m(tbody5, null);
        insert(target, t93, anchor);
        insert(target, hr5, anchor);
        insert(target, t94, anchor);
        insert(target, h55, anchor);
        insert(target, t96, anchor);
        insert(target, table6, anchor);
        append(table6, thead6);
        append(table6, t106);
        append(table6, tbody6);
        if (if_block6)
          if_block6.m(tbody6, null);
        insert(target, t107, anchor);
        insert(target, hr6, anchor);
        insert(target, t108, anchor);
        insert(target, h56, anchor);
        insert(target, t110, anchor);
        insert(target, table7, anchor);
        append(table7, thead7);
        append(table7, t120);
        append(table7, tbody7);
        if (if_block7)
          if_block7.m(tbody7, null);
        insert(target, t121, anchor);
        insert(target, hr7, anchor);
        insert(target, t122, anchor);
        insert(target, h57, anchor);
        insert(target, t124, anchor);
        insert(target, table8, anchor);
        append(table8, thead8);
        append(table8, t134);
        append(table8, tbody8);
        if (if_block8)
          if_block8.m(tbody8, null);
        current = true;
      },
      p(ctx2, dirty) {
        const fieldview0_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview0_changes.content = /*user*/
          ctx2[52].profile.nama_lengkap;
        fieldview0.$set(fieldview0_changes);
        const fieldview1_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview1_changes.content = /*user*/
          ctx2[52].profile.jabatan_fungsional;
        fieldview1.$set(fieldview1_changes);
        const fieldview2_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview2_changes.content = /*user*/
          ctx2[52].profile.nip;
        fieldview2.$set(fieldview2_changes);
        const fieldview3_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview3_changes.content = /*user*/
          ctx2[52].profile.nidn;
        fieldview3.$set(fieldview3_changes);
        const fieldview4_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview4_changes.content = /*user*/
          ctx2[52].profile.email;
        fieldview4.$set(fieldview4_changes);
        const fieldview5_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview5_changes.content = /*user*/
          ctx2[52].profile.nomor_handphone;
        fieldview5.$set(fieldview5_changes);
        const fieldview6_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview6_changes.content = /*user*/
          ctx2[52].profile.tempat_lahir;
        fieldview6.$set(fieldview6_changes);
        const fieldview7_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview7_changes.content = /*user*/
          ctx2[52].profile.tanggal_lahir;
        fieldview7.$set(fieldview7_changes);
        const fieldview8_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview8_changes.content = /*user*/
          ctx2[52].profile.alamat_rumah;
        fieldview8.$set(fieldview8_changes);
        const fieldview9_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview9_changes.content = /*user*/
          ctx2[52].profile.telp_fax_rumah;
        fieldview9.$set(fieldview9_changes);
        const fieldview10_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview10_changes.content = /*user*/
          ctx2[52].profile.alamat_kantor;
        fieldview10.$set(fieldview10_changes);
        const fieldview11_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview11_changes.content = /*user*/
          ctx2[52].profile.telp_fax_kantor;
        fieldview11.$set(fieldview11_changes);
        const fieldview12_changes = {};
        if (dirty[0] & /*biodataAnggota*/
        16384)
          fieldview12_changes.content = /*user*/
          ctx2[52].profile.mata_kuliah;
        fieldview12.$set(fieldview12_changes);
        if (
          /*user*/
          ctx2[52].RPS1.length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_1410(ctx2);
            if_block0.c();
            if_block0.m(tbody0, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (
          /*user*/
          ctx2[52].RPS2.length > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block_1311(ctx2);
            if_block1.c();
            if_block1.m(tbody1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (
          /*user*/
          ctx2[52].RPS3.length > 0
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_1213(ctx2);
            if_block2.c();
            if_block2.m(tbody2, null);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*user*/
          ctx2[52].Ppenelitian.length > 0
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_1116(ctx2);
            if_block3.c();
            if_block3.m(tbody3, null);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
        if (
          /*user*/
          ctx2[52].Ppengmas.length > 0
        ) {
          if (if_block4) {
            if_block4.p(ctx2, dirty);
          } else {
            if_block4 = create_if_block_1010(ctx2);
            if_block4.c();
            if_block4.m(tbody4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }
        if (
          /*user*/
          ctx2[52].Pdiseminasi.length > 0
        ) {
          if (if_block5) {
            if_block5.p(ctx2, dirty);
          } else {
            if_block5 = create_if_block_910(ctx2);
            if_block5.c();
            if_block5.m(tbody5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }
        if (
          /*user*/
          ctx2[52].Ppublikasi.length > 0
        ) {
          if (if_block6) {
            if_block6.p(ctx2, dirty);
          } else {
            if_block6 = create_if_block_810(ctx2);
            if_block6.c();
            if_block6.m(tbody6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
        if (
          /*user*/
          ctx2[52].PpenulisanBuku.length > 0
        ) {
          if (if_block7) {
            if_block7.p(ctx2, dirty);
          } else {
            if_block7 = create_if_block_717(ctx2);
            if_block7.c();
            if_block7.m(tbody7, null);
          }
        } else if (if_block7) {
          if_block7.d(1);
          if_block7 = null;
        }
        if (
          /*user*/
          ctx2[52].Phki.length > 0
        ) {
          if (if_block8) {
            if_block8.p(ctx2, dirty);
          } else {
            if_block8 = create_if_block_625(ctx2);
            if_block8.c();
            if_block8.m(tbody8, null);
          }
        } else if (if_block8) {
          if_block8.d(1);
          if_block8 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(fieldview0.$$.fragment, local);
        transition_in(fieldview1.$$.fragment, local);
        transition_in(fieldview2.$$.fragment, local);
        transition_in(fieldview3.$$.fragment, local);
        transition_in(fieldview4.$$.fragment, local);
        transition_in(fieldview5.$$.fragment, local);
        transition_in(fieldview6.$$.fragment, local);
        transition_in(fieldview7.$$.fragment, local);
        transition_in(fieldview8.$$.fragment, local);
        transition_in(fieldview9.$$.fragment, local);
        transition_in(fieldview10.$$.fragment, local);
        transition_in(fieldview11.$$.fragment, local);
        transition_in(fieldview12.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(fieldview0.$$.fragment, local);
        transition_out(fieldview1.$$.fragment, local);
        transition_out(fieldview2.$$.fragment, local);
        transition_out(fieldview3.$$.fragment, local);
        transition_out(fieldview4.$$.fragment, local);
        transition_out(fieldview5.$$.fragment, local);
        transition_out(fieldview6.$$.fragment, local);
        transition_out(fieldview7.$$.fragment, local);
        transition_out(fieldview8.$$.fragment, local);
        transition_out(fieldview9.$$.fragment, local);
        transition_out(fieldview10.$$.fragment, local);
        transition_out(fieldview11.$$.fragment, local);
        transition_out(fieldview12.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(hr0);
          detach(t0);
          detach(h50);
          detach(t2);
          detach(div0);
          detach(t4);
          detach(div1);
          detach(t6);
          detach(div2);
          detach(t8);
          detach(div3);
          detach(t10);
          detach(div4);
          detach(t12);
          detach(div5);
          detach(t14);
          detach(div6);
          detach(t16);
          detach(div7);
          detach(t17);
          detach(hr1);
          detach(t18);
          detach(h51);
          detach(t20);
          detach(table0);
          detach(t31);
          detach(table1);
          detach(t42);
          detach(table2);
          detach(t53);
          detach(hr2);
          detach(t54);
          detach(h52);
          detach(t56);
          detach(table3);
          detach(t67);
          detach(hr3);
          detach(t68);
          detach(h53);
          detach(t70);
          detach(table4);
          detach(t81);
          detach(hr4);
          detach(t82);
          detach(h54);
          detach(t84);
          detach(table5);
          detach(t93);
          detach(hr5);
          detach(t94);
          detach(h55);
          detach(t96);
          detach(table6);
          detach(t107);
          detach(hr6);
          detach(t108);
          detach(h56);
          detach(t110);
          detach(table7);
          detach(t121);
          detach(hr7);
          detach(t122);
          detach(h57);
          detach(t124);
          detach(table8);
        }
        destroy_component(fieldview0);
        destroy_component(fieldview1);
        destroy_component(fieldview2);
        destroy_component(fieldview3);
        destroy_component(fieldview4);
        destroy_component(fieldview5);
        destroy_component(fieldview6);
        destroy_component(fieldview7);
        destroy_component(fieldview8);
        destroy_component(fieldview9);
        destroy_component(fieldview10);
        destroy_component(fieldview11);
        destroy_component(fieldview12);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
        if (if_block2)
          if_block2.d();
        if (if_block3)
          if_block3.d();
        if (if_block4)
          if_block4.d();
        if (if_block5)
          if_block5.d();
        if (if_block6)
          if_block6.d();
        if (if_block7)
          if_block7.d();
        if (if_block8)
          if_block8.d();
      }
    };
  }
  function create_if_block_1410(ctx) {
    let each_1_anchor;
    let each_value_9 = ensure_array_like(
      /*user*/
      ctx[52].RPS1
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_9.length; i += 1) {
      each_blocks[i] = create_each_block_99(get_each_context_99(ctx, each_value_9, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_9 = ensure_array_like(
            /*user*/
            ctx2[52].RPS1
          );
          let i;
          for (i = 0; i < each_value_9.length; i += 1) {
            const child_ctx = get_each_context_99(ctx2, each_value_9, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_99(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_9.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_99(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS1*/
      ctx[79].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS1*/
      ctx[79].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS1*/
      ctx[79].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS1*/
      ctx[79].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS1*/
      ctx[79].judul_skripsi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS1*/
        ctx2[79].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS1*/
        ctx2[79].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS1*/
        ctx2[79].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS1*/
        ctx2[79].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS1*/
        ctx2[79].judul_skripsi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1311(ctx) {
    let each_1_anchor;
    let each_value_8 = ensure_array_like(
      /*user*/
      ctx[52].RPS2
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_8.length; i += 1) {
      each_blocks[i] = create_each_block_89(get_each_context_89(ctx, each_value_8, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_8 = ensure_array_like(
            /*user*/
            ctx2[52].RPS2
          );
          let i;
          for (i = 0; i < each_value_8.length; i += 1) {
            const child_ctx = get_each_context_89(ctx2, each_value_8, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_89(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_8.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_89(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS2*/
      ctx[76].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS2*/
      ctx[76].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS2*/
      ctx[76].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS2*/
      ctx[76].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS2*/
      ctx[76].judul_tesis + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS2*/
        ctx2[76].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS2*/
        ctx2[76].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS2*/
        ctx2[76].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS2*/
        ctx2[76].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS2*/
        ctx2[76].judul_tesis + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1213(ctx) {
    let each_1_anchor;
    let each_value_7 = ensure_array_like(
      /*user*/
      ctx[52].RPS3
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_7.length; i += 1) {
      each_blocks[i] = create_each_block_79(get_each_context_79(ctx, each_value_7, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_7 = ensure_array_like(
            /*user*/
            ctx2[52].RPS3
          );
          let i;
          for (i = 0; i < each_value_7.length; i += 1) {
            const child_ctx = get_each_context_79(ctx2, each_value_7, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_79(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_7.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_79(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*RPS3*/
      ctx[73].nama_perguruan_tinggi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*RPS3*/
      ctx[73].bidang_ilmu + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*RPS3*/
      ctx[73].tahun_masuk + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*RPS3*/
      ctx[73].tahun_lulus + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*RPS3*/
      ctx[73].judul_disertasi + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*RPS3*/
        ctx2[73].nama_perguruan_tinggi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*RPS3*/
        ctx2[73].bidang_ilmu + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*RPS3*/
        ctx2[73].tahun_masuk + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*RPS3*/
        ctx2[73].tahun_lulus + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*RPS3*/
        ctx2[73].judul_disertasi + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1116(ctx) {
    let each_1_anchor;
    let each_value_6 = ensure_array_like(
      /*user*/
      ctx[52].Ppenelitian
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_6.length; i += 1) {
      each_blocks[i] = create_each_block_69(get_each_context_69(ctx, each_value_6, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_6 = ensure_array_like(
            /*user*/
            ctx2[52].Ppenelitian
          );
          let i;
          for (i = 0; i < each_value_6.length; i += 1) {
            const child_ctx = get_each_context_69(ctx2, each_value_6, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_69(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_6.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_69(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PP*/
      ctx[70].tahun_penelitian + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PP*/
      ctx[70].judul_penelitian + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PP*/
      ctx[70].role_penelitian + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PP*/
      ctx[70].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PP*/
      ctx[70].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PP*/
        ctx2[70].tahun_penelitian + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PP*/
        ctx2[70].judul_penelitian + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PP*/
        ctx2[70].role_penelitian + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PP*/
        ctx2[70].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PP*/
        ctx2[70].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_1010(ctx) {
    let each_1_anchor;
    let each_value_5 = ensure_array_like(
      /*user*/
      ctx[52].Ppengmas
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_5.length; i += 1) {
      each_blocks[i] = create_each_block_59(get_each_context_59(ctx, each_value_5, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_5 = ensure_array_like(
            /*user*/
            ctx2[52].Ppengmas
          );
          let i;
          for (i = 0; i < each_value_5.length; i += 1) {
            const child_ctx = get_each_context_59(ctx2, each_value_5, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_59(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_5.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_59(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PM*/
      ctx[67].tahun_pengmas + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PM*/
      ctx[67].judul_pengmas + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PM*/
      ctx[67].role_pengmas + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PM*/
      ctx[67].sumber_dana + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PM*/
      ctx[67].jumlah + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PM*/
        ctx2[67].tahun_pengmas + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PM*/
        ctx2[67].judul_pengmas + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PM*/
        ctx2[67].role_pengmas + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PM*/
        ctx2[67].sumber_dana + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PM*/
        ctx2[67].jumlah + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_910(ctx) {
    let each_1_anchor;
    let each_value_4 = ensure_array_like(
      /*user*/
      ctx[52].Pdiseminasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_4.length; i += 1) {
      each_blocks[i] = create_each_block_49(get_each_context_49(ctx, each_value_4, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_4 = ensure_array_like(
            /*user*/
            ctx2[52].Pdiseminasi
          );
          let i;
          for (i = 0; i < each_value_4.length; i += 1) {
            const child_ctx = get_each_context_49(ctx2, each_value_4, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_49(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_4.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_49(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PD*/
      ctx[64].tahun_diseminasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PD*/
      ctx[64].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PD*/
      ctx[64].nama_pemakalah + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PD*/
      ctx[64].nama_pertemuan + ""
    );
    let t6;
    let t7;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PD*/
        ctx2[64].tahun_diseminasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PD*/
        ctx2[64].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PD*/
        ctx2[64].nama_pemakalah + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PD*/
        ctx2[64].nama_pertemuan + ""))
          set_data(t6, t6_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_810(ctx) {
    let each_1_anchor;
    let each_value_3 = ensure_array_like(
      /*user*/
      ctx[52].Ppublikasi
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_39(get_each_context_39(ctx, each_value_3, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_3 = ensure_array_like(
            /*user*/
            ctx2[52].Ppublikasi
          );
          let i;
          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_39(ctx2, each_value_3, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_39(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_3.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_39(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPub*/
      ctx[61].tahun_publikasi + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPub*/
      ctx[61].judul_artikel + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPub*/
      ctx[61].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPub*/
      ctx[61].nama_jurnal + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPub*/
      ctx[61].impact + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PPub*/
        ctx2[61].tahun_publikasi + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PPub*/
        ctx2[61].judul_artikel + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PPub*/
        ctx2[61].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PPub*/
        ctx2[61].nama_jurnal + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PPub*/
        ctx2[61].impact + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_717(ctx) {
    let each_1_anchor;
    let each_value_2 = ensure_array_like(
      /*user*/
      ctx[52].PpenulisanBuku
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_210(get_each_context_210(ctx, each_value_2, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_2 = ensure_array_like(
            /*user*/
            ctx2[52].PpenulisanBuku
          );
          let i;
          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_210(ctx2, each_value_2, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_210(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_2.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_210(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PPB*/
      ctx[58].tahun_buku + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PPB*/
      ctx[58].judul_buku + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PPB*/
      ctx[58].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PPB*/
      ctx[58].penerbit + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PPB*/
      ctx[58].isbn + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PPB*/
        ctx2[58].tahun_buku + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PPB*/
        ctx2[58].judul_buku + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PPB*/
        ctx2[58].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PPB*/
        ctx2[58].penerbit + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PPB*/
        ctx2[58].isbn + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_if_block_625(ctx) {
    let each_1_anchor;
    let each_value_1 = ensure_array_like(
      /*user*/
      ctx[52].Phki
    );
    let each_blocks = [];
    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_114(get_each_context_114(ctx, each_value_1, i));
    }
    return {
      c() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
      },
      m(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor);
          }
        }
        insert(target, each_1_anchor, anchor);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384) {
          each_value_1 = ensure_array_like(
            /*user*/
            ctx2[52].Phki
          );
          let i;
          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_114(ctx2, each_value_1, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block_114(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value_1.length;
        }
      },
      d(detaching) {
        if (detaching) {
          detach(each_1_anchor);
        }
        destroy_each(each_blocks, detaching);
      }
    };
  }
  function create_each_block_114(ctx) {
    let tr;
    let td0;
    let t0_value = (
      /*PHKI*/
      ctx[55].tahun_hki + ""
    );
    let t0;
    let t1;
    let td1;
    let t2_value = (
      /*PHKI*/
      ctx[55].judul_hki + ""
    );
    let t2;
    let t3;
    let td2;
    let t4_value = (
      /*PHKI*/
      ctx[55].nama_penulis + ""
    );
    let t4;
    let t5;
    let td3;
    let t6_value = (
      /*PHKI*/
      ctx[55].jenis_hki + ""
    );
    let t6;
    let t7;
    let td4;
    let t8_value = (
      /*PHKI*/
      ctx[55].no_hki + ""
    );
    let t8;
    let t9;
    return {
      c() {
        tr = element("tr");
        td0 = element("td");
        t0 = text(t0_value);
        t1 = space();
        td1 = element("td");
        t2 = text(t2_value);
        t3 = space();
        td2 = element("td");
        t4 = text(t4_value);
        t5 = space();
        td3 = element("td");
        t6 = text(t6_value);
        t7 = space();
        td4 = element("td");
        t8 = text(t8_value);
        t9 = space();
      },
      m(target, anchor) {
        insert(target, tr, anchor);
        append(tr, td0);
        append(td0, t0);
        append(tr, t1);
        append(tr, td1);
        append(td1, t2);
        append(tr, t3);
        append(tr, td2);
        append(td2, t4);
        append(tr, t5);
        append(tr, td3);
        append(td3, t6);
        append(tr, t7);
        append(tr, td4);
        append(td4, t8);
        append(tr, t9);
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*biodataAnggota*/
        16384 && t0_value !== (t0_value = /*PHKI*/
        ctx2[55].tahun_hki + ""))
          set_data(t0, t0_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t2_value !== (t2_value = /*PHKI*/
        ctx2[55].judul_hki + ""))
          set_data(t2, t2_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t4_value !== (t4_value = /*PHKI*/
        ctx2[55].nama_penulis + ""))
          set_data(t4, t4_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t6_value !== (t6_value = /*PHKI*/
        ctx2[55].jenis_hki + ""))
          set_data(t6, t6_value);
        if (dirty[0] & /*biodataAnggota*/
        16384 && t8_value !== (t8_value = /*PHKI*/
        ctx2[55].no_hki + ""))
          set_data(t8, t8_value);
      },
      d(detaching) {
        if (detaching) {
          detach(tr);
        }
      }
    };
  }
  function create_each_block20(ctx) {
    let div;
    let h6;
    let t0;
    let t1_value = (
      /*user*/
      ctx[52].profile.nama_lengkap + ""
    );
    let t1;
    let t2;
    let span;
    let t3_value = (
      /*biodataAnggota*/
      ctx[14][
        /*index*/
        ctx[54]
      ].profileVisible ? "(tutup)" : "(buka)"
    );
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    function click_handler() {
      return (
        /*click_handler*/
        ctx[37](
          /*index*/
          ctx[54]
        )
      );
    }
    let if_block = (
      /*biodataAnggota*/
      ctx[14][
        /*index*/
        ctx[54]
      ].profileVisible && create_if_block_526(ctx)
    );
    return {
      c() {
        div = element("div");
        h6 = element("h6");
        t0 = text("Biodata - ");
        t1 = text(t1_value);
        t2 = space();
        span = element("span");
        t3 = text(t3_value);
        t4 = space();
        if (if_block)
          if_block.c();
        t5 = space();
        attr(span, "class", "toggle-button svelte-1iurio9");
        attr(h6, "class", "title is-6");
        attr(div, "class", "box");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, h6);
        append(h6, t0);
        append(h6, t1);
        append(h6, t2);
        append(h6, span);
        append(span, t3);
        append(div, t4);
        if (if_block)
          if_block.m(div, null);
        append(div, t5);
        current = true;
        if (!mounted) {
          dispose = listen(span, "click", click_handler);
          mounted = true;
        }
      },
      p(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty[0] & /*biodataAnggota*/
        16384) && t1_value !== (t1_value = /*user*/
        ctx[52].profile.nama_lengkap + ""))
          set_data(t1, t1_value);
        if ((!current || dirty[0] & /*biodataAnggota*/
        16384) && t3_value !== (t3_value = /*biodataAnggota*/
        ctx[14][
          /*index*/
          ctx[54]
        ].profileVisible ? "(tutup)" : "(buka)"))
          set_data(t3, t3_value);
        if (
          /*biodataAnggota*/
          ctx[14][
            /*index*/
            ctx[54]
          ].profileVisible
        ) {
          if (if_block) {
            if_block.p(ctx, dirty);
            if (dirty[0] & /*biodataAnggota*/
            16384) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_526(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, t5);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_241(ctx) {
    let div;
    let p;
    let button;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p = element("p");
        button = element("button");
        button.textContent = "Next";
        attr(button, "class", "button is-info");
        attr(p, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p);
        append(p, button);
        if (!mounted) {
          dispose = listen(
            button,
            "click",
            /*clicktab2*/
            ctx[23]
          );
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        dispose();
      }
    };
  }
  function create_if_block_141(ctx) {
    let div;
    let p0;
    let button0;
    let t1;
    let p1;
    let button1;
    let t3;
    let p2;
    let button2;
    let mounted;
    let dispose;
    return {
      c() {
        div = element("div");
        p0 = element("p");
        button0 = element("button");
        button0.textContent = "Back";
        t1 = space();
        p1 = element("p");
        button1 = element("button");
        button1.textContent = "Simpan";
        t3 = space();
        p2 = element("p");
        button2 = element("button");
        button2.textContent = "Submit";
        attr(button0, "class", "button");
        attr(p0, "class", "control");
        attr(button1, "class", "button is-info is-light");
        toggle_class(
          button1,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p1, "class", "control");
        attr(button2, "class", "button is-info");
        toggle_class(
          button2,
          "is-loading",
          /*isLoading*/
          ctx[2]
        );
        attr(p2, "class", "control");
        attr(div, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, div, anchor);
        append(div, p0);
        append(p0, button0);
        append(div, t1);
        append(div, p1);
        append(p1, button1);
        append(div, t3);
        append(div, p2);
        append(p2, button2);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*clicktab1*/
              ctx[22]
            ),
            listen(
              button1,
              "click",
              /*simpanProposal*/
              ctx[20]
            ),
            listen(
              button2,
              "click",
              /*submitProposal*/
              ctx[21]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button1,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
        if (dirty[0] & /*isLoading*/
        4) {
          toggle_class(
            button2,
            "is-loading",
            /*isLoading*/
            ctx2[2]
          );
        }
      },
      d(detaching) {
        if (detaching) {
          detach(div);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_220(ctx) {
    let h2;
    let t1;
    let hr;
    let t2;
    let div2;
    let ul;
    let li0;
    let span1;
    let span0;
    let icon0;
    let t3;
    let div0;
    let t7;
    let li1;
    let span3;
    let span2;
    let icon1;
    let t8;
    let div1;
    let t12;
    let t13;
    let t14;
    let t15;
    let if_block3_anchor;
    let current;
    let mounted;
    let dispose;
    icon0 = new Icon_default({ props: { id: "orang", src: penelitian } });
    icon1 = new Icon_default({
      props: { id: "accountEdit", src: accountEdit }
    });
    let if_block0 = (
      /*tab1*/
      ctx[17] === true && create_if_block_1510(ctx)
    );
    let if_block1 = (
      /*tab2*/
      ctx[18] === true && create_if_block_340(ctx)
    );
    let if_block2 = (
      /*tab1*/
      ctx[17] === true && create_if_block_241(ctx)
    );
    let if_block3 = (
      /*tab2*/
      ctx[18] === true && create_if_block_141(ctx)
    );
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Proposal PPM Mandiri";
        t1 = space();
        hr = element("hr");
        t2 = space();
        div2 = element("div");
        ul = element("ul");
        li0 = element("li");
        span1 = element("span");
        span0 = element("span");
        create_component(icon0.$$.fragment);
        t3 = space();
        div0 = element("div");
        div0.innerHTML = `<p class="is-size-5"><b>Step 1</b></p> <p class="is-size-6">Proposal</p>`;
        t7 = space();
        li1 = element("li");
        span3 = element("span");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t8 = space();
        div1 = element("div");
        div1.innerHTML = `<p class="is-size-5"><b>Step 2</b></p> <p class="is-size-6">Biodata Peneliti</p>`;
        t12 = space();
        if (if_block0)
          if_block0.c();
        t13 = space();
        if (if_block1)
          if_block1.c();
        t14 = space();
        if (if_block2)
          if_block2.c();
        t15 = space();
        if (if_block3)
          if_block3.c();
        if_block3_anchor = empty();
        attr(h2, "class", "title is-2");
        attr(span0, "class", "icon");
        attr(span1, "class", "steps-marker");
        attr(div0, "class", "steps-content");
        attr(li0, "data-step", "1");
        attr(li0, "class", "steps-segment");
        toggle_class(
          li0,
          "is-active",
          /*tab1*/
          ctx[17]
        );
        attr(span2, "class", "icon");
        attr(span3, "class", "steps-marker");
        attr(div1, "class", "steps-content");
        attr(li1, "data-step", "2");
        attr(li1, "class", "steps-segment");
        toggle_class(
          li1,
          "is-active",
          /*tab2*/
          ctx[18]
        );
        attr(ul, "class", "steps is-medium has-content-centered svelte-1iurio9");
        attr(div2, "class", "box");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr, anchor);
        insert(target, t2, anchor);
        insert(target, div2, anchor);
        append(div2, ul);
        append(ul, li0);
        append(li0, span1);
        append(span1, span0);
        mount_component(icon0, span0, null);
        append(li0, t3);
        append(li0, div0);
        append(ul, t7);
        append(ul, li1);
        append(li1, span3);
        append(span3, span2);
        mount_component(icon1, span2, null);
        append(li1, t8);
        append(li1, div1);
        insert(target, t12, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t13, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, t14, anchor);
        if (if_block2)
          if_block2.m(target, anchor);
        insert(target, t15, anchor);
        if (if_block3)
          if_block3.m(target, anchor);
        insert(target, if_block3_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = [
            listen(
              li0,
              "click",
              /*clicktab1*/
              ctx[22]
            ),
            listen(
              li1,
              "click",
              /*clicktab2*/
              ctx[23]
            )
          ];
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if (!current || dirty[0] & /*tab1*/
        131072) {
          toggle_class(
            li0,
            "is-active",
            /*tab1*/
            ctx2[17]
          );
        }
        if (!current || dirty[0] & /*tab2*/
        262144) {
          toggle_class(
            li1,
            "is-active",
            /*tab2*/
            ctx2[18]
          );
        }
        if (
          /*tab1*/
          ctx2[17] === true
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*tab1*/
            131072) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_1510(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t13.parentNode, t13);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*tab2*/
          ctx2[18] === true
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*tab2*/
            262144) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_340(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t14.parentNode, t14);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (
          /*tab1*/
          ctx2[17] === true
        ) {
          if (if_block2) {
            if_block2.p(ctx2, dirty);
          } else {
            if_block2 = create_if_block_241(ctx2);
            if_block2.c();
            if_block2.m(t15.parentNode, t15);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }
        if (
          /*tab2*/
          ctx2[18] === true
        ) {
          if (if_block3) {
            if_block3.p(ctx2, dirty);
          } else {
            if_block3 = create_if_block_141(ctx2);
            if_block3.c();
            if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
          }
        } else if (if_block3) {
          if_block3.d(1);
          if_block3 = null;
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr);
          detach(t2);
          detach(div2);
          detach(t12);
          detach(t13);
          detach(t14);
          detach(t15);
          detach(if_block3_anchor);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if (if_block2)
          if_block2.d(detaching);
        if (if_block3)
          if_block3.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_131(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form proposal untuk ke step selanjutnya!";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot21(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Pastikan untuk melengkapi Identitas Diri semua anggota";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment46(ctx) {
    let current_block_type_index;
    let if_block;
    let t0;
    let modalerror0;
    let updating_show;
    let t1;
    let modalerror1;
    let updating_show_1;
    let current;
    const if_block_creators = [create_if_block25, create_if_block_3310];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*pendaftaranMandiri*/
        ctx2[4] === 1
      )
        return 0;
      if (
        /*pendaftaranMandiri*/
        ctx2[4] === 0
      )
        return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx, [-1, -1, -1]))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    function modalerror0_show_binding(value) {
      ctx[38](value);
    }
    let modalerror0_props = {
      $$slots: { default: [create_default_slot_131] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorProposal*/
      ctx[1] !== void 0
    ) {
      modalerror0_props.show = /*showModalErrorProposal*/
      ctx[1];
    }
    modalerror0 = new Modalerror_default({ props: modalerror0_props });
    binding_callbacks.push(() => bind(modalerror0, "show", modalerror0_show_binding));
    function modalerror1_show_binding(value) {
      ctx[39](value);
    }
    let modalerror1_props = {
      $$slots: { default: [create_default_slot21] },
      $$scope: { ctx }
    };
    if (
      /*showModalErrorIdentitas*/
      ctx[0] !== void 0
    ) {
      modalerror1_props.show = /*showModalErrorIdentitas*/
      ctx[0];
    }
    modalerror1 = new Modalerror_default({ props: modalerror1_props });
    binding_callbacks.push(() => bind(modalerror1, "show", modalerror1_show_binding));
    return {
      c() {
        if (if_block)
          if_block.c();
        t0 = space();
        create_component(modalerror0.$$.fragment);
        t1 = space();
        create_component(modalerror1.$$.fragment);
      },
      m(target, anchor) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(target, anchor);
        }
        insert(target, t0, anchor);
        mount_component(modalerror0, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalerror1, target, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx2, dirty);
          }
        } else {
          if (if_block) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index];
            if (!if_block) {
              if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block.c();
            } else {
              if_block.p(ctx2, dirty);
            }
            transition_in(if_block, 1);
            if_block.m(t0.parentNode, t0);
          } else {
            if_block = null;
          }
        }
        const modalerror0_changes = {};
        if (dirty[2] & /*$$scope*/
        8388608) {
          modalerror0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty[0] & /*showModalErrorProposal*/
        2) {
          updating_show = true;
          modalerror0_changes.show = /*showModalErrorProposal*/
          ctx2[1];
          add_flush_callback(() => updating_show = false);
        }
        modalerror0.$set(modalerror0_changes);
        const modalerror1_changes = {};
        if (dirty[2] & /*$$scope*/
        8388608) {
          modalerror1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty[0] & /*showModalErrorIdentitas*/
        1) {
          updating_show_1 = true;
          modalerror1_changes.show = /*showModalErrorIdentitas*/
          ctx2[0];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalerror1.$set(modalerror1_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(modalerror0.$$.fragment, local);
        transition_in(modalerror1.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        transition_out(modalerror0.$$.fragment, local);
        transition_out(modalerror1.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d(detaching);
        }
        destroy_component(modalerror0, detaching);
        destroy_component(modalerror1, detaching);
      }
    };
  }
  function isObjectEmpty5(objectName) {
    return objectName && Object.keys(objectName).length === 0 && objectName.constructor === Object;
  }
  function formatRupiah8(angka, prefix) {
    var number_string = angka.replace(/[^,\d]/g, "").toString(), split = number_string.split(","), sisa = split[0].length % 3, rupiah = split[0].substr(0, sisa), ribuan = split[0].substr(sisa).match(/\d{3}/gi);
    if (ribuan) {
      separator = sisa ? "." : "";
      rupiah += separator + ribuan.join(".");
    }
    rupiah = split[1] !== void 0 ? rupiah + "," + split[1] : rupiah;
    return prefix === void 0 ? rupiah : rupiah ? "Rp. " + rupiah : "";
  }
  function instance39($$self, $$props, $$invalidate) {
    let $ppmFile;
    let $route;
    let $apiURL;
    component_subscribe($$self, ppmFile, ($$value) => $$invalidate(19, $ppmFile = $$value));
    component_subscribe($$self, route, ($$value) => $$invalidate(44, $route = $$value));
    component_subscribe($$self, apiURL, ($$value) => $$invalidate(45, $apiURL = $$value));
    const localStorage_namaLengkap = localStorage.getItem("nama_lengkap");
    const localStorage_id = localStorage.getItem("id");
    const accessToken = localStorage.getItem("token");
    const id = Number(localStorage.getItem("id"));
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let showModalErrorIdentitas = false;
    let showModalErrorProposal = false;
    let isLoading = false;
    let myAbstract;
    let filePpm;
    let ppmFileName2;
    let rabFileName2;
    let pendaftaranMandiri2;
    let kelompokKeahlian = "";
    let biayaPenelitian = "";
    let tanggalSelesai = "";
    let jenisKegiatan = "";
    let jenisProposal = "";
    let tanggalMulai = "";
    let jenisSkema = "";
    let judul = "";
    let topik = "";
    let anggotaTim = [
      {
        value: localStorage_id,
        label: localStorage_namaLengkap,
        role: "Ketua"
      }
    ];
    let biodataAnggota = [];
    let items = [];
    let error = {};
    onMount(async () => {
      $$invalidate(2, isLoading = false);
      let randomChar = "";
      let resultGenerateRandomChar = "";
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let i = 0; i < 10; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        resultGenerateRandomChar += characters.charAt(randomIndex);
      }
      randomChar = resultGenerateRandomChar;
      ppmFileName2 = id + "_Proposal PPM_" + randomChar;
      rabFileName2 = id + "_RAB PPM_" + randomChar;
      const response = await fetch($apiURL + "/pilihUser", { method: "GET", headers });
      const result = await response.json();
      if (response.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (response.ok) {
          listUser = result;
          $$invalidate(15, items = []);
          for (const [key, value] of Object.entries(listUser)) {
            items.push({
              value: value.uid,
              label: value.nama_lengkap
            });
          }
        } else {
          console.log(response);
        }
      }
      const responseWP = await fetch($apiURL + "/waktuPendaftaranPPMInternal", { method: "GET", headers });
      const resultWP = await responseWP.json();
      if (responseWP.status === 401) {
        location.pathname = "/tokenexpired";
      } else {
        if (responseWP.ok) {
          $$invalidate(4, pendaftaranMandiri2 = resultWP.buka_pendaftaran_mandiri);
        } else {
          console.log(responseWP);
        }
      }
    });
    async function getBiodataAnggota() {
      let ids = anggotaTim.map((anggota) => anggota.value);
      let promises = ids.map(async (idAnggota) => {
        try {
          const profileResponse = await fetch($apiURL + "/user/" + idAnggota, { method: "GET", headers });
          if (profileResponse.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!profileResponse.ok) {
            throw new Error(`Failed to fetch profile for ID ${idAnggota}`);
          }
          const profileResult = await profileResponse.json();
          const RPS1Response = await fetch($apiURL + "/riwayatPendidikanS1/" + idAnggota, { method: "GET", headers });
          if (RPS1Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS1Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S1 for ID ${idAnggota}`);
          }
          const RPS1Result = await RPS1Response.json();
          const RPS2Response = await fetch($apiURL + "/riwayatPendidikanS2/" + idAnggota, { method: "GET", headers });
          if (RPS2Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS2Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S2 for ID ${idAnggota}`);
          }
          const RPS2Result = await RPS2Response.json();
          const RPS3Response = await fetch($apiURL + "/riwayatPendidikanS3/" + idAnggota, { method: "GET", headers });
          if (RPS3Response.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!RPS3Response.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const RPS3Result = await RPS3Response.json();
          const responsePP = await fetch($apiURL + "/pengalamanPenelitian/" + idAnggota, { method: "GET", headers });
          if (responsePP.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePP.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPP = await responsePP.json();
          const responsePM = await fetch($apiURL + "/pengalamanPengmas/" + idAnggota, { method: "GET", headers });
          if (responsePM.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePM.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPM = await responsePM.json();
          const responsePD = await fetch($apiURL + "/pengalamanDiseminasi/" + idAnggota, { method: "GET", headers });
          if (responsePD.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePD.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPD = await responsePD.json();
          const responsePPub = await fetch($apiURL + "/pengalamanPublikasi/" + idAnggota, { method: "GET", headers });
          if (responsePPub.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPub.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPub = await responsePPub.json();
          const responsePPB = await fetch($apiURL + "/pengalamanPenulisanBuku/" + idAnggota, { method: "GET", headers });
          if (responsePPB.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePPB.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPPB = await responsePPB.json();
          const responsePHKI = await fetch($apiURL + "/pengalamanHKI/" + idAnggota, { method: "GET", headers });
          if (responsePHKI.status === 401) {
            location.pathname = "/tokenexpired";
            return;
          }
          if (!responsePHKI.ok) {
            throw new Error(`Failed to fetch Riwayat Pendidikan S3 for ID ${idAnggota}`);
          }
          const resultPHKI = await responsePHKI.json();
          return {
            profile: profileResult,
            RPS1: RPS1Result.dbData,
            RPS2: RPS2Result.dbData,
            RPS3: RPS3Result.dbData,
            Ppenelitian: resultPP.dbData,
            Ppengmas: resultPM.dbData,
            Pdiseminasi: resultPD.dbData,
            Ppublikasi: resultPPub.dbData,
            PpenulisanBuku: resultPPB.dbData,
            Phki: resultPHKI.dbData
          };
        } catch (error2) {
          console.error(`Error fetching data for ID ${idAnggota}:`, error2);
          return {
            profile: null,
            RPS1: [],
            RPS2: [],
            RPS3: [],
            Ppenelitian: [],
            Ppengmas: [],
            Pdiseminasi: [],
            Ppublikasi: [],
            PpenulisanBuku: [],
            Phki: [],
            error: error2.message
          };
        }
      });
      $$invalidate(14, biodataAnggota = await Promise.all(promises.filter(Boolean)));
    }
    async function simpanProposal() {
      $$invalidate(16, error = {});
      $$invalidate(2, isLoading = true);
      const readerPpm = new FileReader();
      if (jenisKegiatan === "Penelitian") {
        jenisSkema = "Riset Mandiri";
      } else if (jenisKegiatan === "Pengabdian Masyarakat") {
        jenisSkema = "Pengabdian Masyarakat Mandiri";
      }
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 0,
        rabFileName: rabFileName2,
        ppmFileName: ppmFileName2
      };
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const cekFileProposal = new Promise((resolve, reject) => {
        if (!filePpm) {
          resolve("No fileProposal selected");
          return;
        }
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName: ppmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerPpm.readAsDataURL(filePpm);
      });
      const cekDataProposalPPM = new Promise(async (resolve, reject) => {
        const responseProposal = await fetch($apiURL + "/ppm", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (responseProposal.status === 401) {
          location.pathname = "/tokenexpired";
          reject("Token expired");
        } else {
          if (responseProposal.ok) {
            resolve(resultProposal);
          } else {
            console.log(responseProposal.msg, error);
            reject("Error Submitting Data Proposal PPM");
          }
        }
      });
      try {
        await Promise.all([cekFileProposal, cekDataProposalPPM]);
      } finally {
        $$invalidate(2, isLoading = false);
        $route("/dosen/pendaftaran");
      }
    }
    async function submitProposal() {
      $$invalidate(16, error = {});
      $$invalidate(2, isLoading = true);
      const readerPpm = new FileReader();
      if (jenisKegiatan === "Penelitian") {
        jenisSkema = "Riset Mandiri";
      } else if (jenisKegiatan === "Pengabdian Masyarakat") {
        jenisSkema = "Pengabdian Masyarakat Mandiri";
      }
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        jenisSkema,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        biodataAnggota,
        judul,
        myAbstract,
        status: 2,
        ppmFileName: ppmFileName2,
        rabFileName: rabFileName2
      };
      for (const user of biodataAnggota) {
        if (user.profile) {
          for (const value of Object.values(user.profile)) {
            if (!value) {
              $$invalidate(0, showModalErrorIdentitas = true);
              break;
            }
          }
        }
        if (showModalErrorIdentitas)
          break;
      }
      if (showModalErrorIdentitas) {
        console.error("Biodata validation failed. Some fields are empty.");
        $$invalidate(2, isLoading = false);
        return;
      }
      const cekFileProposal = new Promise((resolve, reject) => {
        if (!filePpm) {
          resolve("No fileProposal selected");
          return;
        }
        readerPpm.onloadend = async () => {
          const base64Data = readerPpm.result.split(",")[1];
          const payloadPpmFile = {
            filePpm: {
              name: filePpm.name,
              type: filePpm.type,
              data: base64Data
            },
            ppmFileName: ppmFileName2
          };
          try {
            const response = await fetch($apiURL + "/uploadPpm", {
              method: "POST",
              headers,
              body: JSON.stringify(payloadPpmFile)
            });
            const result = await response.json();
            if (response.status === 401) {
              location.pathname = "/tokenexpired";
              reject("Token expired");
            } else if (response.ok) {
              resolve(result);
            } else {
              reject(result);
            }
          } catch (error2) {
            console.error("Error uploading file:", error2);
            reject(error2);
          }
        };
        readerPpm.readAsDataURL(filePpm);
      });
      const cekDataProposalPPM = new Promise(async (resolve, reject) => {
        const responseProposal = await fetch($apiURL + "/ppm", {
          method: "POST",
          headers,
          body: JSON.stringify(payloadProposal)
        });
        const resultProposal = await responseProposal.json();
        if (responseProposal.status === 401) {
          location.pathname = "/tokenexpired";
          reject("Token expired");
        } else {
          if (responseProposal.ok) {
            resolve(resultProposal);
          } else {
            console.log(responseProposal.msg, error);
            reject("Error Submitting Data Proposal PPM");
          }
        }
      });
      try {
        await Promise.all([cekFileProposal, cekDataProposalPPM]);
      } finally {
        $$invalidate(2, isLoading = false);
        $route("/dosen/pendaftaran");
      }
    }
    let tab1 = true;
    let tab2 = false;
    async function clicktab1() {
      if (!tab1) {
        $$invalidate(17, tab1 = true);
        $$invalidate(18, tab2 = false);
      }
    }
    async function clicktab2() {
      $$invalidate(16, error = {});
      let payloadProposal = {
        id,
        jenisProposal,
        jenisKegiatan,
        kelompokKeahlian,
        topik,
        tanggalMulai,
        tanggalSelesai,
        biayaPenelitian,
        anggotaTim,
        judul,
        myAbstract,
        ppmFileName: ppmFileName2
      };
      for (const [key, value] of Object.entries(payloadProposal)) {
        if (!value || key === "anggotaTim" && Array.isArray(value) && value.length <= 1) {
          $$invalidate(16, error[key] = `This field is required`, error);
        }
      }
      if (isObjectEmpty5($ppmFile)) {
        $$invalidate(16, error["fileProposal"] = `*`, error);
      }
      if (Object.keys(error).length > 0) {
        $$invalidate(1, showModalErrorProposal = true);
      } else {
        if (!tab2) {
          await getBiodataAnggota();
          $$invalidate(17, tab1 = false);
          $$invalidate(18, tab2 = true);
        }
      }
    }
    function filePpmChange(e) {
      filePpm = e.target.files[0];
      set_store_value(ppmFile, $ppmFile = e.target.files[0], $ppmFile);
    }
    function deleteMember(e) {
      let uid = e.target.getAttribute("data-value");
      $$invalidate(13, anggotaTim = anggotaTim.filter((member) => {
        return member.value !== uid;
      }));
    }
    function input_input_handler() {
      judul = this.value;
      $$invalidate(11, judul);
    }
    function textarea_input_handler() {
      myAbstract = this.value;
      $$invalidate(3, myAbstract);
    }
    function select_change_handler() {
      jenisProposal = select_value(this);
      $$invalidate(9, jenisProposal);
    }
    function select_change_handler_1() {
      jenisKegiatan = select_value(this);
      $$invalidate(8, jenisKegiatan);
    }
    function input_input_handler_1() {
      kelompokKeahlian = this.value;
      $$invalidate(5, kelompokKeahlian);
    }
    function input_input_handler_2() {
      topik = this.value;
      $$invalidate(12, topik);
    }
    function input_input_handler_3() {
      tanggalMulai = this.value;
      $$invalidate(10, tanggalMulai);
    }
    function input_input_handler_4() {
      tanggalSelesai = this.value;
      $$invalidate(7, tanggalSelesai);
    }
    function input_input_handler_5() {
      biayaPenelitian = this.value;
      $$invalidate(6, biayaPenelitian);
    }
    const keyup_handler = () => $$invalidate(6, biayaPenelitian = formatRupiah8(biayaPenelitian, "Rp. "));
    function select_result_binding(value) {
      anggotaTim = value;
      $$invalidate(13, anggotaTim);
    }
    const click_handler = (index) => $$invalidate(14, biodataAnggota[index].profileVisible = !biodataAnggota[index].profileVisible, biodataAnggota);
    function modalerror0_show_binding(value) {
      showModalErrorProposal = value;
      $$invalidate(1, showModalErrorProposal);
    }
    function modalerror1_show_binding(value) {
      showModalErrorIdentitas = value;
      $$invalidate(0, showModalErrorIdentitas);
    }
    return [
      showModalErrorIdentitas,
      showModalErrorProposal,
      isLoading,
      myAbstract,
      pendaftaranMandiri2,
      kelompokKeahlian,
      biayaPenelitian,
      tanggalSelesai,
      jenisKegiatan,
      jenisProposal,
      tanggalMulai,
      judul,
      topik,
      anggotaTim,
      biodataAnggota,
      items,
      error,
      tab1,
      tab2,
      $ppmFile,
      simpanProposal,
      submitProposal,
      clicktab1,
      clicktab2,
      filePpmChange,
      deleteMember,
      input_input_handler,
      textarea_input_handler,
      select_change_handler,
      select_change_handler_1,
      input_input_handler_1,
      input_input_handler_2,
      input_input_handler_3,
      input_input_handler_4,
      input_input_handler_5,
      keyup_handler,
      select_result_binding,
      click_handler,
      modalerror0_show_binding,
      modalerror1_show_binding
    ];
  }
  var Proposalmandiri = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance39, create_fragment46, safe_not_equal, {}, null, [-1, -1, -1]);
    }
  };
  var proposalmandiri_default = Proposalmandiri;

  // src/pages/dosen/select.svelte
  init_define_process();
  function create_default_slot_221(ctx) {
    let button0;
    let t1;
    let br0;
    let t2;
    let br1;
    let t3;
    let button1_1;
    let mounted;
    let dispose;
    return {
      c() {
        button0 = element("button");
        button0.textContent = "Modal Error";
        t1 = space();
        br0 = element("br");
        t2 = space();
        br1 = element("br");
        t3 = space();
        button1_1 = element("button");
        button1_1.textContent = "Modal Checked";
        attr(button0, "class", "button is-danger");
        attr(button1_1, "class", "button is-success");
      },
      m(target, anchor) {
        insert(target, button0, anchor);
        insert(target, t1, anchor);
        insert(target, br0, anchor);
        insert(target, t2, anchor);
        insert(target, br1, anchor);
        insert(target, t3, anchor);
        insert(target, button1_1, anchor);
        if (!mounted) {
          dispose = [
            listen(
              button0,
              "click",
              /*button1*/
              ctx[2]
            ),
            listen(
              button1_1,
              "click",
              /*button2*/
              ctx[3]
            )
          ];
          mounted = true;
        }
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(button0);
          detach(t1);
          detach(br0);
          detach(t2);
          detach(br1);
          detach(t3);
          detach(button1_1);
        }
        mounted = false;
        run_all(dispose);
      }
    };
  }
  function create_default_slot_139(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Lengkapi semua form";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_default_slot22(ctx) {
    let p;
    return {
      c() {
        p = element("p");
        p.textContent = "Data berhasil disimpan";
      },
      m(target, anchor) {
        insert(target, p, anchor);
      },
      p: noop,
      d(detaching) {
        if (detaching) {
          detach(p);
        }
      }
    };
  }
  function create_fragment47(ctx) {
    let article2;
    let t0;
    let modalerror;
    let updating_show;
    let t1;
    let modalchecked;
    let updating_show_1;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot_221] },
        $$scope: { ctx }
      }
    });
    function modalerror_show_binding(value) {
      ctx[4](value);
    }
    let modalerror_props = {
      $$slots: { default: [create_default_slot_139] },
      $$scope: { ctx }
    };
    if (
      /*showModalError*/
      ctx[0] !== void 0
    ) {
      modalerror_props.show = /*showModalError*/
      ctx[0];
    }
    modalerror = new Modalerror_default({ props: modalerror_props });
    binding_callbacks.push(() => bind(modalerror, "show", modalerror_show_binding));
    function modalchecked_show_binding(value) {
      ctx[5](value);
    }
    let modalchecked_props = {
      $$slots: { default: [create_default_slot22] },
      $$scope: { ctx }
    };
    if (
      /*showModalChecked*/
      ctx[1] !== void 0
    ) {
      modalchecked_props.show = /*showModalChecked*/
      ctx[1];
    }
    modalchecked = new Modalchecked_default({ props: modalchecked_props });
    binding_callbacks.push(() => bind(modalchecked, "show", modalchecked_show_binding));
    return {
      c() {
        create_component(article2.$$.fragment);
        t0 = space();
        create_component(modalerror.$$.fragment);
        t1 = space();
        create_component(modalchecked.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        insert(target, t0, anchor);
        mount_component(modalerror, target, anchor);
        insert(target, t1, anchor);
        mount_component(modalchecked, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        512) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
        const modalerror_changes = {};
        if (dirty & /*$$scope*/
        512) {
          modalerror_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show && dirty & /*showModalError*/
        1) {
          updating_show = true;
          modalerror_changes.show = /*showModalError*/
          ctx2[0];
          add_flush_callback(() => updating_show = false);
        }
        modalerror.$set(modalerror_changes);
        const modalchecked_changes = {};
        if (dirty & /*$$scope*/
        512) {
          modalchecked_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_show_1 && dirty & /*showModalChecked*/
        2) {
          updating_show_1 = true;
          modalchecked_changes.show = /*showModalChecked*/
          ctx2[1];
          add_flush_callback(() => updating_show_1 = false);
        }
        modalchecked.$set(modalchecked_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        transition_in(modalerror.$$.fragment, local);
        transition_in(modalchecked.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        transition_out(modalerror.$$.fragment, local);
        transition_out(modalchecked.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
        }
        destroy_component(article2, detaching);
        destroy_component(modalerror, detaching);
        destroy_component(modalchecked, detaching);
      }
    };
  }
  function instance40($$self, $$props, $$invalidate) {
    const accessToken = localStorage.getItem("token");
    const id = Number(localStorage.getItem("id"));
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json"
    };
    let showModalError = false;
    let showModalChecked = false;
    function button1() {
      $$invalidate(0, showModalError = true);
    }
    function button2() {
      $$invalidate(1, showModalChecked = true);
    }
    function modalerror_show_binding(value) {
      showModalError = value;
      $$invalidate(0, showModalError);
    }
    function modalchecked_show_binding(value) {
      showModalChecked = value;
      $$invalidate(1, showModalChecked);
    }
    return [
      showModalError,
      showModalChecked,
      button1,
      button2,
      modalerror_show_binding,
      modalchecked_show_binding
    ];
  }
  var Select_1 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance40, create_fragment47, safe_not_equal, {});
    }
  };
  var select_default = Select_1;

  // src/pages/dosen/testform.svelte
  init_define_process();
  function create_default_slot23(ctx) {
    let h2;
    let t1;
    let hr0;
    let t2;
    let div31;
    let div30;
    let div29;
    let h4;
    let t4;
    let br;
    let t5;
    let div4;
    let div1;
    let label0;
    let t8;
    let div0;
    let select0;
    let option0;
    let option1;
    let t11;
    let div3;
    let label1;
    let t13;
    let div2;
    let select1;
    let option2;
    let option3;
    let t16;
    let div8;
    let div5;
    let t19;
    let div7;
    let label3;
    let t21;
    let div6;
    let select2;
    let option4;
    let t23;
    let div11;
    let t29;
    let div14;
    let t35;
    let div17;
    let div16;
    let label8;
    let t37;
    let div15;
    let select3;
    let option5;
    let t39;
    let div28;
    let div27;
    let table;
    let thead;
    let t44;
    let tbody;
    let tr1;
    let td0;
    let button0;
    let span1;
    let icon0;
    let t45;
    let td1;
    let t47;
    let td2;
    let t49;
    let tr2;
    let td3;
    let button1;
    let span2;
    let icon1;
    let t50;
    let td4;
    let t52;
    let td5;
    let t54;
    let tr3;
    let td6;
    let button2;
    let span3;
    let icon2;
    let t55;
    let td7;
    let t57;
    let td8;
    let t59;
    let hr1;
    let t60;
    let div19;
    let t63;
    let div21;
    let t66;
    let div26;
    let div23;
    let label11;
    let t68;
    let div22;
    let label12;
    let input6;
    let t69;
    let span6;
    let span4;
    let icon3;
    let t70;
    let span5;
    let t72;
    let span7;
    let t74;
    let div25;
    let label13;
    let t76;
    let div24;
    let label14;
    let input7;
    let t77;
    let span10;
    let span8;
    let icon4;
    let t78;
    let span9;
    let t80;
    let span11;
    let t82;
    let div32;
    let current;
    icon0 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon1 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon2 = new Icon_default({ props: { id: "delete", src: deleteIcon } });
    icon3 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    icon4 = new Icon_default({
      props: { id: "download", src: downloadIcon }
    });
    return {
      c() {
        h2 = element("h2");
        h2.textContent = "Pendaftaran Proposal";
        t1 = space();
        hr0 = element("hr");
        t2 = space();
        div31 = element("div");
        div30 = element("div");
        div29 = element("div");
        h4 = element("h4");
        h4.textContent = "Detail PPM";
        t4 = space();
        br = element("br");
        t5 = space();
        div4 = element("div");
        div1 = element("div");
        label0 = element("label");
        label0.innerHTML = `<h6 class="title is-6">Jenis Proposal<span class="has-text-danger">*</span></h6>`;
        t8 = space();
        div0 = element("div");
        select0 = element("select");
        option0 = element("option");
        option0.textContent = "Proposal Awal";
        option1 = element("option");
        option1.textContent = "Proposal Lanjutan";
        t11 = space();
        div3 = element("div");
        label1 = element("label");
        label1.innerHTML = `<h6 class="title is-6">Jenis Kegiatan</h6>`;
        t13 = space();
        div2 = element("div");
        select1 = element("select");
        option2 = element("option");
        option2.textContent = "Penelitian";
        option3 = element("option");
        option3.textContent = "Pengabdian Masyarakat";
        t16 = space();
        div8 = element("div");
        div5 = element("div");
        div5.innerHTML = `<label class="label" for="label"><h6 class="title is-6">Kelompok Keahlian</h6></label> <input class="input"/>`;
        t19 = space();
        div7 = element("div");
        label3 = element("label");
        label3.innerHTML = `<h6 class="title is-6">Jenis Skema</h6>`;
        t21 = space();
        div6 = element("div");
        select2 = element("select");
        option4 = element("option");
        option4.textContent = "Pilih jenis skema";
        t23 = space();
        div11 = element("div");
        div11.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Topik</h6></label> <input class="input"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Biaya Penelitian</h6></label> <input class="input"/></div>`;
        t29 = space();
        div14 = element("div");
        div14.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Tanggal Mulai</h6></label> <input class="input" type="date"/></div> <div class="column"><label class="label" for="label"><h6 class="title is-6">Tanggal Selesai</h6></label> <input class="input" type="date"/></div>`;
        t35 = space();
        div17 = element("div");
        div16 = element("div");
        label8 = element("label");
        label8.innerHTML = `<h6 class="title is-6">Anggota Tim</h6>`;
        t37 = space();
        div15 = element("div");
        select3 = element("select");
        option5 = element("option");
        option5.textContent = "Select dropdown";
        t39 = space();
        div28 = element("div");
        div27 = element("div");
        table = element("table");
        thead = element("thead");
        thead.innerHTML = `<tr><th class="is-narrow" style="width:55px"></th> <th class="is-narrow" style="width:86px">Role</th> <th>Nama Anggota</th></tr>`;
        t44 = space();
        tbody = element("tbody");
        tr1 = element("tr");
        td0 = element("td");
        button0 = element("button");
        span1 = element("span");
        create_component(icon0.$$.fragment);
        t45 = space();
        td1 = element("td");
        td1.textContent = "Ketua";
        t47 = space();
        td2 = element("td");
        td2.textContent = "Taris Rafiqi izatri";
        t49 = space();
        tr2 = element("tr");
        td3 = element("td");
        button1 = element("button");
        span2 = element("span");
        create_component(icon1.$$.fragment);
        t50 = space();
        td4 = element("td");
        td4.textContent = "Anggota";
        t52 = space();
        td5 = element("td");
        td5.textContent = "Tristan Byrne";
        t54 = space();
        tr3 = element("tr");
        td6 = element("td");
        button2 = element("button");
        span3 = element("span");
        create_component(icon2.$$.fragment);
        t55 = space();
        td7 = element("td");
        td7.textContent = "Anggota";
        t57 = space();
        td8 = element("td");
        td8.textContent = "Fariz Ghifari";
        t59 = space();
        hr1 = element("hr");
        t60 = space();
        div19 = element("div");
        div19.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Judul</h6></label> <input class="input"/></div>`;
        t63 = space();
        div21 = element("div");
        div21.innerHTML = `<div class="column"><label class="label" for="label"><h6 class="title is-6">Abstrak</h6></label> <textarea class="textarea" id="myAbstract"></textarea></div>`;
        t66 = space();
        div26 = element("div");
        div23 = element("div");
        label11 = element("label");
        label11.innerHTML = `<h6 class="title is-6">Proposal</h6>`;
        t68 = space();
        div22 = element("div");
        label12 = element("label");
        input6 = element("input");
        t69 = space();
        span6 = element("span");
        span4 = element("span");
        create_component(icon3.$$.fragment);
        t70 = space();
        span5 = element("span");
        span5.textContent = "Choose a file";
        t72 = space();
        span7 = element("span");
        span7.textContent = "No file chosen";
        t74 = space();
        div25 = element("div");
        label13 = element("label");
        label13.innerHTML = `<h6 class="title is-6">Rencana Aggaran Biaya</h6>`;
        t76 = space();
        div24 = element("div");
        label14 = element("label");
        input7 = element("input");
        t77 = space();
        span10 = element("span");
        span8 = element("span");
        create_component(icon4.$$.fragment);
        t78 = space();
        span9 = element("span");
        span9.textContent = "Choose a file";
        t80 = space();
        span11 = element("span");
        span11.textContent = "No file chosen";
        t82 = space();
        div32 = element("div");
        div32.innerHTML = `<p class="control"><button class="button is-info is-light">Simpan</button></p> <p class="control"><button class="button is-info">Submit</button></p>`;
        attr(h2, "class", "title is-2");
        attr(h4, "class", "subtitle is-4");
        attr(label0, "class", "label");
        attr(label0, "for", "label");
        option0.__value = "Proposal Awal";
        set_input_value(option0, option0.__value);
        option1.__value = "Proposal Lanjutan";
        set_input_value(option1, option1.__value);
        attr(div0, "class", "select is-fullwidth is-danger");
        attr(div1, "class", "column");
        attr(label1, "class", "label");
        attr(label1, "for", "label");
        option2.__value = "Penelitian";
        set_input_value(option2, option2.__value);
        option3.__value = "Pengabdian Masyarakat";
        set_input_value(option3, option3.__value);
        attr(div2, "class", "select is-fullwidth");
        attr(div3, "class", "column");
        attr(div4, "class", "columns is-desktop");
        attr(div5, "class", "column");
        attr(label3, "class", "label");
        attr(label3, "for", "label");
        option4.__value = "Pilih jenis skema";
        set_input_value(option4, option4.__value);
        attr(div6, "class", "select is-fullwidth");
        attr(div7, "class", "column");
        attr(div8, "class", "columns is-desktop");
        attr(div11, "class", "columns is-desktop");
        attr(div14, "class", "columns is-desktop");
        attr(label8, "class", "label");
        attr(label8, "for", "label");
        option5.__value = "Select dropdown";
        set_input_value(option5, option5.__value);
        attr(div15, "class", "select is-fullwidth");
        attr(div16, "class", "column");
        attr(div17, "class", "columns is-desktop");
        attr(span1, "class", "icon");
        attr(button0, "class", "button is-danger is-small");
        attr(span2, "class", "icon");
        attr(button1, "class", "button is-danger is-small");
        attr(span3, "class", "icon");
        attr(button2, "class", "button is-danger is-small");
        attr(table, "class", "table is-fullwidth is-striped is-hoverable is-bordered");
        attr(div19, "class", "columns is-desktop");
        attr(div21, "class", "columns is-desktop");
        attr(label11, "class", "label");
        attr(label11, "for", "label");
        attr(input6, "class", "file-input");
        attr(input6, "type", "file");
        attr(input6, "name", "resume");
        attr(span4, "class", "file-icon");
        attr(span5, "class", "file-label");
        attr(span6, "class", "file-cta");
        attr(span7, "class", "file-name");
        attr(label12, "class", "file-label");
        attr(label12, "for", "fileRab");
        attr(div22, "class", "file has-name is-success");
        attr(div23, "class", "column");
        attr(label13, "class", "label");
        attr(label13, "for", "label");
        attr(input7, "class", "file-input");
        attr(input7, "type", "file");
        attr(input7, "name", "resume");
        attr(span8, "class", "file-icon");
        attr(span9, "class", "file-label");
        attr(span10, "class", "file-cta");
        attr(span11, "class", "file-name");
        attr(label14, "class", "file-label");
        attr(label14, "for", "fileRab");
        attr(div24, "class", "file has-name is-success");
        attr(div25, "class", "column");
        attr(div26, "class", "columns is-desktop");
        attr(div27, "class", "column");
        attr(div28, "class", "columns is-desktop");
        attr(div29, "class", "box");
        attr(div30, "class", "column");
        attr(div31, "class", "columns is-desktop");
        attr(div32, "class", "field is-grouped is-grouped-right");
      },
      m(target, anchor) {
        insert(target, h2, anchor);
        insert(target, t1, anchor);
        insert(target, hr0, anchor);
        insert(target, t2, anchor);
        insert(target, div31, anchor);
        append(div31, div30);
        append(div30, div29);
        append(div29, h4);
        append(div29, t4);
        append(div29, br);
        append(div29, t5);
        append(div29, div4);
        append(div4, div1);
        append(div1, label0);
        append(div1, t8);
        append(div1, div0);
        append(div0, select0);
        append(select0, option0);
        append(select0, option1);
        append(div4, t11);
        append(div4, div3);
        append(div3, label1);
        append(div3, t13);
        append(div3, div2);
        append(div2, select1);
        append(select1, option2);
        append(select1, option3);
        append(div29, t16);
        append(div29, div8);
        append(div8, div5);
        append(div8, t19);
        append(div8, div7);
        append(div7, label3);
        append(div7, t21);
        append(div7, div6);
        append(div6, select2);
        append(select2, option4);
        append(div29, t23);
        append(div29, div11);
        append(div29, t29);
        append(div29, div14);
        append(div29, t35);
        append(div29, div17);
        append(div17, div16);
        append(div16, label8);
        append(div16, t37);
        append(div16, div15);
        append(div15, select3);
        append(select3, option5);
        append(div29, t39);
        append(div29, div28);
        append(div28, div27);
        append(div27, table);
        append(table, thead);
        append(table, t44);
        append(table, tbody);
        append(tbody, tr1);
        append(tr1, td0);
        append(td0, button0);
        append(button0, span1);
        mount_component(icon0, span1, null);
        append(tr1, t45);
        append(tr1, td1);
        append(tr1, t47);
        append(tr1, td2);
        append(tbody, t49);
        append(tbody, tr2);
        append(tr2, td3);
        append(td3, button1);
        append(button1, span2);
        mount_component(icon1, span2, null);
        append(tr2, t50);
        append(tr2, td4);
        append(tr2, t52);
        append(tr2, td5);
        append(tbody, t54);
        append(tbody, tr3);
        append(tr3, td6);
        append(td6, button2);
        append(button2, span3);
        mount_component(icon2, span3, null);
        append(tr3, t55);
        append(tr3, td7);
        append(tr3, t57);
        append(tr3, td8);
        append(div27, t59);
        append(div27, hr1);
        append(div27, t60);
        append(div27, div19);
        append(div27, t63);
        append(div27, div21);
        append(div27, t66);
        append(div27, div26);
        append(div26, div23);
        append(div23, label11);
        append(div23, t68);
        append(div23, div22);
        append(div22, label12);
        append(label12, input6);
        append(label12, t69);
        append(label12, span6);
        append(span6, span4);
        mount_component(icon3, span4, null);
        append(span6, t70);
        append(span6, span5);
        append(label12, t72);
        append(label12, span7);
        append(div26, t74);
        append(div26, div25);
        append(div25, label13);
        append(div25, t76);
        append(div25, div24);
        append(div24, label14);
        append(label14, input7);
        append(label14, t77);
        append(label14, span10);
        append(span10, span8);
        mount_component(icon4, span8, null);
        append(span10, t78);
        append(span10, span9);
        append(label14, t80);
        append(label14, span11);
        insert(target, t82, anchor);
        insert(target, div32, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        transition_in(icon3.$$.fragment, local);
        transition_in(icon4.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        transition_out(icon3.$$.fragment, local);
        transition_out(icon4.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(h2);
          detach(t1);
          detach(hr0);
          detach(t2);
          detach(div31);
          detach(t82);
          detach(div32);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
        destroy_component(icon3);
        destroy_component(icon4);
      }
    };
  }
  function create_fragment48(ctx) {
    let article2;
    let current;
    article2 = new Article_default({
      props: {
        $$slots: { default: [create_default_slot23] },
        $$scope: { ctx }
      }
    });
    return {
      c() {
        create_component(article2.$$.fragment);
      },
      m(target, anchor) {
        mount_component(article2, target, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        const article_changes = {};
        if (dirty & /*$$scope*/
        4096) {
          article_changes.$$scope = { dirty, ctx: ctx2 };
        }
        article2.$set(article_changes);
      },
      i(local) {
        if (current)
          return;
        transition_in(article2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(article2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(article2, detaching);
      }
    };
  }
  var username = "";
  var email = "";
  function instance41($$self) {
    let error = {};
    const form = { username, email };
    function handleSubmit() {
      for (const [key, value] of Object.entries(form)) {
        if (!form[key]) {
          error[key] = "This field is required";
        } else {
          console.log("Sukses...");
        }
      }
    }
    let profileBox = false;
    let tab1 = true;
    let tab2;
    let tab3;
    function clicktab1() {
      tab1 = true;
      tab2 = false;
      tab3 = false;
    }
    function clicktab2() {
      tab1 = false;
      tab2 = true;
      tab3 = false;
    }
    function clicktab3() {
      tab1 = false;
      tab2 = false;
      tab3 = true;
    }
    async function ProfileBoxOn() {
      profileBox = true;
    }
    async function ProfileBoxOff() {
      profileBox = false;
    }
    return [];
  }
  var Testform = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance41, create_fragment48, safe_not_equal, {});
    }
  };
  var testform_default = Testform;

  // src/pages/dosen/Index.svelte
  function create_else_block16(ctx) {
    let e404;
    let current;
    e404 = new E404_default({});
    return {
      c() {
        create_component(e404.$$.fragment);
      },
      m(target, anchor) {
        mount_component(e404, target, anchor);
        current = true;
      },
      p: noop,
      i(local) {
        if (current)
          return;
        transition_in(e404.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(e404.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(e404, detaching);
      }
    };
  }
  function create_if_block_150(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[1]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        2 && switch_value !== (switch_value = /*cmp*/
        ctx2[1])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_if_block26(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    var switch_value = home_default2;
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[0]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
        switch_instance_anchor = empty();
      },
      m(target, anchor) {
        if (switch_instance)
          mount_component(switch_instance, target, anchor);
        insert(target, switch_instance_anchor, anchor);
        current = true;
      },
      p(ctx2, dirty) {
        if (switch_value !== (switch_value = home_default2)) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          1)
            switch_instance_changes.params = /*params*/
            ctx2[0];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(switch_instance_anchor);
        }
        if (switch_instance)
          destroy_component(switch_instance, detaching);
      }
    };
  }
  function create_fragment49(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block26, create_if_block_150, create_else_block16];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (dirty & /*params*/
      1)
        show_if = null;
      if (show_if == null)
        show_if = !!(Object.keys(
          /*params*/
          ctx2[0]
        ).length === 0);
      if (show_if)
        return 0;
      if (
        /*cmp*/
        ctx2[1]
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        if_block.c();
        if_block_anchor = empty();
      },
      m(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert(target, if_block_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
  }
  function instance42($$self, $$props, $$invalidate) {
    let { params = {} } = $$props;
    let cmp;
    $$self.$$set = ($$props2) => {
      if ("params" in $$props2)
        $$invalidate(0, params = $$props2.params);
    };
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*params*/
      1) {
        $:
          params, $$invalidate(1, cmp = dosen_exports[params["0"]] || null);
      }
    };
    return [params, cmp];
  }
  var Index4 = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance42, create_fragment49, safe_not_equal, { params: 0 });
    }
  };
  var Index_default4 = Index4;

  // src/routes.js
  var routes_default = [
    { path: "/abdimas", page: Abdimas_default },
    { path: "/about", page: About_default },
    { path: "/", page: Index_default },
    { path: "/login", page: Login_default },
    { path: "/logout", page: Logout_default },
    { path: "/penelitian", page: Penelitian_default },
    { path: "/tokenexpired", page: Tokenexpired_default },
    { path: "/admin/:0", page: Index_default2 },
    { path: "/auth/:0", page: Index_default3 },
    { path: "/dosen/:0", page: Index_default4 }
  ];

  // src/modules/Sidebar.svelte
  init_define_process();

  // src/store/menu.js
  init_define_process();
  var admin = [
    {
      title: "Dashboard",
      href: "/admin",
      icon: dashboardFill
    },
    {
      title: "User Management",
      href: "/admin/usersmanagement",
      icon: profile
    },
    {
      title: "PPM Management",
      href: "/admin/ppmmanagement",
      icon: article
    }
  ];
  var dosen = [
    {
      title: "Dashboard",
      href: "/dosen",
      icon: dashboardFill
    },
    {
      title: "Profile",
      href: "/dosen/profile",
      icon: profile
    },
    {
      title: "Pendaftaran Proposal",
      href: "/dosen/pendaftaran",
      icon: addProposal
    },
    {
      title: "PPM Management",
      href: "/dosen/ppmmanagement",
      icon: article
    }
  ];
  var menu_default = {
    admin,
    dosen
  };

  // src/modules/Sidebar.svelte
  function get_each_context21(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[2] = list[i];
    return child_ctx;
  }
  function create_each_block21(ctx) {
    let ul;
    let li;
    let a;
    let div0;
    let icon;
    let t0;
    let div1;
    let t1_value = (
      /*item*/
      ctx[2].title + ""
    );
    let t1;
    let a_id_value;
    let a_href_value;
    let li_title_value;
    let current;
    icon = new Icon_default({
      props: {
        id: (
          /*item*/
          ctx[2].title
        ),
        src: (
          /*item*/
          ctx[2].icon
        )
      }
    });
    return {
      c() {
        ul = element("ul");
        li = element("li");
        a = element("a");
        div0 = element("div");
        create_component(icon.$$.fragment);
        t0 = space();
        div1 = element("div");
        t1 = text(t1_value);
        attr(div0, "class", "icon svelte-hu16du");
        attr(div1, "class", "page-title svelte-hu16du");
        attr(a, "id", a_id_value = /*item*/
        ctx[2].title === "Dashboard" ? "dashboard" : null);
        attr(a, "href", a_href_value = /*item*/
        ctx[2].href);
        attr(a, "class", "svelte-hu16du");
        attr(li, "title", li_title_value = /*item*/
        ctx[2].title);
        attr(ul, "class", "menu-list svelte-hu16du");
      },
      m(target, anchor) {
        insert(target, ul, anchor);
        append(ul, li);
        append(li, a);
        append(a, div0);
        mount_component(icon, div0, null);
        append(a, t0);
        append(a, div1);
        append(div1, t1);
        current = true;
      },
      p(ctx2, dirty) {
        const icon_changes = {};
        if (dirty & /*items*/
        1)
          icon_changes.id = /*item*/
          ctx2[2].title;
        if (dirty & /*items*/
        1)
          icon_changes.src = /*item*/
          ctx2[2].icon;
        icon.$set(icon_changes);
        if ((!current || dirty & /*items*/
        1) && t1_value !== (t1_value = /*item*/
        ctx2[2].title + ""))
          set_data(t1, t1_value);
        if (!current || dirty & /*items*/
        1 && a_id_value !== (a_id_value = /*item*/
        ctx2[2].title === "Dashboard" ? "dashboard" : null)) {
          attr(a, "id", a_id_value);
        }
        if (!current || dirty & /*items*/
        1 && a_href_value !== (a_href_value = /*item*/
        ctx2[2].href)) {
          attr(a, "href", a_href_value);
        }
        if (!current || dirty & /*items*/
        1 && li_title_value !== (li_title_value = /*item*/
        ctx2[2].title)) {
          attr(li, "title", li_title_value);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(ul);
        }
        destroy_component(icon);
      }
    };
  }
  function create_if_block_151(ctx) {
    let br;
    let t0;
    let p;
    let t2;
    let ul;
    let li;
    let a;
    let div0;
    let icon;
    let t3;
    let div1;
    let current;
    icon = new Icon_default({ props: { id: "approval", src: approval } });
    return {
      c() {
        br = element("br");
        t0 = space();
        p = element("p");
        p.textContent = "Evaluator";
        t2 = space();
        ul = element("ul");
        li = element("li");
        a = element("a");
        div0 = element("div");
        create_component(icon.$$.fragment);
        t3 = space();
        div1 = element("div");
        div1.textContent = "Approval Management";
        attr(p, "class", "menu-label svelte-hu16du");
        attr(div0, "class", "icon svelte-hu16du");
        attr(div1, "class", "page-title svelte-hu16du");
        attr(a, "href", "/dosen/approvalmanagement");
        attr(a, "class", "svelte-hu16du");
        attr(li, "title", "Approval Management");
        attr(ul, "class", "menu-list svelte-hu16du");
      },
      m(target, anchor) {
        insert(target, br, anchor);
        insert(target, t0, anchor);
        insert(target, p, anchor);
        insert(target, t2, anchor);
        insert(target, ul, anchor);
        append(ul, li);
        append(li, a);
        append(a, div0);
        mount_component(icon, div0, null);
        append(a, t3);
        append(a, div1);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(br);
          detach(t0);
          detach(p);
          detach(t2);
          detach(ul);
        }
        destroy_component(icon);
      }
    };
  }
  function create_if_block27(ctx) {
    let br;
    let t0;
    let p;
    let t2;
    let ul;
    let li0;
    let a0;
    let div0;
    let icon0;
    let t3;
    let div1;
    let t5;
    let li1;
    let a1;
    let div2;
    let icon1;
    let t6;
    let div3;
    let t8;
    let li2;
    let a2;
    let div4;
    let icon2;
    let t9;
    let div5;
    let current;
    icon0 = new Icon_default({
      props: { id: "pengumuman", src: pengumuman }
    });
    icon1 = new Icon_default({ props: { id: "aboutUISI", src: about } });
    icon2 = new Icon_default({ props: { id: "template", src: template } });
    return {
      c() {
        br = element("br");
        t0 = space();
        p = element("p");
        p.textContent = "Content Management";
        t2 = space();
        ul = element("ul");
        li0 = element("li");
        a0 = element("a");
        div0 = element("div");
        create_component(icon0.$$.fragment);
        t3 = space();
        div1 = element("div");
        div1.textContent = "Pengumuman";
        t5 = space();
        li1 = element("li");
        a1 = element("a");
        div2 = element("div");
        create_component(icon1.$$.fragment);
        t6 = space();
        div3 = element("div");
        div3.textContent = "About UISI";
        t8 = space();
        li2 = element("li");
        a2 = element("a");
        div4 = element("div");
        create_component(icon2.$$.fragment);
        t9 = space();
        div5 = element("div");
        div5.textContent = "Template";
        attr(p, "class", "menu-label svelte-hu16du");
        attr(div0, "class", "icon svelte-hu16du");
        attr(div1, "class", "page-title svelte-hu16du");
        attr(a0, "href", "/admin/pengumuman");
        attr(a0, "class", "svelte-hu16du");
        attr(li0, "title", "Pengumuman");
        attr(div2, "class", "icon svelte-hu16du");
        attr(div3, "class", "page-title svelte-hu16du");
        attr(a1, "href", "/admin/aboutuisi");
        attr(a1, "class", "svelte-hu16du");
        attr(li1, "title", "About UISI");
        attr(div4, "class", "icon svelte-hu16du");
        attr(div5, "class", "page-title svelte-hu16du");
        attr(a2, "href", "/admin/template");
        attr(a2, "class", "svelte-hu16du");
        attr(li2, "title", "Template");
        attr(ul, "class", "menu-list svelte-hu16du");
      },
      m(target, anchor) {
        insert(target, br, anchor);
        insert(target, t0, anchor);
        insert(target, p, anchor);
        insert(target, t2, anchor);
        insert(target, ul, anchor);
        append(ul, li0);
        append(li0, a0);
        append(a0, div0);
        mount_component(icon0, div0, null);
        append(a0, t3);
        append(a0, div1);
        append(ul, t5);
        append(ul, li1);
        append(li1, a1);
        append(a1, div2);
        mount_component(icon1, div2, null);
        append(a1, t6);
        append(a1, div3);
        append(ul, t8);
        append(ul, li2);
        append(li2, a2);
        append(a2, div4);
        mount_component(icon2, div4, null);
        append(a2, t9);
        append(a2, div5);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(icon0.$$.fragment, local);
        transition_in(icon1.$$.fragment, local);
        transition_in(icon2.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon0.$$.fragment, local);
        transition_out(icon1.$$.fragment, local);
        transition_out(icon2.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(br);
          detach(t0);
          detach(p);
          detach(t2);
          detach(ul);
        }
        destroy_component(icon0);
        destroy_component(icon1);
        destroy_component(icon2);
      }
    };
  }
  function create_fragment50(ctx) {
    let aside;
    let p;
    let t1;
    let t2;
    let t3;
    let current;
    let each_value = ensure_array_like(
      /*items*/
      ctx[0]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block21(get_each_context21(ctx, each_value, i));
    }
    const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
      each_blocks[i] = null;
    });
    let if_block0 = (
      /*role*/
      (ctx[1] === "K.Departemen" || /*role*/
      ctx[1] === "K.LPPM" || /*role*/
      ctx[1] === "K.PusatKajian" || /*role*/
      ctx[1] === "reviewer") && create_if_block_151(ctx)
    );
    let if_block1 = (
      /*role*/
      ctx[1] === "admin" && create_if_block27(ctx)
    );
    return {
      c() {
        aside = element("aside");
        p = element("p");
        p.textContent = "General";
        t1 = space();
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        t2 = space();
        if (if_block0)
          if_block0.c();
        t3 = space();
        if (if_block1)
          if_block1.c();
        attr(p, "class", "menu-label svelte-hu16du");
        attr(aside, "class", "menu svelte-hu16du");
      },
      m(target, anchor) {
        insert(target, aside, anchor);
        append(aside, p);
        append(aside, t1);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(aside, null);
          }
        }
        append(aside, t2);
        if (if_block0)
          if_block0.m(aside, null);
        append(aside, t3);
        if (if_block1)
          if_block1.m(aside, null);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (dirty & /*items*/
        1) {
          each_value = ensure_array_like(
            /*items*/
            ctx2[0]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context21(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
              transition_in(each_blocks[i], 1);
            } else {
              each_blocks[i] = create_each_block21(child_ctx);
              each_blocks[i].c();
              transition_in(each_blocks[i], 1);
              each_blocks[i].m(aside, t2);
            }
          }
          group_outros();
          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i);
          }
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        each_blocks = each_blocks.filter(Boolean);
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(aside);
        }
        destroy_each(each_blocks, detaching);
        if (if_block0)
          if_block0.d();
        if (if_block1)
          if_block1.d();
      }
    };
  }
  function instance43($$self, $$props, $$invalidate) {
    const role = localStorage.getItem("role");
    let items;
    if (role === "admin")
      items = menu_default["admin"];
    else
      items = menu_default["dosen"];
    return [items, role];
  }
  var Sidebar = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance43, create_fragment50, safe_not_equal, {});
    }
  };
  var Sidebar_default = Sidebar;

  // src/modules/Navbarmenu.svelte
  init_define_process();
  function create_else_block17(ctx) {
    let div1;
    return {
      c() {
        div1 = element("div");
        div1.innerHTML = `<div class="buttons"><a class="button is-dark is-small is-rounded is-fullwidth" href="/login">Login</a></div>`;
        attr(div1, "class", "navbar-item");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
      }
    };
  }
  function create_if_block28(ctx) {
    let div1;
    let a0;
    let icon;
    let t0;
    let t1_value = (
      /*username*/
      (ctx[4] || /*$isUsername*/
      ctx[2]) + ""
    );
    let t1;
    let t2;
    let div0;
    let a1;
    let t4;
    let hr;
    let t5;
    let a2;
    let current;
    let mounted;
    let dispose;
    icon = new Icon_default({ props: { src: accountRounded } });
    return {
      c() {
        div1 = element("div");
        a0 = element("a");
        create_component(icon.$$.fragment);
        t0 = text("\r\n                     \xA0\r\n                     ");
        t1 = text(t1_value);
        t2 = space();
        div0 = element("div");
        a1 = element("a");
        a1.textContent = "Dashboard";
        t4 = space();
        hr = element("hr");
        t5 = space();
        a2 = element("a");
        a2.textContent = "Logout";
        attr(a0, "class", "navbar-link");
        attr(a1, "class", "navbar-item");
        attr(hr, "class", "navbar-divider");
        attr(a2, "class", "navbar-item has-text-danger");
        attr(a2, "href", "/logout");
        attr(div0, "class", "navbar-dropdown");
        attr(div1, "class", "navbar-item has-dropdown is-hoverable");
      },
      m(target, anchor) {
        insert(target, div1, anchor);
        append(div1, a0);
        mount_component(icon, a0, null);
        append(a0, t0);
        append(a0, t1);
        append(div1, t2);
        append(div1, div0);
        append(div0, a1);
        append(div0, t4);
        append(div0, hr);
        append(div0, t5);
        append(div0, a2);
        current = true;
        if (!mounted) {
          dispose = listen(
            a1,
            "click",
            /*gotoDashboard*/
            ctx[6]
          );
          mounted = true;
        }
      },
      p(ctx2, dirty) {
        if ((!current || dirty & /*$isUsername*/
        4) && t1_value !== (t1_value = /*username*/
        (ctx2[4] || /*$isUsername*/
        ctx2[2]) + ""))
          set_data(t1, t1_value);
      },
      i(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(div1);
        }
        destroy_component(icon);
        mounted = false;
        dispose();
      }
    };
  }
  function create_fragment51(ctx) {
    let header;
    let nav;
    let div0;
    let a0;
    let t0;
    let a1;
    let t3;
    let div6;
    let div5;
    let a2;
    let t5;
    let a3;
    let t7;
    let div2;
    let t15;
    let div4;
    let t23;
    let current_block_type_index;
    let if_block;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block28, create_else_block17];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*$isLogin*/
        ctx2[1] || /*token*/
        ctx2[3]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    return {
      c() {
        header = element("header");
        nav = element("nav");
        div0 = element("div");
        a0 = element("a");
        a0.innerHTML = `<img src="/img/LogoLppmUISI.png" alt="Logo UISI" class="svelte-s13wua"/>`;
        t0 = space();
        a1 = element("a");
        a1.innerHTML = `<span></span> <span></span> <span></span>`;
        t3 = space();
        div6 = element("div");
        div5 = element("div");
        a2 = element("a");
        a2.textContent = "Beranda";
        t5 = space();
        a3 = element("a");
        a3.textContent = "About UISI";
        t7 = space();
        div2 = element("div");
        div2.innerHTML = `<a class="navbar-link">Penelitian</a> <div class="navbar-dropdown"><a class="navbar-item" href="/penelitian">Penelitian Internal</a> <a class="navbar-item" href="/penelitian">Penelitian Eksternal</a> <a class="navbar-item" href="/penelitian">Penelitian Mandiri</a></div>`;
        t15 = space();
        div4 = element("div");
        div4.innerHTML = `<a class="navbar-link">Pengabdian Masyarakat</a> <div class="navbar-dropdown"><a class="navbar-item" href="/abdimas">Pengabdian Masyarakat Internal</a> <a class="navbar-item" href="/abdimas">Pengabdian Masyarakat Eksternal</a> <a class="navbar-item" href="/abdimas">Pengabdian Masyarakat Mandiri</a></div>`;
        t23 = space();
        if_block.c();
        attr(a0, "class", "navbar-item svelte-s13wua");
        attr(a0, "href", "/");
        attr(a1, "class", "navbar-burger");
        attr(a1, "id", "burger");
        attr(div0, "class", "navbar-brand");
        attr(a2, "class", "navbar-item");
        attr(a2, "href", "/");
        attr(a3, "class", "navbar-item");
        attr(a3, "href", "/about");
        attr(div2, "class", "navbar-item has-dropdown is-hoverable");
        attr(div4, "class", "navbar-item has-dropdown is-hoverable");
        attr(div5, "class", "navbar-end");
        attr(div6, "class", "navbar-menu");
        attr(div6, "id", "nav-links");
        attr(nav, "class", "navbar svelte-s13wua");
        attr(header, "class", "svelte-s13wua");
      },
      m(target, anchor) {
        insert(target, header, anchor);
        append(header, nav);
        append(nav, div0);
        append(div0, a0);
        append(div0, t0);
        append(div0, a1);
        append(nav, t3);
        append(nav, div6);
        append(div6, div5);
        append(div5, a2);
        append(div5, t5);
        append(div5, a3);
        append(div5, t7);
        append(div5, div2);
        append(div5, t15);
        append(div5, div4);
        append(div5, t23);
        if_blocks[current_block_type_index].m(div5, null);
        ctx[7](div6);
        current = true;
        if (!mounted) {
          dispose = listen(
            a1,
            "click",
            /*test*/
            ctx[5]
          );
          mounted = true;
        }
      },
      p(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div5, null);
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o(local) {
        transition_out(if_block);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(header);
        }
        if_blocks[current_block_type_index].d();
        ctx[7](null);
        mounted = false;
        dispose();
      }
    };
  }
  function instance44($$self, $$props, $$invalidate) {
    let $route;
    let $isLogin;
    let $isUsername;
    component_subscribe($$self, route, ($$value) => $$invalidate(8, $route = $$value));
    component_subscribe($$self, isLogin, ($$value) => $$invalidate(1, $isLogin = $$value));
    component_subscribe($$self, isUsername, ($$value) => $$invalidate(2, $isUsername = $$value));
    let token = localStorage.getItem("token");
    let username2 = localStorage.getItem("username");
    let navbarMenu;
    function test() {
      navbarMenu.classList.toggle("is-active");
    }
    function gotoDashboard() {
      const role = localStorage.getItem("role");
      if (role === "admin")
        $route("/admin");
      else
        $route("/dosen");
    }
    onMount(() => {
      const links = navbarMenu.querySelectorAll(".navbar-item");
      links.forEach((link) => {
        link.addEventListener("click", function() {
          burger.classList.remove("is-active");
          navbarMenu.classList.remove("is-active");
        });
      });
    });
    function div6_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        navbarMenu = $$value;
        $$invalidate(0, navbarMenu);
      });
    }
    return [
      navbarMenu,
      $isLogin,
      $isUsername,
      token,
      username2,
      test,
      gotoDashboard,
      div6_binding
    ];
  }
  var Navbarmenu = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance44, create_fragment51, safe_not_equal, {});
    }
  };
  var Navbarmenu_default = Navbarmenu;

  // src/App.svelte
  function create_if_block_160(ctx) {
    let sidebar;
    let current;
    sidebar = new Sidebar_default({});
    return {
      c() {
        create_component(sidebar.$$.fragment);
      },
      m(target, anchor) {
        mount_component(sidebar, target, anchor);
        current = true;
      },
      i(local) {
        if (current)
          return;
        transition_in(sidebar.$$.fragment, local);
        current = true;
      },
      o(local) {
        transition_out(sidebar.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        destroy_component(sidebar, detaching);
      }
    };
  }
  function create_if_block29(ctx) {
    let main;
    let switch_instance;
    let current;
    var switch_value = (
      /*cmp*/
      ctx[0]
    );
    function switch_props(ctx2, dirty) {
      return { props: { params: (
        /*params*/
        ctx2[1]
      ) } };
    }
    if (switch_value) {
      switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
    }
    return {
      c() {
        main = element("main");
        if (switch_instance)
          create_component(switch_instance.$$.fragment);
      },
      m(target, anchor) {
        insert(target, main, anchor);
        if (switch_instance)
          mount_component(switch_instance, main, null);
        current = true;
      },
      p(ctx2, dirty) {
        if (dirty & /*cmp*/
        1 && switch_value !== (switch_value = /*cmp*/
        ctx2[0])) {
          if (switch_instance) {
            group_outros();
            const old_component = switch_instance;
            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1);
            });
            check_outros();
          }
          if (switch_value) {
            switch_instance = construct_svelte_component(switch_value, switch_props(ctx2, dirty));
            create_component(switch_instance.$$.fragment);
            transition_in(switch_instance.$$.fragment, 1);
            mount_component(switch_instance, main, null);
          } else {
            switch_instance = null;
          }
        } else if (switch_value) {
          const switch_instance_changes = {};
          if (dirty & /*params*/
          2)
            switch_instance_changes.params = /*params*/
            ctx2[1];
          switch_instance.$set(switch_instance_changes);
        }
      },
      i(local) {
        if (current)
          return;
        if (switch_instance)
          transition_in(switch_instance.$$.fragment, local);
        current = true;
      },
      o(local) {
        if (switch_instance)
          transition_out(switch_instance.$$.fragment, local);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(main);
        }
        if (switch_instance)
          destroy_component(switch_instance);
      }
    };
  }
  function create_fragment52(ctx) {
    let navbarmenu;
    let t0;
    let t1;
    let if_block1_anchor;
    let current;
    navbarmenu = new Navbarmenu_default({});
    let if_block0 = (
      /*token*/
      ctx[2] && !/*inBeranda*/
      ctx[3] && create_if_block_160(ctx)
    );
    let if_block1 = (
      /*cmp*/
      ctx[0] && create_if_block29(ctx)
    );
    return {
      c() {
        create_component(navbarmenu.$$.fragment);
        t0 = space();
        if (if_block0)
          if_block0.c();
        t1 = space();
        if (if_block1)
          if_block1.c();
        if_block1_anchor = empty();
      },
      m(target, anchor) {
        mount_component(navbarmenu, target, anchor);
        insert(target, t0, anchor);
        if (if_block0)
          if_block0.m(target, anchor);
        insert(target, t1, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert(target, if_block1_anchor, anchor);
        current = true;
      },
      p(ctx2, [dirty]) {
        if (
          /*token*/
          ctx2[2] && !/*inBeranda*/
          ctx2[3]
        ) {
          if (if_block0) {
            if (dirty & /*token, inBeranda*/
            12) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_160(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t1.parentNode, t1);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*cmp*/
          ctx2[0]
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty & /*cmp*/
            1) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block29(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i(local) {
        if (current)
          return;
        transition_in(navbarmenu.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o(local) {
        transition_out(navbarmenu.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d(detaching) {
        if (detaching) {
          detach(t0);
          detach(t1);
          detach(if_block1_anchor);
        }
        destroy_component(navbarmenu, detaching);
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
      }
    };
  }
  function instance45($$self, $$props, $$invalidate) {
    let $route;
    component_subscribe($$self, route, ($$value) => $$invalidate(5, $route = $$value));
    let cmp, params;
    let token, inBeranda, role;
    const router2 = router_default(routes_default, E404_default, (route2) => {
      $$invalidate(0, cmp = route2.page);
      $$invalidate(1, params = route2.params);
      auth = localStorage.getItem("auth");
      $$invalidate(2, token = localStorage.getItem("token"));
      role = localStorage.getItem("role");
      const paths = ["/", "/about", "/penelitian", "/abdimas"];
      $$invalidate(3, inBeranda = paths.some((path) => path === location.pathname));
    });
    set_store_value(route, $route = router2.route, $route);
    $route(location.pathname + location.search);
    router2.listen();
    onDestroy(router2.unlisten);
    if (location.pathname === "/") {
      if (!token) {
        $route("/");
      } else {
        if (role === "admin")
          $route("/admin");
        else
          $route("/dosen");
      }
    }
    return [cmp, params, token, inBeranda];
  }
  var App = class extends SvelteComponent {
    constructor(options) {
      super();
      init(this, options, instance45, create_fragment52, safe_not_equal, {});
    }
  };
  var App_default = App;

  // src/main.js
  var app = new App_default({
    target: document.body
  });
  var main_default = app;
})();
